"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  EventAsPromise: () => EventAsPromise
});
module.exports = __toCommonJS(src_exports);
function withResolvers() {
  const resolvers = {};
  resolvers.promise = new Promise((resolve, reject) => {
    resolvers.reject = reject;
    resolvers.resolve = resolve;
  });
  return resolvers;
}
var EventAsPromise = class {
  constructor() {
    this.#eventListener = (event) => {
      const deferred = this.#orderedResolvers.shift();
      deferred && deferred.resolve(event);
      if (this.#upcomingResolvers) {
        this.#upcomingResolvers.resolve(event);
        this.#upcomingResolvers = void 0;
      }
    };
  }
  #eventListener;
  #orderedResolvers = [];
  #upcomingResolvers = void 0;
  get eventListener() {
    return this.#eventListener;
  }
  [Symbol.iterator]() {
    return {
      next: () => ({
        done: false,
        value: this.upcoming()
      })
    };
  }
  one() {
    const deferred = withResolvers();
    this.#orderedResolvers.push(deferred);
    return deferred.promise;
  }
  upcoming() {
    if (!this.#upcomingResolvers) {
      this.#upcomingResolvers = withResolvers();
    }
    return this.#upcomingResolvers.promise;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EventAsPromise
});
//# sourceMappingURL=event-as-promise.js.map