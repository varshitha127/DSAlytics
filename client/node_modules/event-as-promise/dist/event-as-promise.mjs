// src/index.ts
function withResolvers() {
  const resolvers = {};
  resolvers.promise = new Promise((resolve, reject) => {
    resolvers.reject = reject;
    resolvers.resolve = resolve;
  });
  return resolvers;
}
var EventAsPromise = class {
  constructor() {
    this.#eventListener = (event) => {
      const deferred = this.#orderedResolvers.shift();
      deferred && deferred.resolve(event);
      if (this.#upcomingResolvers) {
        this.#upcomingResolvers.resolve(event);
        this.#upcomingResolvers = void 0;
      }
    };
  }
  #eventListener;
  #orderedResolvers = [];
  #upcomingResolvers = void 0;
  get eventListener() {
    return this.#eventListener;
  }
  [Symbol.iterator]() {
    return {
      next: () => ({
        done: false,
        value: this.upcoming()
      })
    };
  }
  one() {
    const deferred = withResolvers();
    this.#orderedResolvers.push(deferred);
    return deferred.promise;
  }
  upcoming() {
    if (!this.#upcomingResolvers) {
      this.#upcomingResolvers = withResolvers();
    }
    return this.#upcomingResolvers.promise;
  }
};
export {
  EventAsPromise
};
//# sourceMappingURL=event-as-promise.mjs.map