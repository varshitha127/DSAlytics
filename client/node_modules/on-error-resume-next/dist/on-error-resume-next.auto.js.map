{"version":3,"sources":["../src/index.auto.ts","../src/private/isPromise.ts"],"sourcesContent":["import isPromise from './private/isPromise.ts';\n\nexport function onErrorResumeNext<T extends () => U, U = unknown>(fn: T, context?: undefined): U | undefined;\nexport function onErrorResumeNext<T extends (this: V) => U, U = unknown, V = undefined>(\n  fn: T,\n  context: V\n): U | undefined;\n\nexport function onErrorResumeNext<T extends () => Promise<U>, U = unknown>(\n  fn: T,\n  context?: undefined\n): Promise<U | undefined>;\n\nexport function onErrorResumeNext<T extends (this: V) => Promise<U>, U = unknown, V = undefined>(\n  fn: T,\n  context: V\n): Promise<U | undefined>;\n\nexport function onErrorResumeNext<T extends (this: V) => U | Promise<U>, U = unknown, V = undefined>(\n  fn: T,\n  context: V\n): U | undefined | Promise<U | undefined> {\n  try {\n    const result = fn.call(context);\n\n    if (isPromise(result)) {\n      return new Promise<U | undefined>(resolve => result.then(resolve, () => resolve(undefined)));\n    }\n\n    return result;\n  } catch {\n    return undefined;\n  }\n}\n","export default function isPromise(value: unknown): value is PromiseLike<unknown> {\n  return !!(\n    (typeof value === 'function' || typeof value === 'object') &&\n    value &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAe,SAAR,UAA2B,OAA+C;AAC/E,SAAO,CAAC,GACL,OAAO,UAAU,cAAc,OAAO,UAAU,aACjD,SACA,UAAU,SACV,OAAO,MAAM,SAAS;AAE1B;;;ADWO,SAAS,kBACd,IACA,SACwC;AACxC,MAAI;AACF,UAAM,SAAS,GAAG,KAAK,OAAO;AAE9B,QAAI,UAAU,MAAM,GAAG;AACrB,aAAO,IAAI,QAAuB,aAAW,OAAO,KAAK,SAAS,MAAM,QAAQ,MAAS,CAAC,CAAC;AAAA,IAC7F;AAEA,WAAO;AAAA,EACT,QAAQ;AACN,WAAO;AAAA,EACT;AACF;","names":[]}