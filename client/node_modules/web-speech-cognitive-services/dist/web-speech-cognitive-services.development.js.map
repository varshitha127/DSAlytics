{"version":3,"sources":["../../../node_modules/uuid/dist/commonjs-browser/rng.js","../../../node_modules/uuid/dist/commonjs-browser/regex.js","../../../node_modules/uuid/dist/commonjs-browser/validate.js","../../../node_modules/uuid/dist/commonjs-browser/stringify.js","../../../node_modules/uuid/dist/commonjs-browser/v1.js","../../../node_modules/uuid/dist/commonjs-browser/parse.js","../../../node_modules/uuid/dist/commonjs-browser/v35.js","../../../node_modules/uuid/dist/commonjs-browser/md5.js","../../../node_modules/uuid/dist/commonjs-browser/v3.js","../../../node_modules/uuid/dist/commonjs-browser/native.js","../../../node_modules/uuid/dist/commonjs-browser/v4.js","../../../node_modules/uuid/dist/commonjs-browser/sha1.js","../../../node_modules/uuid/dist/commonjs-browser/v5.js","../../../node_modules/uuid/dist/commonjs-browser/nil.js","../../../node_modules/uuid/dist/commonjs-browser/version.js","../../../node_modules/uuid/dist/commonjs-browser/index.js","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IErrorMessages.js","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/OCSPEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LogLevel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Synthesizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarSynthesizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarVideoFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarWebRTCConnectionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts","../../../node_modules/bent/src/core.js","../../../node_modules/bent/src/browser.js","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AvatarSynthesisAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts","../src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.ts","../node_modules/valibot/dist/index.js","../src/SpeechServices/resolveFunctionOrReturnValue.ts","../src/SpeechServices/SpeechSDK.ts","../src/SpeechServices/SpeechToText/validation/credentialsSchema.ts","../src/SpeechServices/SpeechToText/validation/enableTelemetrySchema.ts","../src/SpeechServices/SpeechToText/validation/initialSilenceTimeoutSchema.ts","../src/SpeechServices/SpeechToText/validation/looseEventsSchema.ts","../src/SpeechServices/SpeechToText/validation/referenceGrammarsSchema.ts","../src/SpeechServices/SpeechToText/validation/speechRecognitionEndpointIdSchema.ts","../src/SpeechServices/SpeechToText/validation/textNormalizationSchema.ts","../src/SpeechServices/patchOptions.ts","../../../node_modules/p-defer/index.js","../src/Util/createPromiseQueue.js","../src/SpeechServices/SpeechToText/SpeechRecognitionAlternative.ts","../src/SpeechServices/SpeechToText/private/FakeArray.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionResult.ts","../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResult.ts","../src/SpeechServices/SpeechToText/cognitiveServicesAsyncToPromise.ts","../src/SpeechServices/SpeechToText/private/EventListenerMap.ts","../src/SpeechServices/SpeechToText/private/prepareAudioConfig.ts","../src/SpeechServices/SpeechToText/private/averageAmplitude.ts","../src/SpeechServices/SpeechToText/private/serializeRecognitionResult.ts","../src/SpeechServices/SpeechToText/SpeechGrammarList.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionErrorEvent.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionResultList.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionEvent.ts","../src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfillFromRecognizer.ts","../../../node_modules/src/lib/misc.ts","../../../node_modules/src/lib/error-handler.ts","../../../node_modules/src/lib/global.ts","../../../node_modules/src/lib/warning-handler.ts","../../../node_modules/src/lib/warnings.ts","../../../node_modules/src/lib/event.ts","../../../node_modules/src/lib/dom-exception.ts","../../../node_modules/src/lib/event-wrapper.ts","../../../node_modules/src/lib/listener.ts","../../../node_modules/src/lib/listener-list.ts","../../../node_modules/src/lib/listener-list-map.ts","../../../node_modules/src/lib/event-target.ts","../../../node_modules/src/lib/event-attribute-handler.ts","../../../node_modules/src/lib/legacy.ts","../../../node_modules/on-error-resume-next/src/private/isPromise.ts","../../../node_modules/on-error-resume-next/src/index.async.ts","../../../node_modules/memoize-one/dist/memoize-one.esm.js","../src/SpeechServices/TextToSpeech/AudioContextConsumer.js","../src/SpeechServices/TextToSpeech/AudioContextQueue.js","../src/SpeechServices/TextToSpeech/SpeechSynthesisEvent.js","../node_modules/event-as-promise/src/index.ts","../../../node_modules/src/index.ts","../src/SpeechServices/TextToSpeech/buildSSML.js","../src/SpeechServices/TextToSpeech/isSSML.js","../src/SpeechServices/TextToSpeech/fetchSpeechData.js","../src/SpeechServices/TextToSpeech/subscribeEvent.js","../src/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js","../src/SpeechServices/TextToSpeech/SpeechSynthesisVoice.js","../src/SpeechServices/TextToSpeech/fetchCustomVoices.js","../src/SpeechServices/TextToSpeech/fetchVoices.js","../src/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js","../src/SpeechServices/TextToSpeech.js","../src/SpeechServices.ts","../src/index.umd.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.unsafeStringify)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URL = exports.DNS = void 0;\nexports.default = v35;\n\nvar _stringify = require(\"./stringify.js\");\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar _default = {\n  randomUUID\n};\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = _interopRequireDefault(require(\"./native.js\"));\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (_native.default.randomUUID && !buf && !options) {\n    return _native.default.randomUUID();\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.unsafeStringify)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nvar _default = version;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function get() {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return _parse.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function get() {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function get() {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function get() {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function get() {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function get() {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _version.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise.js\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IEventListener } from \"./IEventListener.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents.js\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=IErrorMessages.js.map\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\nimport { List } from \"./List.js\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise.js\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage.js\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && Object.getPrototypeOf(payload).constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { Queue } from \"./Queue.js\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports.js\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    public constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    public constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    public constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports.js\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./AudioSourceEvents.js\";\r\nexport * from \"./ConnectionEvents.js\";\r\nexport * from \"./ConnectionMessage.js\";\r\nexport * from \"./ConnectionOpenResponse.js\";\r\nexport * from \"./DeferralMap.js\";\r\nexport * from \"./DialogEvents.js\";\r\nexport * from \"./Error.js\";\r\nexport * from \"./Events.js\";\r\nexport * from \"./EventSource.js\";\r\nexport * from \"./Guid.js\";\r\nexport * from \"./IAudioSource.js\";\r\nexport * from \"./IConnection.js\";\r\nexport * from \"./IDetachable.js\";\r\nexport * from \"./IDictionary.js\";\r\nexport * from \"./IDisposable.js\";\r\nexport * from \"./IEventListener.js\";\r\nexport * from \"./IEventSource.js\";\r\nexport * from \"./IErrorMessages.js\";\r\nexport * from \"./ITimer.js\";\r\nexport * from \"./IWebsocketMessageFormatter.js\";\r\nexport * from \"./List.js\";\r\nexport * from \"./PlatformEvent.js\";\r\nexport * from \"./Promise.js\";\r\nexport * from \"./Queue.js\";\r\nexport * from \"./RawWebsocketMessage.js\";\r\nexport * from \"./RiffPcmEncoder.js\";\r\nexport * from \"./Stream.js\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus.js\";\r\nexport * from \"./ChunkedArrayBufferStream.js\";\r\nexport * from \"./IAudioDestination.js\";\r\nexport * from \"./Timeout.js\";\r\nexport * from \"./OCSPEvents.js\";\r\nexport * from \"./BackgroundError.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication.js\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType } from \"../common/Exports.js\";\r\n\r\n/**\r\n * Define event severity types for setting logging output.\r\n * @class LogLevel\r\n */\r\n\r\nexport { EventType as LogLevel };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel.js\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports.js\";\r\nimport { Contracts } from \"../sdk/Contracts.js\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public logCallback: (s: string) => void;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.logCallback) {\r\n                this.logCallback(log);\r\n            }\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { IStreamChunk } from \"../common/Stream.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { IRecorder } from \"./IRecorder.js\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch((): void => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports.js\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { createNoDashGuid } from \"../../common/Guid.js\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports.js\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports.js\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports.js\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream.js\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason.js\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {IStringDictionary} from \"../common/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The username of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n\r\n    /**\r\n     * Talking avatar service WebRTC session description protocol.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.33.0\r\n     */\r\n    TalkingAvatarService_WebRTC_SDP,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                this.privInternalData.speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Connection } from \"./Connection.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports.js\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports.js\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports.js\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports.js\";\r\nimport { OutputFormat } from \"./OutputFormat.js\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n    public static EnableAvatar: string = \"enableTalkingAvatar\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream.js\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload.js\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports.js\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports.js\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports.js\";\r\nimport { Callback } from \"./IConversation.js\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\nimport { ParticipantChangedReason } from \"./Exports.js\";\r\nimport { IParticipant } from \"./IParticipant.js\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports.js\";\r\nimport { ConversationTranslationResult } from \"./Exports.js\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection.js\";\r\nimport { ResultReason } from \"../ResultReason.js\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult.js\";\r\nimport { Translations } from \"../Translations.js\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports.js\";\r\nimport { ConversationImpl } from \"./Conversation.js\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports.js\";\r\nimport { Callback, IConversation } from \"./IConversation.js\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports.js\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports.js\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports.js\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport { Conversation, ConversationImpl } from \"./Conversation.js\";\r\nexport { ConversationInfo } from \"./IConversation.js\";\r\nexport { ConversationCommon } from \"./ConversationCommon.js\";\r\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs.js\";\r\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs.js\";\r\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs.js\";\r\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs.js\";\r\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult.js\";\r\nexport { ConversationTranslator } from \"./ConversationTranslator.js\";\r\nexport { ConversationTranscriber } from \"./ConversationTranscriber.js\";\r\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant.js\";\r\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason.js\";\r\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler.js\";\r\nexport { Meeting, MeetingImpl } from \"./Meeting.js\";\r\nexport { MeetingInfo } from \"./IMeeting.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriber } from \"./MeetingTranscriber.js\";\r\nexport { MeetingHandler, MeetingTranscriptionHandler } from \"./MeetingHandler.js\";\r\nexport { ConversationTranscriptionResult } from \"./ConversationTranscriptionResult.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig } from \"../common.speech/Exports.js\";\r\nimport { IAudioDestination, IStringDictionary, Queue } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, SpeechConfig, SpeechConfigImpl, SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\nexport abstract class Synthesizer {\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected privConnectionFactory: ISynthesisConnectionFactory;\r\n    protected privDisposed: boolean;\r\n    protected privSynthesizing: boolean;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this Synthesizer.\r\n     * @member Synthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member Synthesizer.prototype.autoDetectSourceLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config to initialize the synthesizer.\r\n     */\r\n    protected constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-JennyNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = Synthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Synthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected abstract createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase;\r\n\r\n    // Creates the REST synthesis adapter\r\n    protected abstract createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter;\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Does the generic synthesizer setup that is common across all synthesizer types.\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig: SynthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            synthesizerConfig);\r\n\r\n        this.privRestAdapter = this.createRestSynthesisAdapter(\r\n            authentication,\r\n            synthesizerConfig);\r\n    }\r\n\r\n    protected static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IVoiceJson,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult,\r\n    VoiceInfo,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as IVoiceJson));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IVoiceJson } from \"./IVoiceJson\";\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male,\r\n\r\n    /** Neutral voice */\r\n    Neutral\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\nconst GENDER_LOOKUP: Record<string, SynthesisVoiceGender> = {\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Neutral]]: SynthesisVoiceGender.Neutral,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Male]]: SynthesisVoiceGender.Male,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Female]]: SynthesisVoiceGender.Female,\r\n};\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: IVoiceJson[\"Name\"];\r\n    private privLocale: IVoiceJson[\"Locale\"];\r\n    private privShortName: IVoiceJson[\"ShortName\"];\r\n    private privDisplayName: IVoiceJson[\"DisplayName\"];\r\n    private privLocalName: IVoiceJson[\"LocalName\"];\r\n    private privLocaleName: IVoiceJson[\"LocaleName\"];\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: IVoiceJson[\"StyleList\"] = [];\r\n    private privSampleRateHertz: IVoiceJson[\"SampleRateHertz\"];\r\n    private privStatus: IVoiceJson[\"Status\"];\r\n    private privExtendedPropertyMap: IVoiceJson[\"ExtendedPropertyMap\"];\r\n    private privWordsPerMinute: IVoiceJson[\"WordsPerMinute\"];\r\n    private privSecondaryLocaleList: IVoiceJson[\"SecondaryLocaleList\"];\r\n    private privRolePlayList: IVoiceJson[\"RolePlayList\"];\r\n\r\n    public constructor(json: IVoiceJson) {\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = GENDER_LOOKUP[json.Gender] || SynthesisVoiceGender.Unknown;\r\n\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n\r\n            this.privSampleRateHertz = json.SampleRateHertz;\r\n            this.privStatus = json.Status;\r\n\r\n            if (json.ExtendedPropertyMap) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privExtendedPropertyMap = json.ExtendedPropertyMap;\r\n            }\r\n\r\n            this.privWordsPerMinute = json.WordsPerMinute;\r\n\r\n            if (Array.isArray(json.SecondaryLocaleList)) {\r\n                this.privSecondaryLocaleList = [...json.SecondaryLocaleList];\r\n            }\r\n\r\n            if (Array.isArray(json.RolePlayList)) {\r\n                this.privRolePlayList = [...json.RolePlayList];\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): IVoiceJson[\"Name\"] {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): IVoiceJson[\"Locale\"] {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): IVoiceJson[\"ShortName\"] {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): IVoiceJson[\"DisplayName\"] {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): IVoiceJson[\"LocalName\"] {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): IVoiceJson[\"LocaleName\"] {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): IVoiceJson[\"StyleList\"] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get sampleRateHertz(): IVoiceJson[\"SampleRateHertz\"] {\r\n        return this.privSampleRateHertz;\r\n    }\r\n\r\n    public get status(): IVoiceJson[\"Status\"] {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get extendedPropertyMap(): IVoiceJson[\"ExtendedPropertyMap\"] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privExtendedPropertyMap;\r\n    }\r\n\r\n    public get wordsPerMinute(): IVoiceJson[\"WordsPerMinute\"] {\r\n        return this.privWordsPerMinute;\r\n    }\r\n\r\n    public get secondaryLocaleList(): IVoiceJson[\"SecondaryLocaleList\"] {\r\n        return this.privSecondaryLocaleList;\r\n    }\r\n\r\n    public get rolePlayList(): IVoiceJson[\"RolePlayList\"] {\r\n        return this.privRolePlayList;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports.js\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat.js\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = this.privFormat.addHeader(receivedAudio);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n    enableProsodyAssessment: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n    private privEnableProsodyAssessment: boolean;\r\n    private privContentAssessmentTopic: string;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.expectContentAssessmentResponse = !!this.privContentAssessmentTopic;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(\r\n            this.properties.getProperty(PropertyId.PronunciationAssessment_Params),\r\n            this.privContentAssessmentTopic,\r\n            recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * Enables the prosody assessment.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableProsodyAssessment\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableProsodyAssessment - enable prosody assessment.\r\n     */\r\n    public set enableProsodyAssessment(enableProsodyAssessment: boolean) {\r\n        this.privEnableProsodyAssessment = enableProsodyAssessment;\r\n    }\r\n\r\n    /**\r\n     * Enables content assessment and sets the topic.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableContentAssessmentWithTopic\r\n     * @function\r\n     * @public\r\n     * @param {string} topic - Topic for content assessment.\r\n     */\r\n    public enableContentAssessmentWithTopic(topic: string): void {\r\n        this.privContentAssessmentTopic = topic;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        paramsJson.enableProsodyAssessment = this.privEnableProsodyAssessment;\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports.js\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { AvatarVideoFormat } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the talking avatar configuration.\r\n * @class AvatarConfig\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarConfig {\r\n    private privCustomized: boolean = false;\r\n    private privBackgroundColor: string;\r\n\r\n    /**\r\n     * Defines the avatar character.\r\n     */\r\n    public character: string;\r\n    /**\r\n     * Defines the avatar style.\r\n     */\r\n    public style: string;\r\n    /**\r\n     * Defines the talking avatar output video format.\r\n     */\r\n    public videoFormat: AvatarVideoFormat;\r\n\r\n    /**\r\n     * Indicates if the talking avatar is customized.\r\n     */\r\n    public get customized(): boolean {\r\n        return this.privCustomized;\r\n    }\r\n\r\n    /**\r\n     * Sets if the talking avatar is customized.\r\n     */\r\n    public set customized(value: boolean) {\r\n        this.privCustomized = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the background color.\r\n     */\r\n    public get backgroundColor(): string {\r\n        return this.privBackgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Gets the background color.\r\n     */\r\n    public set backgroundColor(value: string) {\r\n        this.privBackgroundColor = value;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} character - The avatar character.\r\n     * @param {string} style - The avatar style.\r\n     * @param {AvatarVideoFormat} videoFormat - The talking avatar output video format.\r\n     */\r\n    public constructor(character: string, style: string, videoFormat: AvatarVideoFormat) {\r\n        Contracts.throwIfNullOrWhitespace(character, \"character\");\r\n        this.character = character;\r\n        this.style = style;\r\n        if (videoFormat === undefined) {\r\n            videoFormat = new AvatarVideoFormat();\r\n        }\r\n        this.videoFormat = videoFormat;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined && endpointId !== \"\") {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomVoiceDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n            }\r\n        }\r\n\r\n        if (config.avatarEnabled) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.EnableAvatar) === -1) {\r\n                queryParams[QueryParameterNames.EnableAvatar] = \"true\";\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisConnectionFactory } from \"../common.speech/SpeechSynthesisConnectionFactory.js\";\r\nimport { SynthesisRestAdapter } from \"../common.speech/SynthesisRestAdapter.js\";\r\nimport { SynthesizerConfig } from \"../common.speech/SynthesizerConfig.js\";\r\nimport {\r\n    AvatarSynthesisAdapter,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase\r\n} from \"../common.speech/Exports.js\";\r\nimport { createNoDashGuid, Deferred, Events, EventType, PlatformEvent } from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SynthesisResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the avatar synthesizer.\r\n * @class AvatarSynthesizer\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarSynthesizer extends Synthesizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAvatarConfig: AvatarConfig;\r\n    private privIceServers: RTCIceServer[];\r\n    /**\r\n     * Defines event handler for avatar events.\r\n     * @member AvatarSynthesizer.prototype.avatarEventReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public avatarEventReceived: (sender: AvatarSynthesizer, event: AvatarEventArgs) => void;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config.\r\n     * @param {AvatarConfig} avatarConfig - The talking avatar config.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, avatarConfig: AvatarConfig) {\r\n        super(speechConfig);\r\n\r\n        Contracts.throwIfNullOrUndefined(avatarConfig, \"avatarConfig\");\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.privAvatarConfig = avatarConfig;\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        // The service checks the audio format setting while it ignores it in avatar synthesis.\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Starts the talking avatar session and establishes the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.startAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @param {AvatarWebRTCConnectionInfo} peerConnection - The peer connection.\r\n     * @returns {Promise<SynthesisResult>} The promise of the connection result.\r\n     */\r\n    public async startAvatarAsync(peerConnection: RTCPeerConnection): Promise<SynthesisResult> {\r\n        Contracts.throwIfNullOrUndefined(peerConnection, \"peerConnection\");\r\n        this.privIceServers = peerConnection.getConfiguration().iceServers;\r\n        Contracts.throwIfNullOrUndefined(this.privIceServers, \"Ice servers must be set.\");\r\n        const iceGatheringDone = new Deferred<void>();\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\r\n        peerConnection.onicegatheringstatechange = (): void => {\r\n            Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering state: \" + peerConnection.iceGatheringState, EventType.Debug));\r\n            if (peerConnection.iceGatheringState === \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering complete.\", EventType.Info));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent): void => {\r\n            if (event.candidate) {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: \" + event.candidate.candidate, EventType.Debug));\r\n            } else {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: complete\", EventType.Debug));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        // Set a timeout for ice gathering, currently 2 seconds.\r\n        setTimeout((): void => {\r\n            if (peerConnection.iceGatheringState !== \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering timeout.\", EventType.Warning));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        }, 2000);\r\n        const sdp: RTCSessionDescriptionInit = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(sdp);\r\n        await iceGatheringDone.promise;\r\n        Events.instance.onEvent(new PlatformEvent(\"peer connection: got local SDP.\", EventType.Info));\r\n        this.privProperties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, JSON.stringify(peerConnection.localDescription));\r\n\r\n        const result: SpeechSynthesisResult = await this.speak(\"\", false);\r\n        if (result.reason !== ResultReason.SynthesizingAudioCompleted) {\r\n            return new SynthesisResult(\r\n                result.resultId,\r\n                result.reason,\r\n                result.errorDetails,\r\n                result.properties,\r\n            );\r\n        }\r\n        const sdpAnswerString: string = atob(result.properties.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP));\r\n        const sdpAnswer: RTCSessionDescription = new RTCSessionDescription(\r\n            JSON.parse(sdpAnswerString) as RTCSessionDescriptionInit,\r\n        );\r\n        await peerConnection.setRemoteDescription(sdpAnswer);\r\n        return new SynthesisResult(\r\n            result.resultId,\r\n            result.reason,\r\n            undefined,\r\n            result.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks plain text asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} text - The plain text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakTextAsync(text: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(text, false);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks SSML asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} ssml - The SSML text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakSsmlAsync(ssml: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(ssml, true);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks text asynchronously. The avatar will switch to idle state.\r\n     * @member AvatarSynthesizer.prototype.stopSpeakingAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopSpeakingAsync(): Promise<void> {\r\n        while (this.synthesisRequestQueue.length() > 0) {\r\n            const request = await this.synthesisRequestQueue.dequeue();\r\n            request.err(\"Synthesis is canceled by user.\");\r\n        }\r\n        return this.privAdapter.stopSpeaking();\r\n    }\r\n\r\n    /**\r\n     * Stops the talking avatar session and closes the WebRTC connection.\r\n     * For now, this is the same as close().\r\n     * You need to create a new AvatarSynthesizer instance to start a new session.\r\n     * @member AvatarSynthesizer.prototype.stopAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopAvatarAsync(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member AvatarSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the ICE servers. Internal use only.\r\n     */\r\n    public get iceServers(): RTCIceServer[] {\r\n        return this.privIceServers;\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new AvatarSynthesisAdapter(\r\n            authentication,\r\n            connectionFactory,\r\n            synthesizerConfig,\r\n            this,\r\n            this.privAvatarConfig);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        _authentication: IAuthentication,\r\n        _synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return undefined;\r\n    }\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        const config = super.createSynthesizerConfig(speechConfig);\r\n        config.avatarEnabled = true;\r\n        return config;\r\n    }\r\n\r\n    protected async speak(text: string, isSSML: boolean): Promise<SpeechSynthesisResult> {\r\n        const requestId = createNoDashGuid();\r\n        const deferredResult = new Deferred<SpeechSynthesisResult>();\r\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, isSSML,\r\n            (e: SpeechSynthesisResult): void => {\r\n                deferredResult.resolve(e);\r\n                this.privSynthesizing = false;\r\n                void this.adapterSpeak();\r\n            },\r\n            (e: string): void => {\r\n                deferredResult.reject(e);\r\n                this.privSynthesizing = false;\r\n            }));\r\n        void this.adapterSpeak();\r\n        return deferredResult.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Defines a coordinate in 2D space.\r\n * @class Coordinate\r\n * Added in version 1.33.0\r\n */\r\nexport class Coordinate {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the avatar output video format.\r\n * @class AvatarVideoFormat\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarVideoFormat {\r\n    /**\r\n     * Defines the video codec.\r\n     * @default \"H264\"\r\n     */\r\n    public codec: string;\r\n    /**\r\n     * Defines the video bitrate.\r\n     * @default 2000000\r\n     */\r\n    public bitrate: number;\r\n    /**\r\n     * Defines the video width.\r\n     * @default 1920\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Defines the video height.\r\n     * @default 1080\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Sets the video crop range.\r\n     */\r\n    public setCropRange(topLeft: Coordinate, bottomRight: Coordinate): void {\r\n        this.cropRange = {\r\n            bottomRight,\r\n            topLeft,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines the video crop range.\r\n     * @default undefined\r\n     * @internal\r\n     */\r\n    public cropRange: {\r\n        topLeft: Coordinate;\r\n        bottomRight: Coordinate;\r\n    };\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} codec - The video codec.\r\n     * @param {number} bitrate - The video bitrate.\r\n     * @param {number} width - The video width.\r\n     * @param {number} height - The video height.\r\n     */\r\n    public constructor(codec: string = \"H264\",\r\n                       bitrate: number = 2000000,\r\n                       width: number = 1920,\r\n                       height: number = 1080,\r\n    ) {\r\n        this.codec = codec;\r\n        this.bitrate = bitrate;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ResultReason,\r\n    PropertyCollection,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the avatar WebRTC connection result.\r\n * @class AvatarWebRTCConnectionResult\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarWebRTCConnectionResult extends SynthesisResult {\r\n    private readonly privSDPAnswer: RTCSessionDescriptionInit;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {RTCSessionDescriptionInit} SDPAnswer - The SDP answer of WebRTC connection.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(SDPAnswer?: RTCSessionDescriptionInit, resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privSDPAnswer = SDPAnswer;\r\n    }\r\n\r\n    /**\r\n     * Specifies SDP (Session Description Protocol) answer of WebRTC connection.\r\n     * @member AvatarWebRTCConnectionResult.prototype.SDPAnswer\r\n     * @function\r\n     * @public\r\n     * @returns {RTCSessionDescriptionInit} Specifies the SDP answer of WebRTC connection.\r\n     */\r\n    public get SDPAnswer(): RTCSessionDescriptionInit {\r\n        return this.privSDPAnswer;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports.js\";\r\nimport { Events } from \"../common/Exports.js\";\r\nimport { LogLevel } from \"./LogLevel.js\";\r\n\r\ntype LogCallback = (s: string) => void;\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n\r\n    public static set onLogOutput( callback: LogCallback ) {\r\n        if (!!this.privListener) {\r\n            this.privListener.logCallback = callback;\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig.js\";\r\nexport { AudioStreamFormat, AudioFormatTag } from \"./Audio/AudioStreamFormat.js\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream.js\";\r\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream.js\";\r\nexport { CancellationReason } from \"./CancellationReason.js\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback.js\";\r\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback.js\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel.js\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs.js\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs.js\";\r\nexport { OutputFormat } from \"./OutputFormat.js\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs.js\";\r\nexport { RecognitionResult } from \"./RecognitionResult.js\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult.js\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult.js\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel.js\";\r\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs, MeetingTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs.js\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs.js\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs.js\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs.js\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult.js\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult.js\";\r\nexport { ResultReason } from \"./ResultReason.js\";\r\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\nexport { PropertyCollection } from \"./PropertyCollection.js\";\r\nexport { PropertyId } from \"./PropertyId.js\";\r\nexport { Recognizer } from \"./Recognizer.js\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer.js\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer.js\";\r\nexport { VoiceProfileType } from \"./VoiceProfileType.js\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer.js\";\r\nexport { Translations } from \"./Translations.js\";\r\nexport { NoMatchReason } from \"./NoMatchReason.js\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails.js\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs.js\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs.js\";\r\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nexport { CancellationDetails } from \"./CancellationDetails.js\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes.js\";\r\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs.js\";\r\nexport { ServiceEventArgs } from \"./ServiceEventArgs.js\";\r\nexport { Connection } from \"./Connection.js\";\r\nexport { PhraseListGrammar } from \"./PhraseListGrammar.js\";\r\nexport { DialogServiceConfig } from \"./DialogServiceConfig.js\";\r\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig.js\";\r\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig.js\";\r\nexport { DialogServiceConnector } from \"./DialogServiceConnector.js\";\r\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel.js\";\r\nexport { ProfanityOption } from \"./ProfanityOption.js\";\r\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer.js\";\r\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs.js\";\r\nexport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nexport { VoiceProfile } from \"./VoiceProfile.js\";\r\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult.js\";\r\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult.js\";\r\nexport { VoiceProfilePhraseResult } from \"./VoiceProfilePhraseResult.js\";\r\nexport { VoiceProfileClient } from \"./VoiceProfileClient.js\";\r\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer.js\";\r\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel.js\";\r\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel.js\";\r\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig.js\";\r\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult.js\";\r\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig.js\";\r\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult.js\";\r\nexport { Conversation,\r\n    ConversationExpirationEventArgs,\r\n    ConversationInfo,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslationResult,\r\n    ConversationTranslator,\r\n    ConversationTranscriber,\r\n    ConversationTranscriptionResult,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    IParticipant,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    User,\r\n    VoiceSignature\r\n    } from \"./Transcription/Exports.js\";\r\nexport { Synthesizer } from \"./Synthesizer.js\";\r\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat.js\";\r\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer.js\";\r\nexport { SynthesisResult } from \"./SynthesisResult.js\";\r\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult.js\";\r\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs.js\";\r\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs.js\";\r\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs.js\";\r\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs.js\";\r\nexport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\nexport { SynthesisVoicesResult } from \"./SynthesisVoicesResult.js\";\r\nexport { VoiceInfo } from \"./VoiceInfo.js\";\r\nexport { IPlayer } from \"./Audio/IPlayer.js\";\r\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination.js\";\r\nexport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem.js\";\r\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity.js\";\r\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig.js\";\r\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult.js\";\r\nexport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\nexport { AvatarConfig } from \"./AvatarConfig.js\";\r\nexport { AvatarEventArgs } from \"./AvatarEventArgs.js\";\r\nexport { AvatarSynthesizer } from \"./AvatarSynthesizer.js\";\r\nexport { AvatarVideoFormat, Coordinate } from \"./AvatarVideoFormat.js\";\r\nexport { AvatarWebRTCConnectionResult } from \"./AvatarWebRTCConnectionResult.js\";\r\nexport { Diagnostics } from \"./Diagnostics.js\";\r\nexport { LogLevel } from \"./LogLevel.js\";\r\nexport { IVoiceJson } from \"./IVoiceJson.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports.js\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n","'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports.js\";\r\nimport { IRequestOptions } from \"./Exports.js\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports.js\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./ConsoleLoggingListener.js\";\r\nexport * from \"./IRecorder.js\";\r\nexport * from \"./MicAudioSource.js\";\r\nexport * from \"./FileAudioSource.js\";\r\nexport * from \"./PCMRecorder.js\";\r\nexport * from \"./WebsocketConnection.js\";\r\nexport * from \"./WebsocketMessageAdapter.js\";\r\nexport * from \"./ReplayableAudioNode.js\";\r\nexport * from \"./ProxyInfo.js\";\r\nexport * from \"./RestMessageAdapter.js\";\r\nexport * from \"./RestConfigBase.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n    protected privExpectContentAssessmentResponse: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    public set expectContentAssessmentResponse(value: boolean) {\r\n        this.privExpectContentAssessmentResponse = value;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n","import { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports.js\";\r\nimport { StringUtils } from \"../common/StringUtils.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports.js\";\r\nimport { RecognitionStatus } from \"./Exports.js\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus, expectEndOfDictation: boolean = false): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.EndOfDictation:\r\n                // If we need the result in EndOfDictation (typically some session level result),\r\n                // translate into RecognizedSpeech, otherwise NoMatch\r\n                reason = expectEndOfDictation ? ResultReason.RecognizedSpeech : ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports.js\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = RecognitionStatus[this.privTranslationPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string | undefined {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations | undefined {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    ITranslationHypothesis,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        const handleTranslationHypothesis = (hypothesis: TranslationHypothesis, resultProperties: PropertyCollection): void => {\r\n            const result: TranslationRecognitionEventArgs = this.fireEventForResult(hypothesis, resultProperties);\r\n            this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n            if (!!this.privTranslationRecognizer.recognizing) {\r\n                try {\r\n                    this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                    /* eslint-disable no-empty */\r\n                } catch (error) {\r\n                    // Not going to let errors in the event handler\r\n                    // trip things up.\r\n                }\r\n            }\r\n            processed = true;\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                handleTranslationHypothesis(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                } else {\r\n                    const hypothesis: { SpeechHypothesis: ITranslationHypothesis } = JSON.parse(connectionMessage.textBody) as { SpeechHypothesis: ITranslationHypothesis };\r\n                    if (!!hypothesis.SpeechHypothesis) {\r\n                        handleTranslationHypothesis(TranslationHypothesis.fromTranslationResponse(hypothesis), resultProps);\r\n                    }\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n        const language = serviceResult.Language;\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase.js\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus, this.privExpectContentAssessmentResponse);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\nimport { PhraseDetection, SpeakerDiarization } from \"./ServiceRecognizerBase.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = \"Conversation\";\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = \"Anonymous\";\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports.js\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation.js\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel.js\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports.js\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents.js\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents.js\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal.js\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports.js\";\r\n\r\ninterface Context {\r\n    [section: string]: any;\r\n}\r\n\r\ninterface PhraseContext {\r\n    [section: string]: any;\r\n    phraseDetection?: {\r\n        enrichment?: {\r\n            pronunciationAssessment: any;\r\n            contentAssessment?: {\r\n                topic: string;\r\n            };\r\n        };\r\n        speakerDiarization?: {\r\n            mode?: string;\r\n            audioSessionId?: string;\r\n            audioOffsetMs?: number;\r\n            identityProvider?: string;\r\n        };\r\n        mode?: string;\r\n    };\r\n    phraseOutput?: {\r\n        detailed?: {\r\n            options?: string[];\r\n        };\r\n        format?: any;\r\n    };\r\n}\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: PhraseContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    public getSection(sectionName: string): string | Context {\r\n        return (this.privContext[sectionName] || {}) as string | Context;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | Context): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string,\r\n        contentAssessmentTopic: string,\r\n        isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as Context;\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = \"Conversation\";\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n        if (!!contentAssessmentTopic) {\r\n            this.privContext.phraseDetection.enrichment.contentAssessment = {\r\n                topic: contentAssessmentTopic\r\n            };\r\n            this.privContext.phraseOutput.detailed.options.push(\"ContentAssessment\");\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error.js\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState.js\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports.js\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase.js\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports.js\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports.js\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports.js\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter.js\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports.js\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports.js\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports.js\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n","export { CommandResponsePayload } from \"./CommandResponsePayload.js\";\r\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload.js\";\r\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer.js\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports.js\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig.js\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation.js\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation.js\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory.js\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports.js\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { ConversationManager } from \"./ConversationManager.js\";\r\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer.js\";\r\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer.js\";\r\nexport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\nexport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants} from \"./ConversationTranslatorInterfaces.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports.js\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n    AvatarSignal = \"TalkingAvatarSignal\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n        Name: string;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents.js\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n    webrtc: {\r\n        connectionString: string;\r\n    };\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    public get extraProperties(): PropertyCollection {\r\n        if (!!this.privWebRTCSDP) {\r\n            const properties = new PropertyCollection();\r\n            properties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, this.privWebRTCSDP);\r\n            return properties;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n    private privWebRTCSDP: string;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = this.audioOutputFormat.addHeader(audio);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        this.privWebRTCSDP = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(responseJson: string): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        if (!!response.webrtc) {\r\n            this.privWebRTCSDP = response.webrtc.connectionString;\r\n        }\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public async constructSynthesisResult(): Promise<SpeechSynthesisResult> {\r\n        const audioBuffer: ArrayBuffer = await this.getAllReceivedAudioWithHeader();\r\n        return new SpeechSynthesisResult(\r\n            this.requestId,\r\n            ResultReason.SynthesizingAudioCompleted,\r\n            audioBuffer,\r\n            undefined,\r\n            this.extraProperties,\r\n            this.audioDuration\r\n        );\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport abstract class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSynthesizer: Synthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    protected privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    protected privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext();\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            this.onSynthesisStarted(requestId);\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    public async stopSpeaking(): Promise<void> {\r\n        await this.connectImpl();\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"synthesis.control\",\r\n            this.privSynthesisTurn.requestId,\r\n            \"application/json\",\r\n            JSON.stringify({\r\n                action: \"stop\"\r\n            })\r\n        ));\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        _cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        this.onSynthesisCancelled(result);\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(_connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse(connectionMessage.textBody);\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            this.onSynthesizing(connectionMessage.binaryBody);\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n                                    this.onWordBoundary(wordBoundaryEventArgs);\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n                                    this.onBookmarkReached(bookmarkEventArgs);\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                        this.onVisemeReceived(visemeEventArgs);\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.AvatarSignal:\r\n                                    this.onAvatarEvent(metadata);\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            result = await this.privSynthesisTurn.constructSynthesisResult();\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        this.onSynthesisCompleted(result);\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        this.setSynthesisContextSynthesisSection();\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected abstract setSynthesisContextSynthesisSection(): void;\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(\r\n                    `Unable to contact server. StatusCode: ${response.statusCode},\r\n                    ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Url)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        this.setSpeechConfigSynthesisSection();\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n\r\n    protected onAvatarEvent(_metadata: ISynthesisMetadata): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisStarted(_requestId: string): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesizing(_audio: ArrayBuffer): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCancelled(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCompleted(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onWordBoundary(_wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onVisemeReceived(_visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onBookmarkReached(_bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        return;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioDestination } from \"../common/Exports.js\";\r\nimport {\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\n\r\nexport class SpeechSynthesisAdapter extends SynthesisAdapterBase {\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n            super(authentication, connectionFactory, synthesizerConfig, audioDestination);\r\n            this.privSpeechSynthesizer = speechSynthesizer;\r\n            this.privSynthesizer = speechSynthesizer as Synthesizer;\r\n        }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(this.privSpeechSynthesizer);\r\n    }\r\n\r\n    protected onSynthesisStarted(requestId: string): void {\r\n        const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n            new SpeechSynthesisResult(\r\n                requestId,\r\n                ResultReason.SynthesizingAudioStarted,\r\n            )\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n        }\r\n    }\r\n\r\n    protected onSynthesizing(audio: ArrayBuffer): void {\r\n        if (!!this.privSpeechSynthesizer.synthesizing) {\r\n            try {\r\n                const audioWithHeader = this.privSynthesisTurn.audioOutputFormat.addHeader(audio);\r\n                const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                    new SpeechSynthesisResult(\r\n                        this.privSynthesisTurn.requestId,\r\n                        ResultReason.SynthesizingAudio,\r\n                        audioWithHeader));\r\n                this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCancelled(result: SpeechSynthesisResult): void {\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCompleted(result: SpeechSynthesisResult): void {\r\n        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n            try {\r\n                this.privSpeechSynthesizer.synthesisCompleted(\r\n                    this.privSpeechSynthesizer,\r\n                    new SpeechSynthesisEventArgs(result)\r\n                );\r\n            } catch (e) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onWordBoundary(wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n            try {\r\n                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onVisemeReceived(visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n            try {\r\n                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onBookmarkReached(bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n            try {\r\n                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport {\r\n    Context,\r\n    ISynthesisSectionVideo,\r\n    SpeechServiceConfig\r\n    } from \"./Exports.js\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n    public avatarEnabled: boolean = false;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public set synthesisVideoSection(value: ISynthesisSectionVideo) {\r\n        this.privSpeechServiceConfig.Context.synthesis = {\r\n            video: value\r\n        };\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports.js\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    public setSynthesisSection(speechSynthesizer: SpeechSynthesizer): void {\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext(speechSynthesizer);\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n    }\r\n\r\n    private buildSynthesisContext(speechSynthesizer: SpeechSynthesizer): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!speechSynthesizer?.bookmarkReached),\r\n                    punctuationBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                    sentenceBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!speechSynthesizer?.visemeReceived),\r\n                    wordBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: speechSynthesizer?.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport { Context } from \"./Exports.js\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    public constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.36.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication.js\";\r\nexport * from \"./CognitiveTokenAuthentication.js\";\r\nexport * from \"./IAuthentication.js\";\r\nexport * from \"./IConnectionFactory.js\";\r\nexport * from \"./ISynthesisConnectionFactory.js\";\r\nexport * from \"./IntentConnectionFactory.js\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory.js\";\r\nexport * from \"./RecognitionEvents.js\";\r\nexport * from \"./ServiceRecognizerBase.js\";\r\nexport * from \"./ConversationServiceRecognizer.js\";\r\nexport * from \"./RecognizerConfig.js\";\r\nexport * from \"./SpeechServiceInterfaces.js\";\r\nexport * from \"./WebsocketMessageFormatter.js\";\r\nexport * from \"./SpeechConnectionFactory.js\";\r\nexport * from \"./ConversationTranscriberConnectionFactory.js\";\r\nexport * from \"./TranscriberConnectionFactory.js\";\r\nexport * from \"./TranslationConnectionFactory.js\";\r\nexport * from \"./SpeechSynthesisConnectionFactory.js\";\r\nexport * from \"./EnumTranslation.js\";\r\nexport * from \"./ServiceMessages/Enums.js\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd.js\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis.js\";\r\nexport * from \"./ServiceMessages/TranslationPhrase.js\";\r\nexport * from \"./TranslationServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/SpeechDetected.js\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis.js\";\r\nexport * from \"./ServiceMessages/SpeechKeyword.js\";\r\nexport * from \"./SpeechServiceRecognizer.js\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer.js\";\r\nexport * from \"./TranscriptionServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase.js\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase.js\";\r\nexport * from \"./AddedLmIntent.js\";\r\nexport * from \"./IntentServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/IntentResponse.js\";\r\nexport * from \"./ServiceMessages/SpeakerResponse.js\";\r\nexport * from \"./RequestSession.js\";\r\nexport * from \"./SpeechContext.js\";\r\nexport * from \"./DynamicGrammarBuilder.js\";\r\nexport * from \"./DynamicGrammarInterfaces.js\";\r\nexport * from \"./DialogServiceAdapter.js\";\r\nexport * from \"./AgentConfig.js\";\r\nexport * from \"./Transcription/Exports.js\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nexport * from \"./SynthesisTurn.js\";\r\nexport * from \"./SynthesisAdapterBase.js\";\r\nexport { AvatarSynthesisAdapter } from \"./AvatarSynthesisAdapter.js\";\r\nexport { SpeechSynthesisAdapter } from \"./SpeechSynthesisAdapter.js\";\r\nexport * from \"./SynthesisRestAdapter.js\";\r\nexport * from \"./SynthesizerConfig.js\";\r\nexport * from \"./SynthesisContext.js\";\r\nexport * from \"./SpeakerRecognitionConfig.js\";\r\nexport * from \"./SpeakerServiceRecognizer.js\";\r\nexport * from \"./VoiceServiceRecognizer.js\";\r\nexport * from \"./SpeechServiceConfig.js\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { AgentConfig } from \"./src/common.speech/Exports.js\";\r\n\r\n// Note: this instantiation ensures the above import isn't\r\n// removed on compile. The import being absent causes an error on running\r\nvoid new AgentConfig();\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports.js\";\r\n","/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport { PropertyId } from 'microsoft-cognitiveservices-speech-sdk';\nimport patchOptions, { type PatchOptionsInit } from '../patchOptions';\nimport SpeechSDK from '../SpeechSDK';\nimport createSpeechRecognitionPonyfillFromRecognizer from './createSpeechRecognitionPonyfillFromRecognizer';\n\nconst { OutputFormat, SpeechConfig, SpeechRecognizer } = SpeechSDK;\n\nexport default function createSpeechRecognitionPonyfill(options: PatchOptionsInit) {\n  const {\n    audioConfig,\n    enableTelemetry,\n    fetchCredentials,\n    initialSilenceTimeout,\n    looseEvents,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization\n  } = patchOptions(options);\n\n  if (!audioConfig && (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia)) {\n    throw new Error(\n      'web-speech-cognitive-services: This browser does not support Media Capture and Streams API and it will not work with Cognitive Services Speech Services.'\n    );\n  }\n\n  const createRecognizer = async (lang: string) => {\n    const credentials = await fetchCredentials();\n    let speechConfig;\n\n    if (typeof credentials.speechRecognitionHostname !== 'undefined') {\n      const host = new URL('wss://localhost:443');\n\n      host.hostname = credentials.speechRecognitionHostname;\n\n      if (credentials.authorizationToken) {\n        speechConfig = SpeechConfig.fromHost(host);\n        speechConfig.authorizationToken = credentials.authorizationToken;\n      } else {\n        speechConfig = SpeechConfig.fromHost(host, credentials.subscriptionKey);\n      }\n    } else {\n      speechConfig =\n        typeof credentials.authorizationToken !== 'undefined'\n          ? SpeechConfig.fromAuthorizationToken(credentials.authorizationToken, credentials.region)\n          : SpeechConfig.fromSubscription(credentials.subscriptionKey, credentials.region);\n    }\n\n    if (speechRecognitionEndpointId) {\n      speechConfig.endpointId = speechRecognitionEndpointId;\n    }\n\n    speechConfig.outputFormat = OutputFormat.Detailed;\n    speechConfig.speechRecognitionLanguage = lang || 'en-US';\n    typeof initialSilenceTimeout === 'number' &&\n      speechConfig.setProperty(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, '' + initialSilenceTimeout);\n\n    return new SpeechRecognizer(speechConfig, audioConfig);\n  };\n\n  return createSpeechRecognitionPonyfillFromRecognizer({\n    createRecognizer,\n    enableTelemetry,\n    looseEvents,\n    referenceGrammars,\n    textNormalization\n  });\n}\n","// src/actions/await/awaitAsync.ts\nfunction awaitAsync() {\n  return {\n    kind: \"transformation\",\n    type: \"await\",\n    reference: awaitAsync,\n    async: true,\n    async _run(dataset) {\n      dataset.value = await dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/regex.ts\nvar BASE64_REGEX = /^(?:[\\da-z+/]{4})*(?:[\\da-z+/]{2}==|[\\da-z+/]{3}=)?$/iu;\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[\\dA-Z]{2}(?:[\\dA-Z]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^[+-]?\\d+(?:\\.\\d+)?$/u;\nvar DIGITS_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex, regexp/no-dupe-disjunctions -- false positives\n  /^(?:[\\u{1F1E6}-\\u{1F1FF}]{2}|\\u{1F3F4}[\\u{E0061}-\\u{E007A}]{2}[\\u{E0030}-\\u{E0039}\\u{E0061}-\\u{E007A}]{1,3}\\u{E007F}|(?:\\p{Emoji}\\uFE0F\\u20E3?|\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation})(?:\\u200D(?:\\p{Emoji}\\uFE0F\\u20E3?|\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}))*)+$/u\n);\nvar HEXADECIMAL_REGEX = /^(?:0[hx])?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{15}$|^\\d{2}-\\d{6}-\\d{6}-\\d$/u;\nvar IPV4_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n  /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u\n);\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar IP_REGEX = /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$|^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}(?:\\.\\d{1,9})?(?:Z|[+-](?:0\\d|1\\d|2[0-3])(?::?[0-5]\\d)?)$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar MAC_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$|^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar NANO_ID_REGEX = /^[\\w-]+$/u;\nvar OCTAL_REGEX = /^(?:0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n\n// src/storages/globalConfig/globalConfig.ts\nvar store;\nfunction setGlobalConfig(config2) {\n  store = { ...store, ...config2 };\n}\nfunction getGlobalConfig(config2) {\n  return {\n    lang: config2?.lang ?? store?.lang,\n    message: config2?.message,\n    abortEarly: config2?.abortEarly ?? store?.abortEarly,\n    abortPipeEarly: config2?.abortPipeEarly ?? store?.abortPipeEarly\n  };\n}\nfunction deleteGlobalConfig() {\n  store = void 0;\n}\n\n// src/storages/globalMessage/globalMessage.ts\nvar store2;\nfunction setGlobalMessage(message, lang) {\n  if (!store2) store2 = /* @__PURE__ */ new Map();\n  store2.set(lang, message);\n}\nfunction getGlobalMessage(lang) {\n  return store2?.get(lang);\n}\nfunction deleteGlobalMessage(lang) {\n  store2?.delete(lang);\n}\n\n// src/storages/schemaMessage/schemaMessage.ts\nvar store3;\nfunction setSchemaMessage(message, lang) {\n  if (!store3) store3 = /* @__PURE__ */ new Map();\n  store3.set(lang, message);\n}\nfunction getSchemaMessage(lang) {\n  return store3?.get(lang);\n}\nfunction deleteSchemaMessage(lang) {\n  store3?.delete(lang);\n}\n\n// src/storages/specificMessage/specificMessage.ts\nvar store4;\nfunction setSpecificMessage(reference, message, lang) {\n  if (!store4) store4 = /* @__PURE__ */ new Map();\n  if (!store4.get(reference)) store4.set(reference, /* @__PURE__ */ new Map());\n  store4.get(reference).set(lang, message);\n}\nfunction getSpecificMessage(reference, lang) {\n  return store4?.get(reference)?.get(lang);\n}\nfunction deleteSpecificMessage(reference, lang) {\n  store4?.get(reference)?.delete(lang);\n}\n\n// src/utils/_stringify/_stringify.ts\nfunction _stringify(input) {\n  const type = typeof input;\n  if (type === \"string\") {\n    return `\"${input}\"`;\n  }\n  if (type === \"number\" || type === \"bigint\" || type === \"boolean\") {\n    return `${input}`;\n  }\n  if (type === \"object\" || type === \"function\") {\n    return (input && Object.getPrototypeOf(input)?.constructor?.name) ?? \"null\";\n  }\n  return type;\n}\n\n// src/utils/_addIssue/_addIssue.ts\nfunction _addIssue(context, label, dataset, config2, other) {\n  const input = other && \"input\" in other ? other.input : dataset.value;\n  const expected = other?.expected ?? context.expects ?? null;\n  const received = other?.received ?? _stringify(input);\n  const issue = {\n    kind: context.kind,\n    type: context.type,\n    input,\n    expected,\n    received,\n    message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : \"R\"}eceived ${received}`,\n    requirement: context.requirement,\n    path: other?.path,\n    issues: other?.issues,\n    lang: config2.lang,\n    abortEarly: config2.abortEarly,\n    abortPipeEarly: config2.abortPipeEarly\n  };\n  const isSchema = context.kind === \"schema\";\n  const message = other?.message ?? context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang);\n  if (message) {\n    issue.message = typeof message === \"function\" ? (\n      // @ts-expect-error\n      message(issue)\n    ) : message;\n  }\n  if (isSchema) {\n    dataset.typed = false;\n  }\n  if (dataset.issues) {\n    dataset.issues.push(issue);\n  } else {\n    dataset.issues = [issue];\n  }\n}\n\n// src/utils/_isLuhnAlgo/_isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction _isLuhnAlgo(input) {\n  const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n  let length2 = number2.length;\n  let bit = 1;\n  let sum = 0;\n  while (length2) {\n    const value2 = +number2[--length2];\n    bit ^= 1;\n    sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;\n  }\n  return sum % 10 === 0;\n}\n\n// src/utils/_isValidObjectKey/_isValidObjectKey.ts\nfunction _isValidObjectKey(object2, key) {\n  return Object.hasOwn(object2, key) && key !== \"__proto__\" && key !== \"prototype\" && key !== \"constructor\";\n}\n\n// src/utils/_joinExpects/_joinExpects.ts\nfunction _joinExpects(values, separator) {\n  const list = [...new Set(values)];\n  if (list.length > 1) {\n    return `(${list.join(` ${separator} `)})`;\n  }\n  return list[0] ?? \"never\";\n}\n\n// src/utils/entriesFromList/entriesFromList.ts\nfunction entriesFromList(list, schema) {\n  const entries = {};\n  for (const key of list) {\n    entries[key] = schema;\n  }\n  return entries;\n}\n\n// src/utils/getDotPath/getDotPath.ts\nfunction getDotPath(issue) {\n  if (issue.path) {\n    let key = \"\";\n    for (const item of issue.path) {\n      if (typeof item.key === \"string\" || typeof item.key === \"number\") {\n        if (key) {\n          key += `.${item.key}`;\n        } else {\n          key += item.key;\n        }\n      } else {\n        return null;\n      }\n    }\n    return key;\n  }\n  return null;\n}\n\n// src/utils/isOfKind/isOfKind.ts\nfunction isOfKind(kind, object2) {\n  return object2.kind === kind;\n}\n\n// src/utils/isOfType/isOfType.ts\nfunction isOfType(type, object2) {\n  return object2.type === type;\n}\n\n// src/utils/isValiError/isValiError.ts\nfunction isValiError(error) {\n  return error instanceof ValiError;\n}\n\n// src/utils/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n  /**\n   * The error issues.\n   */\n  issues;\n  /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */\n  constructor(issues) {\n    super(issues[0].message);\n    this.name = \"ValiError\";\n    this.issues = issues;\n  }\n};\n\n// src/actions/base64/base64.ts\nfunction base64(message) {\n  return {\n    kind: \"validation\",\n    type: \"base64\",\n    reference: base64,\n    async: false,\n    expects: null,\n    requirement: BASE64_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Base64\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/bic/bic.ts\nfunction bic(message) {\n  return {\n    kind: \"validation\",\n    type: \"bic\",\n    reference: bic,\n    async: false,\n    expects: null,\n    requirement: BIC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"BIC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/brand/brand.ts\nfunction brand(name) {\n  return {\n    kind: \"transformation\",\n    type: \"brand\",\n    reference: brand,\n    async: false,\n    name,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/bytes/bytes.ts\nfunction bytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"bytes\",\n    reference: bytes,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 !== this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/check.ts\nfunction check(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: check,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/checkAsync.ts\nfunction checkAsync(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: checkAsync,\n    async: true,\n    expects: null,\n    requirement,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.typed && !await this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/checkItems/checkItems.ts\nfunction checkItems(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check_items\",\n    reference: checkItems,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        for (let index = 0; index < dataset.value.length; index++) {\n          const item = dataset.value[index];\n          if (!this.requirement(item, index, dataset.value)) {\n            _addIssue(this, \"item\", dataset, config2, {\n              input: item,\n              path: [\n                {\n                  type: \"array\",\n                  origin: \"value\",\n                  input: dataset.value,\n                  key: index,\n                  value: item\n                }\n              ]\n            });\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/creditCard/creditCard.ts\nvar CREDIT_CARD_REGEX = /^(?:\\d{14,19}|\\d{4}(?: \\d{3,6}){2,4}|\\d{4}(?:-\\d{3,6}){2,4})$/u;\nvar SANITIZE_REGEX = /[- ]/gu;\nvar PROVIDER_REGEX_LIST = [\n  // American Express\n  /^3[47]\\d{13}$/u,\n  // Diners Club\n  /^3(?:0[0-5]|[68]\\d)\\d{11,13}$/u,\n  // Discover\n  /^6(?:011|5\\d{2})\\d{12,15}$/u,\n  // JCB\n  /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n  // Mastercard\n  /^5[1-5]\\d{2}|(?:222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n  // UnionPay\n  /^(?:6[27]\\d{14,17}|81\\d{14,17})$/u,\n  // Visa\n  /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message) {\n  return {\n    kind: \"validation\",\n    type: \"credit_card\",\n    reference: creditCard,\n    async: false,\n    expects: null,\n    requirement(input) {\n      let sanitized;\n      return CREDIT_CARD_REGEX.test(input) && // Remove any hyphens and blanks\n      (sanitized = input.replace(SANITIZE_REGEX, \"\")) && // Check if it matches a provider\n      PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && // Check if passes luhn algorithm\n      _isLuhnAlgo(sanitized);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"credit card\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/cuid2/cuid2.ts\nfunction cuid2(message) {\n  return {\n    kind: \"validation\",\n    type: \"cuid2\",\n    reference: cuid2,\n    async: false,\n    expects: null,\n    requirement: CUID2_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Cuid2\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/decimal/decimal.ts\nfunction decimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"decimal\",\n    reference: decimal,\n    async: false,\n    expects: null,\n    requirement: DECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"decimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/description/description.ts\nfunction description(description_) {\n  return {\n    kind: \"metadata\",\n    type: \"description\",\n    reference: description,\n    description: description_\n  };\n}\n\n// src/actions/digits/digits.ts\nfunction digits(message) {\n  return {\n    kind: \"validation\",\n    type: \"digits\",\n    reference: digits,\n    async: false,\n    expects: null,\n    requirement: DIGITS_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"digits\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/email/email.ts\nfunction email(message) {\n  return {\n    kind: \"validation\",\n    type: \"email\",\n    reference: email,\n    expects: null,\n    async: false,\n    requirement: EMAIL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"email\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/emoji/emoji.ts\nfunction emoji(message) {\n  return {\n    kind: \"validation\",\n    type: \"emoji\",\n    reference: emoji,\n    async: false,\n    expects: null,\n    requirement: EMOJI_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"emoji\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/empty/empty.ts\nfunction empty(message) {\n  return {\n    kind: \"validation\",\n    type: \"empty\",\n    reference: empty,\n    async: false,\n    expects: \"0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/endsWith/endsWith.ts\nfunction endsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"ends_with\",\n    reference: endsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.endsWith(this.requirement)) {\n        _addIssue(this, \"end\", dataset, config2, {\n          received: `\"${dataset.value.slice(-this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/everyItem/everyItem.ts\nfunction everyItem(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"every_item\",\n    reference: everyItem,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.every(this.requirement)) {\n        _addIssue(this, \"item\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/excludes/excludes.ts\nfunction excludes(requirement, message) {\n  const received = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"excludes\",\n    reference: excludes,\n    async: false,\n    expects: `!${received}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, { received });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/filterItems/filterItems.ts\nfunction filterItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"filter_items\",\n    reference: filterItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.filter(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/findItem/findItem.ts\nfunction findItem(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"find_item\",\n    reference: findItem,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.find(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/finite/finite.ts\nfunction finite(message) {\n  return {\n    kind: \"validation\",\n    type: \"finite\",\n    reference: finite,\n    async: false,\n    expects: null,\n    requirement: Number.isFinite,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"finite\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hash/hash.ts\nvar HASH_LENGTHS = {\n  md4: 32,\n  md5: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8,\n  adler32: 8\n};\nfunction hash(types, message) {\n  return {\n    kind: \"validation\",\n    type: \"hash\",\n    reference: hash,\n    expects: null,\n    async: false,\n    requirement: RegExp(\n      types.map((type) => `^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join(\"|\"),\n      \"iu\"\n    ),\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hash\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"hexadecimal\",\n    reference: hexadecimal,\n    async: false,\n    expects: null,\n    requirement: HEXADECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hexadecimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexColor/hexColor.ts\nfunction hexColor(message) {\n  return {\n    kind: \"validation\",\n    type: \"hex_color\",\n    reference: hexColor,\n    async: false,\n    expects: null,\n    requirement: HEX_COLOR_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hex color\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/imei/imei.ts\nfunction imei(message) {\n  return {\n    kind: \"validation\",\n    type: \"imei\",\n    reference: imei,\n    async: false,\n    expects: null,\n    requirement(input) {\n      return IMEI_REGEX.test(input) && _isLuhnAlgo(input);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"IMEI\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/includes/includes.ts\nfunction includes(requirement, message) {\n  const expects = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"includes\",\n    reference: includes,\n    async: false,\n    expects,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, {\n          received: `!${expects}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/integer/integer.ts\nfunction integer(message) {\n  return {\n    kind: \"validation\",\n    type: \"integer\",\n    reference: integer,\n    async: false,\n    expects: null,\n    requirement: Number.isInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ip/ip.ts\nfunction ip(message) {\n  return {\n    kind: \"validation\",\n    type: \"ip\",\n    reference: ip,\n    async: false,\n    expects: null,\n    requirement: IP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IP\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv4/ipv4.ts\nfunction ipv4(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv4\",\n    reference: ipv4,\n    async: false,\n    expects: null,\n    requirement: IPV4_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv4\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv6/ipv6.ts\nfunction ipv6(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv6\",\n    reference: ipv6,\n    async: false,\n    expects: null,\n    requirement: IPV6_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv6\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDate/isoDate.ts\nfunction isoDate(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date\",\n    reference: isoDate,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date_time\",\n    reference: isoDateTime,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date-time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTime/isoTime.ts\nfunction isoTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time\",\n    reference: isoTime,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time_second\",\n    reference: isoTimeSecond,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_SECOND_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time-second\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_timestamp\",\n    reference: isoTimestamp,\n    async: false,\n    expects: null,\n    requirement: ISO_TIMESTAMP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"timestamp\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoWeek/isoWeek.ts\nfunction isoWeek(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_week\",\n    reference: isoWeek,\n    async: false,\n    expects: null,\n    requirement: ISO_WEEK_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"week\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/length/length.ts\nfunction length(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"length\",\n    reference: length,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length !== this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac/mac.ts\nfunction mac(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac\",\n    reference: mac,\n    async: false,\n    expects: null,\n    requirement: MAC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac48/mac48.ts\nfunction mac48(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac48\",\n    reference: mac48,\n    async: false,\n    expects: null,\n    requirement: MAC48_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"48-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac64/mac64.ts\nfunction mac64(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac64\",\n    reference: mac64,\n    async: false,\n    expects: null,\n    requirement: MAC64_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"64-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mapItems/mapItems.ts\nfunction mapItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"map_items\",\n    reference: mapItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.map(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_bytes\",\n    reference: maxBytes,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 > this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxLength/maxLength.ts\nfunction maxLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_length\",\n    reference: maxLength,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxSize/maxSize.ts\nfunction maxSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_size\",\n    reference: maxSize,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size > this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxValue/maxValue.ts\nfunction maxValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_value\",\n    reference: maxValue,\n    async: false,\n    expects: `<=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value > this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/metadata/metadata.ts\nfunction metadata(metadata_) {\n  return {\n    kind: \"metadata\",\n    type: \"metadata\",\n    reference: metadata,\n    metadata: metadata_\n  };\n}\n\n// src/actions/mimeType/mimeType.ts\nfunction mimeType(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"mime_type\",\n    reference: mimeType,\n    async: false,\n    expects: _joinExpects(\n      requirement.map((option) => `\"${option}\"`),\n      \"|\"\n    ),\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.includes(dataset.value.type)) {\n        _addIssue(this, \"MIME type\", dataset, config2, {\n          received: `\"${dataset.value.type}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minBytes/minBytes.ts\nfunction minBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_bytes\",\n    reference: minBytes,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 < this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minLength/minLength.ts\nfunction minLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_length\",\n    reference: minLength,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length < this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minSize/minSize.ts\nfunction minSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_size\",\n    reference: minSize,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size < this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minValue/minValue.ts\nfunction minValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_value\",\n    reference: minValue,\n    async: false,\n    expects: `>=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value < this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"multiple_of\",\n    reference: multipleOf,\n    async: false,\n    expects: `%${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value % this.requirement !== 0) {\n        _addIssue(this, \"multiple\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/nanoid/nanoid.ts\nfunction nanoid(message) {\n  return {\n    kind: \"validation\",\n    type: \"nanoid\",\n    reference: nanoid,\n    async: false,\n    expects: null,\n    requirement: NANO_ID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Nano ID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/nonEmpty/nonEmpty.ts\nfunction nonEmpty(message) {\n  return {\n    kind: \"validation\",\n    type: \"non_empty\",\n    reference: nonEmpty,\n    async: false,\n    expects: \"!0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: \"0\"\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/normalize/normalize.ts\nfunction normalize(form) {\n  return {\n    kind: \"transformation\",\n    type: \"normalize\",\n    reference: normalize,\n    async: false,\n    form,\n    _run(dataset) {\n      dataset.value = dataset.value.normalize(this.form);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notBytes/notBytes.ts\nfunction notBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_bytes\",\n    reference: notBytes,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 === this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notLength/notLength.ts\nfunction notLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_length\",\n    reference: notLength,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notSize/notSize.ts\nfunction notSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_size\",\n    reference: notSize,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size === this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notValue/notValue.ts\nfunction notValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_value\",\n    reference: notValue,\n    async: false,\n    expects: requirement instanceof Date ? `!${requirement.toJSON()}` : `!${_stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && this.requirement <= dataset.value && this.requirement >= dataset.value) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/octal/octal.ts\nfunction octal(message) {\n  return {\n    kind: \"validation\",\n    type: \"octal\",\n    reference: octal,\n    async: false,\n    expects: null,\n    requirement: OCTAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"octal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/partialCheck/utils/_isPartiallyTyped/_isPartiallyTyped.ts\nfunction _isPartiallyTyped(dataset, pathList) {\n  if (dataset.issues) {\n    for (const path of pathList) {\n      for (const issue of dataset.issues) {\n        let typed = false;\n        const bound = Math.min(path.length, issue.path?.length ?? 0);\n        for (let index = 0; index < bound; index++) {\n          if (path[index] !== issue.path[index].key) {\n            typed = true;\n            break;\n          }\n        }\n        if (!typed) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n// src/actions/partialCheck/partialCheck.ts\nfunction partialCheck(pathList, requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"partial_check\",\n    reference: partialCheck,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error\n      !this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/partialCheck/partialCheckAsync.ts\nfunction partialCheckAsync(pathList, requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"partial_check\",\n    reference: partialCheckAsync,\n    async: true,\n    expects: null,\n    requirement,\n    message,\n    async _run(dataset, config2) {\n      if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error\n      !await this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawCheck/rawCheck.ts\nfunction rawCheck(action) {\n  return {\n    kind: \"validation\",\n    type: \"raw_check\",\n    reference: rawCheck,\n    async: false,\n    expects: null,\n    _run(dataset, config2) {\n      action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info)\n      });\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawCheck/rawCheckAsync.ts\nfunction rawCheckAsync(action) {\n  return {\n    kind: \"validation\",\n    type: \"raw_check\",\n    reference: rawCheckAsync,\n    async: true,\n    expects: null,\n    async _run(dataset, config2) {\n      await action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info)\n      });\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawTransform/rawTransform.ts\nfunction rawTransform(action) {\n  return {\n    kind: \"transformation\",\n    type: \"raw_transform\",\n    reference: rawTransform,\n    async: false,\n    _run(dataset, config2) {\n      const output = action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info),\n        NEVER: null\n      });\n      if (dataset.issues) {\n        dataset.typed = false;\n      } else {\n        dataset.value = output;\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawTransform/rawTransformAsync.ts\nfunction rawTransformAsync(action) {\n  return {\n    kind: \"transformation\",\n    type: \"raw_transform\",\n    reference: rawTransformAsync,\n    async: true,\n    async _run(dataset, config2) {\n      const output = await action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info),\n        NEVER: null\n      });\n      if (dataset.issues) {\n        dataset.typed = false;\n      } else {\n        dataset.value = output;\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/readonly/readonly.ts\nfunction readonly() {\n  return {\n    kind: \"transformation\",\n    type: \"readonly\",\n    reference: readonly,\n    async: false,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/reduceItems/reduceItems.ts\nfunction reduceItems(operation, initial) {\n  return {\n    kind: \"transformation\",\n    type: \"reduce_items\",\n    reference: reduceItems,\n    async: false,\n    operation,\n    initial,\n    _run(dataset) {\n      dataset.value = dataset.value.reduce(this.operation, this.initial);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/regex/regex.ts\nfunction regex(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"regex\",\n    reference: regex,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"format\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/safeInteger/safeInteger.ts\nfunction safeInteger(message) {\n  return {\n    kind: \"validation\",\n    type: \"safe_integer\",\n    reference: safeInteger,\n    async: false,\n    expects: null,\n    requirement: Number.isSafeInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"safe integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/size/size.ts\nfunction size(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"size\",\n    reference: size,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size !== this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/someItem/someItem.ts\nfunction someItem(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"some_item\",\n    reference: someItem,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.some(this.requirement)) {\n        _addIssue(this, \"item\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/sortItems/sortItems.ts\nfunction sortItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"sort_items\",\n    reference: sortItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.sort(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/startsWith/startsWith.ts\nfunction startsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"starts_with\",\n    reference: startsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.startsWith(this.requirement)) {\n        _addIssue(this, \"start\", dataset, config2, {\n          received: `\"${dataset.value.slice(0, this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/title/title.ts\nfunction title(title_) {\n  return {\n    kind: \"metadata\",\n    type: \"title\",\n    reference: title,\n    title: title_\n  };\n}\n\n// src/actions/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_lower_case\",\n    reference: toLowerCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toLowerCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_max_value\",\n    reference: toMaxValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value > this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_min_value\",\n    reference: toMinValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value < this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_upper_case\",\n    reference: toUpperCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toUpperCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transform.ts\nfunction transform(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transform,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = this.operation(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transformAsync.ts\nfunction transformAsync(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transformAsync,\n    async: true,\n    operation,\n    async _run(dataset) {\n      dataset.value = await this.operation(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trim/trim.ts\nfunction trim() {\n  return {\n    kind: \"transformation\",\n    type: \"trim\",\n    reference: trim,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trim();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimEnd/trimEnd.ts\nfunction trimEnd() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_end\",\n    reference: trimEnd,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimEnd();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimStart/trimStart.ts\nfunction trimStart() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_start\",\n    reference: trimStart,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimStart();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ulid/ulid.ts\nfunction ulid(message) {\n  return {\n    kind: \"validation\",\n    type: \"ulid\",\n    reference: ulid,\n    async: false,\n    expects: null,\n    requirement: ULID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"ULID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/url/url.ts\nfunction url(message) {\n  return {\n    kind: \"validation\",\n    type: \"url\",\n    reference: url,\n    async: false,\n    expects: null,\n    requirement(input) {\n      try {\n        new URL(input);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"URL\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/uuid/uuid.ts\nfunction uuid(message) {\n  return {\n    kind: \"validation\",\n    type: \"uuid\",\n    reference: uuid,\n    async: false,\n    expects: null,\n    requirement: UUID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"UUID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/value/value.ts\nfunction value(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"value\",\n    reference: value,\n    async: false,\n    expects: requirement instanceof Date ? requirement.toJSON() : _stringify(requirement),\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !(this.requirement <= dataset.value && this.requirement >= dataset.value)) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/config/config.ts\nfunction config(schema, config2) {\n  return {\n    ...schema,\n    _run(dataset, config_) {\n      return schema._run(dataset, { ...config_, ...config2 });\n    }\n  };\n}\n\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, dataset, config2) {\n  return typeof schema.fallback === \"function\" ? (\n    // @ts-expect-error\n    schema.fallback(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.fallback\n  );\n}\n\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    _run(dataset, config2) {\n      const outputDataset = schema._run(dataset, config2);\n      return outputDataset.issues ? { typed: true, value: getFallback(this, outputDataset, config2) } : outputDataset;\n    }\n  };\n}\n\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    async: true,\n    async _run(dataset, config2) {\n      const outputDataset = await schema._run(dataset, config2);\n      return outputDataset.issues ? (\n        // @ts-expect-error\n        { typed: true, value: await getFallback(this, outputDataset, config2) }\n      ) : outputDataset;\n    }\n  };\n}\n\n// src/methods/flatten/flatten.ts\nfunction flatten(issues) {\n  const flatErrors = {};\n  for (const issue of issues) {\n    if (issue.path) {\n      const dotPath = getDotPath(issue);\n      if (dotPath) {\n        if (!flatErrors.nested) {\n          flatErrors.nested = {};\n        }\n        if (flatErrors.nested[dotPath]) {\n          flatErrors.nested[dotPath].push(issue.message);\n        } else {\n          flatErrors.nested[dotPath] = [issue.message];\n        }\n      } else {\n        if (flatErrors.other) {\n          flatErrors.other.push(issue.message);\n        } else {\n          flatErrors.other = [issue.message];\n        }\n      }\n    } else {\n      if (flatErrors.root) {\n        flatErrors.root.push(issue.message);\n      } else {\n        flatErrors.root = [issue.message];\n      }\n    }\n  }\n  return flatErrors;\n}\n\n// src/methods/forward/forward.ts\nfunction forward(action, pathKeys) {\n  return {\n    ...action,\n    _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/forward/forwardAsync.ts\nfunction forwardAsync(action, pathKeys) {\n  return {\n    ...action,\n    async: true,\n    async _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      await action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema, dataset, config2) {\n  return typeof schema.default === \"function\" ? (\n    // @ts-expect-error\n    schema.default(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.default\n  );\n}\n\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getDefaults(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getDefaults);\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getDefaultsAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getDefaultsAsync));\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getFallbacks(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getFallbacks);\n  }\n  return getFallback(schema);\n}\n\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getFallbacksAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getFallbacksAsync));\n  }\n  return getFallback(schema);\n}\n\n// src/methods/is/is.ts\nfunction is(schema, input) {\n  return !schema._run({ typed: false, value: input }, { abortEarly: true }).issues;\n}\n\n// src/schemas/any/any.ts\nfunction any() {\n  return {\n    kind: \"schema\",\n    type: \"any\",\n    reference: any,\n    expects: \"any\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/array.ts\nfunction array(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: array,\n    expects: \"Array\",\n    async: false,\n    item,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < input.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.item._run({ typed: false, value: value2 }, config2);\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: arrayAsync,\n    expects: \"Array\",\n    async: true,\n    item,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          input.map((value2) => this.item._run({ typed: false, value: value2 }, config2))\n        );\n        for (let key = 0; key < itemDatasets.length; key++) {\n          const itemDataset = itemDatasets[key];\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: input[key]\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/bigint/bigint.ts\nfunction bigint(message) {\n  return {\n    kind: \"schema\",\n    type: \"bigint\",\n    reference: bigint,\n    expects: \"bigint\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"bigint\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/blob/blob.ts\nfunction blob(message) {\n  return {\n    kind: \"schema\",\n    type: \"blob\",\n    reference: blob,\n    expects: \"Blob\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Blob) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/boolean/boolean.ts\nfunction boolean(message) {\n  return {\n    kind: \"schema\",\n    type: \"boolean\",\n    reference: boolean,\n    expects: \"boolean\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"boolean\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/custom.ts\nfunction custom(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: custom,\n    expects: \"unknown\",\n    async: false,\n    check: check2,\n    message,\n    _run(dataset, config2) {\n      if (this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/customAsync.ts\nfunction customAsync(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: customAsync,\n    expects: \"unknown\",\n    async: true,\n    check: check2,\n    message,\n    async _run(dataset, config2) {\n      if (await this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/date/date.ts\nfunction date(message) {\n  return {\n    kind: \"schema\",\n    type: \"date\",\n    reference: date,\n    expects: \"Date\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Date) {\n        if (!isNaN(dataset.value)) {\n          dataset.typed = true;\n        } else {\n          _addIssue(this, \"type\", dataset, config2, {\n            received: '\"Invalid Date\"'\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/enum/enum.ts\nfunction enum_(enum__, message) {\n  const options = Object.entries(enum__).filter(([key]) => isNaN(+key)).map(([, value2]) => value2);\n  return {\n    kind: \"schema\",\n    type: \"enum\",\n    reference: enum_,\n    expects: _joinExpects(options.map(_stringify), \"|\"),\n    async: false,\n    enum: enum__,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/file/file.ts\nfunction file(message) {\n  return {\n    kind: \"schema\",\n    type: \"file\",\n    reference: file,\n    expects: \"File\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof File) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/function/function.ts\nfunction function_(message) {\n  return {\n    kind: \"schema\",\n    type: \"function\",\n    reference: function_,\n    expects: \"Function\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"function\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/instance/instance.ts\nfunction instance(class_, message) {\n  return {\n    kind: \"schema\",\n    type: \"instance\",\n    reference: instance,\n    expects: class_.name,\n    async: false,\n    class: class_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof this.class) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/utils/_merge/_merge.ts\nfunction _merge(value1, value2) {\n  if (typeof value1 === typeof value2) {\n    if (value1 === value2 || value1 instanceof Date && value2 instanceof Date && +value1 === +value2) {\n      return { value: value1 };\n    }\n    if (value1 && value2 && value1.constructor === Object && value2.constructor === Object) {\n      for (const key in value2) {\n        if (key in value1) {\n          const dataset = _merge(value1[key], value2[key]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[key] = dataset.value;\n        } else {\n          value1[key] = value2[key];\n        }\n      }\n      return { value: value1 };\n    }\n    if (Array.isArray(value1) && Array.isArray(value2)) {\n      if (value1.length === value2.length) {\n        for (let index = 0; index < value1.length; index++) {\n          const dataset = _merge(value1[index], value2[index]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[index] = dataset.value;\n        }\n        return { value: value1 };\n      }\n    }\n  }\n  return { issue: true };\n}\n\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersect,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"&\"\n    ),\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        for (const schema of this.options) {\n          const optionDataset = schema._run(\n            { typed: false, value: input },\n            config2\n          );\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/intersectAsync.ts\nfunction intersectAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersectAsync,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"&\"\n    ),\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        const optionDatasets = await Promise.all(\n          this.options.map(\n            (schema) => schema._run({ typed: false, value: input }, config2)\n          )\n        );\n        for (const optionDataset of optionDatasets) {\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/lazy/lazy.ts\nfunction lazy(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazy,\n    expects: \"unknown\",\n    async: false,\n    getter,\n    _run(dataset, config2) {\n      return this.getter(dataset.value)._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/lazy/lazyAsync.ts\nfunction lazyAsync(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazyAsync,\n    expects: \"unknown\",\n    async: true,\n    getter,\n    async _run(dataset, config2) {\n      return (await this.getter(dataset.value))._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/literal/literal.ts\nfunction literal(literal_, message) {\n  return {\n    kind: \"schema\",\n    type: \"literal\",\n    reference: literal,\n    expects: _stringify(literal_),\n    async: false,\n    literal: literal_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === this.literal) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObject.ts\nfunction looseObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObjectAsync.ts\nfunction looseObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTuple.ts\nfunction looseTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTupleAsync.ts\nfunction looseTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/map.ts\nfunction map(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: map,\n    expects: \"Map\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        for (const [inputKey, inputValue] of input) {\n          const keyDataset = this.key._run(\n            { typed: false, value: inputKey },\n            config2\n          );\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: mapAsync,\n    expects: \"Map\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        const datasets = await Promise.all(\n          [...input].map(\n            ([inputKey, inputValue]) => Promise.all([\n              inputKey,\n              inputValue,\n              this.key._run({ typed: false, value: inputKey }, config2),\n              this.value._run({ typed: false, value: inputValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          inputKey,\n          inputValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nan/nan.ts\nfunction nan(message) {\n  return {\n    kind: \"schema\",\n    type: \"nan\",\n    reference: nan,\n    expects: \"NaN\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (Number.isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/never/never.ts\nfunction never(message) {\n  return {\n    kind: \"schema\",\n    type: \"never\",\n    reference: never,\n    expects: \"never\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      _addIssue(this, \"type\", dataset, config2);\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullable,\n    expects: \"!null\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullableAsync,\n    expects: \"!null\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullish,\n    expects: \"(!null & !undefined)\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullishAsync,\n    expects: \"(!null & !undefined)\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptional,\n    expects: \"!undefined\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptionalAsync,\n    expects: \"!undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/null/null.ts\nfunction null_(message) {\n  return {\n    kind: \"schema\",\n    type: \"null\",\n    reference: null_,\n    expects: \"null\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullable,\n    expects: `(${wrapped.expects} | null)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullableAsync,\n    expects: `(${wrapped.expects} | null)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullish,\n    expects: `(${wrapped.expects} | null | undefined)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullishAsync,\n    expects: `(${wrapped.expects} | null | undefined)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/number/number.ts\nfunction number(message) {\n  return {\n    kind: \"schema\",\n    type: \"number\",\n    reference: number,\n    expects: \"number\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"number\" && !isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/object.ts\nfunction object(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: object,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: objectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRest.ts\nfunction objectWithRest(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRest,\n    expects: \"Object\",\n    async: false,\n    entries,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              const value2 = input[key];\n              const valueDataset = this.rest._run(\n                { typed: false, value: value2 },\n                config2\n              );\n              if (valueDataset.issues) {\n                const pathItem = {\n                  type: \"object\",\n                  origin: \"value\",\n                  input,\n                  key,\n                  value: value2\n                };\n                for (const issue of valueDataset.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  dataset.issues?.push(issue);\n                }\n                if (!dataset.issues) {\n                  dataset.issues = valueDataset.issues;\n                }\n                if (config2.abortEarly) {\n                  dataset.typed = false;\n                  break;\n                }\n              }\n              if (!valueDataset.typed) {\n                dataset.typed = false;\n              }\n              dataset.value[key] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRestAsync.ts\nfunction objectWithRestAsync(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRestAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal entry\n          // Hint: We do not distinguish between missing and `undefined` entries.\n          // The reason for this decision is that it reduces the bundle size, and\n          // we also expect that most users will expect this behavior.\n          Promise.all(\n            Object.entries(this.entries).map(async ([key, schema]) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await schema._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other entries with rest schema\n          // Hint: We exclude specific keys for security reasons\n          Promise.all(\n            Object.entries(input).filter(\n              ([key]) => _isValidObjectKey(input, key) && !(key in this.entries)\n            ).map(\n              async ([key, value2]) => [\n                key,\n                value2,\n                await this.rest._run({ typed: false, value: value2 }, config2)\n              ]\n            )\n          )\n        ]);\n        for (const [key, value2, valueDataset] of normalDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, valueDataset] of restDatasets) {\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!valueDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optional,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optionalAsync,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"picklist\",\n    reference: picklist,\n    expects: _joinExpects(options.map(_stringify), \"|\"),\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/promise/promise.ts\nfunction promise(message) {\n  return {\n    kind: \"schema\",\n    type: \"promise\",\n    reference: promise,\n    expects: \"Promise\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Promise) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/record.ts\nfunction record(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: record,\n    expects: \"Object\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const entryKey in input) {\n          if (_isValidObjectKey(input, entryKey)) {\n            const entryValue = input[entryKey];\n            const keyDataset = this.key._run(\n              { typed: false, value: entryKey },\n              config2\n            );\n            if (keyDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"key\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of keyDataset.issues) {\n                issue.path = [pathItem];\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = keyDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            const valueDataset = this.value._run(\n              { typed: false, value: entryValue },\n              config2\n            );\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"value\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!keyDataset.typed || !valueDataset.typed) {\n              dataset.typed = false;\n            }\n            if (keyDataset.typed) {\n              dataset.value[keyDataset.value] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: recordAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const datasets = await Promise.all(\n          Object.entries(input).filter(([key2]) => _isValidObjectKey(input, key2)).map(\n            ([entryKey, entryValue]) => Promise.all([\n              entryKey,\n              entryValue,\n              this.key._run({ typed: false, value: entryKey }, config2),\n              this.value._run({ typed: false, value: entryValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          entryKey,\n          entryValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"key\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of keyDataset.issues) {\n              issue.path = [pathItem];\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (keyDataset.typed) {\n            dataset.value[keyDataset.value] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/set.ts\nfunction set(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: set,\n    expects: \"Set\",\n    async: false,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        for (const inputValue of input) {\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key: null,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: setAsync,\n    expects: \"Set\",\n    async: true,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        const valueDatasets = await Promise.all(\n          [...input].map(\n            async (inputValue) => [\n              inputValue,\n              await this.value._run(\n                { typed: false, value: inputValue },\n                config2\n              )\n            ]\n          )\n        );\n        for (const [inputValue, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key: null,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObject.ts\nfunction strictObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObjectAsync.ts\nfunction strictObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTuple.ts\nfunction strictTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key: this.items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTupleAsync.ts\nfunction strictTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key: this.items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/string/string.ts\nfunction string(message) {\n  return {\n    kind: \"schema\",\n    type: \"string\",\n    reference: string,\n    expects: \"string\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"string\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/symbol/symbol.ts\nfunction symbol(message) {\n  return {\n    kind: \"schema\",\n    type: \"symbol\",\n    reference: symbol,\n    expects: \"symbol\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"symbol\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRest.ts\nfunction tupleWithRest(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRest,\n    expects: \"Array\",\n    async: false,\n    items,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            const value2 = input[key];\n            const itemDataset = this.rest._run({ typed: false, value: value2 }, config2);\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRestAsync.ts\nfunction tupleWithRestAsync(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRestAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal item\n          Promise.all(\n            this.items.map(async (item, key) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await item._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other items with rest schema\n          Promise.all(\n            input.slice(this.items.length).map(async (value2, key) => {\n              return [\n                key + this.items.length,\n                value2,\n                await this.rest._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          )\n        ]);\n        for (const [key, value2, itemDataset] of normalDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, itemDataset] of restDatasets) {\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message) {\n  return {\n    kind: \"schema\",\n    type: \"undefined\",\n    reference: undefined_,\n    expects: \"undefined\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/undefinedable/undefinedable.ts\nfunction undefinedable(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"undefinedable\",\n    reference: undefinedable,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/undefinedable/undefinedableAsync.ts\nfunction undefinedableAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"undefinedable\",\n    reference: undefinedableAsync,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/union/utils/_subIssues/_subIssues.ts\nfunction _subIssues(datasets) {\n  let issues;\n  if (datasets) {\n    for (const dataset of datasets) {\n      if (issues) {\n        issues.push(...dataset.issues);\n      } else {\n        issues = dataset.issues;\n      }\n    }\n  }\n  return issues;\n}\n\n// src/schemas/union/union.ts\nfunction union(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: union,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"|\"\n    ),\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: unionAsync,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"|\"\n    ),\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = await schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/unknown/unknown.ts\nfunction unknown() {\n  return {\n    kind: \"schema\",\n    type: \"unknown\",\n    reference: unknown,\n    expects: \"unknown\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/variant.ts\nfunction variant(key, options, message) {\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variant,\n    expects: \"Object\",\n    async: false,\n    key,\n    options,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        let outputDataset;\n        let maxDiscriminatorPriority = 0;\n        let invalidDiscriminatorKey = this.key;\n        let expectedDiscriminators = [];\n        const parseOptions = (variant2, allKeys) => {\n          for (const schema of variant2.options) {\n            if (schema.type === \"variant\") {\n              parseOptions(schema, new Set(allKeys).add(schema.key));\n            } else {\n              let keysAreValid = true;\n              let currentPriority = 0;\n              for (const currentKey of allKeys) {\n                if (schema.entries[currentKey]._run(\n                  // @ts-expect-error\n                  { typed: false, value: input[currentKey] },\n                  config2\n                ).issues) {\n                  keysAreValid = false;\n                  if (invalidDiscriminatorKey !== currentKey && (maxDiscriminatorPriority < currentPriority || maxDiscriminatorPriority === currentPriority && currentKey in input && !(invalidDiscriminatorKey in input))) {\n                    maxDiscriminatorPriority = currentPriority;\n                    invalidDiscriminatorKey = currentKey;\n                    expectedDiscriminators = [];\n                  }\n                  if (invalidDiscriminatorKey === currentKey) {\n                    expectedDiscriminators.push(\n                      schema.entries[currentKey].expects\n                    );\n                  }\n                  break;\n                }\n                currentPriority++;\n              }\n              if (keysAreValid) {\n                const optionDataset = schema._run(\n                  { typed: false, value: input },\n                  config2\n                );\n                if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                  outputDataset = optionDataset;\n                }\n              }\n            }\n            if (outputDataset && !outputDataset.issues) {\n              break;\n            }\n          }\n        };\n        parseOptions(this, /* @__PURE__ */ new Set([this.key]));\n        if (outputDataset) {\n          return outputDataset;\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          // @ts-expect-error\n          input: input[invalidDiscriminatorKey],\n          expected: _joinExpects(expectedDiscriminators, \"|\"),\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: invalidDiscriminatorKey,\n              // @ts-expect-error\n              value: input[invalidDiscriminatorKey]\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, message) {\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variantAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    options,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        let outputDataset;\n        let maxDiscriminatorPriority = 0;\n        let invalidDiscriminatorKey = this.key;\n        let expectedDiscriminators = [];\n        const parseOptions = async (variant2, allKeys) => {\n          for (const schema of variant2.options) {\n            if (schema.type === \"variant\") {\n              await parseOptions(schema, new Set(allKeys).add(schema.key));\n            } else {\n              let keysAreValid = true;\n              let currentPriority = 0;\n              for (const currentKey of allKeys) {\n                if ((await schema.entries[currentKey]._run(\n                  // @ts-expect-error\n                  { typed: false, value: input[currentKey] },\n                  config2\n                )).issues) {\n                  keysAreValid = false;\n                  if (invalidDiscriminatorKey !== currentKey && (maxDiscriminatorPriority < currentPriority || maxDiscriminatorPriority === currentPriority && currentKey in input && !(invalidDiscriminatorKey in input))) {\n                    maxDiscriminatorPriority = currentPriority;\n                    invalidDiscriminatorKey = currentKey;\n                    expectedDiscriminators = [];\n                  }\n                  if (invalidDiscriminatorKey === currentKey) {\n                    expectedDiscriminators.push(\n                      schema.entries[currentKey].expects\n                    );\n                  }\n                  break;\n                }\n                currentPriority++;\n              }\n              if (keysAreValid) {\n                const optionDataset = await schema._run(\n                  { typed: false, value: input },\n                  config2\n                );\n                if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                  outputDataset = optionDataset;\n                }\n              }\n            }\n            if (outputDataset && !outputDataset.issues) {\n              break;\n            }\n          }\n        };\n        await parseOptions(this, /* @__PURE__ */ new Set([this.key]));\n        if (outputDataset) {\n          return outputDataset;\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          // @ts-expect-error\n          input: input[invalidDiscriminatorKey],\n          expected: _joinExpects(expectedDiscriminators, \"|\"),\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: invalidDiscriminatorKey,\n              // @ts-expect-error\n              value: input[invalidDiscriminatorKey]\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/void/void.ts\nfunction void_(message) {\n  return {\n    kind: \"schema\",\n    type: \"void\",\n    reference: void_,\n    expects: \"void\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/keyof/keyof.ts\nfunction keyof(schema, message) {\n  return picklist(Object.keys(schema.entries), message);\n}\n\n// src/methods/omit/omit.ts\nfunction omit(schema, keys) {\n  const entries = {\n    ...schema.entries\n  };\n  for (const key of keys) {\n    delete entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/parse/parse.ts\nfunction parse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parser/parser.ts\nfunction parser(schema, config2) {\n  const func = (input) => parse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/parser/parserAsync.ts\nfunction parserAsync(schema, config2) {\n  const func = (input) => parseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/partial/partial.ts\nfunction partial(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optional(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optionalAsync(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pick/pick.ts\nfunction pick(schema, keys) {\n  const entries = {};\n  for (const key of keys) {\n    entries[key] = schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pipe/pipe.ts\nfunction pipe(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    _run(dataset, config2) {\n      for (const item of pipe2) {\n        if (item.kind !== \"metadata\") {\n          if (dataset.issues && (item.kind === \"schema\" || item.kind === \"transformation\")) {\n            dataset.typed = false;\n            break;\n          }\n          if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {\n            dataset = item._run(dataset, config2);\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/pipe/pipeAsync.ts\nfunction pipeAsync(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    async: true,\n    async _run(dataset, config2) {\n      for (const item of pipe2) {\n        if (item.kind !== \"metadata\") {\n          if (dataset.issues && (item.kind === \"schema\" || item.kind === \"transformation\")) {\n            dataset.typed = false;\n            break;\n          }\n          if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {\n            dataset = await item._run(dataset, config2);\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptional(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptionalAsync(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParser/safeParser.ts\nfunction safeParser(schema, config2) {\n  const func = (input) => safeParse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/safeParser/safeParserAsync.ts\nfunction safeParserAsync(schema, config2) {\n  const func = (input) => safeParseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n  return schema.wrapped;\n}\nexport {\n  BASE64_REGEX,\n  BIC_REGEX,\n  CUID2_REGEX,\n  DECIMAL_REGEX,\n  DIGITS_REGEX,\n  EMAIL_REGEX,\n  EMOJI_REGEX,\n  HEXADECIMAL_REGEX,\n  HEX_COLOR_REGEX,\n  IMEI_REGEX,\n  IPV4_REGEX,\n  IPV6_REGEX,\n  IP_REGEX,\n  ISO_DATE_REGEX,\n  ISO_DATE_TIME_REGEX,\n  ISO_TIMESTAMP_REGEX,\n  ISO_TIME_REGEX,\n  ISO_TIME_SECOND_REGEX,\n  ISO_WEEK_REGEX,\n  MAC48_REGEX,\n  MAC64_REGEX,\n  MAC_REGEX,\n  NANO_ID_REGEX,\n  OCTAL_REGEX,\n  ULID_REGEX,\n  UUID_REGEX,\n  ValiError,\n  _addIssue,\n  _isLuhnAlgo,\n  _isValidObjectKey,\n  _joinExpects,\n  _stringify,\n  any,\n  array,\n  arrayAsync,\n  awaitAsync,\n  base64,\n  bic,\n  bigint,\n  blob,\n  boolean,\n  brand,\n  bytes,\n  check,\n  checkAsync,\n  checkItems,\n  config,\n  creditCard,\n  cuid2,\n  custom,\n  customAsync,\n  date,\n  decimal,\n  deleteGlobalConfig,\n  deleteGlobalMessage,\n  deleteSchemaMessage,\n  deleteSpecificMessage,\n  description,\n  digits,\n  email,\n  emoji,\n  empty,\n  endsWith,\n  entriesFromList,\n  enum_ as enum,\n  enum_,\n  everyItem,\n  excludes,\n  fallback,\n  fallbackAsync,\n  file,\n  filterItems,\n  findItem,\n  finite,\n  flatten,\n  forward,\n  forwardAsync,\n  function_ as function,\n  function_,\n  getDefault,\n  getDefaults,\n  getDefaultsAsync,\n  getDotPath,\n  getFallback,\n  getFallbacks,\n  getFallbacksAsync,\n  getGlobalConfig,\n  getGlobalMessage,\n  getSchemaMessage,\n  getSpecificMessage,\n  hash,\n  hexColor,\n  hexadecimal,\n  imei,\n  includes,\n  instance,\n  integer,\n  intersect,\n  intersectAsync,\n  ip,\n  ipv4,\n  ipv6,\n  is,\n  isOfKind,\n  isOfType,\n  isValiError,\n  isoDate,\n  isoDateTime,\n  isoTime,\n  isoTimeSecond,\n  isoTimestamp,\n  isoWeek,\n  keyof,\n  lazy,\n  lazyAsync,\n  length,\n  literal,\n  looseObject,\n  looseObjectAsync,\n  looseTuple,\n  looseTupleAsync,\n  mac,\n  mac48,\n  mac64,\n  map,\n  mapAsync,\n  mapItems,\n  maxBytes,\n  maxLength,\n  maxSize,\n  maxValue,\n  metadata,\n  mimeType,\n  minBytes,\n  minLength,\n  minSize,\n  minValue,\n  multipleOf,\n  nan,\n  nanoid,\n  never,\n  nonEmpty,\n  nonNullable,\n  nonNullableAsync,\n  nonNullish,\n  nonNullishAsync,\n  nonOptional,\n  nonOptionalAsync,\n  normalize,\n  notBytes,\n  notLength,\n  notSize,\n  notValue,\n  null_ as null,\n  null_,\n  nullable,\n  nullableAsync,\n  nullish,\n  nullishAsync,\n  number,\n  object,\n  objectAsync,\n  objectWithRest,\n  objectWithRestAsync,\n  octal,\n  omit,\n  optional,\n  optionalAsync,\n  parse,\n  parseAsync,\n  parser,\n  parserAsync,\n  partial,\n  partialAsync,\n  partialCheck,\n  partialCheckAsync,\n  pick,\n  picklist,\n  pipe,\n  pipeAsync,\n  promise,\n  rawCheck,\n  rawCheckAsync,\n  rawTransform,\n  rawTransformAsync,\n  readonly,\n  record,\n  recordAsync,\n  reduceItems,\n  regex,\n  required,\n  requiredAsync,\n  safeInteger,\n  safeParse,\n  safeParseAsync,\n  safeParser,\n  safeParserAsync,\n  set,\n  setAsync,\n  setGlobalConfig,\n  setGlobalMessage,\n  setSchemaMessage,\n  setSpecificMessage,\n  size,\n  someItem,\n  sortItems,\n  startsWith,\n  strictObject,\n  strictObjectAsync,\n  strictTuple,\n  strictTupleAsync,\n  string,\n  symbol,\n  title,\n  toLowerCase,\n  toMaxValue,\n  toMinValue,\n  toUpperCase,\n  transform,\n  transformAsync,\n  trim,\n  trimEnd,\n  trimStart,\n  tuple,\n  tupleAsync,\n  tupleWithRest,\n  tupleWithRestAsync,\n  ulid,\n  undefined_ as undefined,\n  undefined_,\n  undefinedable,\n  undefinedableAsync,\n  union,\n  unionAsync,\n  unknown,\n  unwrap,\n  url,\n  uuid,\n  value,\n  variant,\n  variantAsync,\n  void_ as void,\n  void_\n};\n","function isFunction(value: unknown): value is () => unknown {\n  return typeof value === 'function';\n}\n\nexport default function resolveFunctionOrReturnValue<T>(\n  fnOrValue: (() => Promise<T> | T) | Promise<T> | T\n): Promise<T> | T {\n  return isFunction(fnOrValue) ? fnOrValue() : fnOrValue;\n}\n","// We are only importing what we need.\n\nimport {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk';\n\nexport default {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n};\n","import { type InferOutput, intersect, object, optional, pipe, readonly, string, undefined_, union } from 'valibot';\n\nconst credentialsSchema = pipe(\n  intersect([\n    union(\n      [\n        object({\n          authorizationToken: string(),\n          subscriptionKey: optional(undefined_('\"subscriptionKey\" must be unset when \"authorizationToken\" is set.'))\n        }),\n        object({\n          authorizationToken: optional(undefined_('\"authorizationToken\" must be unset when \"subscriptionKey\" is set.')),\n          subscriptionKey: string()\n        })\n      ],\n      'The object must either have either \"authorizationToken\" or \"subscriptionKey\" set, but not both.'\n    ),\n    union(\n      [\n        object({\n          customVoiceHostname: optional(undefined_('\"customVoiceHostname\" must be unest when \"region\" is set.')),\n          region: string(),\n          speechRecognitionHostname: optional(\n            undefined_('\"speechRecognitionHostname\" must be unest when \"region\" is set.')\n          ),\n          speechSynthesisHostname: optional(undefined_('\"speechSynthesisHostname\" must be unest when \"region\" is set.'))\n        }),\n        object({\n          customVoiceHostname: optional(union([string(), undefined_()])),\n          region: optional(undefined_('\"region\" must be unset when \"*Hostname\" is set.')),\n          speechRecognitionHostname: string(),\n          speechSynthesisHostname: string()\n        })\n      ],\n      'The object must either have either \"region\" or \"*Hostname\" set, but not both.'\n    )\n  ]),\n  readonly()\n);\n\nexport default credentialsSchema;\n\nexport type Credentials = InferOutput<typeof credentialsSchema>;\n","import { boolean, type InferOutput, optional } from 'valibot';\n\nconst enableTelemetrySchema = optional(boolean());\n\nexport type EnableTelemetry = InferOutput<typeof enableTelemetrySchema>;\n\nexport default enableTelemetrySchema;\n","import { type InferOutput, maxValue, minValue, number, optional, pipe } from 'valibot';\n\n// 60_000 is an arbitrary value, we can set it to a larger number.\nconst initialSilenceTimeoutSchema = optional(pipe(number(), minValue(1), maxValue(60_000)));\n\nexport type InitialSilenceTimeout = InferOutput<typeof initialSilenceTimeoutSchema>;\n\nexport default initialSilenceTimeoutSchema;\n","import { type InferOutput, boolean, optional } from 'valibot';\n\nconst looseEventsSchema = optional(boolean(), false);\n\nexport type LooseEvents = InferOutput<typeof looseEventsSchema>;\n\nexport default looseEventsSchema;\n","import { array, type InferOutput, optional, pipe, string, transform } from 'valibot';\n\nconst referenceGrammarsSchema = pipe(\n  optional(array(string()), []),\n  // any(),\n  // array(string()),\n  // transform<string[], readonly string[]>(value => (Object.isFrozen(value) ? value : Object.freeze([...value])))\n  transform<string[], readonly string[]>(value => (Object.isFrozen(value) ? value : Object.freeze([...value])))\n);\n\nexport type ReferenceGrammars = InferOutput<typeof referenceGrammarsSchema>;\n\nexport default referenceGrammarsSchema;\n","import { type InferOutput, optional, string } from 'valibot';\n\nconst speechRecognitionEndpointIdSchema = optional(string());\n\nexport type SpeechRecognitionEndpointId = InferOutput<typeof speechRecognitionEndpointIdSchema>;\n\nexport default speechRecognitionEndpointIdSchema;\n","import { type InferOutput, enum_, optional } from 'valibot';\n\nconst textNormalizationSchema = optional(\n  enum_({\n    display: 'display',\n    itn: 'itn',\n    lexical: 'lexical',\n    maskeditn: 'maskeditn'\n  }),\n  'display'\n);\n\nexport type TextNormalization = InferOutput<typeof textNormalizationSchema>;\n\nexport default textNormalizationSchema;\n","import { type AudioConfig as AudioConfigType } from 'microsoft-cognitiveservices-speech-sdk';\nimport { parse } from 'valibot';\n\nimport resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\nimport SpeechSDK from './SpeechSDK';\nimport credentialsSchema, { type Credentials } from './SpeechToText/validation/credentialsSchema';\nimport enableTelemetrySchema, { EnableTelemetry } from './SpeechToText/validation/enableTelemetrySchema';\nimport initialSilenceTimeoutSchema, {\n  InitialSilenceTimeout\n} from './SpeechToText/validation/initialSilenceTimeoutSchema';\nimport looseEventsSchema, { LooseEvents } from './SpeechToText/validation/looseEventsSchema';\nimport referenceGrammarsSchema, { ReferenceGrammars } from './SpeechToText/validation/referenceGrammarsSchema';\nimport speechRecognitionEndpointIdSchema, {\n  SpeechRecognitionEndpointId\n} from './SpeechToText/validation/speechRecognitionEndpointIdSchema';\nimport textNormalizationSchema, { TextNormalization } from './SpeechToText/validation/textNormalizationSchema';\n\nconst { AudioConfig } = SpeechSDK;\n\nlet shouldWarnOnSubscriptionKey = true;\n\ntype PatchOptionsInit = {\n  audioConfig?: AudioConfigType | undefined;\n  credentials: (() => Credentials | Promise<Credentials>) | Credentials | Promise<Credentials>;\n  enableTelemetry?: boolean | undefined;\n  initialSilenceTimeout?: number | undefined;\n  looseEvent?: boolean | undefined;\n  looseEvents?: boolean | undefined;\n  referenceGrammars?: readonly string[] | undefined;\n  speechRecognitionEndpointId?: string | undefined;\n  textNormalization?: 'display' | 'itn' | 'lexical' | 'maskeditn' | undefined;\n};\n\ntype PatchedOptions = Readonly<{\n  audioConfig: AudioConfigType;\n  enableTelemetry: EnableTelemetry;\n  fetchCredentials: () => Promise<Credentials>;\n  initialSilenceTimeout: InitialSilenceTimeout;\n  looseEvents: LooseEvents;\n  referenceGrammars: ReferenceGrammars;\n  speechRecognitionEndpointId: SpeechRecognitionEndpointId;\n  textNormalization: TextNormalization;\n}>;\n\nexport default function patchOptions(init: PatchOptionsInit): PatchedOptions {\n  const {\n    audioConfig,\n    credentials,\n    enableTelemetry,\n    initialSilenceTimeout,\n    looseEvent,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization\n  } = init;\n\n  let { looseEvents } = init;\n\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  return Object.freeze({\n    audioConfig: audioConfig || AudioConfig.fromDefaultMicrophoneInput(),\n    // We set telemetry to true to honor the default telemetry settings of Speech SDK\n    // https://github.com/Microsoft/cognitive-services-speech-sdk-js#data--telemetry\n    enableTelemetry: parse(enableTelemetrySchema, enableTelemetry),\n    fetchCredentials: async () => {\n      const parsedCredentials = parse(credentialsSchema, await resolveFunctionOrReturnValue<Credentials>(credentials));\n\n      if (shouldWarnOnSubscriptionKey && parsedCredentials.subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      return parsedCredentials;\n    },\n    initialSilenceTimeout: parse(initialSilenceTimeoutSchema, initialSilenceTimeout),\n    looseEvents: parse(looseEventsSchema, looseEvents),\n    referenceGrammars: parse(referenceGrammarsSchema, referenceGrammars),\n    speechRecognitionEndpointId: parse(speechRecognitionEndpointIdSchema, speechRecognitionEndpointId),\n    textNormalization: parse(textNormalizationSchema, textNormalization)\n  });\n}\n\nexport type { Credentials, PatchedOptions, PatchOptionsInit };\n","export default function pDefer() {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n}\n","import createDeferred from 'p-defer';\n\nexport default function () {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n","export type SpeechRecognitionAlternativeInit = {\n  confidence: number;\n  transcript: string;\n};\n\nexport default class SpeechRecognitionAlternative {\n  constructor({ confidence, transcript }: SpeechRecognitionAlternativeInit) {\n    this.#confidence = confidence;\n    this.#transcript = transcript;\n  }\n\n  #confidence: number;\n  #transcript: string;\n\n  get confidence() {\n    return this.#confidence;\n  }\n\n  get transcript() {\n    return this.#transcript;\n  }\n}\n","interface FakeArrayInterface<T> {\n  [index: number]: T | undefined;\n  get length(): number;\n}\n\nexport default class FakeArray<T> implements FakeArrayInterface<T> {\n  constructor(array: readonly T[]) {\n    if (!array) {\n      throw new Error('array must be set.');\n    }\n\n    this.#array = array;\n\n    for (const key in array) {\n      Object.defineProperty(this, key, {\n        enumerable: true,\n        get() {\n          return array[key];\n        }\n      });\n    }\n  }\n\n  #array: readonly T[];\n  [index: number]: T | undefined;\n  [Symbol.iterator]() {\n    return this.#array[Symbol.iterator]();\n  }\n\n  get length(): number {\n    return this.#array.length;\n  }\n}\n","import FakeArray from './private/FakeArray';\n\nexport type SpeechRecognitionResultInit = {\n  isFinal: boolean;\n  results: readonly SpeechRecognitionAlternative[];\n};\n\nexport default class SpeechRecognitionResult extends FakeArray<SpeechRecognitionAlternative> {\n  constructor(init: SpeechRecognitionResultInit) {\n    super(init.results);\n\n    this.#isFinal = init.isFinal;\n  }\n\n  #isFinal: boolean;\n\n  get isFinal(): boolean {\n    return this.#isFinal;\n  }\n}\n","import SpeechSDK from '../SpeechSDK';\n\nimport SpeechRecognitionAlternative from './SpeechRecognitionAlternative';\nimport SpeechRecognitionResult from './SpeechRecognitionResult';\nimport type { SerializedRecognitionResult } from './private/serializeRecognitionResult';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function (\n  result: SerializedRecognitionResult,\n  init?:\n    | {\n        maxAlternatives: number;\n        textNormalization: 'display' | 'itn' | 'lexical' | 'maskeditn';\n      }\n    | undefined\n): SpeechRecognitionResult {\n  const { maxAlternatives = Infinity, textNormalization = 'display' } = init || {};\n  const json: {\n    NBest: readonly {\n      Confidence: number;\n      Display: string;\n      ITN: string;\n      Lexical: string;\n      MaskedITN: string;\n    }[];\n  } = typeof result.json === 'string' ? JSON.parse(result.json) : result.json;\n\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !json.NBest)) {\n    return new SpeechRecognitionResult({\n      isFinal: result.reason === RecognizedSpeech,\n      results: [\n        new SpeechRecognitionAlternative({\n          confidence: 0.5,\n          transcript: result.text\n        })\n      ]\n    });\n  } else if (result.reason === RecognizedSpeech) {\n    return new SpeechRecognitionResult({\n      isFinal: true,\n      results: (json.NBest || []).slice(0, maxAlternatives).map(\n        ({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) =>\n          new SpeechRecognitionAlternative({\n            confidence,\n            transcript:\n              textNormalization === 'itn'\n                ? itn\n                : textNormalization === 'lexical'\n                  ? lexical\n                  : textNormalization === 'maskeditn'\n                    ? maskedITN\n                    : display\n          })\n      )\n    });\n  }\n\n  return new SpeechRecognitionResult({ isFinal: false, results: [] });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  T extends (resolve: (returnValue: R) => void, reject: (error: unknown) => void) => void = (\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): () => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  T extends (arg0: P0, resolve: (returnValue: R) => void, reject: (error: unknown) => void) => void = (\n    arg0: P0,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  P1 = any,\n  T extends (arg0: P0, arg1: P1, resolve: (returnValue: R) => void, reject: (error: unknown) => void) => void = (\n    arg0: P0,\n    arg1: P1,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0, arg1: P1) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  P1 = any,\n  P2 = any,\n  T extends (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void = (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0, arg1: P1, arg2: P2) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  P1 = any,\n  P2 = any,\n  P3 = any,\n  T extends (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    arg3: P3,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void = (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    arg3: P3,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0, arg1: P1, arg2: P2, arg3: P3) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  T extends (...args: any[]) => void = (...args: any[]) => void\n>(fn: T, context: undefined | unknown = undefined): (...args: Parameters<T>) => Promise<R> {\n  return (...args: Parameters<T>) =>\n    // eslint-disable-next-line prefer-spread\n    new Promise<R>((resolve, reject) => fn.apply(context, [...args, resolve, reject] as unknown as Parameters<T>));\n}\n","type EventListener<T> = (event: T) => void;\n\nexport default class EventListenerMap<T extends string, EventMap extends { [Name in T]: unknown }> {\n  constructor(eventTarget: EventTarget) {\n    this.#eventTarget = eventTarget;\n    this.#propertyMap = {};\n  }\n\n  #eventTarget: EventTarget;\n  #propertyMap: { [Name in keyof EventMap]?: EventListener<EventMap[Name]> | undefined };\n\n  getProperty<U extends T>(name: U): ((event: EventMap[U]) => void) | undefined {\n    return this.#propertyMap[name];\n  }\n\n  setProperty<U extends T>(name: U, value: ((event: EventMap[U]) => void) | undefined) {\n    const existing = this.#propertyMap[name];\n\n    existing && this.#eventTarget.removeEventListener(name, existing as EventListener<Event>);\n\n    if (value) {\n      this.#eventTarget.addEventListener(name, value as EventListener<Event>);\n    }\n\n    this.#propertyMap[name] = value;\n  }\n}\n","import { AudioSourceEvent } from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/AudioSourceEvents';\nimport {\n  type AudioConfig,\n  type AudioConfigImpl\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig';\nimport averageAmplitude from './averageAmplitude';\n\nexport default function prepareAudioConfig(audioConfig: AudioConfig) {\n  // Speech SDK also force cast AudioConfig to AudioConfigImpl and pass it to ServiceRecognizerBase to use attach() and other methods.\n  // https://github.com/microsoft/cognitive-services-speech-sdk-js/blob/a6e9d2a202534565ccc97650861a6b296de48ecf/src/sdk/SpeechRecognizer.ts#L291C27-L291C43\n  const audioConfigImpl = audioConfig as AudioConfigImpl;\n  const originalAttach = audioConfigImpl.attach;\n  const boundOriginalAttach = audioConfigImpl.attach.bind(audioConfigImpl);\n  let firstChunk = false;\n  let muted = false;\n\n  // We modify \"attach\" function and detect when audible chunk is read.\n  // We will only modify \"attach\" function once.\n  audioConfigImpl.attach = async () => {\n    const reader = await boundOriginalAttach('');\n\n    return {\n      ...reader,\n      read: async () => {\n        const chunk = await reader.read();\n\n        // The magic number 150 is measured by:\n        // 1. Set microphone volume to 0\n        // 2. Observe the amplitude (100-110) for the first few chunks\n        //    (There is a short static caught when turning on the microphone)\n        // 3. Set the number a bit higher than the observation\n        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {\n          audioConfigImpl.events.onEvent(new AudioSourceEvent('FirstAudibleChunk', ''));\n          firstChunk = true;\n        }\n\n        if (muted) {\n          return { buffer: new ArrayBuffer(0), isEnd: true, timeReceived: Date.now() };\n        }\n\n        return chunk;\n      }\n    };\n  };\n\n  return {\n    audioConfig,\n    pause: () => {\n      muted = true;\n    },\n    unprepare: () => {\n      audioConfigImpl.attach = originalAttach;\n    }\n  };\n}\n","export default function averageAmplitude(arrayBuffer: ArrayBuffer): number {\n  const array = Array.from(new Int16Array(arrayBuffer));\n\n  return array.reduce((averageAmplitude, amplitude) => averageAmplitude + Math.abs(amplitude), 0) / array.length;\n}\n","import { type SpeechRecognitionResult } from 'microsoft-cognitiveservices-speech-sdk';\n\nexport type SerializedRecognitionResult = Readonly<{\n  duration: number;\n  errorDetails: string;\n  json: unknown;\n  offset: number;\n  properties: unknown;\n  reason: number;\n  resultId: string;\n  text: string;\n}>;\n\nexport default function serializeRecognitionResult({\n  duration,\n  errorDetails,\n  json,\n  offset,\n  properties,\n  reason,\n  resultId,\n  text\n}: SpeechRecognitionResult): SerializedRecognitionResult {\n  return Object.freeze({\n    duration,\n    errorDetails,\n    json: json && JSON.parse(json),\n    offset,\n    properties,\n    reason,\n    resultId,\n    text\n  });\n}\n","interface W3CSpeechGrammar {\n  src: string;\n  weight: number;\n}\n\ninterface W3CSpeechGrammarList {\n  readonly length: number;\n  addFromString(string: string, weight?: number): void;\n  addFromURI(src: string, weight?: number): void;\n  item(index: number): W3CSpeechGrammar;\n  [index: number]: W3CSpeechGrammar;\n}\n\n/* eslint class-methods-use-this: \"off\" */\n\nexport default class SpeechGrammarList implements W3CSpeechGrammarList {\n  constructor() {\n    this.#phrases = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  addFromURI() {\n    throw new Error('JSGF is not supported');\n  }\n\n  item(): W3CSpeechGrammar {\n    throw new Error('JSGF is not supported');\n  }\n\n  get length(): number {\n    throw new Error('JSGF is not supported');\n  }\n\n  [index: number]: { src: string; weight: number };\n\n  #phrases: readonly string[];\n\n  get phrases(): readonly string[] {\n    return this.#phrases;\n  }\n\n  set phrases(value: readonly string[]) {\n    if (Array.isArray(value)) {\n      this.#phrases = Object.freeze([...value]);\n    } else if (typeof value === 'string') {\n      this.#phrases = Object.freeze([value]);\n    } else {\n      throw new Error(`The provided value is not an array or of type 'string'`);\n    }\n  }\n}\n","export type SpeechRecognitionErrorType =\n  | 'aborted'\n  | 'audio-capture'\n  | 'bad-grammar'\n  | 'language-not-supported'\n  | 'network'\n  | 'no-speech'\n  | 'not-allowed'\n  | 'service-not-allowed'\n  | 'unknown';\n\nexport type SpeechRecognitionErrorEventInit = {\n  error: SpeechRecognitionErrorType;\n  message?: string | undefined;\n};\n\nexport default class SpeechRecognitionErrorEvent extends Event {\n  constructor(type: 'error', { error, message }: SpeechRecognitionErrorEventInit) {\n    super(type);\n\n    this.#error = error;\n    this.#message = message;\n  }\n\n  #error: SpeechRecognitionErrorType;\n  #message: string | undefined;\n\n  get error(): SpeechRecognitionErrorType {\n    return this.#error;\n  }\n\n  get message(): string | undefined {\n    return this.#message;\n  }\n\n  override get type(): 'error' {\n    return 'error';\n  }\n}\n","import FakeArray from './private/FakeArray';\nimport type SpeechRecognitionResult from './SpeechRecognitionResult';\n\nexport default class SpeechRecognitionResultList extends FakeArray<SpeechRecognitionResult> {\n  constructor(result: readonly SpeechRecognitionResult[]) {\n    super(result);\n  }\n}\n","import SpeechRecognitionResultList from './SpeechRecognitionResultList';\n\nexport type SpeechRecognitionEventInit = {\n  data?: undefined | unknown;\n  resultIndex?: number | undefined;\n  results?: SpeechRecognitionResultList | undefined;\n};\n\nexport default class SpeechRecognitionEvent<\n  T extends\n    | 'audioend'\n    | 'audiostart'\n    | 'cognitiveservices'\n    | 'end'\n    | 'result'\n    | 'soundend'\n    | 'soundstart'\n    | 'speechend'\n    | 'speechstart'\n    | 'start'\n> extends Event {\n  constructor(type: 'cognitiveservices', init: SpeechRecognitionEventInit & { data: { type: string } });\n  constructor(type: 'audioend');\n  constructor(type: 'audiostart');\n  constructor(type: 'end');\n  constructor(type: 'result', init: SpeechRecognitionEventInit);\n  constructor(type: 'soundend');\n  constructor(type: 'soundstart');\n  constructor(type: 'speechend');\n  constructor(type: 'speechstart');\n  constructor(type: 'start');\n\n  constructor(type: T, { data, resultIndex, results }: SpeechRecognitionEventInit = {}) {\n    super(type);\n\n    this.#data = data;\n    this.#resultIndex = resultIndex;\n    this.#results = results || new SpeechRecognitionResultList([]);\n  }\n\n  #data: undefined | unknown;\n  // TODO: \"resultIndex\" should be set.\n  #resultIndex: number | undefined;\n  #results: SpeechRecognitionResultList;\n\n  get data(): unknown {\n    return this.#data;\n  }\n\n  get resultIndex(): number | undefined {\n    return this.#resultIndex;\n  }\n\n  get results(): SpeechRecognitionResultList {\n    return this.#results;\n  }\n\n  override get type(): T {\n    return super.type as T;\n  }\n}\n","/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport {\n  type CancellationEventArgs,\n  type RecognitionEventArgs,\n  type SessionEventArgs,\n  type SpeechRecognitionEventArgs,\n  type SpeechRecognizer as SpeechRecognizerType\n} from 'microsoft-cognitiveservices-speech-sdk';\nimport { type AudioConfigImpl } from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig';\nimport { boolean, function_, parse, undefined_, union } from 'valibot';\nimport createPromiseQueue from '../../Util/createPromiseQueue';\nimport SpeechSDK from '../SpeechSDK';\nimport cognitiveServiceEventResultToWebSpeechRecognitionResult from './cognitiveServiceEventResultToWebSpeechRecognitionResult';\nimport cognitiveServicesAsyncToPromise from './cognitiveServicesAsyncToPromise';\nimport EventListenerMap from './private/EventListenerMap';\nimport prepareAudioConfig from './private/prepareAudioConfig';\nimport serializeRecognitionResult from './private/serializeRecognitionResult';\nimport SpeechGrammarList from './SpeechGrammarList';\nimport SpeechRecognitionErrorEvent from './SpeechRecognitionErrorEvent';\nimport SpeechRecognitionEvent from './SpeechRecognitionEvent';\nimport { type SpeechRecognitionEventListenerMap } from './SpeechRecognitionEventListenerMap';\nimport type SpeechRecognitionResult from './SpeechRecognitionResult';\nimport SpeechRecognitionResultList from './SpeechRecognitionResultList';\nimport referenceGrammarsSchema from './validation/referenceGrammarsSchema';\nimport textNormalizationSchema from './validation/textNormalizationSchema';\n\n// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat\n// {\n//   \"RecognitionStatus\": \"Success\",\n//   \"Offset\": 900000,\n//   \"Duration\": 49000000,\n//   \"NBest\": [\n//     {\n//       \"Confidence\": 0.738919,\n//       \"Lexical\": \"second\",\n//       \"ITN\": \"second\",\n//       \"MaskedITN\": \"second\",\n//       \"Display\": \"Second.\"\n//     }\n//   ]\n// }\n\n// {\n//   \"RecognitionStatus\": \"InitialSilenceTimeout\",\n//   \"Offset\": 50000000,\n//   \"Duration\": 0\n// }\n\nconst { ResultReason, SpeechRecognizer } = SpeechSDK;\n\ntype CreateSpeechRecognitionPonyfillFromRecognizerInit = {\n  createRecognizer: (lang: string) => Promise<SpeechRecognizerType>;\n  enableTelemetry: boolean | undefined;\n  looseEvents: boolean;\n  referenceGrammars?: readonly string[] | undefined;\n  textNormalization: 'display' | 'itn' | 'lexical' | 'maskeditn';\n};\n\nconst enableTelemetrySchema = union([boolean(), undefined_()]);\n\nexport default function createSpeechRecognitionPonyfillFromRecognizer({\n  createRecognizer,\n  enableTelemetry,\n  looseEvents,\n  referenceGrammars,\n  textNormalization\n}: CreateSpeechRecognitionPonyfillFromRecognizerInit) {\n  createRecognizer = parse(function_(), createRecognizer) as typeof createRecognizer;\n  enableTelemetry = parse(enableTelemetrySchema, enableTelemetry);\n  looseEvents = parse(boolean(), looseEvents);\n  referenceGrammars = parse(referenceGrammarsSchema, referenceGrammars);\n  textNormalization = parse(textNormalizationSchema, textNormalization);\n\n  // If enableTelemetry is set to null or non-boolean, we will default to true.\n  typeof enableTelemetry !== 'undefined' && SpeechRecognizer.enableTelemetry(enableTelemetry);\n\n  class SpeechRecognition extends EventTarget {\n    #continuous = false;\n    #eventListenerMap: SpeechRecognitionEventListenerMap = new EventListenerMap(this);\n    #grammars: SpeechGrammarList = new SpeechGrammarList();\n    #interimResults = false;\n    #lang =\n      typeof window !== 'undefined'\n        ? window.document.documentElement.getAttribute('lang') || window.navigator.language\n        : 'en-US';\n    // eslint-disable-next-line no-magic-numbers\n    #maxAlternatives: number = 1;\n\n    emitCognitiveServices<T extends { type: string }>(type: string, event: T) {\n      this.dispatchEvent(\n        new SpeechRecognitionEvent('cognitiveservices', {\n          data: {\n            ...event,\n            type\n          }\n        })\n      );\n    }\n\n    get continuous(): boolean {\n      return this.#continuous;\n    }\n\n    set continuous(value: boolean) {\n      this.#continuous = value;\n    }\n\n    get grammars(): SpeechGrammarList {\n      return this.#grammars;\n    }\n\n    set grammars(value: SpeechGrammarList) {\n      if (value instanceof SpeechGrammarList) {\n        this.#grammars = value;\n      } else {\n        throw new Error(`The provided value is not of type 'SpeechGrammarList'`);\n      }\n    }\n\n    get interimResults() {\n      return this.#interimResults;\n    }\n\n    set interimResults(value) {\n      this.#interimResults = value;\n    }\n\n    get maxAlternatives() {\n      return this.#maxAlternatives;\n    }\n\n    set maxAlternatives(value) {\n      this.#maxAlternatives = value;\n    }\n\n    get lang() {\n      return this.#lang;\n    }\n\n    set lang(value) {\n      this.#lang = value;\n    }\n\n    get onaudioend(): ((event: SpeechRecognitionEvent<'audioend'>) => void) | undefined {\n      return this.#eventListenerMap.getProperty('audioend');\n    }\n\n    set onaudioend(value: ((event: SpeechRecognitionEvent<'audioend'>) => void) | undefined) {\n      this.#eventListenerMap.setProperty('audioend', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'audiostart'>) => void) | undefined } */\n    get onaudiostart() {\n      return this.#eventListenerMap.getProperty('audiostart');\n    }\n\n    set onaudiostart(\n      /** @type { ((event: SpeechRecognitionEvent<'audiostart'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('audiostart', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'cognitiveservices'>) => void) | undefined } */\n    get oncognitiveservices() {\n      return this.#eventListenerMap.getProperty('cognitiveservices');\n    }\n\n    set oncognitiveservices(\n      /** @type { ((event: SpeechRecognitionEvent<'cognitiveservices'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('cognitiveservices', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'end'>) => void) | undefined } */\n    get onend() {\n      return this.#eventListenerMap.getProperty('end');\n    }\n\n    set onend(\n      /** @type { ((event: SpeechRecognitionEvent<'end'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('end', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionErrorEvent) => void) | undefined } */\n    get onerror() {\n      return this.#eventListenerMap.getProperty('error');\n    }\n\n    set onerror(\n      /** @type { ((event: SpeechRecognitionErrorEvent) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('error', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'result'>) => void) | undefined } */\n    get onresult() {\n      return this.#eventListenerMap.getProperty('result');\n    }\n\n    set onresult(\n      /** @type { ((event: SpeechRecognitionEvent<'result'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('result', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'soundend'>) => void) | undefined } */\n    get onsoundend() {\n      return this.#eventListenerMap.getProperty('soundend');\n    }\n\n    set onsoundend(\n      /** @type { ((event: SpeechRecognitionEvent<'soundend'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('soundend', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'soundstart'>) => void) | undefined } */\n    get onsoundstart() {\n      return this.#eventListenerMap.getProperty('soundstart');\n    }\n\n    set onsoundstart(\n      /** @type { ((event: SpeechRecognitionEvent<'soundstart'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('soundstart', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'speechend'>) => void) | undefined } */\n    get onspeechend() {\n      return this.#eventListenerMap.getProperty('speechend');\n    }\n\n    set onspeechend(\n      /** @type { ((event: SpeechRecognitionEvent<'speechend'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('speechend', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'speechstart'>) => void) | undefined } */\n    get onspeechstart() {\n      return this.#eventListenerMap.getProperty('speechstart');\n    }\n\n    set onspeechstart(\n      /** @type { ((event: SpeechRecognitionEvent<'speechstart'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('speechstart', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'start'>) => void) | undefined } */\n    get onstart() {\n      return this.#eventListenerMap.getProperty('start');\n    }\n\n    set onstart(\n      /** @type { ((event: SpeechRecognitionEvent<'start'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('start', value);\n    }\n\n    abort: (() => void) | undefined;\n    stop: (() => void) | undefined;\n\n    start() {\n      this._startOnce().catch(err => {\n        this.dispatchEvent(\n          new SpeechRecognitionErrorEvent('error', { error: err, message: err && (err.stack || err.message) })\n        );\n      });\n    }\n\n    async _startOnce() {\n      // TODO: [P2] Should check if recognition is active, we should not start recognition twice\n      const recognizer = await createRecognizer(this.lang);\n\n      const { pause, unprepare } = prepareAudioConfig(recognizer['audioConfig']);\n\n      try {\n        const queue = createPromiseQueue();\n        let soundStarted;\n        let speechStarted;\n        let stopping;\n\n        const { detach: detachAudioConfigEvent } = (recognizer['audioConfig'] as AudioConfigImpl).events.attach(\n          event => {\n            const { name } = event;\n\n            if (name === 'AudioSourceReadyEvent') {\n              queue.push({ audioSourceReady: {} });\n            } else if (name === 'AudioSourceOffEvent') {\n              queue.push({ audioSourceOff: {} });\n            } else if (name === 'FirstAudibleChunk') {\n              queue.push({ firstAudibleChunk: {} });\n            }\n          }\n        );\n\n        recognizer.canceled = (_, { errorDetails, offset, reason, sessionId }: CancellationEventArgs) => {\n          queue.push({\n            canceled: {\n              errorDetails,\n              offset,\n              reason,\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognized = (_, { offset, result, sessionId }: SpeechRecognitionEventArgs) => {\n          queue.push({\n            recognized: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognizing = (_, { offset, result, sessionId }: SpeechRecognitionEventArgs) => {\n          queue.push({\n            recognizing: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.sessionStarted = (_, { sessionId }: SessionEventArgs) => {\n          queue.push({ sessionStarted: { sessionId } });\n        };\n\n        recognizer.sessionStopped = (_, { sessionId }: SessionEventArgs) => {\n          // \"sessionStopped\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          queue.push({ sessionStopped: { sessionId } });\n        };\n\n        recognizer.speechStartDetected = (_, { offset, sessionId }: RecognitionEventArgs) => {\n          queue.push({ speechStartDetected: { offset, sessionId } });\n        };\n\n        recognizer.speechEndDetected = (_, { sessionId }: RecognitionEventArgs) => {\n          // \"speechEndDetected\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          // Update: \"speechEndDetected\" is fired for DLSpeech.listenOnceAsync()\n          queue.push({ speechEndDetected: { sessionId } });\n        };\n\n        const { phrases } = this.grammars;\n\n        // HACK: We are using the internal of SpeechRecognizer because they did not expose it\n        const { dynamicGrammar } = recognizer['privReco'];\n\n        referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar([...referenceGrammars]);\n        phrases && phrases.length && dynamicGrammar.addPhrase([...phrases]);\n\n        await cognitiveServicesAsyncToPromise<void>(recognizer.startContinuousRecognitionAsync, recognizer)();\n\n        if (typeof recognizer.stopContinuousRecognitionAsync === 'function') {\n          this.abort = () => queue.push({ abort: {} });\n          this.stop = () => queue.push({ stop: {} });\n        } else {\n          this.abort = this.stop = undefined;\n        }\n\n        let audioStarted;\n        let finalEvent: SpeechRecognitionErrorEvent | SpeechRecognitionEvent<'result'> | undefined = undefined;\n        let finalizedResults: readonly SpeechRecognitionResult[] = [];\n\n        for (let loop = 0; !stopping || audioStarted; loop++) {\n          const event = await queue.shift();\n          const {\n            abort,\n            audioSourceOff,\n            audioSourceReady,\n            canceled,\n            firstAudibleChunk,\n            recognized,\n            recognizing,\n            stop\n          } = event;\n\n          // We are emitting event \"cognitiveservices\" for debugging purpose.\n          Object.keys(event).forEach(name => this.emitCognitiveServices(name, event[name]));\n\n          const errorMessage = canceled && canceled.errorDetails;\n\n          if (/Permission\\sdenied/u.test(errorMessage || '')) {\n            // If microphone is not allowed, we should not emit \"start\" event.\n\n            finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'not-allowed' });\n\n            break;\n          }\n\n          if (!loop) {\n            this.dispatchEvent(new SpeechRecognitionEvent('start'));\n          }\n\n          if (errorMessage) {\n            if (/1006/u.test(errorMessage)) {\n              if (!audioStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n                this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n              }\n\n              finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'network' });\n            } else {\n              finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'unknown' });\n            }\n\n            break;\n          } else if (abort || stop) {\n            if (abort) {\n              finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'aborted' });\n\n              // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.\n              stopping = 'abort';\n            } else {\n              // When we pause, we will send { isEnd: true }, Speech Services will send us \"recognized\" event.\n              pause();\n              stopping = 'stop';\n            }\n\n            // Abort should not be dispatched without support of \"stopContinuousRecognitionAsync\".\n            // But for defensive purpose, we make sure \"stopContinuousRecognitionAsync\" is available before we can call.\n            if (abort && recognizer.stopContinuousRecognitionAsync) {\n              await cognitiveServicesAsyncToPromise<void>(recognizer.stopContinuousRecognitionAsync, recognizer)();\n            }\n          } else if (audioSourceReady) {\n            this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n            audioStarted = true;\n          } else if (firstAudibleChunk) {\n            this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n            soundStarted = true;\n          } else if (audioSourceOff) {\n            // Looks like we don't need this line and all the tests are still working.\n            // Guessing probably stopping is already truthy.\n            // stopping = true;\n\n            speechStarted && this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n            soundStarted && this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n            audioStarted && this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n\n            audioStarted = soundStarted = speechStarted = false;\n\n            break;\n          } else if (stopping !== 'abort') {\n            if (recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch) {\n              // Quirks: 2024-11-19 with Speech SDK 1.41.0\n              //   When microphone is muted, `reason` is `NoMatch` (0) in both interactive mode and continuous mode.\n              //   After receiving this \"recognized but no match\" event, both modes will continue to recognize speech with \"speechStartDetected\" and \"recognizing\" events.\n              //   That means, we need to end this manually in interactive mode, and continuous-but-stopping mode.\n              if (!this.continuous || stopping === 'stop') {\n                // Empty result will turn into \"no-speech\" later in the code.\n                finalEvent = new SpeechRecognitionEvent('result', {\n                  results: new SpeechRecognitionResultList(finalizedResults)\n                });\n\n                // Quirks: 2024-11-19 with Speech SDK 1.14.0\n                //   Speech SDK did not stop after NoMatch even in interactive mode.\n                recognizer.stopContinuousRecognitionAsync &&\n                  (await cognitiveServicesAsyncToPromise<void>(\n                    recognizer.stopContinuousRecognitionAsync,\n                    recognizer\n                  )());\n\n                // Quirks: 2024-11-19 with Speech SDK 1.14.0\n                //   After calling stopContinuousRecognitionAsync, no \"audioSourceOff\" is fired.\n\n                break;\n              }\n            } else if (recognized || recognizing) {\n              if (!audioStarted) {\n                // Unconfirmed prevention of quirks\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n                audioStarted = true;\n              }\n\n              if (!soundStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n                soundStarted = true;\n              }\n\n              if (!speechStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('speechstart'));\n\n                speechStarted = true;\n              }\n\n              if (recognized) {\n                const result = cognitiveServiceEventResultToWebSpeechRecognitionResult(recognized.result, {\n                  maxAlternatives: this.maxAlternatives,\n                  textNormalization\n                });\n\n                const recognizable = !!result[0]?.transcript;\n\n                if (recognizable) {\n                  finalizedResults = [...finalizedResults, result];\n\n                  this.continuous &&\n                    this.dispatchEvent(\n                      new SpeechRecognitionEvent('result', {\n                        results: new SpeechRecognitionResultList(finalizedResults)\n                      })\n                    );\n                }\n\n                // If it is continuous, we just sent the finalized results. So we don't need to send it again after \"audioend\" event.\n                if (this.continuous && recognizable) {\n                  finalEvent = undefined;\n                } else {\n                  finalEvent = new SpeechRecognitionEvent('result', {\n                    results: new SpeechRecognitionResultList(finalizedResults)\n                  });\n                }\n\n                // If it is interactive, stop after first recognition.\n                // If it is continuous and it is stopping, stop it too.\n                if ((!this.continuous || stopping === 'stop') && recognizer.stopContinuousRecognitionAsync) {\n                  await cognitiveServicesAsyncToPromise<void>(recognizer.stopContinuousRecognitionAsync, recognizer)();\n                }\n\n                // If event order can be loosened, we can send the recognized event as soon as we receive it.\n                // 1. If it is not recognizable (no-speech), we should send an \"error\" event just before \"end\" event. We will not loosen \"error\" events.\n                if (looseEvents && finalEvent && recognizable) {\n                  this.dispatchEvent(finalEvent);\n                  finalEvent = undefined;\n                }\n              } else if (recognizing) {\n                this.interimResults &&\n                  this.dispatchEvent(\n                    new SpeechRecognitionEvent('result', {\n                      results: new SpeechRecognitionResultList([\n                        ...finalizedResults,\n                        cognitiveServiceEventResultToWebSpeechRecognitionResult(recognizing.result, {\n                          maxAlternatives: this.maxAlternatives,\n                          textNormalization\n                        })\n                      ])\n                    })\n                  );\n              }\n            }\n          }\n        }\n\n        if (speechStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n        }\n\n        if (soundStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n        }\n\n        if (audioStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n        }\n\n        if (finalEvent) {\n          if (finalEvent.type === 'result' && !finalEvent.results.length) {\n            finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'no-speech' });\n          }\n\n          this.dispatchEvent(finalEvent);\n        }\n\n        // Even though there is no \"start\" event emitted, we will still emit \"end\" event\n        // This is mainly for \"microphone blocked\" story.\n        this.dispatchEvent(new SpeechRecognitionEvent('end'));\n\n        detachAudioConfigEvent();\n      } catch (err) {\n        // Logging out the erorr because Speech SDK would fail silently.\n        console.error(err);\n\n        throw err;\n      } finally {\n        unprepare();\n        recognizer['dispose'](false);\n      }\n    }\n  }\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition,\n    SpeechRecognitionEvent\n  };\n}\n","/**\n * Assert a condition.\n * @param condition The condition that it should satisfy.\n * @param message The error message.\n * @param args The arguments for replacing placeholders in the message.\n */\nexport function assertType(\n    condition: boolean,\n    message: string,\n    ...args: any[]\n): asserts condition {\n    if (!condition) {\n        throw new TypeError(format(message, args))\n    }\n}\n\n/**\n * Convert a text and arguments to one string.\n * @param message The formating text\n * @param args The arguments.\n */\nexport function format(message: string, args: any[]): string {\n    let i = 0\n    return message.replace(/%[os]/gu, () => anyToString(args[i++]))\n}\n\n/**\n * Convert a value to a string representation.\n * @param x The value to get the string representation.\n */\nexport function anyToString(x: any): string {\n    if (typeof x !== \"object\" || x === null) {\n        return String(x)\n    }\n    return Object.prototype.toString.call(x)\n}\n","import { anyToString, assertType } from \"./misc\"\n\ndeclare const console: any\ndeclare const dispatchEvent: any\ndeclare const ErrorEvent: any\ndeclare const process: any\n\nlet currentErrorHandler: setErrorHandler.ErrorHandler | undefined\n\n/**\n * Set the error handler.\n * @param value The error handler to set.\n */\nexport function setErrorHandler(\n    value: setErrorHandler.ErrorHandler | undefined,\n): void {\n    assertType(\n        typeof value === \"function\" || value === undefined,\n        \"The error handler must be a function or undefined, but got %o.\",\n        value,\n    )\n    currentErrorHandler = value\n}\nexport namespace setErrorHandler {\n    /**\n     * The error handler.\n     * @param error The thrown error object.\n     */\n    export type ErrorHandler = (error: Error) => void\n}\n\n/**\n * Print a error message.\n * @param maybeError The error object.\n */\nexport function reportError(maybeError: unknown): void {\n    try {\n        const error =\n            maybeError instanceof Error\n                ? maybeError\n                : new Error(anyToString(maybeError))\n\n        // Call the user-defined error handler if exists.\n        if (currentErrorHandler) {\n            currentErrorHandler(error)\n            return\n        }\n\n        // Dispatch an `error` event if this is on a browser.\n        if (\n            typeof dispatchEvent === \"function\" &&\n            typeof ErrorEvent === \"function\"\n        ) {\n            dispatchEvent(\n                new ErrorEvent(\"error\", { error, message: error.message }),\n            )\n        }\n\n        // Emit an `uncaughtException` event if this is on Node.js.\n        //istanbul ignore else\n        else if (\n            typeof process !== \"undefined\" &&\n            typeof process.emit === \"function\"\n        ) {\n            process.emit(\"uncaughtException\", error)\n            return\n        }\n\n        // Otherwise, print the error.\n        console.error(error)\n    } catch {\n        // ignore.\n    }\n}\n","declare const globalThis: any\ndeclare const window: any\ndeclare const self: any\ndeclare const global: any\n\n/**\n * The global object.\n */\n//istanbul ignore next\nexport const Global: any =\n    typeof window !== \"undefined\"\n        ? window\n        : typeof self !== \"undefined\"\n        ? self\n        : typeof global !== \"undefined\"\n        ? global\n        : typeof globalThis !== \"undefined\"\n        ? globalThis\n        : undefined\n","import { assertType } from \"./misc\"\n\ndeclare const console: any\n\nlet currentWarnHandler: setWarningHandler.WarningHandler | undefined\n\n/**\n * Set the warning handler.\n * @param value The warning handler to set.\n */\nexport function setWarningHandler(\n    value: setWarningHandler.WarningHandler | undefined,\n): void {\n    assertType(\n        typeof value === \"function\" || value === undefined,\n        \"The warning handler must be a function or undefined, but got %o.\",\n        value,\n    )\n    currentWarnHandler = value\n}\nexport namespace setWarningHandler {\n    /**\n     * The warning information.\n     */\n    export interface Warning {\n        /**\n         * The code of this warning.\n         */\n        code: string\n        /**\n         * The message in English.\n         */\n        message: string\n        /**\n         * The arguments for replacing placeholders in the text.\n         */\n        args: any[]\n    }\n\n    /**\n     * The warning handler.\n     * @param warning The warning.\n     */\n    export type WarningHandler = (warning: Warning) => void\n}\n\n/**\n * The warning information.\n */\nexport class Warning<TArgs extends any[]> {\n    readonly code: string\n    readonly message: string\n\n    constructor(code: string, message: string) {\n        this.code = code\n        this.message = message\n    }\n\n    /**\n     * Report this warning.\n     * @param args The arguments of the warning.\n     */\n    warn(...args: TArgs): void {\n        try {\n            // Call the user-defined warning handler if exists.\n            if (currentWarnHandler) {\n                currentWarnHandler({ ...this, args })\n                return\n            }\n\n            // Otherwise, print the warning.\n            const stack = (new Error().stack ?? \"\").replace(\n                /^(?:.+?\\n){2}/gu,\n                \"\\n\",\n            )\n            console.warn(this.message, ...args, stack)\n        } catch {\n            // Ignore.\n        }\n    }\n}\n","import { EventTarget } from \"./event-target\" // Used as only type, so no circular.\nimport { Warning } from \"./warning-handler\"\n\nexport const InitEventWasCalledWhileDispatching = new Warning<[]>(\n    \"W01\",\n    \"Unable to initialize event under dispatching.\",\n)\n\nexport const FalsyWasAssignedToCancelBubble = new Warning<[]>(\n    \"W02\",\n    \"Assigning any falsy value to 'cancelBubble' property has no effect.\",\n)\n\nexport const TruthyWasAssignedToReturnValue = new Warning<[]>(\n    \"W03\",\n    \"Assigning any truthy value to 'returnValue' property has no effect.\",\n)\n\nexport const NonCancelableEventWasCanceled = new Warning<[]>(\n    \"W04\",\n    \"Unable to preventDefault on non-cancelable events.\",\n)\n\nexport const CanceledInPassiveListener = new Warning<[]>(\n    \"W05\",\n    \"Unable to preventDefault inside passive event listener invocation.\",\n)\n\nexport const EventListenerWasDuplicated = new Warning<\n    [type: \"bubble\" | \"capture\", callback: EventTarget.EventListener<any, any>]\n>(\n    \"W06\",\n    \"An event listener wasn't added because it has been added already: %o, %o\",\n)\n\nexport const OptionWasIgnored = new Warning<\n    [name: \"passive\" | \"once\" | \"signal\"]\n>(\n    \"W07\",\n    \"The %o option value was abandoned because the event listener wasn't added as duplicated.\",\n)\n\nexport const InvalidEventListener = new Warning<\n    [callback: EventTarget.EventListener<any, any> | {} | null | undefined]\n>(\n    \"W08\",\n    \"The 'callback' argument must be a function or an object that has 'handleEvent' method: %o\",\n)\n\nexport const InvalidAttributeHandler = new Warning<\n    [callback: EventTarget.EventListener<any, any> | {}]\n>(\"W09\", \"Event attribute handler must be a function: %o\")\n","import { EventTarget } from \"./event-target\" // Used as only type, so no circular.\nimport { Global } from \"./global\"\nimport { assertType } from \"./misc\"\nimport {\n    CanceledInPassiveListener,\n    FalsyWasAssignedToCancelBubble,\n    InitEventWasCalledWhileDispatching,\n    NonCancelableEventWasCanceled,\n    TruthyWasAssignedToReturnValue,\n} from \"./warnings\"\n\n/*eslint-disable class-methods-use-this */\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * `EventTarget` shim can control the internal state of this `Event` objects.\n * @see https://dom.spec.whatwg.org/#event\n */\nexport class Event<TEventType extends string = string> {\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    static get NONE(): number {\n        return NONE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n    static get CAPTURING_PHASE(): number {\n        return CAPTURING_PHASE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n    static get AT_TARGET(): number {\n        return AT_TARGET\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n    static get BUBBLING_PHASE(): number {\n        return BUBBLING_PHASE\n    }\n\n    /**\n     * Initialize this event instance.\n     * @param type The type of this event.\n     * @param eventInitDict Options to initialize.\n     * @see https://dom.spec.whatwg.org/#dom-event-event\n     */\n    constructor(type: TEventType, eventInitDict?: Event.EventInit) {\n        Object.defineProperty(this, \"isTrusted\", {\n            value: false,\n            enumerable: true,\n        })\n\n        const opts = eventInitDict ?? {}\n        internalDataMap.set(this, {\n            type: String(type),\n            bubbles: Boolean(opts.bubbles),\n            cancelable: Boolean(opts.cancelable),\n            composed: Boolean(opts.composed),\n            target: null,\n            currentTarget: null,\n            stopPropagationFlag: false,\n            stopImmediatePropagationFlag: false,\n            canceledFlag: false,\n            inPassiveListenerFlag: false,\n            dispatchFlag: false,\n            timeStamp: Date.now(),\n        })\n    }\n\n    /**\n     * The type of this event.\n     * @see https://dom.spec.whatwg.org/#dom-event-type\n     */\n    get type(): TEventType {\n        return $(this).type as TEventType\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-target\n     */\n    get target(): EventTarget | null {\n        return $(this).target\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * @deprecated Use the `target` property instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-srcelement\n     */\n    get srcElement(): EventTarget | null {\n        return $(this).target\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n     */\n    get currentTarget(): EventTarget | null {\n        return $(this).currentTarget\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * This doesn't support node tree.\n     * @see https://dom.spec.whatwg.org/#dom-event-composedpath\n     */\n    composedPath(): EventTarget[] {\n        const currentTarget = $(this).currentTarget\n        if (currentTarget) {\n            return [currentTarget]\n        }\n        return []\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    get NONE(): number {\n        return NONE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n    get CAPTURING_PHASE(): number {\n        return CAPTURING_PHASE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n    get AT_TARGET(): number {\n        return AT_TARGET\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n    get BUBBLING_PHASE(): number {\n        return BUBBLING_PHASE\n    }\n\n    /**\n     * The current event phase.\n     * @see https://dom.spec.whatwg.org/#dom-event-eventphase\n     */\n    get eventPhase(): number {\n        return $(this).dispatchFlag ? 2 : 0\n    }\n\n    /**\n     * Stop event bubbling.\n     * Because this shim doesn't support node tree, this merely changes the `cancelBubble` property value.\n     * @see https://dom.spec.whatwg.org/#dom-event-stoppropagation\n     */\n    stopPropagation(): void {\n        $(this).stopPropagationFlag = true\n    }\n\n    /**\n     * `true` if event bubbling was stopped.\n     * @deprecated\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    get cancelBubble(): boolean {\n        return $(this).stopPropagationFlag\n    }\n\n    /**\n     * Stop event bubbling if `true` is set.\n     * @deprecated Use the `stopPropagation()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    set cancelBubble(value: boolean) {\n        if (value) {\n            $(this).stopPropagationFlag = true\n        } else {\n            FalsyWasAssignedToCancelBubble.warn()\n        }\n    }\n\n    /**\n     * Stop event bubbling and subsequent event listener callings.\n     * @see https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\n     */\n    stopImmediatePropagation(): void {\n        const data = $(this)\n        data.stopPropagationFlag = data.stopImmediatePropagationFlag = true\n    }\n\n    /**\n     * `true` if this event will bubble.\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbles\n     */\n    get bubbles(): boolean {\n        return $(this).bubbles\n    }\n\n    /**\n     * `true` if this event can be canceled by the `preventDefault()` method.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelable\n     */\n    get cancelable(): boolean {\n        return $(this).cancelable\n    }\n\n    /**\n     * `true` if the default behavior will act.\n     * @deprecated Use the `defaultPrevented` proeprty instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    get returnValue(): boolean {\n        return !$(this).canceledFlag\n    }\n\n    /**\n     * Cancel the default behavior if `false` is set.\n     * @deprecated Use the `preventDefault()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    set returnValue(value: boolean) {\n        if (!value) {\n            setCancelFlag($(this))\n        } else {\n            TruthyWasAssignedToReturnValue.warn()\n        }\n    }\n\n    /**\n     * Cancel the default behavior.\n     * @see https://dom.spec.whatwg.org/#dom-event-preventdefault\n     */\n    preventDefault(): void {\n        setCancelFlag($(this))\n    }\n\n    /**\n     * `true` if the default behavior was canceled.\n     * @see https://dom.spec.whatwg.org/#dom-event-defaultprevented\n     */\n    get defaultPrevented(): boolean {\n        return $(this).canceledFlag\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    get composed(): boolean {\n        return $(this).composed\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-istrusted\n     */\n    //istanbul ignore next\n    get isTrusted(): boolean {\n        return false\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-timestamp\n     */\n    get timeStamp(): number {\n        return $(this).timeStamp\n    }\n\n    /**\n     * @deprecated Don't use this method. The constructor did initialization.\n     */\n    initEvent(type: string, bubbles = false, cancelable = false) {\n        const data = $(this)\n        if (data.dispatchFlag) {\n            InitEventWasCalledWhileDispatching.warn()\n            return\n        }\n\n        internalDataMap.set(this, {\n            ...data,\n            type: String(type),\n            bubbles: Boolean(bubbles),\n            cancelable: Boolean(cancelable),\n            target: null,\n            currentTarget: null,\n            stopPropagationFlag: false,\n            stopImmediatePropagationFlag: false,\n            canceledFlag: false,\n        })\n    }\n}\n\n/*eslint-enable class-methods-use-this */\n\nexport namespace Event {\n    /**\n     * The options of the `Event` constructor.\n     * @see https://dom.spec.whatwg.org/#dictdef-eventinit\n     */\n    export interface EventInit {\n        bubbles?: boolean\n        cancelable?: boolean\n        composed?: boolean\n    }\n}\n\nexport { $ as getEventInternalData }\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst NONE = 0\nconst CAPTURING_PHASE = 1\nconst AT_TARGET = 2\nconst BUBBLING_PHASE = 3\n\n/**\n * Private data.\n */\ninterface EventInternalData {\n    /**\n     * The value of `type` attribute.\n     */\n    readonly type: string\n    /**\n     * The value of `bubbles` attribute.\n     */\n    readonly bubbles: boolean\n    /**\n     * The value of `cancelable` attribute.\n     */\n    readonly cancelable: boolean\n    /**\n     * The value of `composed` attribute.\n     */\n    readonly composed: boolean\n    /**\n     * The value of `timeStamp` attribute.\n     */\n    readonly timeStamp: number\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-target\n     */\n    target: EventTarget | null\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n     */\n    currentTarget: EventTarget | null\n    /**\n     * @see https://dom.spec.whatwg.org/#stop-propagation-flag\n     */\n    stopPropagationFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#stop-immediate-propagation-flag\n     */\n    stopImmediatePropagationFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#canceled-flag\n     */\n    canceledFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#in-passive-listener-flag\n     */\n    inPassiveListenerFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#dispatch-flag\n     */\n    dispatchFlag: boolean\n}\n\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap = new WeakMap<any, EventInternalData>()\n\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $(event: unknown, name = \"this\"): EventInternalData {\n    const retv = internalDataMap.get(event)\n    assertType(\n        retv != null,\n        \"'%s' must be an object that Event constructor created, but got another one: %o\",\n        name,\n        event,\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data private data.\n */\nfunction setCancelFlag(data: EventInternalData) {\n    if (data.inPassiveListenerFlag) {\n        CanceledInPassiveListener.warn()\n        return\n    }\n    if (!data.cancelable) {\n        NonCancelableEventWasCanceled.warn()\n        return\n    }\n\n    data.canceledFlag = true\n}\n\n// Set enumerable\nObject.defineProperty(Event, \"NONE\", { enumerable: true })\nObject.defineProperty(Event, \"CAPTURING_PHASE\", { enumerable: true })\nObject.defineProperty(Event, \"AT_TARGET\", { enumerable: true })\nObject.defineProperty(Event, \"BUBBLING_PHASE\", { enumerable: true })\nconst keys = Object.getOwnPropertyNames(Event.prototype)\nfor (let i = 0; i < keys.length; ++i) {\n    if (keys[i] === \"constructor\") {\n        continue\n    }\n    Object.defineProperty(Event.prototype, keys[i], { enumerable: true })\n}\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, Global.Event.prototype)\n}\n","import { Global } from \"./global\"\n\n/**\n * Create a new InvalidStateError instance.\n * @param message The error message.\n */\nexport function createInvalidStateError(message: string): Error {\n    if (Global.DOMException) {\n        return new Global.DOMException(message, \"InvalidStateError\")\n    }\n\n    if (DOMException == null) {\n        DOMException = class DOMException extends Error {\n            constructor(msg: string) {\n                super(msg)\n                if ((Error as any).captureStackTrace) {\n                    ;(Error as any).captureStackTrace(this, DOMException)\n                }\n            }\n            // eslint-disable-next-line class-methods-use-this\n            get code() {\n                return 11\n            }\n            // eslint-disable-next-line class-methods-use-this\n            get name() {\n                return \"InvalidStateError\"\n            }\n        }\n        Object.defineProperties(DOMException.prototype, {\n            code: { enumerable: true },\n            name: { enumerable: true },\n        })\n        defineErrorCodeProperties(DOMException)\n        defineErrorCodeProperties(DOMException.prototype)\n    }\n    return new DOMException(message)\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nlet DOMException: { new (message: string): Error } | undefined\n\nconst ErrorCodeMap = {\n    INDEX_SIZE_ERR: 1,\n    DOMSTRING_SIZE_ERR: 2,\n    HIERARCHY_REQUEST_ERR: 3,\n    WRONG_DOCUMENT_ERR: 4,\n    INVALID_CHARACTER_ERR: 5,\n    NO_DATA_ALLOWED_ERR: 6,\n    NO_MODIFICATION_ALLOWED_ERR: 7,\n    NOT_FOUND_ERR: 8,\n    NOT_SUPPORTED_ERR: 9,\n    INUSE_ATTRIBUTE_ERR: 10,\n    INVALID_STATE_ERR: 11,\n    SYNTAX_ERR: 12,\n    INVALID_MODIFICATION_ERR: 13,\n    NAMESPACE_ERR: 14,\n    INVALID_ACCESS_ERR: 15,\n    VALIDATION_ERR: 16,\n    TYPE_MISMATCH_ERR: 17,\n    SECURITY_ERR: 18,\n    NETWORK_ERR: 19,\n    ABORT_ERR: 20,\n    URL_MISMATCH_ERR: 21,\n    QUOTA_EXCEEDED_ERR: 22,\n    TIMEOUT_ERR: 23,\n    INVALID_NODE_TYPE_ERR: 24,\n    DATA_CLONE_ERR: 25,\n}\ntype ErrorCodeMap = typeof ErrorCodeMap\n\nfunction defineErrorCodeProperties(obj: any): void {\n    const keys = Object.keys(ErrorCodeMap) as (keyof ErrorCodeMap)[]\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        const value = ErrorCodeMap[key]\n        Object.defineProperty(obj, key, {\n            get() {\n                return value\n            },\n            configurable: true,\n            enumerable: true,\n        })\n    }\n}\n","import { Event } from \"./event\"\nimport { Global } from \"./global\"\nimport { assertType } from \"./misc\"\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * This class controls the internal state of `Event`.\n * @see https://dom.spec.whatwg.org/#interface-event\n */\nexport class EventWrapper<TEventType extends string> extends Event<TEventType> {\n    /**\n     * Wrap a given event object to control states.\n     * @param event The event-like object to wrap.\n     */\n    static wrap<T extends EventLike>(event: T): EventWrapperOf<T> {\n        return new (getWrapperClassOf(event))(event)\n    }\n\n    protected constructor(event: Event<TEventType>) {\n        super(event.type, {\n            bubbles: event.bubbles,\n            cancelable: event.cancelable,\n            composed: event.composed,\n        })\n\n        if (event.cancelBubble) {\n            super.stopPropagation()\n        }\n        if (event.defaultPrevented) {\n            super.preventDefault()\n        }\n\n        internalDataMap.set(this, { original: event })\n\n        // Define accessors\n        const keys = Object.keys(event)\n        for (let i = 0; i < keys.length; ++i) {\n            const key = keys[i]\n            if (!(key in this)) {\n                Object.defineProperty(\n                    this,\n                    key,\n                    defineRedirectDescriptor(event, key),\n                )\n            }\n        }\n    }\n\n    stopPropagation(): void {\n        super.stopPropagation()\n\n        const { original } = $(this)\n        if (\"stopPropagation\" in original) {\n            original.stopPropagation!()\n        }\n    }\n\n    get cancelBubble(): boolean {\n        return super.cancelBubble\n    }\n    set cancelBubble(value: boolean) {\n        super.cancelBubble = value\n\n        const { original } = $(this)\n        if (\"cancelBubble\" in original) {\n            original.cancelBubble = value\n        }\n    }\n\n    stopImmediatePropagation(): void {\n        super.stopImmediatePropagation()\n\n        const { original } = $(this)\n        if (\"stopImmediatePropagation\" in original) {\n            original.stopImmediatePropagation!()\n        }\n    }\n\n    get returnValue(): boolean {\n        return super.returnValue\n    }\n    set returnValue(value: boolean) {\n        super.returnValue = value\n\n        const { original } = $(this)\n        if (\"returnValue\" in original) {\n            original.returnValue = value\n        }\n    }\n\n    preventDefault(): void {\n        super.preventDefault()\n\n        const { original } = $(this)\n        if (\"preventDefault\" in original) {\n            original.preventDefault!()\n        }\n    }\n\n    get timeStamp(): number {\n        const { original } = $(this)\n        if (\"timeStamp\" in original) {\n            return original.timeStamp!\n        }\n        return super.timeStamp\n    }\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\ntype EventLike = { readonly type: string } & Partial<Event>\ntype EventWrapperOf<T extends EventLike> = Event<T[\"type\"]> &\n    Omit<T, keyof Event>\n\ninterface EventWrapperInternalData {\n    readonly original: EventLike\n}\n\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap = new WeakMap<any, EventWrapperInternalData>()\n\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @returns The private data of the event.\n */\nfunction $(event: unknown): EventWrapperInternalData {\n    const retv = internalDataMap.get(event)\n    assertType(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event,\n    )\n    return retv\n}\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrapperClassCache = new WeakMap()\n\n// Make association for wrappers.\nwrapperClassCache.set(Object.prototype, EventWrapper)\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n    wrapperClassCache.set(Global.Event.prototype, EventWrapper)\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param originalEvent The event object to wrap.\n */\nfunction getWrapperClassOf<T extends EventLike>(\n    originalEvent: T,\n): { new (e: T): EventWrapperOf<T> } {\n    const prototype = Object.getPrototypeOf(originalEvent)\n    if (prototype == null) {\n        return EventWrapper as any\n    }\n\n    let wrapper: any = wrapperClassCache.get(prototype)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapperClassOf(prototype), prototype)\n        wrapperClassCache.set(prototype, wrapper)\n    }\n\n    return wrapper\n}\n\n/**\n * Define new wrapper class.\n * @param BaseEventWrapper The base wrapper class.\n * @param originalPrototype The prototype of the original event.\n */\nfunction defineWrapper(BaseEventWrapper: any, originalPrototype: any): any {\n    class CustomEventWrapper extends BaseEventWrapper {}\n\n    const keys = Object.keys(originalPrototype)\n    for (let i = 0; i < keys.length; ++i) {\n        Object.defineProperty(\n            CustomEventWrapper.prototype,\n            keys[i],\n            defineRedirectDescriptor(originalPrototype, keys[i]),\n        )\n    }\n\n    return CustomEventWrapper\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n */\nfunction defineRedirectDescriptor(obj: any, key: string): PropertyDescriptor {\n    const d = Object.getOwnPropertyDescriptor(obj, key)!\n    return {\n        get() {\n            const original: any = $(this).original\n            const value = original[key]\n            if (typeof value === \"function\") {\n                return value.bind(original)\n            }\n            return value\n        },\n        set(value: any) {\n            const original: any = $(this).original\n            original[key] = value\n        },\n        configurable: d.configurable,\n        enumerable: d.enumerable,\n    }\n}\n","import { reportError } from \"./error-handler\"\nimport { Event } from \"./event\" // Used as only type, so no circular.\nimport { EventTarget } from \"./event-target\" // Used as only type, so no circular.\n\n/**\n * The event listener concept.\n * @see https://dom.spec.whatwg.org/#concept-event-listener\n */\nexport interface Listener {\n    /**\n     * The callback function.\n     */\n    readonly callback: Listener.Callback<any, any>\n    /**\n     * The flags of this listener.\n     * This is writable to add the removed flag.\n     */\n    flags: ListenerFlags\n    /**\n     * The `AbortSignal` to remove this listener.\n     */\n    readonly signal: Listener.AbortSignal | undefined\n    /**\n     * The `abort` event listener for the `signal`.\n     * To remove it from the `signal`.\n     */\n    readonly signalListener: (() => void) | undefined\n}\n\nexport namespace Listener {\n    export type Callback<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > = CallbackFunction<TEventTarget, TEvent> | CallbackObject<TEvent>\n\n    export interface CallbackFunction<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > {\n        (this: TEventTarget, event: TEvent): void\n    }\n\n    export interface CallbackObject<TEvent extends Event> {\n        handleEvent(event: TEvent): void\n    }\n\n    export interface AbortSignal {\n        addEventListener(type: string, callback: Callback<any, Event>): void\n        removeEventListener(type: string, callback: Callback<any, Event>): void\n    }\n}\n\n/**\n * Create a new listener.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n * @param signalListener The abort event listener for the abort signal.\n */\nexport function createListener(\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n    passive: boolean,\n    once: boolean,\n    signal: Listener.AbortSignal | undefined,\n    signalListener: (() => void) | undefined,\n): Listener {\n    return {\n        callback,\n        flags:\n            (capture ? ListenerFlags.Capture : 0) |\n            (passive ? ListenerFlags.Passive : 0) |\n            (once ? ListenerFlags.Once : 0),\n        signal,\n        signalListener,\n    }\n}\n\n/**\n * Set the `removed` flag to the given listener.\n * @param listener The listener to check.\n */\nexport function setRemoved(listener: Listener): void {\n    listener.flags |= ListenerFlags.Removed\n}\n\n/**\n * Check if the given listener has the `capture` flag or not.\n * @param listener The listener to check.\n */\nexport function isCapture(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Capture) === ListenerFlags.Capture\n}\n\n/**\n * Check if the given listener has the `passive` flag or not.\n * @param listener The listener to check.\n */\nexport function isPassive(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Passive) === ListenerFlags.Passive\n}\n\n/**\n * Check if the given listener has the `once` flag or not.\n * @param listener The listener to check.\n */\nexport function isOnce(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Once) === ListenerFlags.Once\n}\n\n/**\n * Check if the given listener has the `removed` flag or not.\n * @param listener The listener to check.\n */\nexport function isRemoved(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Removed) === ListenerFlags.Removed\n}\n\n/**\n * Call an event listener.\n * @param listener The listener to call.\n * @param target The event target object for `thisArg`.\n * @param event The event object for the first argument.\n * @param attribute `true` if this callback is an event attribute handler.\n */\nexport function invokeCallback(\n    { callback }: Listener,\n    target: EventTarget<any, any>,\n    event: Event<any>,\n): void {\n    try {\n        if (typeof callback === \"function\") {\n            callback.call(target, event)\n        } else if (typeof callback.handleEvent === \"function\") {\n            callback.handleEvent(event)\n        }\n    } catch (thrownError) {\n        reportError(thrownError)\n    }\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * The flags of listeners.\n */\nconst enum ListenerFlags {\n    Capture = 0x01,\n    Passive = 0x02,\n    Once = 0x04,\n    Removed = 0x08,\n}\n","import { createListener, isCapture, Listener, setRemoved } from \"./listener\"\n\n/**\n * Information of an listener list.\n */\nexport interface ListenerList {\n    /**\n     * The callback function of the event attribute handler.\n     */\n    attrCallback: Listener.CallbackFunction<any, any> | undefined\n    /**\n     * The listener of the event attribute handler.\n     */\n    attrListener: Listener | undefined\n    /**\n     * `true` if the `dispatchEvent` method is traversing the current `listeners` array.\n     */\n    cow: boolean\n    /**\n     * The listeners.\n     * This is writable for copy-on-write.\n     */\n    listeners: Listener[]\n}\n\n/**\n * Find the index of given listener.\n * This returns `-1` if not found.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n */\nexport function findIndexOfListener(\n    { listeners }: ListenerList,\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n): number {\n    for (let i = 0; i < listeners.length; ++i) {\n        if (\n            listeners[i].callback === callback &&\n            isCapture(listeners[i]) === capture\n        ) {\n            return i\n        }\n    }\n    return -1\n}\n\n/**\n * Add the given listener.\n * Does copy-on-write if needed.\n * @param list The listener list.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n */\nexport function addListener(\n    list: ListenerList,\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n    passive: boolean,\n    once: boolean,\n    signal: Listener.AbortSignal | undefined,\n): Listener {\n    let signalListener: (() => void) | undefined\n    if (signal) {\n        signalListener = removeListener.bind(null, list, callback, capture)\n        signal.addEventListener(\"abort\", signalListener)\n    }\n\n    const listener = createListener(\n        callback,\n        capture,\n        passive,\n        once,\n        signal,\n        signalListener,\n    )\n\n    if (list.cow) {\n        list.cow = false\n        list.listeners = [...list.listeners, listener]\n    } else {\n        list.listeners.push(listener)\n    }\n\n    return listener\n}\n\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n * @returns `true` if it mutated the list directly.\n */\nexport function removeListener(\n    list: ListenerList,\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n): boolean {\n    const index = findIndexOfListener(list, callback, capture)\n    if (index !== -1) {\n        return removeListenerAt(list, index)\n    }\n    return false\n}\n\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param index The index of the target listener.\n * @param disableCow Disable copy-on-write if true.\n * @returns `true` if it mutated the `listeners` array directly.\n */\nexport function removeListenerAt(\n    list: ListenerList,\n    index: number,\n    disableCow = false,\n): boolean {\n    const listener = list.listeners[index]\n\n    // Set the removed flag.\n    setRemoved(listener)\n\n    // Dispose the abort signal listener if exists.\n    if (listener.signal) {\n        listener.signal.removeEventListener(\"abort\", listener.signalListener!)\n    }\n\n    // Remove it from the array.\n    if (list.cow && !disableCow) {\n        list.cow = false\n        list.listeners = list.listeners.filter((_, i) => i !== index)\n        return false\n    }\n    list.listeners.splice(index, 1)\n    return true\n}\n","import { ListenerList } from \"./listener-list\"\n\n/**\n * The map from event types to each listener list.\n */\nexport interface ListenerListMap {\n    [type: string]: ListenerList | undefined\n}\n\n/**\n * Create a new `ListenerListMap` object.\n */\nexport function createListenerListMap(): ListenerListMap {\n    return Object.create(null)\n}\n\n/**\n * Get the listener list of the given type.\n * If the listener list has not been initialized, initialize and return it.\n * @param listenerMap The listener list map.\n * @param type The event type to get.\n */\nexport function ensureListenerList(\n    listenerMap: Record<string, ListenerList | undefined>,\n    type: string,\n): ListenerList {\n    return (listenerMap[type] ??= {\n        attrCallback: undefined,\n        attrListener: undefined,\n        cow: false,\n        listeners: [],\n    })\n}\n","import { createInvalidStateError } from \"./dom-exception\"\nimport { Event, getEventInternalData } from \"./event\"\nimport { EventWrapper } from \"./event-wrapper\"\nimport { Global } from \"./global\"\nimport {\n    invokeCallback,\n    isCapture,\n    isOnce,\n    isPassive,\n    isRemoved,\n    Listener,\n} from \"./listener\"\nimport {\n    addListener,\n    findIndexOfListener,\n    removeListener,\n    removeListenerAt,\n} from \"./listener-list\"\nimport {\n    createListenerListMap,\n    ensureListenerList,\n    ListenerListMap,\n} from \"./listener-list-map\"\nimport { assertType, format } from \"./misc\"\nimport {\n    EventListenerWasDuplicated,\n    InvalidEventListener,\n    OptionWasIgnored,\n} from \"./warnings\"\n\n/**\n * An implementation of the `EventTarget` interface.\n * @see https://dom.spec.whatwg.org/#eventtarget\n */\nexport class EventTarget<\n    TEventMap extends Record<string, Event> = Record<string, Event>,\n    TMode extends \"standard\" | \"strict\" = \"standard\"\n> {\n    /**\n     * Initialize this instance.\n     */\n    constructor() {\n        internalDataMap.set(this, createListenerListMap())\n    }\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    addEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options?: EventTarget.AddOptions,\n    ): void\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    addEventListener(\n        type: string,\n        callback?: EventTarget.FallbackEventListener<this, TMode>,\n        options?: EventTarget.AddOptions,\n    ): void\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    addEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback:\n            | EventTarget.EventListener<this, TEventMap[T]>\n            | null\n            | undefined,\n        capture: boolean,\n    ): void\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    addEventListener(\n        type: string,\n        callback: EventTarget.FallbackEventListener<this, TMode>,\n        capture: boolean,\n    ): void\n\n    // Implementation\n    addEventListener<T extends string & keyof TEventMap>(\n        type0: T,\n        callback0?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options0?: boolean | EventTarget.AddOptions,\n    ): void {\n        const listenerMap = $(this)\n        const {\n            callback,\n            capture,\n            once,\n            passive,\n            signal,\n            type,\n        } = normalizeAddOptions(type0, callback0, options0)\n        if (callback == null || signal?.aborted) {\n            return\n        }\n        const list = ensureListenerList(listenerMap, type)\n\n        // Find existing listener.\n        const i = findIndexOfListener(list, callback, capture)\n        if (i !== -1) {\n            warnDuplicate(list.listeners[i], passive, once, signal)\n            return\n        }\n\n        // Add the new listener.\n        addListener(list, callback, capture, passive, once, signal)\n    }\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    removeEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options?: EventTarget.Options,\n    ): void\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    removeEventListener(\n        type: string,\n        callback?: EventTarget.FallbackEventListener<this, TMode>,\n        options?: EventTarget.Options,\n    ): void\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    removeEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback:\n            | EventTarget.EventListener<this, TEventMap[T]>\n            | null\n            | undefined,\n        capture: boolean,\n    ): void\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    removeEventListener(\n        type: string,\n        callback: EventTarget.FallbackEventListener<this, TMode>,\n        capture: boolean,\n    ): void\n\n    // Implementation\n    removeEventListener<T extends string & keyof TEventMap>(\n        type0: T,\n        callback0?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options0?: boolean | EventTarget.Options,\n    ): void {\n        const listenerMap = $(this)\n        const { callback, capture, type } = normalizeOptions(\n            type0,\n            callback0,\n            options0,\n        )\n        const list = listenerMap[type]\n\n        if (callback != null && list) {\n            removeListener(list, callback, capture)\n        }\n    }\n\n    /**\n     * Dispatch an event.\n     * @param event The `Event` object to dispatch.\n     */\n    dispatchEvent<T extends string & keyof TEventMap>(\n        event: EventTarget.EventData<TEventMap, TMode, T>,\n    ): boolean\n\n    /**\n     * Dispatch an event.\n     * @param event The `Event` object to dispatch.\n     */\n    dispatchEvent(event: EventTarget.FallbackEvent<TMode>): boolean\n\n    // Implementation\n    dispatchEvent(\n        e:\n            | EventTarget.EventData<TEventMap, TMode, string>\n            | EventTarget.FallbackEvent<TMode>,\n    ): boolean {\n        const list = $(this)[String(e.type)]\n        if (list == null) {\n            return true\n        }\n\n        const event = e instanceof Event ? e : EventWrapper.wrap(e)\n        const eventData = getEventInternalData(event, \"event\")\n        if (eventData.dispatchFlag) {\n            throw createInvalidStateError(\"This event has been in dispatching.\")\n        }\n\n        eventData.dispatchFlag = true\n        eventData.target = eventData.currentTarget = this\n\n        if (!eventData.stopPropagationFlag) {\n            const { cow, listeners } = list\n\n            // Set copy-on-write flag.\n            list.cow = true\n\n            // Call listeners.\n            for (let i = 0; i < listeners.length; ++i) {\n                const listener = listeners[i]\n\n                // Skip if removed.\n                if (isRemoved(listener)) {\n                    continue\n                }\n\n                // Remove this listener if has the `once` flag.\n                if (isOnce(listener) && removeListenerAt(list, i, !cow)) {\n                    // Because this listener was removed, the next index is the\n                    // same as the current value.\n                    i -= 1\n                }\n\n                // Call this listener with the `passive` flag.\n                eventData.inPassiveListenerFlag = isPassive(listener)\n                invokeCallback(listener, this, event)\n                eventData.inPassiveListenerFlag = false\n\n                // Stop if the `event.stopImmediatePropagation()` method was called.\n                if (eventData.stopImmediatePropagationFlag) {\n                    break\n                }\n            }\n\n            // Restore copy-on-write flag.\n            if (!cow) {\n                list.cow = false\n            }\n        }\n\n        eventData.target = null\n        eventData.currentTarget = null\n        eventData.stopImmediatePropagationFlag = false\n        eventData.stopPropagationFlag = false\n        eventData.dispatchFlag = false\n\n        return !eventData.canceledFlag\n    }\n}\n\nexport namespace EventTarget {\n    /**\n     * The event listener.\n     */\n    export type EventListener<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > = CallbackFunction<TEventTarget, TEvent> | CallbackObject<TEvent>\n\n    /**\n     * The event listener function.\n     */\n    export interface CallbackFunction<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > {\n        (this: TEventTarget, event: TEvent): void\n    }\n\n    /**\n     * The event listener object.\n     * @see https://dom.spec.whatwg.org/#callbackdef-eventlistener\n     */\n    export interface CallbackObject<TEvent extends Event> {\n        handleEvent(event: TEvent): void\n    }\n\n    /**\n     * The common options for both `addEventListener` and `removeEventListener` methods.\n     * @see https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions\n     */\n    export interface Options {\n        capture?: boolean\n    }\n\n    /**\n     * The options for the `addEventListener` methods.\n     * @see https://dom.spec.whatwg.org/#dictdef-addeventlisteneroptions\n     */\n    export interface AddOptions extends Options {\n        passive?: boolean\n        once?: boolean\n        signal?: AbortSignal | null | undefined\n    }\n\n    /**\n     * The abort signal.\n     * @see https://dom.spec.whatwg.org/#abortsignal\n     */\n    export interface AbortSignal extends EventTarget<{ abort: Event }> {\n        readonly aborted: boolean\n        onabort: CallbackFunction<this, Event> | null\n    }\n\n    /**\n     * The event data to dispatch in strict mode.\n     */\n    export type EventData<\n        TEventMap extends Record<string, Event>,\n        TMode extends \"standard\" | \"strict\",\n        TEventType extends string\n    > = TMode extends \"strict\"\n        ? IsValidEventMap<TEventMap> extends true\n            ? ExplicitType<TEventType> &\n                  Omit<TEventMap[TEventType], keyof Event> &\n                  Partial<Omit<Event, \"type\">>\n            : never\n        : never\n\n    /**\n     * Define explicit `type` property if `T` is a string literal.\n     * Otherwise, never.\n     */\n    export type ExplicitType<T extends string> = string extends T\n        ? never\n        : { readonly type: T }\n\n    /**\n     * The event listener type in standard mode.\n     * Otherwise, never.\n     */\n    export type FallbackEventListener<\n        TEventTarget extends EventTarget<any, any>,\n        TMode extends \"standard\" | \"strict\"\n    > = TMode extends \"standard\"\n        ? EventListener<TEventTarget, Event> | null | undefined\n        : never\n\n    /**\n     * The event type in standard mode.\n     * Otherwise, never.\n     */\n    export type FallbackEvent<\n        TMode extends \"standard\" | \"strict\"\n    > = TMode extends \"standard\" ? Event : never\n\n    /**\n     * Check if given event map is valid.\n     * It's valid if the keys of the event map are narrower than `string`.\n     */\n    export type IsValidEventMap<T> = string extends keyof T ? false : true\n}\n\nexport { $ as getEventTargetInternalData }\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Internal data for EventTarget\n */\ntype EventTargetInternalData = ListenerListMap\n\n/**\n * Internal data.\n */\nconst internalDataMap = new WeakMap<any, EventTargetInternalData>()\n\n/**\n * Get private data.\n * @param target The event target object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $(target: any, name = \"this\"): EventTargetInternalData {\n    const retv = internalDataMap.get(target)\n    assertType(\n        retv != null,\n        \"'%s' must be an object that EventTarget constructor created, but got another one: %o\",\n        name,\n        target,\n    )\n    return retv\n}\n\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeAddOptions(\n    type: string,\n    callback: EventTarget.EventListener<any, any> | null | undefined,\n    options: boolean | EventTarget.AddOptions | undefined,\n): {\n    type: string\n    callback: EventTarget.EventListener<any, any> | undefined\n    capture: boolean\n    passive: boolean\n    once: boolean\n    signal: EventTarget.AbortSignal | undefined\n} {\n    assertCallback(callback)\n\n    if (typeof options === \"object\" && options !== null) {\n        return {\n            type: String(type),\n            callback: callback ?? undefined,\n            capture: Boolean(options.capture),\n            passive: Boolean(options.passive),\n            once: Boolean(options.once),\n            signal: options.signal ?? undefined,\n        }\n    }\n\n    return {\n        type: String(type),\n        callback: callback ?? undefined,\n        capture: Boolean(options),\n        passive: false,\n        once: false,\n        signal: undefined,\n    }\n}\n\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeOptions(\n    type: string,\n    callback: EventTarget.EventListener<any, any> | null | undefined,\n    options: boolean | EventTarget.Options | undefined,\n): {\n    type: string\n    callback: EventTarget.EventListener<any, any> | undefined\n    capture: boolean\n} {\n    assertCallback(callback)\n\n    if (typeof options === \"object\" && options !== null) {\n        return {\n            type: String(type),\n            callback: callback ?? undefined,\n            capture: Boolean(options.capture),\n        }\n    }\n\n    return {\n        type: String(type),\n        callback: callback ?? undefined,\n        capture: Boolean(options),\n    }\n}\n\n/**\n * Assert the type of 'callback' argument.\n * @param callback The callback to check.\n */\nfunction assertCallback(callback: any): void {\n    if (\n        typeof callback === \"function\" ||\n        (typeof callback === \"object\" &&\n            callback !== null &&\n            typeof callback.handleEvent === \"function\")\n    ) {\n        return\n    }\n    if (callback == null || typeof callback === \"object\") {\n        InvalidEventListener.warn(callback)\n        return\n    }\n\n    throw new TypeError(format(InvalidEventListener.message, [callback]))\n}\n\n/**\n * Print warning for duplicated.\n * @param listener The current listener that is duplicated.\n * @param passive The passive flag of the new duplicated listener.\n * @param once The once flag of the new duplicated listener.\n * @param signal The signal object of the new duplicated listener.\n */\nfunction warnDuplicate(\n    listener: Listener,\n    passive: boolean,\n    once: boolean,\n    signal: EventTarget.AbortSignal | undefined,\n): void {\n    EventListenerWasDuplicated.warn(\n        isCapture(listener) ? \"capture\" : \"bubble\",\n        listener.callback,\n    )\n\n    if (isPassive(listener) !== passive) {\n        OptionWasIgnored.warn(\"passive\")\n    }\n    if (isOnce(listener) !== once) {\n        OptionWasIgnored.warn(\"once\")\n    }\n    if (listener.signal !== signal) {\n        OptionWasIgnored.warn(\"signal\")\n    }\n}\n\n// Set enumerable\nconst keys = Object.getOwnPropertyNames(EventTarget.prototype)\nfor (let i = 0; i < keys.length; ++i) {\n    if (keys[i] === \"constructor\") {\n        continue\n    }\n    Object.defineProperty(EventTarget.prototype, keys[i], { enumerable: true })\n}\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof Global !== \"undefined\" &&\n    typeof Global.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, Global.EventTarget.prototype)\n}\n","import { Event } from \"./event\"\nimport { EventTarget, getEventTargetInternalData } from \"./event-target\"\nimport { addListener, ListenerList, removeListener } from \"./listener-list\"\nimport { ensureListenerList } from \"./listener-list-map\"\nimport { InvalidAttributeHandler } from \"./warnings\"\n\n/**\n * Get the current value of a given event attribute.\n * @param target The `EventTarget` object to get.\n * @param type The event type.\n */\nexport function getEventAttributeValue<\n    TEventTarget extends EventTarget<any, any>,\n    TEvent extends Event\n>(\n    target: TEventTarget,\n    type: string,\n): EventTarget.CallbackFunction<TEventTarget, TEvent> | null {\n    const listMap = getEventTargetInternalData(target, \"target\")\n    return listMap[type]?.attrCallback ?? null\n}\n\n/**\n * Set an event listener to a given event attribute.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nexport function setEventAttributeValue(\n    target: EventTarget<any, any>,\n    type: string,\n    callback: EventTarget.CallbackFunction<any, any> | null,\n): void {\n    if (callback != null && typeof callback !== \"function\") {\n        InvalidAttributeHandler.warn(callback)\n    }\n\n    if (\n        typeof callback === \"function\" ||\n        (typeof callback === \"object\" && callback !== null)\n    ) {\n        upsertEventAttributeListener(target, type, callback)\n    } else {\n        removeEventAttributeListener(target, type)\n    }\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Update or insert the given event attribute handler.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction upsertEventAttributeListener<\n    TEventTarget extends EventTarget<any, any>\n>(\n    target: TEventTarget,\n    type: string,\n    callback: EventTarget.CallbackFunction<TEventTarget, any>,\n): void {\n    const list = ensureListenerList(\n        getEventTargetInternalData(target, \"target\"),\n        String(type),\n    )\n    list.attrCallback = callback\n\n    if (list.attrListener == null) {\n        list.attrListener = addListener(\n            list,\n            defineEventAttributeCallback(list),\n            false,\n            false,\n            false,\n            undefined,\n        )\n    }\n}\n\n/**\n * Remove the given event attribute handler.\n * @param target The `EventTarget` object to remove.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction removeEventAttributeListener(\n    target: EventTarget<any, any>,\n    type: string,\n): void {\n    const listMap = getEventTargetInternalData(target, \"target\")\n    const list = listMap[String(type)]\n    if (list && list.attrListener) {\n        removeListener(list, list.attrListener.callback, false)\n        list.attrCallback = list.attrListener = undefined\n    }\n}\n\n/**\n * Define the callback function for the given listener list object.\n * It calls `attrCallback` property if the property value is a function.\n * @param list The `ListenerList` object.\n */\nfunction defineEventAttributeCallback(\n    list: ListenerList,\n): EventTarget.CallbackFunction<any, any> {\n    return function (event) {\n        const callback = list.attrCallback\n        if (typeof callback === \"function\") {\n            callback.call(this, event)\n        }\n    }\n}\n","import { Event } from \"./event\"\nimport {\n    getEventAttributeValue,\n    setEventAttributeValue,\n} from \"./event-attribute-handler\"\nimport { EventTarget } from \"./event-target\"\n\n/**\n * Define an `EventTarget` class that has event attibutes.\n * @param types The types to define event attributes.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nexport function defineCustomEventTarget<\n    TEventMap extends Record<string, Event>,\n    TMode extends \"standard\" | \"strict\" = \"standard\"\n>(\n    ...types: (string & keyof TEventMap)[]\n): defineCustomEventTarget.CustomEventTargetConstructor<TEventMap, TMode> {\n    class CustomEventTarget extends EventTarget {}\n    for (let i = 0; i < types.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, types[i])\n    }\n\n    return CustomEventTarget as any\n}\n\nexport namespace defineCustomEventTarget {\n    /**\n     * The interface of CustomEventTarget constructor.\n     */\n    export type CustomEventTargetConstructor<\n        TEventMap extends Record<string, Event>,\n        TMode extends \"standard\" | \"strict\"\n    > = {\n        /**\n         * Create a new instance.\n         */\n        new (): CustomEventTarget<TEventMap, TMode>\n        /**\n         * prototype object.\n         */\n        prototype: CustomEventTarget<TEventMap, TMode>\n    }\n\n    /**\n     * The interface of CustomEventTarget.\n     */\n    export type CustomEventTarget<\n        TEventMap extends Record<string, Event>,\n        TMode extends \"standard\" | \"strict\"\n    > = EventTarget<TEventMap, TMode> &\n        defineEventAttribute.EventAttributes<any, TEventMap>\n}\n\n/**\n * Define an event attribute.\n * @param target The `EventTarget` object to define an event attribute.\n * @param type The event type to define.\n * @param _eventClass Unused, but to infer `Event` class type.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nexport function defineEventAttribute<\n    TEventTarget extends EventTarget,\n    TEventType extends string,\n    TEventConstrucor extends typeof Event\n>(\n    target: TEventTarget,\n    type: TEventType,\n    _eventClass?: TEventConstrucor,\n): asserts target is TEventTarget &\n    defineEventAttribute.EventAttributes<\n        TEventTarget,\n        Record<TEventType, InstanceType<TEventConstrucor>>\n    > {\n    Object.defineProperty(target, `on${type}`, {\n        get() {\n            return getEventAttributeValue(this, type)\n        },\n        set(value) {\n            setEventAttributeValue(this, type, value)\n        },\n        configurable: true,\n        enumerable: true,\n    })\n}\n\nexport namespace defineEventAttribute {\n    /**\n     * Definition of event attributes.\n     */\n    export type EventAttributes<\n        TEventTarget extends EventTarget<any, any>,\n        TEventMap extends Record<string, Event>\n    > = {\n        [P in string &\n            keyof TEventMap as `on${P}`]: EventTarget.CallbackFunction<\n            TEventTarget,\n            TEventMap[P]\n        > | null\n    }\n}\n","export default function isPromise(value: unknown): value is PromiseLike<unknown> {\n  return !!(\n    (typeof value === 'function' || typeof value === 'object') &&\n    value &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n","import isPromise from './private/isPromise.ts';\n\nexport function onErrorResumeNext<T extends () => Promise<U>, U = unknown>(\n  fn: T,\n  context?: undefined\n): Promise<U | undefined>;\n\nexport function onErrorResumeNext<T extends (this: V) => Promise<U>, U = unknown, V = undefined>(\n  fn: T,\n  context: V\n): Promise<U | undefined>;\n\nexport function onErrorResumeNext<T extends (this: V) => Promise<U>, U = unknown, V = undefined>(\n  fn: T,\n  context: V\n): Promise<U | undefined> {\n  return new Promise<U | undefined>(resolve => {\n    try {\n      const result = fn.call(context);\n\n      if (isPromise(result)) {\n        result.then(resolve, () => resolve(undefined));\n      } else {\n        resolve(result);\n      }\n    } catch {\n      resolve(undefined);\n    }\n  });\n}\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","/* eslint no-await-in-loop: \"off\" */\n\nexport default class {\n  constructor(audioContext) {\n    this.audioContext = audioContext;\n  }\n\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('pause'));\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('resume'));\n  }\n\n  async start(queue) {\n    let utterance;\n\n    while ((utterance = queue.shift())) {\n      this.playingUtterance = utterance;\n\n      await utterance.play(this.audioContext);\n\n      this.playingUtterance = null;\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext.state === 'suspended') {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.resume();\n    }\n  }\n}\n","/* eslint no-await-in-loop: \"off\" */\n\nimport memoize from 'memoize-one';\n\nimport AudioContextConsumer from './AudioContextConsumer';\n\nexport default class {\n  constructor({ audioContext, ponyfill }) {\n    this.consumer = null;\n    this.paused = false;\n    this.queue = [];\n\n    this.getAudioContext = memoize(() => audioContext || new ponyfill.AudioContext());\n  }\n\n  pause() {\n    this.paused = true;\n    this.consumer && this.consumer.pause();\n  }\n\n  push(utterance) {\n    this.queue.push(utterance);\n    this.startConsumer();\n  }\n\n  resume() {\n    this.paused = false;\n\n    if (this.consumer) {\n      this.consumer.resume();\n    } else {\n      this.startConsumer();\n    }\n  }\n\n  get speaking() {\n    return !!this.consumer;\n  }\n\n  async startConsumer() {\n    while (!this.paused && this.queue.length && !this.consumer) {\n      this.consumer = new AudioContextConsumer(this.getAudioContext());\n\n      await this.consumer.start(this.queue);\n\n      this.consumer = null;\n    }\n  }\n\n  stop() {\n    this.queue.splice(0);\n    this.consumer && this.consumer.stop();\n  }\n}\n","import { Event } from 'event-target-shim';\n\nexport default class SpeechSynthesisEvent extends Event {\n  constructor(type) {\n    super(type);\n  }\n}\n","type Resolvers<T> = {\n  reject: (error: unknown) => void;\n  resolve: (value: T) => void;\n  promise: Promise<T>;\n};\n\nfunction withResolvers<T>(): Resolvers<T> {\n  const resolvers: Partial<Resolvers<T>> = {};\n\n  resolvers.promise = new Promise((resolve, reject) => {\n    resolvers.reject = reject;\n    resolvers.resolve = resolve;\n  });\n\n  return resolvers as Resolvers<T>;\n}\n\nexport class EventAsPromise<T> {\n  constructor() {\n    this.#eventListener = (event: T) => {\n      const deferred = this.#orderedResolvers.shift();\n\n      deferred && deferred.resolve(event);\n\n      if (this.#upcomingResolvers) {\n        this.#upcomingResolvers.resolve(event);\n        this.#upcomingResolvers = undefined;\n      }\n    };\n  }\n\n  #eventListener: (event: T) => void;\n  #orderedResolvers: Resolvers<T>[] = [];\n  #upcomingResolvers: Resolvers<T> | undefined = undefined;\n\n  get eventListener() {\n    return this.#eventListener;\n  }\n\n  [Symbol.iterator]() {\n    return {\n      next: () => ({\n        done: false,\n        value: this.upcoming()\n      })\n    };\n  }\n\n  one() {\n    const deferred = withResolvers<T>();\n\n    this.#orderedResolvers.push(deferred);\n\n    return deferred.promise;\n  }\n\n  upcoming() {\n    if (!this.#upcomingResolvers) {\n      this.#upcomingResolvers = withResolvers<T>();\n    }\n\n    return this.#upcomingResolvers.promise;\n  }\n}\n","const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\n\nexport const encode = (arraybuffer: ArrayBuffer): string => {\n    let bytes = new Uint8Array(arraybuffer),\n        i,\n        len = bytes.length,\n        base64 = '';\n\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    } else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n};\n\nexport const decode = (base64: string): ArrayBuffer => {\n    let bufferLength = base64.length * 0.75,\n        len = base64.length,\n        i,\n        p = 0,\n        encoded1,\n        encoded2,\n        encoded3,\n        encoded4;\n\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    const arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n};\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 100] }] */\n\n// Cognitive Services does not support unsigned percentage\n// It must be converted into +/- first.\nfunction relativePercentage(value) {\n  let relative = Math.round((value - 1) * 100);\n\n  if (relative >= 0) {\n    relative = '+' + relative;\n  }\n\n  return relative + '%';\n}\n\nexport default function buildSSML({ lang, pitch = 1, rate = 1, text, voice, volume }) {\n  return `<speak version=\"1.0\" xml:lang=\"${lang}\">\n  <voice xml:lang=\"${lang}\" name=\"${voice}\">\n    <prosody pitch=\"${relativePercentage(pitch)}\" rate=\"${relativePercentage(rate)}\" volume=\"${relativePercentage(\n      volume\n    )}\">\n      ${text}\n    </prosody>\n  </voice>\n</speak>`;\n}\n","const SPEAK_TAG_PATTERN = /^\\s*<speak(\\s|\\/?>)/u;\nconst XML_PROLOG_PATTERN = /^\\s*<\\?xml\\s/u;\n\nexport default function isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n","import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function ({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${encodeURI(region)}.voice.speech.microsoft.com`\n      : `${encodeURI(region)}.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${encodeURI(deploymentId)}` : '';\n  const url = `https://${hostname}/cognitiveservices/v1${search}`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${authorizationToken}`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${res.status}`);\n  }\n\n  return res.arrayBuffer();\n}\n","export default function subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n\n  return () => target.removeEventListener(name, handler);\n}\n","/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n\nimport { EventAsPromise } from 'event-as-promise';\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim';\n\nimport fetchSpeechData from './fetchSpeechData';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport subscribeEvent from './subscribeEvent';\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise((resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(\n      audioContext,\n      'statechange',\n      ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener()\n    );\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nclass SpeechSynthesisUtterance extends EventTarget {\n  constructor(text) {\n    super();\n\n    this._lang = null;\n    this._pitch = 1;\n    this._rate = 1;\n    this._voice = null;\n    this._volume = 1;\n\n    this.text = text;\n\n    this.onboundary = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onmark = null;\n    this.onpause = null;\n    this.onresume = null;\n    this.onstart = null;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  set lang(value) {\n    this._lang = value;\n  }\n\n  get onboundary() {\n    return getEventAttributeValue(this, 'boundary');\n  }\n\n  set onboundary(value) {\n    setEventAttributeValue(this, 'boundary', value);\n  }\n\n  get onend() {\n    return getEventAttributeValue(this, 'end');\n  }\n\n  set onend(value) {\n    setEventAttributeValue(this, 'end', value);\n  }\n\n  get onerror() {\n    return getEventAttributeValue(this, 'error');\n  }\n\n  set onerror(value) {\n    setEventAttributeValue(this, 'error', value);\n  }\n\n  get onmark() {\n    return getEventAttributeValue(this, 'mark');\n  }\n\n  set onmark(value) {\n    setEventAttributeValue(this, 'mark', value);\n  }\n\n  get onpause() {\n    return getEventAttributeValue(this, 'pause');\n  }\n\n  set onpause(value) {\n    setEventAttributeValue(this, 'pause', value);\n  }\n\n  get onresume() {\n    return getEventAttributeValue(this, 'resume');\n  }\n\n  set onresume(value) {\n    setEventAttributeValue(this, 'resume', value);\n  }\n\n  get onstart() {\n    return getEventAttributeValue(this, 'start');\n  }\n\n  set onstart(value) {\n    setEventAttributeValue(this, 'start', value);\n  }\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(value) {\n    this._pitch = value;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(value) {\n    this._rate = value;\n  }\n\n  get voice() {\n    return this._voice;\n  }\n\n  set voice(value) {\n    this._voice = value;\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(value) {\n    this._volume = value;\n  }\n\n  preload({ deploymentId, fetchCredentials, outputFormat }) {\n    this.arrayBufferPromise = fetchSpeechData({\n      fetchCredentials,\n      deploymentId,\n      lang: this.lang || window.navigator.language,\n      outputFormat,\n      pitch: this.pitch,\n      rate: this.rate,\n      text: this.text,\n      voice: this.voice && this.voice.voiceURI,\n      volume: this.volume\n    });\n\n    // We need to call \"catch\" to make sure the Promise is running.\n    // We will ignore the reject result and handled in play() later.\n    this.arrayBufferPromise.catch();\n  }\n\n  async play(audioContext) {\n    try {\n      // We should emit \"start\" event even if preload() failed.\n      this.dispatchEvent(new SpeechSynthesisEvent('start'));\n\n      // HACK: iOS requires bufferSourceNode to be constructed before decoding data.\n      const source = audioContext.createBufferSource();\n      const audioBuffer = await asyncDecodeAudioData(audioContext, await this.arrayBufferPromise);\n\n      this._playingSource = source;\n\n      await playDecoded(audioContext, audioBuffer, source);\n\n      this._playingSource = null;\n      this.dispatchEvent(new SpeechSynthesisEvent('end'));\n    } catch (error) {\n      // \"message\" is not in spec but to provide a friendly message.\n      this.dispatchEvent(new ErrorEvent('error', { error: 'synthesis-failed', message: error.stack }));\n    }\n  }\n\n  stop() {\n    this._playingSource && this._playingSource.stop();\n  }\n}\n\nexport default SpeechSynthesisUtterance;\n","export default class {\n  constructor({ gender, lang, voiceURI }) {\n    this._default = false;\n    this._gender = gender;\n    this._lang = lang;\n    this._localService = false;\n    this._name = voiceURI;\n    this._voiceURI = voiceURI;\n  }\n\n  get default() {\n    return this._default;\n  }\n\n  get gender() {\n    return this._gender;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  get localService() {\n    return this._localService;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get voiceURI() {\n    return this._voiceURI;\n  }\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${region}.customvoice.api.speech.microsoft.com`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${encodeURI(hostname)}/api/texttospeech/v2.0/endpoints/${encodeURIComponent(deploymentId)}`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function ({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nexport default async function fetchVoices({ authorizationToken, region, speechSynthesisHostname, subscriptionKey }) {\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const hostname = speechSynthesisHostname || `${encodeURI(region)}.tts.speech.microsoft.com`;\n  const res = await fetch(`https://${hostname}/cognitiveservices/voices/list`, {\n    headers: {\n      'content-type': 'application/json',\n      ...(authorizationToken\n        ? {\n            authorization: `Bearer ${authorizationToken}`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch voices');\n  }\n\n  const voices = await res.json();\n\n  return voices\n    .map(({ Gender: gender, Locale: lang, Name: voiceURI }) => new SpeechSynthesisVoice({ gender, lang, voiceURI }))\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint class-methods-use-this: 0 */\n\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim';\nimport { onErrorResumeNext } from 'on-error-resume-next/async';\nimport createDeferred from 'p-defer';\n\nimport patchOptions from '../patchOptions';\nimport AudioContextQueue from './AudioContextQueue';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport SpeechSynthesisUtterance from './SpeechSynthesisUtterance';\nimport fetchCustomVoices from './fetchCustomVoices';\nimport fetchVoices from './fetchVoices';\n\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#audio-outputs\nconst DEFAULT_OUTPUT_FORMAT = 'audio-24khz-160kbitrate-mono-mp3';\nconst EMPTY_ARRAY = [];\n\nexport default options => {\n  const {\n    audioContext,\n    fetchCredentials,\n    ponyfill = {\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    },\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat = DEFAULT_OUTPUT_FORMAT\n  } = patchOptions(options);\n\n  if (!audioContext && !ponyfill.AudioContext) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support Web Audio and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  class SpeechSynthesis extends EventTarget {\n    constructor() {\n      super();\n\n      this.queue = new AudioContextQueue({ audioContext, ponyfill });\n\n      this.updateVoices();\n    }\n\n    cancel() {\n      this.queue.stop();\n    }\n\n    getVoices() {\n      return EMPTY_ARRAY;\n    }\n\n    get onvoiceschanged() {\n      return getEventAttributeValue(this, 'voiceschanged');\n    }\n\n    set onvoiceschanged(value) {\n      setEventAttributeValue(this, 'voiceschanged', value);\n    }\n\n    pause() {\n      this.queue.pause();\n    }\n\n    resume() {\n      this.queue.resume();\n    }\n\n    speak(utterance) {\n      if (!(utterance instanceof SpeechSynthesisUtterance)) {\n        throw new Error('invalid utterance');\n      }\n\n      const { reject, resolve, promise } = createDeferred();\n      const handleError = ({ error: errorCode, message }) => {\n        const error = new Error(errorCode);\n\n        error.stack = message;\n\n        reject(error);\n      };\n\n      utterance.addEventListener('end', resolve);\n      utterance.addEventListener('error', handleError);\n\n      utterance.preload({\n        deploymentId: speechSynthesisDeploymentId,\n        fetchCredentials,\n        outputFormat: speechSynthesisOutputFormat\n      });\n\n      this.queue.push(utterance);\n\n      return promise.finally(() => {\n        utterance.removeEventListener('end', resolve);\n        utterance.removeEventListener('error', handleError);\n      });\n    }\n\n    get speaking() {\n      return this.queue.speaking;\n    }\n\n    async updateVoices() {\n      const { customVoiceHostname, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n      if (speechSynthesisDeploymentId) {\n        if (subscriptionKey) {\n          console.warn(\n            'web-speech-cognitive-services: Listing of custom voice models are only available when using subscription key.'\n          );\n\n          await onErrorResumeNext(async () => {\n            const voices = await fetchCustomVoices({\n              customVoiceHostname,\n              deploymentId: speechSynthesisDeploymentId,\n              region,\n              speechSynthesisHostname,\n              subscriptionKey\n            });\n\n            this.getVoices = () => voices;\n          });\n        }\n      } else {\n        // If fetch voice list failed, we will not emit \"voiceschanged\" event.\n        // In the spec, there is no \"error\" event.\n\n        await onErrorResumeNext(async () => {\n          const voices = await fetchVoices(await fetchCredentials());\n\n          this.getVoices = () => voices;\n        });\n      }\n\n      this.dispatchEvent(new SpeechSynthesisEvent('voiceschanged'));\n    }\n  }\n\n  return {\n    speechSynthesis: new SpeechSynthesis(),\n    SpeechSynthesisEvent,\n    SpeechSynthesisUtterance\n  };\n};\n","import createSpeechSynthesisPonyfill from './TextToSpeech/createSpeechSynthesisPonyfill';\n\nexport default createSpeechSynthesisPonyfill;\n","/* global process */\n\nimport {\n  createSpeechRecognitionPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer,\n  type SpeechGrammarList,\n  type SpeechRecognitionAlternative,\n  type SpeechRecognitionErrorEvent,\n  type SpeechRecognitionEvent,\n  type SpeechRecognitionEventListenerMap,\n  type SpeechRecognitionResult,\n  type SpeechRecognitionResultList\n} from './SpeechServices/SpeechToText';\nimport createSpeechSynthesisPonyfill from './SpeechServices/TextToSpeech';\nimport fetchAuthorizationToken from './SpeechServices/fetchAuthorizationToken';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function createSpeechServicesPonyfill(options: any = {}): any {\n  return {\n    ...createSpeechRecognitionPonyfill(options),\n    ...createSpeechSynthesisPonyfill(options)\n  };\n}\n\nexport {\n  createSpeechRecognitionPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer,\n  createSpeechSynthesisPonyfill,\n  fetchAuthorizationToken,\n  type SpeechGrammarList,\n  type SpeechRecognitionAlternative,\n  type SpeechRecognitionErrorEvent,\n  type SpeechRecognitionEvent,\n  type SpeechRecognitionEventListenerMap,\n  type SpeechRecognitionResult,\n  type SpeechRecognitionResultList\n};\n\nconst meta = document.createElement('meta');\n\nmeta.setAttribute('name', 'web-speech-cognitive-services');\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nmeta.setAttribute('content', `version=${process.env.npm_package_version}`);\n\ndocument.head.appendChild(meta);\n","import { createSpeechRecognitionPonyfillFromRecognizer, createSpeechServicesPonyfill } from './index';\n\nglobalThis.WebSpeechCognitiveServices = {\n  create: createSpeechServicesPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAIlB,UAAI;AACJ,UAAM,QAAQ,IAAI,WAAW,EAAE;AAE/B,eAAS,MAAM;AAEb,YAAI,CAAC,iBAAiB;AAEpB,4BAAkB,OAAO,WAAW,eAAe,OAAO,mBAAmB,OAAO,gBAAgB,KAAK,MAAM;AAE/G,cAAI,CAAC,iBAAiB;AACpB,kBAAM,IAAI,MAAM,0GAA0G;AAAA,UAC5H;AAAA,QACF;AAEA,eAAO,gBAAgB,KAAK;AAAA,MAC9B;AAAA;AAAA;;;ACxBA;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAClB,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;ACPlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAElB,UAAI,SAAS,uBAAuB,eAAqB;AAEzD,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAE9F,eAAS,SAAS,MAAM;AACtB,eAAO,OAAO,SAAS,YAAY,OAAO,QAAQ,KAAK,IAAI;AAAA,MAC7D;AAEA,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;AChBlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAClB,cAAQ,kBAAkB;AAE1B,UAAI,YAAY,uBAAuB,kBAAwB;AAE/D,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAM9F,UAAM,YAAY,CAAC;AAEnB,eAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,kBAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AAAA,MAClD;AAEA,eAAS,gBAAgB,KAAK,SAAS,GAAG;AAGxC,eAAO,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC;AAAA,MACnf;AAEA,eAAS,UAAU,KAAK,SAAS,GAAG;AAClC,cAAM,OAAO,gBAAgB,KAAK,MAAM;AAMxC,YAAI,EAAE,GAAG,UAAU,SAAS,IAAI,GAAG;AACjC,gBAAM,UAAU,6BAA6B;AAAA,QAC/C;AAEA,eAAO;AAAA,MACT;AAEA,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;AC3ClB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAElB,UAAI,OAAO,uBAAuB,aAAmB;AAErD,UAAIA,cAAa;AAEjB,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAM9F,UAAI;AAEJ,UAAI;AAGJ,UAAI,aAAa;AACjB,UAAI,aAAa;AAEjB,eAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,YAAI,IAAI,OAAO,UAAU;AACzB,cAAM,IAAI,OAAO,IAAI,MAAM,EAAE;AAC7B,kBAAU,WAAW,CAAC;AACtB,YAAI,OAAO,QAAQ,QAAQ;AAC3B,YAAI,WAAW,QAAQ,aAAa,SAAY,QAAQ,WAAW;AAInE,YAAI,QAAQ,QAAQ,YAAY,MAAM;AACpC,gBAAM,YAAY,QAAQ,WAAW,QAAQ,OAAO,KAAK,SAAS;AAElE,cAAI,QAAQ,MAAM;AAEhB,mBAAO,UAAU,CAAC,UAAU,CAAC,IAAI,GAAM,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;AAAA,UAC7G;AAEA,cAAI,YAAY,MAAM;AAEpB,uBAAW,aAAa,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK;AAAA,UAC9D;AAAA,QACF;AAMA,YAAI,QAAQ,QAAQ,UAAU,SAAY,QAAQ,QAAQ,KAAK,IAAI;AAGnE,YAAI,QAAQ,QAAQ,UAAU,SAAY,QAAQ,QAAQ,aAAa;AAEvE,cAAM,KAAK,QAAQ,cAAc,QAAQ,cAAc;AAEvD,YAAI,KAAK,KAAK,QAAQ,aAAa,QAAW;AAC5C,qBAAW,WAAW,IAAI;AAAA,QAC5B;AAIA,aAAK,KAAK,KAAK,QAAQ,eAAe,QAAQ,UAAU,QAAW;AACjE,kBAAQ;AAAA,QACV;AAGA,YAAI,SAAS,KAAO;AAClB,gBAAM,IAAI,MAAM,iDAAiD;AAAA,QACnE;AAEA,qBAAa;AACb,qBAAa;AACb,oBAAY;AAEZ,iBAAS;AAET,cAAM,OAAO,QAAQ,aAAa,MAAQ,SAAS;AACnD,UAAE,GAAG,IAAI,OAAO,KAAK;AACrB,UAAE,GAAG,IAAI,OAAO,KAAK;AACrB,UAAE,GAAG,IAAI,OAAO,IAAI;AACpB,UAAE,GAAG,IAAI,KAAK;AAEd,cAAM,MAAM,QAAQ,aAAc,MAAQ;AAC1C,UAAE,GAAG,IAAI,QAAQ,IAAI;AACrB,UAAE,GAAG,IAAI,MAAM;AAEf,UAAE,GAAG,IAAI,QAAQ,KAAK,KAAM;AAE5B,UAAE,GAAG,IAAI,QAAQ,KAAK;AAEtB,UAAE,GAAG,IAAI,aAAa,IAAI;AAE1B,UAAE,GAAG,IAAI,WAAW;AAEpB,iBAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,YAAE,IAAI,CAAC,IAAI,KAAK,CAAC;AAAA,QACnB;AAEA,eAAO,QAAQ,GAAGA,YAAW,iBAAiB,CAAC;AAAA,MACjD;AAEA,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;AC1GlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAElB,UAAI,YAAY,uBAAuB,kBAAwB;AAE/D,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAE9F,eAASC,OAAM,MAAM;AACnB,YAAI,EAAE,GAAG,UAAU,SAAS,IAAI,GAAG;AACjC,gBAAM,UAAU,cAAc;AAAA,QAChC;AAEA,YAAI;AACJ,cAAM,MAAM,IAAI,WAAW,EAAE;AAE7B,YAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE,OAAO;AAClD,YAAI,CAAC,IAAI,MAAM,KAAK;AACpB,YAAI,CAAC,IAAI,MAAM,IAAI;AACnB,YAAI,CAAC,IAAI,IAAI;AAEb,YAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,EAAE,GAAG,EAAE,OAAO;AACnD,YAAI,CAAC,IAAI,IAAI;AAEb,YAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,YAAI,CAAC,IAAI,IAAI;AAEb,YAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,YAAI,CAAC,IAAI,IAAI;AAGb,YAAI,EAAE,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,KAAK,gBAAgB;AACnE,YAAI,EAAE,IAAI,IAAI,aAAc;AAC5B,YAAI,EAAE,IAAI,MAAM,KAAK;AACrB,YAAI,EAAE,IAAI,MAAM,KAAK;AACrB,YAAI,EAAE,IAAI,MAAM,IAAI;AACpB,YAAI,EAAE,IAAI,IAAI;AACd,eAAO;AAAA,MACT;AAEA,UAAI,WAAWA;AACf,cAAQ,UAAU;AAAA;AAAA;;;AC5ClB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,MAAM,QAAQ,MAAM;AAC5B,cAAQ,UAAU;AAElB,UAAIC,cAAa;AAEjB,UAAI,SAAS,uBAAuB,eAAqB;AAEzD,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAE9F,eAAS,cAAc,KAAK;AAC1B,cAAM,SAAS,mBAAmB,GAAG,CAAC;AAEtC,cAAM,QAAQ,CAAC;AAEf,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,gBAAM,KAAK,IAAI,WAAW,CAAC,CAAC;AAAA,QAC9B;AAEA,eAAO;AAAA,MACT;AAEA,UAAM,MAAM;AACZ,cAAQ,MAAM;AACd,UAAMC,OAAM;AACZ,cAAQ,MAAMA;AAEd,eAAS,IAAI,MAAM,SAAS,UAAU;AACpC,iBAAS,aAAa,OAAO,WAAW,KAAK,QAAQ;AACnD,cAAI;AAEJ,cAAI,OAAO,UAAU,UAAU;AAC7B,oBAAQ,cAAc,KAAK;AAAA,UAC7B;AAEA,cAAI,OAAO,cAAc,UAAU;AACjC,yBAAa,GAAG,OAAO,SAAS,SAAS;AAAA,UAC3C;AAEA,gBAAM,aAAa,eAAe,QAAQ,eAAe,SAAS,SAAS,WAAW,YAAY,IAAI;AACpG,kBAAM,UAAU,kEAAkE;AAAA,UACpF;AAKA,cAAI,QAAQ,IAAI,WAAW,KAAK,MAAM,MAAM;AAC5C,gBAAM,IAAI,SAAS;AACnB,gBAAM,IAAI,OAAO,UAAU,MAAM;AACjC,kBAAQ,SAAS,KAAK;AACtB,gBAAM,CAAC,IAAI,MAAM,CAAC,IAAI,KAAO;AAC7B,gBAAM,CAAC,IAAI,MAAM,CAAC,IAAI,KAAO;AAE7B,cAAI,KAAK;AACP,qBAAS,UAAU;AAEnB,qBAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,kBAAI,SAAS,CAAC,IAAI,MAAM,CAAC;AAAA,YAC3B;AAEA,mBAAO;AAAA,UACT;AAEA,kBAAQ,GAAGD,YAAW,iBAAiB,KAAK;AAAA,QAC9C;AAGA,YAAI;AACF,uBAAa,OAAO;AAAA,QACtB,SAAS,KAAK;AAAA,QAAC;AAGf,qBAAa,MAAM;AACnB,qBAAa,MAAMC;AACnB,eAAO;AAAA,MACT;AAAA;AAAA;;;AC/EA;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAsBlB,eAAS,IAAI,OAAO;AAClB,YAAI,OAAO,UAAU,UAAU;AAC7B,gBAAM,MAAM,SAAS,mBAAmB,KAAK,CAAC;AAE9C,kBAAQ,IAAI,WAAW,IAAI,MAAM;AAEjC,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,kBAAM,CAAC,IAAI,IAAI,WAAW,CAAC;AAAA,UAC7B;AAAA,QACF;AAEA,eAAO,qBAAqB,WAAW,aAAa,KAAK,GAAG,MAAM,SAAS,CAAC,CAAC;AAAA,MAC/E;AAMA,eAAS,qBAAqB,OAAO;AACnC,cAAM,SAAS,CAAC;AAChB,cAAM,WAAW,MAAM,SAAS;AAChC,cAAM,SAAS;AAEf,iBAAS,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AACpC,gBAAM,IAAI,MAAM,KAAK,CAAC,MAAM,IAAI,KAAK;AACrC,gBAAM,MAAM,SAAS,OAAO,OAAO,MAAM,IAAI,EAAI,IAAI,OAAO,OAAO,IAAI,EAAI,GAAG,EAAE;AAChF,iBAAO,KAAK,GAAG;AAAA,QACjB;AAEA,eAAO;AAAA,MACT;AAMA,eAAS,gBAAgB,cAAc;AACrC,gBAAQ,eAAe,OAAO,KAAK,KAAK,KAAK;AAAA,MAC/C;AAMA,eAAS,WAAW,GAAG,KAAK;AAE1B,UAAE,OAAO,CAAC,KAAK,OAAQ,MAAM;AAC7B,UAAE,gBAAgB,GAAG,IAAI,CAAC,IAAI;AAC9B,YAAI,IAAI;AACR,YAAI,IAAI;AACR,YAAI,IAAI;AACR,YAAI,IAAI;AAER,iBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,IAAI;AACrC,gBAAM,OAAO;AACb,gBAAM,OAAO;AACb,gBAAM,OAAO;AACb,gBAAM,OAAO;AACb,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,UAAU;AACzC,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,MAAM;AAC3C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,WAAW;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,UAAU;AAC1C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,QAAQ;AAC5C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,SAAS;AAC5C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,SAAS;AAC5C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,OAAO;AAC1C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,WAAW;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,SAAS;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,UAAU;AAC1C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,QAAQ;AAC5C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,UAAU;AACzC,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,UAAU;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,QAAQ;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,cAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,cAAI,QAAQ,GAAG,IAAI;AACnB,cAAI,QAAQ,GAAG,IAAI;AACnB,cAAI,QAAQ,GAAG,IAAI;AACnB,cAAI,QAAQ,GAAG,IAAI;AAAA,QACrB;AAEA,eAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MACpB;AAOA,eAAS,aAAa,OAAO;AAC3B,YAAI,MAAM,WAAW,GAAG;AACtB,iBAAO,CAAC;AAAA,QACV;AAEA,cAAM,UAAU,MAAM,SAAS;AAC/B,cAAM,SAAS,IAAI,YAAY,gBAAgB,OAAO,CAAC;AAEvD,iBAAS,IAAI,GAAG,IAAI,SAAS,KAAK,GAAG;AACnC,iBAAO,KAAK,CAAC,MAAM,MAAM,IAAI,CAAC,IAAI,QAAS,IAAI;AAAA,QACjD;AAEA,eAAO;AAAA,MACT;AAOA,eAAS,QAAQ,GAAG,GAAG;AACrB,cAAM,OAAO,IAAI,UAAW,IAAI;AAChC,cAAM,OAAO,KAAK,OAAO,KAAK,OAAO,OAAO;AAC5C,eAAO,OAAO,KAAK,MAAM;AAAA,MAC3B;AAMA,eAAS,cAAc,KAAK,KAAK;AAC/B,eAAO,OAAO,MAAM,QAAQ,KAAK;AAAA,MACnC;AAMA,eAAS,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAChC,eAAO,QAAQ,cAAc,QAAQ,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,MAC3E;AAEA,eAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,eAAO,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MAC7C;AAEA,eAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,eAAO,OAAO,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MAC7C;AAEA,eAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,eAAO,OAAO,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MACxC;AAEA,eAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,eAAO,OAAO,KAAK,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MAC3C;AAEA,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;AC9NlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAElB,UAAI,KAAK,uBAAuB,aAAmB;AAEnD,UAAI,MAAM,uBAAuB,aAAmB;AAEpD,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAE9F,UAAM,MAAM,GAAG,GAAG,SAAS,MAAM,IAAM,IAAI,OAAO;AAClD,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;ACflB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAClB,UAAM,aAAa,OAAO,WAAW,eAAe,OAAO,cAAc,OAAO,WAAW,KAAK,MAAM;AACtG,UAAI,WAAW;AAAA,QACb;AAAA,MACF;AACA,cAAQ,UAAU;AAAA;AAAA;;;ACVlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAElB,UAAI,UAAU,uBAAuB,gBAAsB;AAE3D,UAAI,OAAO,uBAAuB,aAAmB;AAErD,UAAIC,cAAa;AAEjB,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAE9F,eAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,YAAI,QAAQ,QAAQ,cAAc,CAAC,OAAO,CAAC,SAAS;AAClD,iBAAO,QAAQ,QAAQ,WAAW;AAAA,QACpC;AAEA,kBAAU,WAAW,CAAC;AAEtB,cAAM,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK,SAAS;AAG7D,aAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAC3B,aAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAE3B,YAAI,KAAK;AACP,mBAAS,UAAU;AAEnB,mBAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,gBAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,UAC1B;AAEA,iBAAO;AAAA,QACT;AAEA,gBAAQ,GAAGA,YAAW,iBAAiB,IAAI;AAAA,MAC7C;AAEA,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;AC1ClB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAIlB,eAAS,EAAE,GAAG,GAAG,GAAG,GAAG;AACrB,gBAAQ,GAAG;AAAA,UACT,KAAK;AACH,mBAAO,IAAI,IAAI,CAAC,IAAI;AAAA,UAEtB,KAAK;AACH,mBAAO,IAAI,IAAI;AAAA,UAEjB,KAAK;AACH,mBAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA,UAE7B,KAAK;AACH,mBAAO,IAAI,IAAI;AAAA,QACnB;AAAA,MACF;AAEA,eAAS,KAAK,GAAG,GAAG;AAClB,eAAO,KAAK,IAAI,MAAM,KAAK;AAAA,MAC7B;AAEA,eAAS,KAAK,OAAO;AACnB,cAAM,IAAI,CAAC,YAAY,YAAY,YAAY,UAAU;AACzD,cAAM,IAAI,CAAC,YAAY,YAAY,YAAY,WAAY,UAAU;AAErE,YAAI,OAAO,UAAU,UAAU;AAC7B,gBAAM,MAAM,SAAS,mBAAmB,KAAK,CAAC;AAE9C,kBAAQ,CAAC;AAET,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,kBAAM,KAAK,IAAI,WAAW,CAAC,CAAC;AAAA,UAC9B;AAAA,QACF,WAAW,CAAC,MAAM,QAAQ,KAAK,GAAG;AAEhC,kBAAQ,MAAM,UAAU,MAAM,KAAK,KAAK;AAAA,QAC1C;AAEA,cAAM,KAAK,GAAI;AACf,cAAM,IAAI,MAAM,SAAS,IAAI;AAC7B,cAAM,IAAI,KAAK,KAAK,IAAI,EAAE;AAC1B,cAAM,IAAI,IAAI,MAAM,CAAC;AAErB,iBAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,gBAAM,MAAM,IAAI,YAAY,EAAE;AAE9B,mBAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,gBAAI,CAAC,IAAI,MAAM,IAAI,KAAK,IAAI,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,IAAI,CAAC;AAAA,UACpI;AAEA,YAAE,CAAC,IAAI;AAAA,QACT;AAEA,UAAE,IAAI,CAAC,EAAE,EAAE,KAAK,MAAM,SAAS,KAAK,IAAI,KAAK,IAAI,GAAG,EAAE;AACtD,UAAE,IAAI,CAAC,EAAE,EAAE,IAAI,KAAK,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;AACtC,UAAE,IAAI,CAAC,EAAE,EAAE,KAAK,MAAM,SAAS,KAAK,IAAI;AAExC,iBAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,gBAAM,IAAI,IAAI,YAAY,EAAE;AAE5B,mBAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,cAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;AAAA,UACf;AAEA,mBAAS,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG;AAC5B,cAAE,CAAC,IAAI,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;AAAA,UAC5D;AAEA,cAAI,IAAI,EAAE,CAAC;AACX,cAAI,IAAI,EAAE,CAAC;AACX,cAAI,IAAI,EAAE,CAAC;AACX,cAAI,IAAI,EAAE,CAAC;AACX,cAAI,IAAI,EAAE,CAAC;AAEX,mBAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,kBAAM,IAAI,KAAK,MAAM,IAAI,EAAE;AAC3B,kBAAM,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM;AAC3D,gBAAI;AACJ,gBAAI;AACJ,gBAAI,KAAK,GAAG,EAAE,MAAM;AACpB,gBAAI;AACJ,gBAAI;AAAA,UACN;AAEA,YAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,YAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,YAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,YAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,YAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AAAA,QACtB;AAEA,eAAO,CAAC,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,GAAI;AAAA,MACjW;AAEA,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;ACvGlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAElB,UAAI,KAAK,uBAAuB,aAAmB;AAEnD,UAAI,OAAO,uBAAuB,cAAoB;AAEtD,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAE9F,UAAM,MAAM,GAAG,GAAG,SAAS,MAAM,IAAM,KAAK,OAAO;AACnD,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;ACflB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAClB,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;ACPlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,cAAQ,UAAU;AAElB,UAAI,YAAY,uBAAuB,kBAAwB;AAE/D,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAE9F,eAAS,QAAQ,MAAM;AACrB,YAAI,EAAE,GAAG,UAAU,SAAS,IAAI,GAAG;AACjC,gBAAM,UAAU,cAAc;AAAA,QAChC;AAEA,eAAO,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE;AAAA,MACxC;AAEA,UAAI,WAAW;AACf,cAAQ,UAAU;AAAA;AAAA;;;ACpBlB;AAAA;AAAA;AAEA,aAAO,eAAe,SAAS,cAAc;AAAA,QAC3C,OAAO;AAAA,MACT,CAAC;AACD,aAAO,eAAe,SAAS,OAAO;AAAA,QACpC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,KAAK;AAAA,QACd;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,SAAS;AAAA,QACtC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,OAAO;AAAA,QAChB;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,aAAa;AAAA,QAC1C,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAOC,YAAW;AAAA,QACpB;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,MAAM;AAAA,QACnC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,GAAG;AAAA,QACZ;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,MAAM;AAAA,QACnC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,IAAI;AAAA,QACb;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,MAAM;AAAA,QACnC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,IAAI;AAAA,QACb;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,MAAM;AAAA,QACnC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,IAAI;AAAA,QACb;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,YAAY;AAAA,QACzC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,UAAU;AAAA,QACnB;AAAA,MACF,CAAC;AACD,aAAO,eAAe,SAAS,WAAW;AAAA,QACxC,YAAY;AAAA,QACZ,KAAK,SAAS,MAAM;AAClB,iBAAO,SAAS;AAAA,QAClB;AAAA,MACF,CAAC;AAED,UAAI,KAAK,uBAAuB,YAAkB;AAElD,UAAI,MAAM,uBAAuB,YAAkB;AAEnD,UAAI,MAAM,uBAAuB,YAAkB;AAEnD,UAAI,MAAM,uBAAuB,YAAkB;AAEnD,UAAI,OAAO,uBAAuB,aAAmB;AAErD,UAAI,WAAW,uBAAuB,iBAAuB;AAE7D,UAAI,YAAY,uBAAuB,kBAAwB;AAE/D,UAAIA,cAAa,uBAAuB,mBAAyB;AAEjE,UAAI,SAAS,uBAAuB,eAAqB;AAEzD,eAAS,uBAAuB,KAAK;AAAE,eAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS,IAAI;AAAA,MAAG;AAAA;AAAA;;;;;;;;AC3E9F,UAAA,SAAA;AAEA,UAAM,aAA2B,MAAc,OAAA,GAAI;AAI1C,cAAA,aAAA;AAFT,UAAM,mBAAiC,MAAc,WAAU,EAAG,QAAQ,IAAI,OAAO,KAAK,GAAG,GAAG,EAAE,EAAE,YAAW;AAE1F,cAAA,mBAAA;;;;;;;;;;ACNrB,UAAA,YAAA;AAGA,UAAY;AAAZ,OAAA,SAAYC,YAAS;AACjB,QAAAA,WAAAA,WAAA,OAAA,IAAA,CAAA,IAAA;AACA,QAAAA,WAAAA,WAAA,MAAA,IAAA,CAAA,IAAA;AACA,QAAAA,WAAAA,WAAA,SAAA,IAAA,CAAA,IAAA;AACA,QAAAA,WAAAA,WAAA,OAAA,IAAA,CAAA,IAAA;AACA,QAAAA,WAAAA,WAAA,MAAA,IAAA,CAAA,IAAA;MACJ,GANY,YAAA,QAAA,cAAA,QAAA,YAAS,CAAA,EAAA;AAQrB,UAAa,gBAAb,MAA0B;QAOtB,YAAmB,WAAmB,WAAoB;AACtD,eAAK,WAAW;AAChB,eAAK,cAAc,UAAA,iBAAgB;AACnC,eAAK,iBAAgB,oBAAI,KAAI,GAAG,YAAW;AAC3C,eAAK,gBAAgB;AACrB,eAAK,eAAe,CAAA;QACxB;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;AAjCJ,cAAA,gBAAA;;;;;;;;;;ACTA,UAAA,qBAAA;AAEA,UAAaC,oBAAb,cAAsC,mBAAA,cAAa;QAG/C,YAAmB,WAAmB,eAAuB,YAAuB,mBAAA,UAAU,MAAI;AAC9F,gBAAM,WAAW,SAAS;AAC1B,eAAK,oBAAoB;QAC7B;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,mBAAAA;AAaA,UAAa,+BAAb,cAAkDA,kBAAgB;QAC9D,YAAmB,eAAqB;AACpC,gBAAM,gCAAgC,aAAa;QACvD;;AAHJ,cAAA,+BAAA;AAMA,UAAa,wBAAb,cAA2CA,kBAAgB;QACvD,YAAmB,eAAqB;AACpC,gBAAM,yBAAyB,aAAa;QAChD;;AAHJ,cAAA,wBAAA;AAMA,UAAa,sBAAb,cAAyCA,kBAAgB;QACrD,YAAmB,eAAqB;AACpC,gBAAM,uBAAuB,aAAa;QAC9C;;AAHJ,cAAA,sBAAA;AAMA,UAAa,wBAAb,cAA2CA,kBAAgB;QAGvD,YAAmB,eAAuB,OAAa;AACnD,gBAAM,yBAAyB,eAAe,mBAAA,UAAU,KAAK;AAC7D,eAAK,YAAY;QACrB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;;AAVJ,cAAA,wBAAA;AAaA,UAAa,uBAAb,cAA0CA,kBAAgB;QAGtD,YAAmB,WAAmB,eAAuB,aAAmB;AAC5E,gBAAM,WAAW,aAAa;AAC9B,eAAK,kBAAkB;QAC3B;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,uBAAA;AAaA,UAAa,gCAAb,cAAmD,qBAAoB;QACnE,YAAmB,eAAuB,aAAmB;AACzD,gBAAM,iCAAiC,eAAe,WAAW;QACrE;;AAHJ,cAAA,gCAAA;AAMA,UAAa,+BAAb,cAAkD,qBAAoB;QAClE,YAAmB,eAAuB,aAAmB;AACzD,gBAAM,gCAAgC,eAAe,WAAW;QACpE;;AAHJ,cAAA,+BAAA;AAMA,UAAa,+BAAb,cAAkD,qBAAoB;QAClE,YAAmB,eAAuB,aAAmB;AACzD,gBAAM,gCAAgC,eAAe,WAAW;QACpE;;AAHJ,cAAA,+BAAA;AAMA,UAAa,4BAAb,cAA+C,qBAAoB;QAG/D,YAAmB,eAAuB,aAAqB,OAAa;AACxE,gBAAM,6BAA6B,eAAe,WAAW;AAC7D,eAAK,YAAY;QACrB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;;AAVJ,cAAA,4BAAA;;;;;;;;;;AC3EA,UAAA,qBAAA;AAEA,UAAa,eAAb,cAAkC,mBAAA,cAAa;QAG3C,YAAmB,WAAmB,YAAoB,YAAuB,mBAAA,UAAU,MAAI;AAC7F,gBAAM,WAAW,SAAS;AAC1B,eAAK,iBAAiB;QACxB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,eAAA;AAaA,UAAa,kBAAb,cAAqC,mBAAA,cAAa;QAG9C,YAAmB,WAAmB,cAAsB,YAAuB,mBAAA,UAAU,MAAI;AAC7F,gBAAM,WAAW,SAAS;AAC1B,eAAK,mBAAmB;QAC5B;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,kBAAA;AAaA,UAAa,uBAAb,cAA0C,gBAAe;QAIrD,YAAmB,cAAsB,KAAa,SAAmC;AACrF,gBAAM,wBAAwB,YAAY;AAC1C,eAAK,UAAU;AACf,eAAK,cAAc;QACvB;QAEA,IAAW,MAAG;AACV,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,uBAAA;AAmBA,UAAa,6BAAb,cAAgD,gBAAe;QAC3D,YAAmB,cAAoB;AACnC,gBAAM,8BAA8B,YAAY;QACpD;;AAHJ,cAAA,6BAAA;AAMA,UAAa,wBAAb,cAA2C,gBAAe;QAItD,YAAmB,cAAsB,YAAoB,QAAc;AACvE,gBAAM,yBAAyB,cAAc,mBAAA,UAAU,KAAK;AAC5D,eAAK,aAAa;AAClB,eAAK,iBAAiB;QAC1B;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,wBAAA;AAmBA,UAAa,uBAAb,cAA0C,gBAAe;QAIrD,YAAmB,cAAsB,SAAiB,MAAY;AAClE,gBAAM,wBAAwB,cAAc,mBAAA,UAAU,KAAK;AAC3D,eAAK,cAAc;AACnB,eAAK,WAAW;QACpB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,uBAAA;AAmBA,UAAa,gCAAb,cAAmD,gBAAe;QAI9D,YAAmB,cAAsB,YAAoB,QAAc;AACvE,gBAAM,iCAAiC,cAAc,mBAAA,UAAU,KAAK;AACpE,eAAK,iBAAiB;AACtB,eAAK,aAAa;QACtB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,gCAAA;AAmBA,UAAa,iCAAb,cAAoD,gBAAe;QAI/D,YAAmB,cAAsB,wBAAgC,SAA0B;AAC/F,gBAAM,kCAAkC,YAAY;AACpD,eAAK,0BAA0B;AAC/B,eAAK,cAAc;QACvB;QAEA,IAAW,sBAAmB;AAC1B,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,iCAAA;AAmBA,UAAa,6BAAb,cAAgD,gBAAe;QAI3D,YAAmB,cAAsB,oBAA4B,SAA0B;AAC3F,gBAAM,8BAA8B,YAAY;AAChD,eAAK,sBAAsB;AAC3B,eAAK,cAAc;QACvB;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,6BAAA;;;;;;;;;;AC5HA,UAAa,oBAAb,cAAuC,MAAK;;;;;;;;QASxC,YAAmB,cAAoB;AACnC,gBAAM,YAAY;AAClB,eAAK,OAAO;AACZ,eAAK,UAAU;QACnB;;AAbJ,cAAA,oBAAA;AAuBA,UAAa,wBAAb,cAA2C,MAAK;;;;;;;;QAS5C,YAAmB,OAAa;AAC5B,gBAAM,KAAK;AACX,eAAK,OAAO;AACZ,eAAK,UAAU;QACnB;;AAbJ,cAAA,wBAAA;AAuBA,UAAa,sBAAb,cAAyC,MAAK;;;;;;;;;QAU1C,YAAmB,YAAoB,OAAc;AACjD,gBAAM,KAAK;AACX,eAAK,OAAO,aAAa;AACzB,eAAK,UAAU;QACnB;;AAdJ,cAAA,sBAAA;;;;;;;;;;ACtDA,UAAA,aAAA;AACA,UAAA,YAAA;AAGA,UAAY;AAAZ,OAAA,SAAYC,cAAW;AACnB,QAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,QAAAA,aAAAA,aAAA,QAAA,IAAA,CAAA,IAAA;MACJ,GAHY,cAAA,QAAA,gBAAA,QAAA,cAAW,CAAA,EAAA;AAKvB,UAAa,oBAAb,MAA8B;QAS1B,YACI,aACA,MACA,SACA,IAAW;AATP,eAAA,WAAgB;AAWpB,cAAI,gBAAgB,YAAY,QAAQ,QAAQ,EAAE,OAAQ,SAAU,WAAW;AAC3E,kBAAM,IAAI,WAAA,sBAAsB,0BAA0B;;AAG9D,cAAI,gBAAgB,YAAY,UAAU,QAAQ,EAAE,gBAAgB,cAAc;AAC9E,kBAAM,IAAI,WAAA,sBAAsB,6BAA6B;;AAGjE,eAAK,kBAAkB;AAEvB,eAAK,WAAW;AAChB,eAAK,cAAc,UAAU,UAAU,CAAA;AACvC,eAAK,SAAS,KAAK,KAAK,UAAA,iBAAgB;AACxC,kBAAQ,KAAK,aAAa;YACtB,KAAK,YAAY;AACb,mBAAK,WAAW,KAAK,eAAe,OAAO,KAAK,WAAW,aAAa;AACxE;YACJ,KAAK,YAAY;AACb,mBAAK,WAAW,KAAK,SAAS;;QAE1C;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,cAAI,KAAK,oBAAoB,YAAY,QAAQ;AAC7C,kBAAM,IAAI,WAAA,sBAAsB,kCAAkC;;AAGtE,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,cAAI,KAAK,oBAAoB,YAAY,MAAM;AAC3C,kBAAM,IAAI,WAAA,sBAAsB,gCAAgC;;AAGpE,iBAAO,KAAK;QAChB;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK;QAChB;;AAnEJ,cAAA,oBAAA;;;;;;;;;;ACVA,UAAa,yBAAb,MAAmC;QAI/B,YAAmB,YAAoB,QAAc;AACjD,eAAK,iBAAiB;AACtB,eAAK,aAAa;QACtB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAfJ,cAAA,yBAAA;;;;;;;;;;ACSA,UAAa,cAAb,MAAwB;QAAxB,cAAA;AACY,eAAA,UAA2C,CAAA;QAmBvD;QAjBW,IAAO,IAAY,UAAqB;AAC3C,eAAK,QAAQ,EAAE,IAAI;QACvB;QAEO,MAAM,IAAU;AACnB,iBAAO,KAAK,QAAQ,EAAE;QAC1B;QAEO,SAAY,IAAY,QAAS;AACpC,cAAI;AACA,iBAAK,QAAQ,EAAE,EAAE,QAAQ,MAAM;mBAC1B,OAAO;AACZ,iBAAK,QAAQ,EAAE,EAAE,OAAO,KAAe;;AAEvC,iBAAK,QAAQ,EAAE,IAAI;;QAE3B;;AAnBJ,cAAA,cAAA;;;;;;;;;;ACNA,UAAA,qBAAA;AAEA,UAAa,cAAb,cAAiC,mBAAA,cAAa;QAE1C,YAAmB,WAAmB,YAAuB,mBAAA,UAAU,MAAI;AACvE,gBAAM,WAAW,SAAS;QAC9B;;AAJJ,cAAA,cAAA;AAOA,UAAa,kCAAb,cAAqD,YAAW;QAG5D,YAAmB,aAAwB;AACvC,gBAAM,iCAAiC;AACvC,eAAK,kBAAkB;QAC3B;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,kCAAA;;;;;;;;;;ACZA,UAAA,aAAA;AACA,UAAA,YAAA;AAOA,UAAa,cAAb,MAAwB;QAMpB,YAAmB,UAAoC;AAL/C,eAAA,qBAAiE,CAAA;AAEjE,eAAA,iBAA0B;AAC1B,eAAA,sBAAmC;AAGvC,eAAK,eAAe;QACxB;QAEO,QAAQ,OAAa;AACxB,cAAI,KAAK,WAAU,GAAI;AACnB,kBAAO,IAAI,WAAA,oBAAoB,aAAa;;AAGhD,cAAI,KAAK,UAAU;AACf,uBAAW,aAAa,KAAK,UAAU;AACnC,kBAAI,WAAW;AACX,oBAAI,MAAM,UAAU;AAChB,sBAAI,CAAC,MAAM,SAAS,SAAS,GAAG;AAC5B,0BAAM,SAAS,SAAS,IAAI,KAAK,SAAS,SAAS;;;;;;AAOvE,qBAAW,WAAW,KAAK,oBAAoB;AAC3C,gBAAI,WAAW,KAAK,mBAAmB,OAAO,GAAG;AAC7C,mBAAK,mBAAmB,OAAO,EAAE,KAAK;;;QAGlD;QAEO,OAAO,iBAAwC;AAClD,gBAAM,KAAK,UAAA,iBAAgB;AAC3B,eAAK,mBAAmB,EAAE,IAAI;AAC9B,iBAAO;YACH,QAAQ,MAAoB;AACxB,qBAAO,KAAK,mBAAmB,EAAE;AACjC,qBAAO,QAAQ,QAAO;YAC1B;;QAER;QAEO,eAAe,UAAgC;AAClD,iBAAO,KAAK,OAAO,CAAC,MAAoB,SAAS,QAAQ,CAAC,CAAC;QAC/D;QAEO,sBAAsB,UAAgC;AACzD,cAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,iBAAK,KAAK,oBAAoB,OAAM;;AAExC,eAAK,sBAAsB,KAAK,OAAO,CAAC,MAAoB,SAAS,QAAQ,CAAC,CAAC;AAC/E,iBAAO,KAAK;QAChB;QAEO,aAAU;AACb,iBAAO,KAAK;QAChB;QAEO,UAAO;AACV,eAAK,qBAAqB;AAC1B,eAAK,iBAAiB;QAC1B;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;AApEJ,cAAA,cAAA;;;;;;;;;;ACRA,UAAA,aAAA;AACA,UAAA,mBAAA;AAIA,UAAa,SAAb,MAAa,QAAM;QAGR,OAAO,eAAe,aAAwC;AACjE,cAAI,CAAC,aAAa;AACd,kBAAM,IAAI,WAAA,kBAAkB,aAAa;;AAG7C,kBAAO,eAAe;QAC1B;QAEO,WAAW,WAAQ;AACtB,iBAAO,QAAO;QAClB;;AAbJ,cAAA,SAAA;AACmB,aAAA,eAA4C,IAAI,iBAAA,YAAW;;;;;;;;;;;;;;;;;;ACD9E,UAAY;AAAZ,OAAA,SAAYC,kBAAe;AACvB,QAAAA,iBAAAA,iBAAA,MAAA,IAAA,CAAA,IAAA;AACA,QAAAA,iBAAAA,iBAAA,WAAA,IAAA,CAAA,IAAA;AACA,QAAAA,iBAAAA,iBAAA,YAAA,IAAA,CAAA,IAAA;AACA,QAAAA,iBAAAA,iBAAA,cAAA,IAAA,CAAA,IAAA;MACJ,GALY,kBAAA,QAAA,oBAAA,QAAA,kBAAe,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR3B;AAAA;AAAA;AACA,aAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACE5D,UAAA,aAAA;AAyCA,UAAa,OAAb,MAAa,MAAI;QAQb,YAAmB,MAAc;AANzB,eAAA,4BAAoC;AACpC,eAAA,uBAAsD,CAAA;AACtD,eAAA,0BAAyD,CAAA;AACzD,eAAA,4BAA2D,CAAA;AAC3D,eAAA,oBAA4B;AAGhC,eAAK,WAAW,CAAA;AAEhB,cAAI,MAAM;AACN,uBAAW,QAAQ,MAAM;AACrB,mBAAK,SAAS,KAAK,IAAI;;;QAGnC;QAEO,IAAI,WAAiB;AACxB,eAAK,gBAAe;AACpB,iBAAO,KAAK,SAAS,SAAS;QAClC;QAEO,QAAK;AACR,iBAAO,KAAK,IAAI,CAAC;QACrB;QAEO,OAAI;AACP,iBAAO,KAAK,IAAI,KAAK,OAAM,IAAK,CAAC;QACrC;QAEO,IAAI,MAAW;AAClB,eAAK,gBAAe;AACpB,eAAK,SAAS,KAAK,SAAS,QAAQ,IAAI;QAC5C;QAEO,SAAS,OAAe,MAAW;AACtC,eAAK,gBAAe;AACpB,cAAI,UAAU,GAAG;AACb,iBAAK,SAAS,QAAQ,IAAI;qBACnB,UAAU,KAAK,SAAS,QAAQ;AACvC,iBAAK,SAAS,KAAK,IAAI;iBACpB;AACH,iBAAK,SAAS,OAAO,OAAO,GAAG,IAAI;;AAEvC,eAAK,qBAAqB,KAAK,oBAAoB;QACvD;QAEO,cAAW;AACd,eAAK,gBAAe;AACpB,iBAAO,KAAK,SAAS,CAAC;QAC1B;QAEO,aAAU;AACb,eAAK,gBAAe;AACpB,iBAAO,KAAK,SAAS,KAAK,OAAM,IAAK,CAAC;QAC1C;QAEO,SAAS,OAAa;AACzB,eAAK,gBAAe;AACpB,iBAAO,KAAK,OAAO,OAAO,CAAC,EAAE,CAAC;QAClC;QAEO,OAAO,OAAe,OAAa;AACtC,eAAK,gBAAe;AACpB,gBAAM,kBAAkB,KAAK,SAAS,OAAO,OAAO,KAAK;AACzD,eAAK,qBAAqB,KAAK,uBAAuB;AACtD,iBAAO;QACX;QAEO,QAAK;AACR,eAAK,gBAAe;AACpB,eAAK,OAAO,GAAG,KAAK,OAAM,CAAE;QAChC;QAEO,SAAM;AACT,eAAK,gBAAe;AACpB,iBAAO,KAAK,SAAS;QACzB;QAEO,QAAQ,eAAyB;AACpC,eAAK,gBAAe;AACpB,gBAAM,iBAAiB,KAAK;AAE5B,eAAK,qBAAqB,cAAc,IAAI;AAE5C,iBAAO;YACH,QAAQ,MAAoB;AACxB,qBAAO,KAAK,qBAAqB,cAAc;AAC/C,qBAAO,QAAQ,QAAO;YAC1B;;QAER;QAEO,UAAU,iBAA2B;AACxC,eAAK,gBAAe;AACpB,gBAAM,iBAAiB,KAAK;AAE5B,eAAK,wBAAwB,cAAc,IAAI;AAE/C,iBAAO;YACH,QAAQ,MAAoB;AACxB,qBAAO,KAAK,wBAAwB,cAAc;AAClD,qBAAO,QAAQ,QAAO;YAC1B;;QAER;QAEO,WAAW,kBAA4B;AAC1C,eAAK,gBAAe;AACpB,gBAAM,iBAAiB,KAAK;AAE5B,eAAK,0BAA0B,cAAc,IAAI;AAEjD,iBAAO;YACH,QAAQ,MAAoB;AACxB,qBAAO,KAAK,0BAA0B,cAAc;AACpD,qBAAO,QAAQ,QAAO;YAC1B;;QAER;QAEO,KAAK,WAAkB;AAC1B,eAAK,gBAAe;AACpB,iBAAO,KAAK,SAAS,KAAK,SAAS;QACvC;QAEO,UAAO;AACV,gBAAM,YAAY,MAAK;AACvB,eAAK,SAAS,QAAQ,CAAC,QAAoB;AACvC,sBAAU,KAAK,GAAG;UACtB,CAAC;AACD,iBAAO;QACX;QAEO,IAAI,UAAkD;AACzD,eAAK,gBAAe;AACpB,cAAI,UAAU;AACV,mBAAO,KAAK,MAAM,QAAQ,EAAE,OAAM,IAAK;iBACpC;AACH,mBAAO,KAAK,OAAM,IAAK;;QAE/B;QAEO,IAAI,UAAkC;AACzC,eAAK,gBAAe;AACpB,iBAAO,KAAK,MAAM,QAAQ,EAAE,OAAM,MAAO,KAAK,OAAM;QACxD;QAEO,QAAQ,UAA8C;AACzD,eAAK,gBAAe;AACpB,mBAAS,IAAI,GAAG,IAAI,KAAK,OAAM,GAAI,KAAK;AACpC,qBAAS,KAAK,SAAS,CAAC,GAAG,CAAC;;QAEpC;QAEO,OAAW,UAA4C;AAC1D,eAAK,gBAAe;AACpB,gBAAM,aAAmB,CAAA;AACzB,mBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,uBAAW,KAAK,SAAS,KAAK,SAAS,CAAC,GAAG,CAAC,CAAC;;AAGjD,iBAAO,IAAI,MAAS,UAAU;QAClC;QAEO,MAAM,UAAiD;AAC1D,eAAK,gBAAe;AACpB,gBAAM,eAAe,IAAI,MAAI;AAC7B,mBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,gBAAI,SAAS,KAAK,SAAS,CAAC,GAAG,CAAC,GAAG;AAC/B,2BAAa,IAAI,KAAK,SAAS,CAAC,CAAC;;;AAGzC,iBAAO;QACX;QAEO,QAAQ,WAAyC;AACpD,eAAK,gBAAe;AACpB,gBAAM,cAAc,KAAK,QAAO;AAChC,gBAAM,eAAe,YAAY,KAAK,SAAS;AAC/C,iBAAO,IAAI,MAAK,YAAY;QAChC;QAEO,YAAY,WAAyC;AACxD,eAAK,gBAAe;AACpB,iBAAO,KAAK,QAAQ,CAAC,GAAU,MAAqB,UAAU,GAAG,CAAC,CAAC;QACvE;QAEO,QAAK;AACR,eAAK,gBAAe;AACpB,iBAAO,IAAI,MAAY,KAAK,QAAO,CAAE;QACzC;QAEO,OAAO,MAAiB;AAC3B,eAAK,gBAAe;AACpB,iBAAO,IAAI,MAAY,KAAK,SAAS,OAAO,KAAK,QAAO,CAAE,CAAC;QAC/D;QAEO,YAAYC,QAAc;AAC7B,eAAK,gBAAe;AACpB,iBAAO,IAAI,MAAY,KAAK,SAAS,OAAOA,MAAK,CAAC;QACtD;QAEO,aAAU;AACb,iBAAO,KAAK,YAAY;QAC5B;QAEO,QAAQ,QAAe;AAC1B,cAAI,CAAC,KAAK,WAAU,GAAI;AACpB,iBAAK,oBAAoB;AACzB,iBAAK,WAAW;AAChB,iBAAK,uBAAuB;AAC5B,iBAAK,0BAA0B;AAC/B,iBAAK,qBAAqB,KAAK,yBAAyB;;QAEhE;QAEQ,kBAAe;AACnB,cAAI,KAAK,WAAU,GAAI;AACnB,kBAAM,IAAI,WAAA,oBAAoB,QAAQ,KAAK,iBAAiB;;QAEpE;QAEQ,qBAAqB,eAA4C;AACrE,cAAI,eAAe;AACf,uBAAW,kBAAkB,eAAe;AACxC,kBAAI,gBAAgB;AAChB,8BAAc,cAAc,EAAC;;;;QAI7C;;AAxOJ,cAAA,OAAA;;;;;;;;;;ACvCA,UAAY;AAAZ,OAAA,SAAYC,eAAY;AACpB,QAAAA,cAAAA,cAAA,MAAA,IAAA,CAAA,IAAA;AACA,QAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;AACA,QAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;MACJ,GAJY,eAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;AAcxB,UAAa,gBAAb,MAA0B;QAMtB,YAAmB,0BAAqD;AAgCjE,eAAA,eAAe,MAAW;AAC7B,gBAAI,KAAK,SAAS;AACd,oBAAM,KAAK;;UAEnB;AAnCI,mCAAyB,GAAG,CAAC,WAAmB;AAC5C,gBAAI,CAAC,KAAK,iBAAiB;AACvB,mBAAK,kBAAkB;AACvB,mBAAK,cAAc;AACnB,mBAAK,aAAa;;UAE1B,GAAG,CAAC,UAAuB;AACvB,gBAAI,CAAC,KAAK,iBAAiB;AACvB,mBAAK,kBAAkB;AACvB,mBAAK,cAAc;AACnB,mBAAK,YAAY;;UAEzB,CAAC;QACL;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AApCJ,cAAA,gBAAA;AA6CA,UAAa,2BAAb,MAAqC;QAArC,cAAA;AAKW,eAAA,YAAY,CAAC,WAAmB;AACnC,iBAAK,gBAAgB,MAAM;UAC/B;AAEO,eAAA,WAAW,CAAC,UAAuB;AACtC,iBAAK,eAAe,KAAK;UAC7B;AAEO,eAAA,KAAK,CAAC,aAAkC,eAA6C;AACxF,iBAAK,kBAAkB;AACvB,iBAAK,iBAAiB;UAC1B;QACJ;;AAjBA,cAAA,2BAAA;AAmBA,UAAa,WAAb,MAAqB;QAKjB,cAAA;AAYO,eAAA,UAAU,CAAC,WAAuC;AACrD,iBAAK,YAAY,MAAM;AACvB,mBAAO;UACX;AAEO,eAAA,SAAS,CAAC,UAA8B;AAC3C,iBAAK,WAAW,KAAK;AACrB,mBAAO;UACX;AAlBI,eAAK,cAAc,IAAI,QAAW,CAAC,SAA6B,WAAiC;AAC7F,iBAAK,cAAc;AACnB,iBAAK,aAAa;UACtB,CAAC;QACL;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;AAfJ,cAAA,WAAA;AA4BA,UAAa,OAAb,MAAiB;QAQb,cAAA;AAPQ,eAAA,YAA0B,aAAa;AACvC,eAAA,oBAAsC;AACtC,eAAA,0BAAuD;AAEvD,eAAA,sBAA+C,CAAA;AAC/C,eAAA,oBAA6C,CAAA;AAGjD,eAAK,0BAA0B,IAAI,yBAAwB;AAC3D,eAAK,oBAAoB,IAAI,cAAc,KAAK,uBAAuB;QAC3E;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEO,QAAQ,QAAS;AACpB,cAAI,KAAK,cAAc,aAAa,MAAM;AACtC,kBAAM,IAAI,MAAM,sCAAsC;;AAG1D,eAAK,YAAY,aAAa;AAC9B,eAAK,wBAAwB,UAAU,MAAM;AAE7C,mBAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AACtD,iBAAK,uBAAuB,QAAQ,KAAK,oBAAoB,CAAC,GAAG,KAAK,kBAAkB,CAAC,CAAC;;AAG9F,eAAK,eAAc;QACvB;QAEO,OAAO,OAAa;AACvB,cAAI,KAAK,cAAc,aAAa,MAAM;AACtC,kBAAM,IAAI,MAAM,qCAAqC;;AAGzD,eAAK,YAAY,aAAa;AAC9B,eAAK,wBAAwB,SAAS,KAAK;AAE3C,qBAAW,gBAAgB,KAAK,mBAAmB;AAC/C,iBAAK,qBAAqB,OAAO,YAAY;;AAGjD,eAAK,eAAc;QACvB;QAEO,GACH,iBACA,eAAsC;AAEtC,cAAI,mBAAmB,MAAM;AAEzB,8BAAkB,MAAW;YAAG;;AAGpC,cAAI,KAAK,cAAc,aAAa,MAAM;AACtC,iBAAK,oBAAoB,KAAK,eAAe;AAC7C,iBAAK,kBAAkB,KAAK,aAAa;iBACtC;AACH,gBAAI,KAAK,cAAc,aAAa,UAAU;AAC1C,mBAAK,uBAAuB,KAAK,kBAAkB,QAAQ,iBAAiB,aAAa;uBAClF,KAAK,cAAc,aAAa,UAAU;AACjD,mBAAK,qBAAqB,KAAK,kBAAkB,OAAO,aAAa;;AAGzE,iBAAK,eAAc;;QAE3B;QAEQ,uBAAuB,QAAW,iBAAsC,eAAsC;AAClH,cAAI;AACA,4BAAgB,MAAM;mBACjB,GAAG;AACR,iBAAK,qBAAqB,8BAA8B,CAAW,KAAK,aAAa;;QAE7F;QAEQ,qBAAqB,OAAe,eAAsC;AAC9E,cAAI,eAAe;AACf,gBAAI;AACA,4BAAc,KAAK;qBACd,GAAG;AACR,oBAAM,IAAI,MAAM,8BAA8B,CAAW,iBAAiB,KAAK,GAAG;;iBAEnF;AACH,kBAAM,IAAI,MAAM,qBAAqB,KAAK,GAAG;;QAErD;QAEQ,iBAAc;AAClB,eAAK,oBAAoB,CAAA;AACzB,eAAK,sBAAsB,CAAA;QAC/B;;AAjGJ,cAAA,OAAA;AAqGA,eAAgB,0BACZ,SACA,IACA,KAA6B;AAC7B,gBAAQ,KAAK,CAAC,QAAgB;AAC1B,cAAI;AACA,gBAAI,CAAC,CAAC,IAAI;AACN,iBAAG,GAAG;;mBAEL,OAAO;AACZ,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI;AACA,oBAAI,iBAAiB,OAAO;AACxB,wBAAM,aAAoB;AAC1B,sBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;uBAC5C;AACH,sBAAI,KAAe;;uBAGlBC,QAAO;cAAA;;;QAG5B,GAAG,CAAC,UAAoB;AACpB,cAAI,CAAC,CAAC,KAAK;AACP,gBAAI;AACA,kBAAI,iBAAiB,OAAO;AACxB,sBAAM,aAAoB;AAC1B,oBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;qBAC5C;AACH,oBAAI,KAAe;;qBAGlBA,QAAO;YAAA;;QAExB,CAAC;MACL;AAnCA,cAAA,4BAAA;;;;;;;;;;ACjNA,UAAA,aAAA;AAGA,UAAA,YAAA;AACA,UAAA,eAAA;AAWA,UAAK;AAAL,OAAA,SAAKC,iBAAc;AACf,QAAAA,gBAAAA,gBAAA,SAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;MACJ,GAHK,mBAAA,iBAAc,CAAA,EAAA;AAKnB,UAAa,QAAb,MAAkB;QASd,YAAmB,MAAkB;AAR7B,eAAA,mBAAyC,IAAI,UAAA,KAAI;AAIjD,eAAA,wBAAiC;AACjC,eAAA,kBAA2B;AAC3B,eAAA,oBAA4B;AAGhC,eAAK,WAAW,OAAO,OAAO,IAAI,UAAA,KAAI;AACtC,eAAK,kBAAkB,CAAA;AACvB,eAAK,kBAAkB,IAAI,UAAA,KAAI;AAC/B,eAAK,gBAAgB,KAAK,KAAK,SAAS,QAAQ,MAAY,KAAK,MAAK,CAAE,CAAC;QAC7E;QAEO,QAAQ,MAAW;AACtB,eAAK,eAAc;AACnB,eAAK,mBAAmB,IAAI,QAAe,CAAC,YAA0C,QAAQ,IAAI,CAAC,CAAC;QACxG;QAEO,mBAAmB,SAAuB;AAC7C,eAAK,eAAc;AACnB,kBAAQ,KAAK,CAAC,QAAoB;AAC9B,iBAAK,SAAS,IAAI,GAAG;UAEzB,GAAG,MAAW;UAAG,CAAC;QACtB;QAEO,UAAO;AACV,eAAK,eAAc;AACnB,gBAAM,qBAAqB,IAAI,aAAA,SAAQ;AAEvC,cAAI,KAAK,iBAAiB;AACtB,iBAAK,gBAAgB,IAAI,EAAE,UAAU,oBAAoB,MAAM,eAAe,QAAO,CAAE;AACvF,iBAAK,MAAK;;AAGd,iBAAO,mBAAmB;QAC9B;QAEO,OAAI;AACP,eAAK,eAAc;AACnB,gBAAM,qBAAqB,IAAI,aAAA,SAAQ;AAEvC,gBAAM,OAAO,KAAK;AAClB,cAAI,MAAM;AACN,iBAAK,gBAAgB,IAAI,EAAE,UAAU,oBAAoB,MAAM,eAAe,KAAI,CAAE;AACpF,iBAAK,MAAK;;AAGd,iBAAO,mBAAmB;QAC9B;QAEO,SAAM;AACT,eAAK,eAAc;AACnB,iBAAO,KAAK,SAAS,OAAM;QAC/B;QAEO,aAAU;AACb,iBAAO,KAAK,mBAAmB;QACnC;QAEO,MAAM,gBAAgB,sBAA2D,QAAe;AACnG,cAAI,CAAC,KAAK,WAAU,KAAM,CAAC,KAAK,iBAAiB;AAC7C,iBAAK,oBAAoB;AACzB,iBAAK,kBAAkB;AAEvB,kBAAM,OAAO,KAAK;AAClB,gBAAI,MAAM;AACN,qBAAO,KAAK,OAAM,IAAK,GAAG;AACtB,sBAAM,aAAa,KAAK,YAAW;AAEnC,2BAAW,SAAS,QAAQ,MAAS;;AAazC,kBAAI,KAAK,oBAAoB,MAAM;AAC/B,qBAAK,kBAAkB;;;AAI/B,uBAAW,cAAc,KAAK,iBAAiB;AAC3C,oBAAM,WAAW,OAAM;;AAG3B,gBAAI,KAAK,iBAAiB,OAAM,IAAK,KAAK,sBAAsB;AAC5D,oBAAM,eAAiC,CAAA;AAEvC,mBAAK,iBAAiB,QAAO,EAAG,QAAQ,CAAC,YAAiC;AACtE,6BAAa,KAAK,OAAO;cAC7B,CAAC;AACD,qBAAO,QAAQ,IAAI,YAAY,EAAE,QAAQ,MAAW;AAChD,qBAAK,kBAAkB;AACvB,qBAAK,SAAS,QAAQ,CAAC,SAAqB;AACxC,uCAAqB,IAAI;gBAC7B,CAAC;AACD,qBAAK,WAAW;AAChB;cACJ,CAAC,EAAE,KAAI;mBACJ;AACH,mBAAK,kBAAkB;AACvB,mBAAK,WAAW;;;QAG5B;QAEO,MAAM,QAAQ,QAAe;AAChC,gBAAM,KAAK,gBAAgB,MAAM,MAAM;QAC3C;QAEQ,QAAK;AACT,cAAI,CAAC,KAAK,yBAAyB,CAAC,KAAK,iBAAiB;AACtD,iBAAK,wBAAwB;AAE7B,kBAAM,OAAO,KAAK;AAClB,kBAAM,QAAQ,KAAK;AACnB,gBAAI,QAAQ,OAAO;AACf,qBAAO,MAAM,OAAM,IAAK,KAAK,KAAK,OAAM,IAAK,KAAK,CAAC,KAAK,iBAAiB;AACrE,sBAAM,aAAa,KAAK,YAAW;AACnC,oBAAI,WAAW,SAAS,eAAe,MAAM;AACzC,6BAAW,SAAS,QAAQ,MAAM,MAAK,CAAE;uBACtC;AACH,wBAAM,eAAe,MAAM,YAAW;AACtC,6BAAW,SAAS,QAAQ,YAAY;;;AAahD,kBAAI,KAAK,oBAAoB,MAAM;AAC/B,qBAAK,kBAAkB;;AAY3B,kBAAI,KAAK,aAAa,OAAO;AACzB,qBAAK,WAAW;;;AAIxB,iBAAK,wBAAwB;;QAErC;QAEQ,iBAAc;AAClB,cAAI,KAAK,WAAU,GAAI;AACnB,gBAAI,KAAK,mBAAmB;AACxB,oBAAM,IAAI,WAAA,sBAAsB,KAAK,iBAAiB;;AAG1D,kBAAM,IAAI,WAAA,oBAAoB,OAAO;qBAC9B,KAAK,iBAAiB;AAC7B,kBAAM,IAAI,WAAA,sBAAsB,iBAAiB;;QAEzD;;AAlLJ,cAAA,QAAA;;;;;;;;;;ACnBA,UAAA,yBAAA;AACA,UAAA,aAAA;AACA,UAAA,YAAA;AAEA,UAAa,sBAAb,MAAgC;QAK5B,YAAmB,aAA0B,SAAc,IAAW;AAH9D,eAAA,cAAmB;AAIvB,cAAI,CAAC,SAAS;AACV,kBAAM,IAAI,WAAA,kBAAkB,SAAS;;AAIzC,cAAI,gBAAgB,uBAAA,YAAY,UAAU,OAAO,eAAe,OAAO,EAAE,YAAY,SAAS,eAAe;AACzG,kBAAM,IAAI,WAAA,sBAAsB,6BAA6B;;AAGjE,cAAI,gBAAgB,uBAAA,YAAY,QAAQ,EAAE,OAAQ,YAAa,WAAW;AACtE,kBAAM,IAAI,WAAA,sBAAsB,0BAA0B;;AAG9D,eAAK,kBAAkB;AACvB,eAAK,cAAc;AACnB,eAAK,SAAS,KAAK,KAAK,UAAA,iBAAgB;QAC5C;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AAEd,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,cAAI,KAAK,oBAAoB,uBAAA,YAAY,QAAQ;AAC7C,kBAAM,IAAI,WAAA,sBAAsB,kCAAkC;;AAGtE,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,cAAI,KAAK,oBAAoB,uBAAA,YAAY,MAAM;AAC3C,kBAAM,IAAI,WAAA,sBAAsB,gCAAgC;;AAGpE,iBAAO,KAAK;QAChB;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK;QAChB;;AAnDJ,cAAA,sBAAA;;;;;;;;;;ACLA,UAAa,iBAAb,MAA2B;QAKvB,YAAmB,kBAA0B,mBAAyB;AAClE,eAAK,uBAAuB;AAC5B,eAAK,wBAAwB;QACjC;QAEO,OAAO,kBAA8B;AAExC,gBAAM,aAAa,KAAK,qBAAqB,kBAAkB,KAAK,sBAAsB,KAAK,qBAAqB;AAEpH,cAAI,CAAC,YAAY;AACb,mBAAO;;AAGX,gBAAM,cAAc,WAAW,SAAS;AAExC,gBAAM,SAAS,IAAI,YAAY,WAAW;AAC1C,gBAAM,OAAO,IAAI,SAAS,MAAM;AAChC,eAAK,gBAAgB,MAAM,GAAG,UAAU;AAExC,iBAAO;QACX;QAEQ,UAAU,MAAgB,QAAgB,KAAW;AACzD,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,iBAAK,SAAS,SAAS,GAAG,IAAI,WAAW,CAAC,CAAC;;QAEnD;QAEQ,gBAAgB,MAAgB,QAAgB,OAAmB;AACvE,mBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAM,UAAU,GAAG;AACjD,kBAAM,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AAC5C,iBAAK,SAAS,QAAQ,IAAI,IAAI,IAAI,QAAS,IAAI,OAAQ,IAAI;;QAEnE;QAEQ,qBACJ,UACA,SACA,SAAe;AAEf,cAAI,CAAC,UAAU;AACX,mBAAO;;AAGX,cAAI,YAAY,WAAW,UAAU,SAAS;AAC1C,mBAAO;;AAGX,gBAAM,QAAQ,UAAU;AACxB,gBAAM,YAAY,KAAK,MAAM,SAAS,SAAS,KAAK;AACpD,gBAAM,WAAW,IAAI,aAAa,SAAS;AAC3C,cAAI,YAAY;AAChB,cAAI,YAAY;AAChB,iBAAO,YAAY,WAAW;AAC1B,kBAAM,gBAAgB,KAAK,OAAO,YAAY,KAAK,KAAK;AACxD,gBAAI,QAAQ;AACZ,gBAAI,QAAQ;AACZ,mBAAO,YAAY,iBAAiB,YAAY,SAAS,QAAQ;AAC7D,uBAAS,SAAS,WAAW;AAC7B;;AAEJ,qBAAS,WAAW,IAAI,QAAQ;;AAGpC,iBAAO;QACX;;AAtEJ,cAAA,iBAAA;;;;;;;;;;ACAA,UAAA,aAAA;AACA,UAAA,YAAA;AACA,UAAA,aAAA;AAQA,UAAa,SAAb,MAAmB;QAMf,YAAmB,UAAiB;AAJ5B,eAAA,mBAA4B;AAC5B,eAAA,kBAA2B;AAI/B,eAAK,SAAS,WAAW,WAAW,UAAA,iBAAgB;AACpD,eAAK,kBAAkB,IAAI,WAAA,MAAK;QACpC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK;QAChB;QAEO,QAAK;AACR,cAAI,CAAC,KAAK,kBAAkB;AACxB,iBAAK,iBAAiB;cAClB,QAAQ;cACR,OAAO;cACP,cAAc,KAAK,IAAG;aACzB;AACD,iBAAK,mBAAmB;;QAEhC;QAEO,iBAAiB,aAAkC;AACtD,eAAK,cAAa;AAClB,cAAI,CAAC,KAAK,gBAAgB,WAAU,GAAI;AACpC,gBAAI;AACA,mBAAK,gBAAgB,QAAQ,WAAW;qBACnC,GAAG;;;QAIpB;QAEO,OAAI;AACP,cAAI,KAAK,iBAAiB;AACtB,kBAAM,IAAI,WAAA,sBAAsB,kCAAkC;;AAGtE,iBAAO,KAAK,gBACP,QAAO,EACP,KAAK,OAAO,gBAAsE;AAC/E,gBAAI,gBAAgB,UAAa,YAAY,OAAO;AAChD,oBAAM,KAAK,gBAAgB,QAAQ,uBAAuB;;AAG9D,mBAAO;UACX,CAAC;QACT;QACO,YAAS;AACZ,cAAI,CAAC,KAAK,iBAAiB;AACvB,iBAAK,kBAAkB;AACvB,iBAAK,kBAAkB,IAAI,WAAA,MAAK;;QAExC;QAEQ,gBAAa;AACjB,cAAI,KAAK,kBAAkB;AACvB,kBAAM,IAAI,WAAA,sBAAsB,eAAe;;QAEvD;;AAvEJ,cAAA,SAAA;;;;;;;;;;ACNA,UAAY;AAAZ,OAAA,SAAYC,oBAAiB;AAIzB,QAAAA,mBAAAA,mBAAA,SAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,mBAAAA,mBAAA,OAAA,IAAA,CAAA,IAAA;MACJ,GAVY,oBAAA,QAAA,sBAAA,QAAA,oBAAiB,CAAA,EAAA;;;;;;;;;;ACJ7B,UAAA,eAAA;AAEA,UAAa,2BAAb,cAA8C,aAAA,OAAmB;QAM7D,YAAmB,iBAAyB,UAAiB;AACzD,gBAAM,QAAQ;AACd,eAAK,sBAAsB;AAC3B,eAAK,2BAA2B;QACpC;QAEO,iBAAiB,OAAgC;AAEpD,cAAI,MAAM,SACL,MAAM,KAAK,4BAA4B,MAAM,OAAO,eAAe,KAAK,qBAAsB;AAC/F,kBAAM,iBAAiB,KAAK;AAC5B;;AAGJ,cAAI,wBAAgC;AAEpC,iBAAO,wBAAwB,MAAM,OAAO,YAAY;AAEpD,gBAAI,WAAc,KAAK,uBAAuB;AAC1C,mBAAK,wBAAwB,IAAI,YAAY,KAAK,mBAAmB;AACrE,mBAAK,0BAA0B,MAAM;;AAIzC,kBAAM,cAAsB,KAAK,IAAI,MAAM,OAAO,aAAa,uBAAuB,KAAK,sBAAsB,KAAK,wBAAwB;AAC9I,kBAAM,aAAyB,IAAI,WAAW,KAAK,qBAAqB;AACxE,kBAAM,aAAyB,IAAI,WAAW,MAAM,OAAO,MAAM,uBAAuB,cAAc,qBAAqB,CAAC;AAE5H,uBAAW,IAAI,YAAY,KAAK,wBAAwB;AACxD,iBAAK,4BAA4B;AACjC,qCAAyB;AAGzB,gBAAI,KAAK,6BAA6B,KAAK,qBAAqB;AAC5D,oBAAM,iBAAiB;gBACnB,QAAQ,KAAK;gBACb,OAAO;gBACP,cAAc,KAAK;eACtB;AACD,mBAAK,2BAA2B;AAChC,mBAAK,wBAAwB;;;QAGzC;QAEO,QAAK;AAER,cAAI,MAAM,KAAK,4BAA4B,CAAC,KAAK,UAAU;AACvD,kBAAM,iBAAiB;cACnB,QAAQ,KAAK,sBAAsB,MAAM,GAAG,KAAK,wBAAwB;cACzE,OAAO;cACP,cAAc,KAAK;aACtB;;AAGL,gBAAM,MAAK;QACf;;AA9DJ,cAAA,2BAAA;;;;;;;;;;;;;;;;;;AC0DA,UAAa,UAAb,MAAa,SAAO;QAQT,OAAO,OAAI;AAEd,gBAAM,4BAAwD,oBAAI,IAAI,CAAC,CAAC,GAAG,MAAW;UAAG,CAAC,CAAC,CAAC;AAC5F,gBAAM,oBAAyC,oBAAI,IAAG;AAGtD,gBAAM,eAAe;AACrB,gBAAM,YAAY,iCAAiC,KAAK,YAAY;AACpE,gBAAM,SAAS,IAAI,OAAO,SAAS;AAEnC,iBAAO,iBAAiB,WAAW,CAAC,EAAE,KAAI,MAA0B;AAChE,gBAAI,SAAQ,mBAAmB,IAAI,GAAG;AAClC,oBAAM,EACF,QAAQ,EAAE,QAAO,EAAE,IACnB;AAEJ,oBAAM,WAAW,0BAA0B,IAAI,OAAO;AAEtD,kBAAI,OAAO,aAAa,UAAU;AAC9B,sBAAM,mBAAmB,kBAAkB,IAAI,QAAQ;AAEvD,oBACI,qBAAqB,UACrB,qBAAqB,SACvB;AACE,wBAAM,IAAI,MAAM,qCAAqC;;yBAElD,OAAO,aAAa,aAAa;AACxC,yBAAQ;AAGR,0CAA0B,OAAO,OAAO;qBACrC;AACH,sBAAM,IAAI,MAAM,qCAAqC;;uBAElD,SAAQ,gBAAgB,IAAI,GAAG;AACtC,oBAAM,EAAE,GAAE,IAAK;AAEf,oBAAM,mBAAmB,kBAAkB,IAAI,EAAE;AAEjD,kBAAI,qBAAqB,QAAW;AAChC,sBAAM,IAAI,MAAM,qCAAqC;;AAGzD,gCAAkB,OAAO,EAAE;AAE3B,wCAA0B,OAAO,gBAAgB;mBAC9C;AACH,oBAAM,EACF,OAAO,EAAE,QAAO,EAAE,IAClB;AAEJ,oBAAM,IAAI,MAAM,OAAO;;UAE/B,CAAC;AAED,gBAAMC,gBAAe,CAAC,YAAyB;AAC3C,kBAAM,KAAK,KAAK,OAAM;AAEtB,8BAAkB,IAAI,IAAI,OAAO;AACjC,sCAA0B,IAAI,SAAS,EAAE;AAEzC,mBAAO,YAAY;cACf;cACA,QAAQ;cACR,QAAQ,EAAE,QAAO;aACH;UACtB;AAEA,gBAAMC,cAAa,CAAC,MAAkB,UAAyB;AAC3D,kBAAM,UAAU,KAAK,OAAM;AAE3B,sCAA0B,IAAI,SAAS,IAAI;AAE3C,mBAAO,YAAY;cACf,IAAI;cACJ,QAAQ;cACR,QAAQ;gBACJ;gBACA,KAAK,YAAY,IAAG;gBACpB;;aAEa;AAErB,mBAAO;UACX;AAEA,iBAAO;YACH,cAAAD;YACA,YAAAC;;QAER;QAEQ,OAAO,mBAAgB;AAC3B,iBAAO,MAAoB;AACvB,gBAAI,SAAQ,iBAAiB,MAAM;AAC/B,qBAAO,SAAQ;;AAGnB,qBAAQ,eAAe,SAAQ,KAAI;AAEnC,mBAAO,SAAQ;UACnB;QACJ;QAIQ,OAAO,mBAAmB,SAAuB;AACrD,iBAAQ,QAA8B,WAAW,UAAc,QAA8B,WAAW;QAC5G;QAEQ,OAAO,gBAAgB,SAAuB;AAClD,iBAAQ,QAA2B,UAAU,QAAQ,OAAO,QAAQ,OAAO;QAC/E;;AAzHJ,cAAA,UAAA;AAEmB,cAAA,eAAqC;AAEtC,cAAA,eAA8C,CAAC,YAA0B,QAAQ,OAAM,EAAG,aAAa,OAAO;AAE9G,cAAA,aAA0C,CAAC,MAAiB,UAA0B,QAAQ,OAAM,EAAG,WAAW,MAAM,KAAK;AA2G7H,cAAA,SAA8B,QAAQ,iBAAgB;;;;;;;;;;AC3KxE,UAAA,qBAAA;AAEA,UAAa,YAAb,cAA+B,mBAAA,cAAa;QAGxC,YAAmB,WAAmB,WAAsB,WAAiB;AACzE,gBAAM,WAAW,SAAS;AAE1B,eAAK,gBAAgB;QACzB;;AAPJ,cAAA,YAAA;AAUA,UAAa,0BAAb,cAA6C,UAAS;QAClD,YAAmB,WAAiB;AAChC,gBAAM,2BAA2B,mBAAA,UAAU,OAAO,SAAS;QAC/D;;AAHJ,cAAA,0BAAA;AAMA,UAAa,qBAAb,cAAwC,UAAS;QAC7C,YAAmB,WAAiB;AAChC,gBAAM,sBAAsB,mBAAA,UAAU,OAAO,SAAS;QAC1D;;AAHJ,cAAA,qBAAA;AAMA,UAAa,wBAAb,cAA2C,UAAS;QAChD,YAAmB,WAAiB;AAChC,gBAAM,yBAAyB,mBAAA,UAAU,OAAO,SAAS;QAC7D;;AAHJ,cAAA,wBAAA;AAMA,UAAa,6BAAb,cAAgD,UAAS;QACrD,YAAmB,WAAiB;AAChC,gBAAM,8BAA8B,mBAAA,UAAU,OAAO,SAAS;QAClE;;AAHJ,cAAA,6BAAA;AAMA,UAAa,4BAAb,cAA+C,UAAS;QACpD,YAAmB,WAAiB;AAChC,gBAAM,6BAA6B,mBAAA,UAAU,OAAO,SAAS;QACjE;;AAHJ,cAAA,4BAAA;AAMA,UAAa,0BAAb,cAA6C,UAAS;QAClD,YAAmB,WAAiB;AAChC,gBAAM,2BAA2B,mBAAA,UAAU,OAAO,SAAS;QAC/D;;AAHJ,cAAA,0BAAA;AAMA,UAAa,+BAAb,cAAkD,UAAS;QACvD,YAAmB,WAAiB;AAChC,gBAAM,gCAAgC,mBAAA,UAAU,OAAO,SAAS;QACpE;;AAHJ,cAAA,+BAAA;AAMA,UAAa,0BAAb,cAA6C,UAAS;QAClD,cAAA;AACI,gBAAM,2BAA2B,mBAAA,UAAU,OAAO,EAAE;QACxD;;AAHJ,cAAA,0BAAA;AAMA,UAAa,4BAAb,cAA+C,UAAS;QACpD,YAAmB,cAAoB;AACnC,gBAAM,6BAA6B,mBAAA,UAAU,OAAO,YAAY;QACpE;;AAHJ,cAAA,4BAAA;AAMA,UAAa,6BAAb,cAAgD,UAAS;QAGrD,YAAmB,cAAsB,YAAkB;AACvD,gBAAM,8BAA8B,mBAAA,UAAU,OAAO,YAAY;AACjE,eAAK,iBAAiB;QAC1B;;AANJ,cAAA,6BAAA;AASA,UAAa,kCAAb,cAAqD,UAAS;QAI1D,YAAmB,cAAsB,WAAmB,YAAkB;AAC1E,gBAAM,mCAAmC,mBAAA,UAAU,OAAO,YAAY;AACtE,eAAK,iBAAiB;AACtB,eAAK,gBAAgB;QACzB;;AARJ,cAAA,kCAAA;AAWA,UAAa,oBAAb,cAAuC,UAAS;QAM5C,YAAmB,cAAsB,WAAmB,YAAkB;AAC1E,gBAAM,qBAAqB,mBAAA,UAAU,OAAO,YAAY;AACxD,eAAK,iBAAiB;AACtB,eAAK,uBAAuB,IAAI,KAAK,UAAU,EAAE,mBAAkB;AACnE,eAAK,gBAAgB;AACrB,eAAK,sBAAsB,IAAI,KAAK,SAAS,EAAE,mBAAkB;QACrE;;AAZJ,cAAA,oBAAA;AAeA,UAAa,8BAAb,cAAiD,UAAS;QAGtD,YAAmB,cAAsB,OAAa;AAClD,gBAAM,+BAA+B,mBAAA,UAAU,OAAO,YAAY;AAClE,eAAK,YAAY;QACrB;;AANJ,cAAA,8BAAA;AASA,UAAa,2BAAb,cAA8C,UAAS;QAGnD,YAAmB,cAAsB,OAAa;AAClD,gBAAM,4BAA4B,mBAAA,UAAU,OAAO,YAAY;AAC/D,eAAK,YAAY;QACrB;;AANJ,cAAA,2BAAA;AASA,UAAa,6BAAb,cAAgD,UAAS;QACrD,YAAmB,cAAoB;AACnC,gBAAM,8BAA8B,mBAAA,UAAU,OAAO,YAAY;QACrE;;AAHJ,cAAA,6BAAA;AAMA,UAAa,4BAAb,cAA+C,UAAS;QAGpD,YAAmB,cAAsB,OAAa;AAClD,gBAAM,6BAA6B,mBAAA,UAAU,OAAO,YAAY;AAChE,eAAK,YAAY;QACrB;;AANJ,cAAA,4BAAA;;;;;;;;;;AC9HA,UAAA,eAAA;AAKA,UAAa,kBAAb,cAAqC,aAAA,cAAa;QAG9C,YAAmB,OAAa;AAC5B,gBAAM,mBAAmB,aAAA,UAAU,KAAK;AACxC,eAAK,YAAY;QACrB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;;AAVJ,cAAA,kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,mBAAA,6BAAA,OAAA;AACA,mBAAA,4BAAA,OAAA;AACA,mBAAA,6BAAA,OAAA;AACA,mBAAA,kCAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,wBAAA,OAAA;AACA,mBAAA,iBAAA,OAAA;AACA,mBAAA,kBAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,gBAAA,OAAA;AACA,mBAAA,wBAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;AACA,mBAAA,wBAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;AACA,mBAAA,kBAAA,OAAA;AACA,mBAAA,sCAAA,OAAA;AACA,mBAAA,gBAAA,OAAA;AACA,mBAAA,yBAAA,OAAA;AACA,mBAAA,mBAAA,OAAA;AACA,mBAAA,iBAAA,OAAA;AACA,mBAAA,+BAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;AACA,mBAAA,kBAAA,OAAA;AACA,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAC1B,mBAAA,oCAAA,OAAA;AACA,mBAAA,6BAAA,OAAA;AACA,mBAAA,mBAAA,OAAA;AACA,mBAAA,sBAAA,OAAA;AACA,mBAAA,2BAAA,OAAA;;;;;;;;;;AChCA,UAAa,cAAb,MAAwB;;AAAxB,cAAA,cAAA;AACkB,kBAAA,UAAkB;AAClB,kBAAA,gBAAwB;AACxB,kBAAA,cAAsB;AACtB,kBAAA,eAAuB;AACvB,kBAAA,cAAsB;AACtB,kBAAA,sBAA8B;AAC9B,kBAAA,OAAe;AACf,kBAAA,YAAoB;AACpB,kBAAA,kBAA0B;AAC1B,kBAAA,mBAA2B;;;;;;;;;;ACL7C,UAAa,WAAb,MAAqB;QAIjB,YAAmB,YAAoB,OAAa;AAChD,eAAK,iBAAiB;AACtB,eAAK,YAAY;QACrB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;;AAfJ,cAAA,WAAA;;;;;;;;;;ACLA,UAAA,eAAA;AAGA,UAAA,mBAAA;AACA,UAAA,uBAAA;AAQA,UAAa,yCAAb,MAAmD;;;;;;QAQ/C,YAAmB,iBAAuB;AACtC,cAAI,CAAC,iBAAiB;AAClB,kBAAM,IAAI,aAAA,kBAAkB,iBAAiB;;AAGjD,eAAK,eAAe,IAAI,qBAAA,SAAS,iBAAA,YAAY,SAAS,eAAe;QACzE;;;;;;;;;QAUO,MAAM,kBAAwB;AACjC,iBAAO,QAAQ,QAAQ,KAAK,YAAY;QAC5C;;;;;;;;;QAUO,cAAc,kBAAwB;AACzC,iBAAO,QAAQ,QAAQ,KAAK,YAAY;QAC5C;;AAtCJ,cAAA,yCAAA;;;;;;;;;;ACZA,UAAA,eAAA;AACA,UAAA,uBAAA;AACA,UAAA,mBAAA;AAEA,UAAa,+BAAb,MAAa,8BAA4B;QAKrC,YAAmB,eAA8D,uBAAoE;AACjJ,cAAI,CAAC,eAAe;AAChB,kBAAM,IAAI,aAAA,kBAAkB,eAAe;;AAG/C,cAAI,CAAC,uBAAuB;AACxB,kBAAM,IAAI,aAAA,kBAAkB,uBAAuB;;AAGvD,eAAK,oBAAoB;AACzB,eAAK,4BAA4B;QACrC;QAEO,MAAM,kBAAwB;AACjC,iBAAO,KAAK,kBAAkB,gBAAgB,EAAE,KAAK,CAAC,UAA4B,IAAI,qBAAA,SAAS,iBAAA,YAAY,eAAe,UAAU,SAAY,SAAY,8BAA6B,kBAAkB,KAAK,CAAC;QACrN;QAEO,cAAc,kBAAwB;AACzC,iBAAO,KAAK,0BAA0B,gBAAgB,EAAE,KAAK,CAAC,UAA4B,IAAI,qBAAA,SAAS,iBAAA,YAAY,eAAe,UAAU,SAAY,SAAY,8BAA6B,kBAAkB,KAAK,CAAC;QAC7N;;AAxBJ,cAAA,+BAAA;AACmB,mCAAA,kBAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL7C,UAAA,eAAA;AAOsB,aAAA,eAAA,SAAA,YAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAPb,aAAA;MAAS,EAAA,CAAA;;;;;;;;;;ACIlB,UAAa,YAAb,MAAa,WAAS;QACX,OAAO,uBAAuB,OAAY,MAAY;AACzD,cAAI,UAAU,UAAa,UAAU,MAAM;AACvC,kBAAM,IAAI,MAAM,4BAA4B,IAAI;;QAExD;QAEO,OAAO,YAAY,OAAY,MAAY;AAC9C,cAAI,UAAU,MAAM;AAChB,kBAAM,IAAI,MAAM,iBAAiB,IAAI;;QAE7C;QAEO,OAAO,wBAAwB,OAAe,MAAY;AAC7D,qBAAU,uBAAuB,OAAO,IAAI;AAE5C,eAAK,KAAK,OAAO,KAAI,EAAG,SAAS,GAAG;AAChC,kBAAM,IAAI,MAAM,6BAA6B,IAAI;;QAEzD;QAEO,OAAO,qBAAqB,OAAe,MAAc,WAAiB;AAC7E,qBAAU,uBAAuB,OAAO,IAAI;AAE5C,eAAK,KAAK,OAAO,SAAS,WAAW;AACjC,kBAAM,IAAI,MAAM,0BAA0B,OAAO,iBAAiB,UAAU,SAAQ,IAAK,cAAc;;QAE/G;QAEO,OAAO,sBAAsB,OAAe,MAAc,WAAiB;AAC9E,qBAAU,uBAAuB,OAAO,IAAI;AAE5C,eAAK,KAAK,OAAO,SAAS,WAAW;AACjC,kBAAM,IAAI,MAAM,2BAA2B,OAAO,iBAAiB,UAAU,SAAQ,IAAK,cAAc;;QAEhH;QAEO,OAAO,gBAAgB,YAAmB;AAC7C,cAAI,YAAY;AACZ,kBAAM,IAAI,MAAM,gCAAgC;;QAExD;QAEO,OAAO,8BAA8BC,QAAiB,MAAY;AACrE,qBAAU,uBAAuBA,QAAO,IAAI;AAE5C,cAAIA,OAAM,WAAW,GAAG;AACpB,kBAAM,IAAI,MAAM,mCAAmC,IAAI;;AAG3D,qBAAW,QAAQA,QAAO;AACtB,uBAAU,wBAAwB,MAAM,IAAI;;QAEpD;QAEO,OAAO,wBAAwB,OAAe,MAAY;AAC7D,qBAAU,wBAAwB,OAAO,IAAI;QAGjD;QAEO,OAAO,oBAAoB,OAAY,MAAY;AACtD,cAAI,UAAU,QAAW;AACrB,kBAAM,IAAI,MAAM,yBAAyB,IAAI;;QAErD;;AAjEJ,cAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA,UAAA,KAAA,aAAA,YAAA;AACA,UAAA,gBAAA;AAEA,UAAA,iBAAA;AAEA,UAAa,yBAAb,MAAmC;QAO/B,YAAmB,iBAA2B,cAAA,SAAS,MAAI;AALnD,eAAA,cAA2B;AAC3B,eAAA,0BAAmC;AAKvC,eAAK,qBAAqB;QAC9B;QAEA,IAAW,QAAQ,MAAiB;AAChC,yBAAA,UAAU,uBAAuB,GAAG,UAAU,oCAAoC;AAClF,eAAK,cAAc;QACvB;QAEA,IAAW,oBAAoB,cAAqB;AAChD,eAAK,0BAA0B;QACnC;QAEO,QAAQ,OAAoB;AAC/B,cAAI,MAAM,aAAa,KAAK,oBAAoB;AAC5C,kBAAM,MAAM,KAAK,SAAS,KAAK;AAC/B,gBAAI,CAAC,CAAC,KAAK,aAAa;AACpB,mBAAK,YAAY,GAAG;;AAExB,gBAAI,CAAC,CAAC,KAAK,aAAa;AACpB,iBAAG,cAAc,KAAK,aAAa,MAAM,MAAM,EAAE,MAAM,KAAI,CAAE;;AAGjE,gBAAI,KAAK,yBAAyB;AAC9B,sBAAQ,MAAM,WAAW;gBACrB,KAAK,cAAA,SAAS;AAEV,0BAAQ,MAAM,GAAG;AACjB;gBACJ,KAAK,cAAA,SAAS;AAEV,0BAAQ,KAAK,GAAG;AAChB;gBACJ,KAAK,cAAA,SAAS;AAEV,0BAAQ,KAAK,GAAG;AAChB;gBACJ,KAAK,cAAA,SAAS;AAEV,0BAAQ,MAAM,GAAG;AACjB;gBACJ;AAEI,0BAAQ,IAAI,GAAG;AACf;;;;QAIpB;QAEQ,SAAS,OAAoB;AACjC,gBAAM,eAAe;YACjB,GAAG,MAAM,SAAS;YAClB,GAAG,MAAM,IAAI;;AAGjB,gBAAM,IAAS;AACf,qBAAW,QAAQ,GAAG;AAClB,gBAAI,QAAQ,MAAM,eAAe,IAAI,KACjC,SAAS,eAAe,SAAS,eACjC,SAAS,aAAa,SAAS,UAC/B,SAAS,eAAe;AAExB,oBAAM,QAAQ,EAAE,IAAI;AACpB,kBAAI,aAAa;AACjB,kBAAI,UAAU,UAAa,UAAU,MAAM;AACvC,oBAAI,OAAQ,UAAW,YAAY,OAAQ,UAAW,UAAU;AAC5D,+BAAa,MAAM,SAAQ;uBACxB;AACH,+BAAa,KAAK,UAAU,KAAK;;;AAIzC,2BAAa,KAAK,GAAG,IAAI,KAAK,UAAU,EAAE;;;AAKlD,iBAAO,aAAa,KAAK,KAAK;QAClC;;AAtFJ,cAAA,yBAAA;;;;;;;;;;;;;;;;;;ACLA,UAAY;AAAZ,OAAA,SAAYC,iBAAc;AACtB,QAAAA,gBAAAA,gBAAA,KAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,OAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,OAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,KAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,WAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,UAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,WAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;AACA,QAAAA,gBAAAA,gBAAA,MAAA,IAAA,EAAA,IAAA;MACJ,GAXY,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;AAiB1B,UAAsB,oBAAtB,MAAuC;;;;;;;;;QAS5B,OAAO,wBAAqB;AAC/B,iBAAO,sBAAsB,sBAAqB;QACtD;;;;;;;;;;;;;QAcO,OAAO,cAAc,kBAA0B,eAAuB,UAAkBC,SAAsB;AACjH,iBAAO,IAAI,sBAAsB,kBAAkB,eAAe,UAAUA,OAAM;QACtF;;;;;;;;;;;;QAaO,OAAO,iBAAiB,kBAA0B,eAAuB,UAAgB;AAC5F,iBAAO,IAAI,sBAAsB,kBAAkB,eAAe,QAAQ;QAC9E;;AA1CJ,cAAA,oBAAA;AAyDA,UAAa,wBAAb,MAAa,+BAA8B,kBAAiB;;;;;;;;;QAWxD,YAAmB,gBAAwB,MAAO,gBAAwB,IAAI,WAAmB,GAAGA,UAAyB,eAAe,KAAG;AAC3I,gBAAK;AAEL,cAAI,cAAuB;AAE3B,kBAAQA,SAAQ;YACZ,KAAK,eAAe;AAChB,mBAAK,YAAY;AACjB;YACJ,KAAK,eAAe;AAChB,mBAAK,YAAY;AACjB;YACJ,KAAK,eAAe;AAChB,mBAAK,YAAY;AACjB;YACJ;AACI,4BAAc;;AAEtB,eAAK,gBAAgB;AACrB,eAAK,gBAAgB;AACrB,eAAK,WAAW;AAChB,eAAK,iBAAiB,KAAK,gBAAgB,KAAK,YAAY,KAAK,gBAAgB;AACjF,eAAK,aAAa,KAAK,WAAW,KAAK,IAAI,KAAK,eAAe,CAAC;AAEhE,cAAI,aAAa;AACb,iBAAK,aAAa,IAAI,YAAY,EAAE;AAGpC,kBAAM,OAAO,IAAI,SAAS,KAAK,UAAU;AAGzC,iBAAK,UAAU,MAAM,GAAG,MAAM;AAE9B,iBAAK,UAAU,GAAG,GAAG,IAAI;AAEzB,iBAAK,UAAU,MAAM,GAAG,UAAU;AAElC,iBAAK,UAAU,IAAI,IAAI,IAAI;AAE3B,iBAAK,UAAU,IAAI,KAAK,WAAW,IAAI;AAEvC,iBAAK,UAAU,IAAI,KAAK,UAAU,IAAI;AAEtC,iBAAK,UAAU,IAAI,KAAK,eAAe,IAAI;AAE3C,iBAAK,UAAU,IAAI,KAAK,gBAAgB,IAAI;AAE5C,iBAAK,UAAU,IAAI,KAAK,YAAY,KAAK,gBAAgB,IAAI,IAAI;AAEjE,iBAAK,UAAU,IAAI,KAAK,eAAe,IAAI;AAE3C,iBAAK,UAAU,MAAM,IAAI,MAAM;AAE/B,iBAAK,UAAU,IAAI,GAAG,IAAI;;QAElC;;;;;;;;QASO,OAAO,wBAAqB;AAC/B,iBAAO,IAAI,uBAAqB;QACpC;;;;;;;;;QAUO,OAAO,gBAAgB,YAAmB;AAE7C,gBAAMC,gBAAgB,OAAe,gBAC7B,OAAe,sBAChB;AAGP,cAAI,CAAC,CAACA,eAAc;AAChB,gBAAI,eAAe,UAAa,UAAU,aAAa,wBAAuB,EAAG,YAAY;AACzF,qBAAO,IAAIA,cAAa,EAAE,WAAU,CAAE;mBACnC;AACH,qBAAO,IAAIA,cAAY;;iBAExB;AACH,kBAAM,IAAI,MAAM,yEAAyE;;QAEjG;;;;;;;;QASO,QAAK;AACR;QACJ;QAkDA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEU,UAAU,MAAgB,QAAgB,KAAW;AAC3D,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,iBAAK,SAAS,SAAS,GAAG,IAAI,WAAW,CAAC,CAAC;;QAEnD;;AA5KJ,cAAA,wBAAA;;;;;;;;;;AC3EA,UAAA,eAAA;AAKA,UAAA,eAAA;AAqBA,UAAA,yBAAA;AAaa,cAAA,oCAAoC;AAEjD,UAAa,iBAAb,MAAa,gBAAc;QAsBvB,YACqB,cACA,UACjB,eACA,aAAyB;AAHR,eAAA,eAAA;AACA,eAAA,WAAA;AApBb,eAAA,cAAsD,CAAA;AAyB1D,eAAK,sBAAsB,gBAAe,YAAY,iBAAiB;AACvE,eAAK,SAAS,gBAAgB,gBAAgB,aAAA,iBAAgB;AAC9D,eAAK,aAAa,IAAI,aAAA,YAAW;AACjC,eAAK,kBAAkB,eAAe;AACtC,eAAK,gBAAgB;QACzB;QAEA,IAAW,SAAM;AACb,iBAAO,QAAQ,QAAQ,gBAAe,WAAW;QACrD;QAEO,SAAM;AACT,cAAI,KAAK,wBAAwB;AAC7B,mBAAO,KAAK,uBAAuB;;AAGvC,eAAK,yBAAyB,IAAI,aAAA,SAAQ;AAE1C,cAAI;AACA,iBAAK,mBAAkB;mBAClB,OAAO;AACZ,gBAAI,iBAAiB,OAAO;AACxB,oBAAM,aAAoB;AAC1B,mBAAK,uBAAuB,OAAO,WAAW,OAAO,OAAO,WAAW,OAAO;mBAC3E;AACH,mBAAK,uBAAuB,OAAO,KAAe;;AAEtD,mBAAO,KAAK,uBAAuB;;AAGvC,gBAAM,MAAM,OAAO;AAEnB,cAAI;;YAEA,IAAI,gBACJ,IAAI,sBACJ,IAAI,mBACJ,IAAI;;AAGR,cAAI,CAAC,CAAC,IAAI,cAAc;AACpB,2BAAe,CAAC,aAAqC,iBAAoD,kBAAwD;AAC7J,kBAAI,aACC,aAAa,WAAW,EACxB,KAAK,eAAe,EACpB,MAAM,aAAa;YAC5B;;AAGJ,cAAI,CAAC,cAAc;AACf,kBAAM,WAAW;AACjB,iBAAK,uBAAuB,OAAO,QAAQ;AAC3C,iBAAK,QAAQ,IAAI,aAAA,sBAAsB,UAAU,EAAE,CAAC;iBACjD;AACH,kBAAM,OAAO,MAAW;AACpB,mBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,MAAM,CAAC;AAC1D,kBAAI,KAAK,mBAAmB,KAAK,gBAAgB,QAAQ;AACrD,qBAAK,QAAQ,IAAI,aAAA,sBAAsB,KAAK,MAAM,CAAC;AACnD,qBAAK,uBAAuB,QAAO;qBAChC;AACH,6BACI,EAAE,OAAO,KAAK,WAAW,EAAE,UAAU,KAAK,SAAQ,IAAK,MAAM,OAAO,MAAK,GACzE,CAAC,gBAAkC;AAC/B,uBAAK,kBAAkB;AACvB,uBAAK,QAAQ,IAAI,aAAA,sBAAsB,KAAK,MAAM,CAAC;AACnD,uBAAK,uBAAuB,QAAO;gBACvC,GAAG,CAAC,UAAoB;AACpB,wBAAM,WAAW,oDAAoD,KAAe;AACpF,uBAAK,uBAAuB,OAAO,QAAQ;AAC3C,uBAAK,QAAQ,IAAI,aAAA,sBAAsB,KAAK,QAAQ,QAAQ,CAAC;gBACjE,CAAC;;YAEb;AAEA,gBAAI,KAAK,YAAY,UAAU,aAAa;AAGxC,mBAAK,YAAY,OAAM,EAClB,KAAK,IAAI,EACT,MAAM,CAAC,WAAqB;AACzB,qBAAK,uBAAuB,OAAO,uCAAuC,MAAgB,EAAE;cAChG,CAAC;mBACF;AACH,mBAAI;;;AAIZ,iBAAO,KAAK,uBAAuB;QACvC;QAEO,KAAE;AACL,iBAAO,KAAK;QAChB;QAEO,OAAO,aAAmB;AAC7B,eAAK,QAAQ,IAAI,aAAA,8BAA8B,KAAK,QAAQ,WAAW,CAAC;AAExE,iBAAO,KAAK,OAAO,WAAW,EAAE,KAC5B,CAAC,WAAiD;AAC9C,iBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,mBAAO;cACH,QAAQ,YAA0B;AAC9B,uBAAO,UAAS;AAChB,uBAAO,KAAK,YAAY,WAAW;AACnC,qBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,uBAAO,KAAK,QAAO;cACvB;cACA,IAAI,MAAc;cAClB,MAAM,MAA0C,OAAO,KAAI;;UAEnE,CAAC;QACT;QAEO,OAAO,aAAmB;AAC7B,cAAI,eAAe,KAAK,YAAY,WAAW,GAAG;AAC9C,iBAAK,YAAY,WAAW,EAAE,MAAK;AACnC,mBAAO,KAAK,YAAY,WAAW;AACnC,iBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;;QAE/E;QAEO,MAAM,UAAO;AAChB,qBAAW,YAAY,KAAK,aAAa;AACrC,gBAAI,UAAU;AACV,oBAAM,SAAS,KAAK,YAAY,QAAQ;AACxC,kBAAI,QAAQ;AACR,uBAAO,MAAK;;;;AAKxB,eAAK,QAAQ,IAAI,aAAA,oBAAoB,KAAK,MAAM,CAAC;AACjD,cAAI,KAAK,wBAAwB;AAG7B,kBAAM,KAAK;AACX,iBAAK,yBAAyB;;AAGlC,gBAAM,KAAK,oBAAmB;AAE9B;QACJ;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK,mBAAkB,EAAG,KAAK,CAAC,WACnC;YACI,eAAe,gBAAe,YAAY;YAC1C,cAAc,gBAAe,YAAY;YACzC,cAAc,aAAA,aAAa;YAC3B,cAAc;YACd,OAAO;YACP,YAAY,gBAAe,YAAY;YACvC,MAAM,aAAA,KAAK;YAElB;QACL;QAEO,YAAY,MAAc,OAAa;AAC1C,cAAI,SAAS,QAAA,mCAAmC;AAC5C,iBAAK,aAAa,cAAc,KAAK;iBAClC;AACH,kBAAM,IAAI,MAAM,eAAe,OAAO,mCAAmC;;QAEjF;QAEQ,qBAAkB;AACtB,gBAAM,wBAAgC;AAGtC,cAAI,KAAK,wBAAwB,QAAW;AACxC,mBAAO,QAAQ,QAAQ,KAAK,mBAAmB;;AAInD,cAAI,KAAK,oBAAoB,UAAa,CAAC,KAAK,gBAAgB,QAAQ;AACpE,mBAAO,QAAQ,QAAQ,qBAAqB;;AAIhD,eAAK,sBAAsB;AAG3B,gBAAM,qBAA6B,KAAK,gBAAgB,UAAS,EAAG,CAAC,EAAE,YAAW,EAAG;AAGrF,cAAI,WAAc,oBAAoB;AAClC,mBAAO,QAAQ,QAAQ,KAAK,mBAAmB;;AAGnD,gBAAM,WAA6B,IAAI,aAAA,SAAQ;AAG/C,oBAAU,aAAa,iBAAgB,EAAG,KAAK,CAAC,YAAoC;AAChF,uBAAW,UAAU,SAAS;AAC1B,kBAAI,OAAO,aAAa,oBAAoB;AAExC,qBAAK,sBAAsB,OAAO;AAClC;;;AAGR,qBAAS,QAAQ,KAAK,mBAAmB;UAC7C,GAAG,MAAwB,SAAS,QAAQ,KAAK,mBAAmB,CAAC;AAErE,iBAAO,SAAS;QACpB;QAEQ,MAAM,OAAO,aAAmB;AACpC,gBAAM,KAAK,OAAM;AACjB,gBAAM,SAAS,IAAI,aAAA,yBAAyB,KAAK,qBAAqB,WAAW;AACjF,eAAK,YAAY,WAAW,IAAI;AAChC,cAAI;AACA,iBAAK,aAAa,OAAO,KAAK,aAAa,KAAK,iBAAiB,MAAM;mBAClE,OAAO;AACZ,iBAAK,QAAQ,IAAI,aAAA,0BAA0B,KAAK,QAAQ,aAAa,KAAe,CAAC;AACrF,kBAAM;;AAEV,gBAAM,SAA8B;AACpC,iBAAO;QACX;QAEQ,QAAQ,OAAuB;AACnC,eAAK,WAAW,QAAQ,KAAK;AAC7B,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;QAEQ,qBAAkB;AACtB,cAAI,CAAC,CAAC,KAAK,aAAa;AACpB;;AAGJ,eAAK,cAAc,uBAAA,sBAAsB,gBAAgB,gBAAe,YAAY,aAAa;QACrG;QAEQ,MAAM,sBAAmB;AAC7B,cAAI,CAAC,KAAK,aAAa;AACnB;;AAGJ,eAAK,aAAa,sBAAsB,KAAK,WAAW;AAKxD,cAAI,WAAoB;AACxB,cAAI,WAAW,KAAK,aAAa;AAC7B,uBAAW;;AAGf,cAAI,UAAU;AACV,gBAAI,CAAC,KAAK,eAAe;AAErB,mBAAK,gBAAgB;AACrB,oBAAM,KAAK,YAAY,MAAK;AAC5B,mBAAK,cAAc;AACnB,mBAAK,gBAAgB;;qBAElB,SAAS,KAAK,eAAe,KAAK,YAAY,UAAU,WAAW;AAO1E,kBAAM,KAAK,YAAY,QAAO;;QAEtC;;AA3SJ,cAAA,iBAAA;AAE4B,qBAAA,cAAqC,uBAAA,kBAAkB,sBAAqB;;;;;;;;;;AC3CxG,UAAA,eAAA;AAKA,UAAA,eAAA;AAqBA,UAAA,yBAAA;AAEA,UAAa,kBAAb,MAA4B;QAgBxB,YAAmB,MAAqB,UAAmB,eAAsB;AAZzE,eAAA,cAAsD,CAAA;AAUtD,eAAA,gBAAwB;AAG5B,eAAK,SAAS,gBAAgB,gBAAgB,aAAA,iBAAgB;AAC9D,eAAK,aAAa,IAAI,aAAA,YAAW;AACjC,eAAK,aAAa;AAClB,cAAI,OAAO,WAAW,eAAe,OAAO,SAAS,eAAe,KAAK,sBAAsB,MAAM;AACjG,iBAAK,eAAgB,KAAc;iBAChC;AACH,iBAAK,eAAe,YAAY;;AAIpC,eAAK,yBAAyB,KAAK,WAAU;QACjD;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEO,SAAM;AACT,cAAI,KAAK,aAAa,YAAY,MAAM,MAAM,KAAK,aAAa,SAAS,GAAG;AACxE,kBAAM,WAAW,KAAK,eAAe;AACrC,iBAAK,QAAQ,IAAI,aAAA,sBAAsB,UAAU,EAAE,CAAC;AACpD,mBAAO,QAAQ,OAAO,QAAQ;;AAGlC,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,MAAM,CAAC;AAC1D,eAAK,QAAQ,IAAI,aAAA,sBAAsB,KAAK,MAAM,CAAC;AACnD;QACJ;QAEO,KAAE;AACL,iBAAO,KAAK;QAChB;QAEO,MAAM,OAAO,aAAmB;AACnC,eAAK,QAAQ,IAAI,aAAA,8BAA8B,KAAK,QAAQ,WAAW,CAAC;AAExE,gBAAM,SAA8B,MAAM,KAAK,OAAO,WAAW;AAEjE,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,iBAAO,QAAQ,QAAQ;YACnB,QAAQ,YAA0B;AAC9B,qBAAO,UAAS;AAChB,qBAAO,KAAK,YAAY,WAAW;AACnC,mBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,oBAAM,KAAK,QAAO;YACtB;YACA,IAAI,MAAc;YAClB,MAAM,MAA0C,OAAO,KAAI;WAC9D;QACL;QAEO,OAAO,aAAmB;AAC7B,cAAI,eAAe,KAAK,YAAY,WAAW,GAAG;AAC9C,iBAAK,YAAY,WAAW,EAAE,MAAK;AACnC,mBAAO,KAAK,YAAY,WAAW;AACnC,iBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;;QAE/E;QAEO,UAAO;AACV,qBAAW,YAAY,KAAK,aAAa;AACrC,gBAAI,UAAU;AACV,oBAAM,SAAS,KAAK,YAAY,QAAQ;AACxC,kBAAI,UAAU,CAAC,OAAO,UAAU;AAC5B,uBAAO,MAAK;;;;AAKxB,eAAK,QAAQ,IAAI,aAAA,oBAAoB,KAAK,MAAM,CAAC;AACjD,iBAAO,QAAQ,QAAO;QAC1B;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK,uBAAuB,KAA+B,CAAC,WAQ3D,QAAQ,QAAQ;YAChB,eAAe,OAAO;YACtB,cAAc,OAAO;YACrB,cAAc,aAAA,aAAa;YAC3B,cAAc;YACd,OAAO;YACP,YAAY,OAAO;YACnB,MAAM,aAAA,KAAK;WACd,CACJ;QACL;QAEQ,aAAU;AAEd,gBAAM,gBAAwB;AAC9B,gBAAM,SAAwB,KAAK,WAAW,MAAM,GAAG,aAAa;AAEpE,gBAAM,eAAgD,IAAI,aAAA,SAAQ;AAElE,gBAAM,gBAAgB,CAACC,YAA6B;AAChD,kBAAM,OAAiB,IAAI,SAASA,OAAM;AAE1C,kBAAM,UAAU,CAAC,UAA0B,OAAO,aAAa,KAAK,SAAS,KAAK,GAAG,KAAK,SAAS,QAAQ,CAAC,GAAG,KAAK,SAAS,QAAQ,CAAC,GAAG,KAAK,SAAS,QAAQ,CAAC,CAAC;AAGjK,gBAAI,WAAW,QAAQ,CAAC,GAAG;AACvB,2BAAa,OAAO,gDAAgD;AACpE;;AAKJ,gBAAI,WAAW,QAAQ,CAAC,KAAK,WAAW,QAAQ,EAAE,GAAG;AACjD,2BAAa,OAAO,mDAAmD;AACvE;;AAGJ,kBAAM,aAAqB,KAAK,SAAS,IAAI,IAAI;AACjD,kBAAM,eAAuB,KAAK,UAAU,IAAI,IAAI;AACpD,kBAAM,aAAqB,KAAK,UAAU,IAAI,IAAI;AAClD,kBAAM,gBAAwB,KAAK,UAAU,IAAI,IAAI;AAErD,gBAAI,MAAc,KAAK,KAAK,IAAI,aAAa,IAAI,CAAC;AAClD,mBAAO,QAAQ,GAAG,MAAM,QAAQ,OAAO,GAAG;AACtC,kBAAI,MAAM,gBAAgB,GAAG;AACzB,6BAAa,OAAO,sDAAsD;AAC1E;;;AAGR,iBAAK,gBAAgB,MAAM;AAC3B,yBAAa,QAAQ,uBAAA,kBAAkB,iBAAiB,YAAY,eAAe,YAAY,CAA0B;UAC7H;AAEA,cAAI,OAAO,WAAW,eAAe,OAAO,SAAS,eAAe,kBAAkB,MAAM;AACxF,kBAAM,SAAqB,IAAI,WAAU;AAEzC,mBAAO,SAAS,CAAC,UAAsB;AACnC,oBAAMA,UAAuB,MAAM,OAAsB;AACzD,4BAAcA,OAAM;YACxB;AAEA,mBAAO,kBAAkB,MAAM;iBAC5B;AACH,kBAAM,IAAY;AAClB,0BAAc,EAAE,OAAO,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,UAAU,CAAC;;AAE3E,iBAAO,aAAa;QACxB;QAEQ,MAAM,OAAO,aAAmB;AACpC,gBAAM,UAAU,CAAC,UAAuB;AACpC,kBAAM,WAAW,oCAAoC,KAAK,YAAY,MAAM,KAAK;AACjF,iBAAK,QAAQ,IAAI,aAAA,0BAA0B,KAAK,QAAQ,aAAa,QAAQ,CAAC;AAC9E,kBAAM,IAAI,MAAM,QAAQ;UAC5B;AAEA,cAAI;AACA,kBAAM,KAAK,OAAM;AAEjB,kBAAMC,UAAgC,MAAM,KAAK;AACjD,kBAAM,SAAS,IAAI,aAAA,yBAAyBA,QAAO,iBAAiB,IAAI,WAAW;AAEnF,iBAAK,YAAY,WAAW,IAAI;AAChC,kBAAM,QAAuB,KAAK,WAAW,MAAM,KAAK,aAAa;AAErE,kBAAM,cAAc,CAAC,SAA2B;AAC5C,kBAAI,OAAO,UAAU;AACjB;;AAGJ,qBAAO,iBAAiB;gBACpB,QAAQ;gBACR,OAAO;gBACP,cAAc,KAAK,IAAG;eACzB;AACD,qBAAO,MAAK;YAChB;AAEA,gBAAI,OAAO,WAAW,eAAe,OAAO,SAAS,eAAe,iBAAiB,MAAM;AACvF,oBAAM,SAAqB,IAAI,WAAU;AACzC,qBAAO,UAAU,CAAC,OAA0C,QAAQ,GAAG,SAAQ,CAAE;AAEjF,qBAAO,SAAS,CAAC,UAAsB;AACnC,sBAAM,aAA2B,MAAM,OAAsB;AAC7D,4BAAY,UAAU;cAC1B;AAEA,qBAAO,kBAAkB,KAAK;mBAC3B;AACH,oBAAM,IAAY;AAClB,0BAAY,EAAE,OAAO,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,UAAU,CAAC;;AAGzE,mBAAO;mBACF,GAAG;AACR,oBAAQ,CAAW;;QAE3B;QAEQ,QAAQ,OAAuB;AACnC,eAAK,WAAW,QAAQ,KAAK;AAC7B,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;;AAjOJ,cAAA,kBAAA;;;;;;;;;;AC5BA,UAAA,YAAA;AAGA,UAAa,cAAb,MAAwB;QAKpB,YAAmB,oBAA2B;AAC1C,eAAK,yBAAyB;QAClC;QAEO,OAAO,SAAuB,aAA0B,cAAiC;AAC5F,gBAAM,oBAAoB;AAE1B,gBAAM,oBAAoB,IAAI,UAAA,eAAe,QAAQ,YAAY,iBAAiB;AAElF,gBAAM,WAAW,QAAQ,wBAAwB,WAAW;AAE5D,gBAAM,wBAAwB,MAAW;AAErC,kBAAM,cAAc,MAAK;AACrB,kBAAI,aAAa;AACjB,kBAAI;AACA,uBAAO,QAAQ,sBAAsB,YAAY,GAAG,CAAC;uBAChD,OAAO;AAEZ,6BAAa;AACb,oBAAI,kBAAkB,QAAQ;AAC9B,uBAAO,aAAa,SAAS,mBAAoB,IAAI,mBAAoB;AACrE,iCAAe;AACf,sCAAoB;;AAExB,uBAAO,QAAQ,sBAAsB,YAAY,GAAG,CAAC;;YAE7D,GAAE;AACF,uBAAW,iBAAiB,CAAC,UAAqC;AAC9D,oBAAM,aAAa,MAAM,YAAY,eAAe,CAAC;AAErD,kBAAI,gBAAgB,CAAC,aAAa,UAAU;AACxC,sBAAM,YAAY,kBAAkB,OAAO,UAAU;AACrD,oBAAI,CAAC,CAAC,WAAW;AACb,+BAAa,iBAAiB;oBAC1B,QAAQ;oBACR,OAAO;oBACP,cAAc,KAAK,IAAG;mBACzB;;;YAGb;AACA,qBAAS,QAAQ,UAAU;AAC3B,uBAAW,QAAQ,QAAQ,WAAW;AACtC,iBAAK,qBAAqB;cACtB,qBAAqB;cACrB,QAAQ;cACR,QAAQ;;UAEhB;AAIA,gBAAM,mBAAmB,CAAC,CAAC,KAAK,6BAA6B,KAAK,0BAA0B,YAAW,MAAO;AAE9G,cAAI,CAAC,CAAC,QAAQ,gBAAgB,CAAC,kBAAkB;AAC7C,gBAAI,CAAC,KAAK,2BAA2B;AACjC,oBAAM,gBAAgB;;;;;;;;;;;;;;;AAetB,oBAAM,OAAO,IAAI,KAAK,CAAC,aAAa,GAAG,EAAE,MAAM,wCAAuC,CAAE;AACxF,mBAAK,4BAA4B,IAAI,gBAAgB,IAAI;;AAG7D,oBAAQ,aACH,UAAU,KAAK,yBAAyB,EACxC,KAAK,MAAW;AACb,oBAAM,cAAc,IAAI,iBAAiB,SAAS,kBAAkB;AACpE,0BAAY,KAAK,YAAY,CAAC,OAA0B;AACpD,sBAAM,aAA2B,GAAG;AAEpC,oBAAI,gBAAgB,CAAC,aAAa,UAAU;AACxC,wBAAM,YAAY,kBAAkB,OAAO,UAAU;AACrD,sBAAI,CAAC,CAAC,WAAW;AACb,iCAAa,iBAAiB;sBAC1B,QAAQ;sBACR,OAAO;sBACP,cAAc,KAAK,IAAG;qBACzB;;;cAGb;AACA,uBAAS,QAAQ,WAAW;AAC5B,0BAAY,QAAQ,QAAQ,WAAW;AACvC,mBAAK,qBAAqB;gBACtB,qBAAqB;gBACrB,QAAQ;gBACR,QAAQ;;YAEhB,CAAC,EACA,MAAM,MAAW;AACd,oCAAqB;YACzB,CAAC;iBACF;AACH,gBAAI;AACA,oCAAqB;qBAChB,KAAK;AACV,oBAAM,IAAI,MAAM,uDAAuD,GAAa,EAAE;;;QAGlG;QAEO,sBAAsB,SAAqB;AAC9C,cAAI,KAAK,oBAAoB;AACzB,gBAAI,KAAK,mBAAmB,qBAAqB;AAC7C,mBAAK,mBAAmB,oBAAoB,WAAW,QAAQ,WAAW;AAC1E,mBAAK,mBAAmB,sBAAsB;;AAElD,gBAAI,KAAK,mBAAmB,QAAQ;AAChC,mBAAK,mBAAmB,OAAO,WAAU;AACzC,kBAAI,KAAK,wBAAwB;AAC7B,qBAAK,mBAAmB,OAAO,UAAS,EAAG,QAAQ,CAAC,UAAkC,MAAM,KAAI,CAAE;;AAEtG,mBAAK,mBAAmB,SAAS;;;QAG7C;QAEO,cAAc,KAAW;AAC5B,eAAK,4BAA4B;QACrC;;AAzIJ,cAAA,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,UAAA,MAAA,aAAA,aAAA;AACA,UAAA,MAAA,aAAA,aAAA;AACA,UAAA,eAAA,gBAAA,aAAA;AACA,UAAA,sBAAA,gBAAA,2BAAA;AAEA,UAAA,OAAA,gBAAA,iBAAA;AACA,UAAA,mBAAA;AACA,UAAA,eAAA;AA6BA,UAAa,0BAAb,MAAa,yBAAuB;QAoBhC,YACI,KACA,cACA,kBACA,WACA,SACA,mBAA0B;AAE1B,cAAI,CAAC,KAAK;AACN,kBAAM,IAAI,aAAA,kBAAkB,KAAK;;AAGrC,cAAI,CAAC,kBAAkB;AACnB,kBAAM,IAAI,aAAA,kBAAkB,kBAAkB;;AAGlD,eAAK,YAAY;AACjB,eAAK,uBAAuB,IAAI,aAAA,YAAW;AAC3C,eAAK,mBAAmB;AACxB,eAAK,uBAAuB;AAC5B,eAAK,sBAAsB,aAAA,gBAAgB;AAC3C,eAAK,UAAU;AACf,eAAK,cAAc;AACnB,eAAK,wBAAwB;AAG7B,eAAK,YAAY,iBAAA,YAAY,YAAY,IAAI,KAAK;AAElD,eAAK,wBAAwB;QACjC;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;QAEO,OAAI;AACP,cAAI,KAAK,wBAAwB,aAAA,gBAAgB,cAAc;AAC3D,mBAAO,QAAQ,OAA+B,uCAAuC,KAAK,mBAAmB,QAAQ;;AAGzH,cAAI,KAAK,iCAAiC;AACtC,mBAAO,KAAK,gCAAgC;;AAGhD,eAAK,kCAAkC,IAAI,aAAA,SAAQ;AACnD,eAAK,mCAAmC,IAAI,aAAA,SAAQ;AAEpD,eAAK,sBAAsB,aAAA,gBAAgB;AAE3C,cAAI;AAEA,gBAAI,OAAO,cAAc,eAAe,CAAC,yBAAwB,mBAAmB;AAEhF,mBAAK,iCAAiC,QAAO;AAE7C,mBAAK,sBAAsB,IAAI,UAAU,KAAK,OAAO;mBAClD;AACH,oBAAM,UAA4B,EAAE,SAAS,KAAK,aAAa,mBAAmB,KAAK,sBAAqB;AAE5G,mBAAK,iCAAiC,QAAO;AAE7C,sBAAQ,QAAQ,KAAK,SAAQ;AAG7B,oBAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,kBAAI,WAAmB,IAAI;AAE3B,kBAAI,UAAU,kBAAiB,MAAO,QAAQ;AAC1C,2BAAW;yBACJ,UAAU,kBAAiB,MAAO,OAAO;AAChD,2BAAW;;AAGd,sBAAQ,MAAc,WAAW;AAClC,mBAAK,sBAAsB,IAAI,KAAA,QAAG,KAAK,SAAS,OAAO;;AAG3D,iBAAK,oBAAoB,aAAa;AACtC,iBAAK,4BAA4B,IAAI,aAAA,MAAK;AAC1C,iBAAK,yBAAyB,IAAI,aAAA,SAAQ;AAC1C,iBAAK,uBAAuB,IAAI,aAAA,MAAK;AACrC,iBAAK,iBAAgB,EAAG,MAAM,CAAC,WAAwB;AACnD,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;YACvD,CAAC;mBACI,OAAO;AACZ,iBAAK,gCAAgC,QAAQ,IAAI,aAAA,uBAAuB,KAAK,KAAe,CAAC;AAC7F,mBAAO,KAAK,gCAAgC;;AAGhD,eAAK,QAAQ,IAAI,aAAA,qBAAqB,KAAK,kBAAkB,KAAK,OAAO,CAAC;AAE1E,eAAK,oBAAoB,SAAS,MAAW;AACzC,iBAAK,iCAAiC,QAAQ,KAAK,MAAW;AAC1D,mBAAK,sBAAsB,aAAA,gBAAgB;AAC3C,mBAAK,QAAQ,IAAI,aAAA,2BAA2B,KAAK,gBAAgB,CAAC;AAClE,mBAAK,gCAAgC,QAAQ,IAAI,aAAA,uBAAuB,KAAK,EAAE,CAAC;YACpF,GAAG,CAAC,UAAuB;AACvB,mBAAK,gCAAgC,OAAO,KAAK;YACrD,CAAC;UACL;AAEA,eAAK,oBAAoB,UAAU,CAAC,MAAkF;AAClH,iBAAK,QAAQ,IAAI,aAAA,qBAAqB,KAAK,kBAAkB,EAAE,SAAS,EAAE,IAAI,CAAC;AAC/E,iBAAK,wBAAwB,EAAE;UACnC;AAEA,eAAK,oBAAoB,UAAU,CAAC,MAAwF;AACxH,gBAAI,KAAK,wBAAwB,aAAA,gBAAgB,YAAY;AACzD,mBAAK,sBAAsB,aAAA,gBAAgB;AAE3C,mBAAK,gCAAgC,QAAQ,IAAI,aAAA,uBAAuB,EAAE,MAAM,EAAE,SAAS,MAAM,KAAK,qBAAqB,CAAC;mBACzH;AACH,mBAAK,sBAAsB,aAAA,gBAAgB;AAC3C,mBAAK,sBAAsB;AAC3B,mBAAK,QAAQ,IAAI,aAAA,sBAAsB,KAAK,kBAAkB,EAAE,MAAM,EAAE,MAAM,CAAC;;AAGnF,iBAAK,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,WAAwB;AAC1D,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;YACvD,CAAC;UACL;AAEA,eAAK,oBAAoB,YAAY,CAAC,MAAoE;AACtG,kBAAM,uBAAsB,oBAAI,KAAI,GAAG,YAAW;AAClD,gBAAI,KAAK,wBAAwB,aAAA,gBAAgB,WAAW;AACxD,oBAAM,WAAW,IAAI,aAAA,SAAQ;AAE7B,mBAAK,0BAA0B,mBAAmB,SAAS,OAAO;AAClE,kBAAI,EAAE,gBAAgB,aAAa;AAC/B,sBAAM,aAAa,IAAI,aAAA,oBAAoB,aAAA,YAAY,QAAQ,EAAE,IAAI;AACrE,qBAAK,qBACA,oBAAoB,UAAU,EAC9B,KAAK,CAAC,sBAA8C;AACjD,uBAAK,QAAQ,IAAI,aAAA,+BAA+B,KAAK,kBAAkB,qBAAqB,iBAAiB,CAAC;AAC9G,2BAAS,QAAQ,iBAAiB;gBACtC,GAAG,CAAC,UAAuB;AAEvB,2BAAS,OAAO,yCAAyC,KAAK,EAAE;gBACpE,CAAC;qBACF;AACH,sBAAM,aAAa,IAAI,aAAA,oBAAoB,aAAA,YAAY,MAAM,EAAE,IAAI;AACnE,qBAAK,qBACA,oBAAoB,UAAU,EAC9B,KAAK,CAAC,sBAA8C;AACjD,uBAAK,QAAQ,IAAI,aAAA,+BAA+B,KAAK,kBAAkB,qBAAqB,iBAAiB,CAAC;AAC9G,2BAAS,QAAQ,iBAAiB;gBACtC,GAAG,CAAC,UAAuB;AAEvB,2BAAS,OAAO,uCAAuC,KAAK,EAAE;gBAClE,CAAC;;;UAGjB;AAEA,iBAAO,KAAK,gCAAgC;QAChD;QAEO,KAAK,SAA0B;AAClC,cAAI,KAAK,wBAAwB,aAAA,gBAAgB,WAAW;AACxD,mBAAO,QAAQ,OAAO,wCAAwC,aAAA,gBAAgB,KAAK,mBAAmB,CAAC,QAAQ;;AAGnH,gBAAM,4BAA4B,IAAI,aAAA,SAAQ;AAC9C,gBAAM,sBAAsB,IAAI,aAAA,SAAQ;AAExC,eAAK,qBAAqB,mBAAmB,oBAAoB,OAAO;AAExE,eAAK,qBACA,sBAAsB,OAAO,EAC7B,KAAK,CAAC,eAAyC;AAC5C,gCAAoB,QAAQ;cACxB,SAAS;cACT,qBAAqB;cACrB,oBAAoB;aACvB;UACL,GAAG,CAAC,UAAuB;AACvB,gCAAoB,OAAO,iCAAiC,KAAK,EAAE;UACvE,CAAC;AAEL,iBAAO,0BAA0B;QACrC;QAEO,OAAI;AACP,cAAI,KAAK,wBAAwB,aAAA,gBAAgB,WAAW;AACxD,mBAAO,QAAQ,OAA0B,wCAAwC,KAAK,mBAAmB,QAAQ;;AAGrH,iBAAO,KAAK,0BAA0B,QAAO;QACjD;QAEO,MAAM,QAAe;AACxB,cAAI,KAAK,qBAAqB;AAC1B,gBAAI,KAAK,wBAAwB,aAAA,gBAAgB,cAAc;AAC3D,mBAAK,oBAAoB,MAAM,KAAM,SAAS,SAAS,0BAA0B;;iBAElF;AACH,mBAAO,QAAQ,QAAO;;AAG1B,iBAAO,KAAK,uBAAuB;QACvC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEQ,eAAe,UAAmB;AACtC,cAAI;AAEA,gBAAI,CAAC,UAAU;AACX,qBAAO,QAAQ,QAAO;;AAG1B,iBAAK,QAAQ,IAAI,aAAA,2BAA2B,KAAK,mBAAkB,oBAAI,KAAI,GAAG,YAAW,GAAI,SAAS,OAAO,CAAC;AAG9G,gBAAI,KAAK,iBAAiB;AAEtB,mBAAK,oBAAoB,KAAK,SAAS,oBAAoB,OAAO;mBAC/D;AACH,qBAAO,QAAQ,OAAO,+CAA+C,KAAK,mBAAmB,MAAM,SAAS,QAAQ,KAAK,MAAM,IAAI,MAAK,EAAG,KAAK;;AAEpJ,mBAAO,QAAQ,QAAO;mBAEjB,GAAG;AACR,mBAAO,QAAQ,OAAO,yBAAyB,CAAW,EAAE;;QAEpE;QAEQ,MAAM,QAAQ,MAAc,QAAc;AAC9C,gBAAM,cAAc,sBAAsB,IAAI,KAAK,MAAM;AACzD,eAAK,sBAAsB,aAAA,gBAAgB;AAC3C,eAAK,uBAAuB,QAAO;AACnC,gBAAM,KAAK,0BAA0B,gBAAgB,MAAW;UAGhE,GAAG,WAAW;AAEd,gBAAM,KAAK,qBAAqB,gBAAgB,CAAC,oBAAoC;AACjF,4BAAgB,mBAAmB,OAAO,WAAW;UACzD,GAAG,WAAW;QAClB;QAEQ,MAAM,mBAAgB;AAC1B,iBAAO,MAAM;AACT,kBAAM,aAAiC,KAAK,qBAAqB,QAAO;AACxE,kBAAM,WAAsB,MAAM;AAElC,gBAAI,CAAC,UAAU;AACX;;AAGJ,gBAAI;AACA,oBAAM,KAAK,eAAe,QAAQ;AAClC,uBAAS,mBAAmB,QAAO;qBAC9B,WAAW;AAChB,uBAAS,mBAAmB,OAAO,SAAmB;;;QAGlE;QAEQ,QAAQ,OAAsB;AAClC,eAAK,qBAAqB,QAAQ,KAAK;AACvC,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;;QAGQ,WAAQ;AAEZ,gBAAM,QAAkC,IAAI,aAAA,QAAM,MAAM,KAAK,gBAAgB;AAE7E,cAAI,KAAK,cAAc,UACnB,KAAK,UAAU,aAAa,UAC5B,KAAK,UAAU,OAAO,GAAG;AACzB,kBAAM,YAAY,KAAK;;AAG3B,iBAAO;QACX;QAEQ,OAAO,cAAc,WAAoB;AAC7C,gBAAM,mBAA2D;YAC7D,MAAM,UAAU;YAChB,MAAM,UAAU;;AAGpB,cAAI,CAAC,CAAC,UAAU,UAAU;AACtB,6BAAiB,UAAU;cACvB,wBAAwB,WAAW,IAAI,OAAO,GAAG,UAAU,QAAQ,IAAK,UAAU,aAAa,SAAa,KAAK,UAAU,QAAQ,EAAE,EAAE,SAAS,QAAQ;;iBAEzJ;AACH,6BAAiB,UAAU,CAAA;;AAG/B,2BAAiB,QAAQ,cAAc;AAEvC,gBAAM,iBAAkC,IAAI,oBAAA,QAAgB,gBAAgB;AAC5E,iBAAO;QACX;QAEQ,iBAAiB,SAA8B,SAA6B;AAChF,cAAI;AAEJ,oBAAU;YACN,GAAG;YACH,GAAG;cACC,aAAa;cACb,YAAY,QAAQ;;;AAI5B,cAAI,CAAC,CAAC,KAAK,WAAW;AAClB,kBAAM,iBAAkC,yBAAwB,cAAc,KAAK,SAAS;AAC5F,kBAAM,YAAyB;AAE/B,4BAAgB,IAAI,QAAoB,CAAC,SAAsC,WAAiD;AAC5H,wBAAU,SAAS,SAAS,SAAS,CAAC,OAAc,WAA4B;AAC5E,oBAAI,CAAC,CAAC,OAAO;AACT,yBAAO,KAAK;uBACT;AACH,0BAAQ,MAAM;;cAEtB,CAAC;YACL,CAAC;iBACE;AACH,gBAAI,CAAC,CAAC,QAAQ,gBAAgB;AAC1B,8BAAgB,QAAQ,QAAQ,IAAI,QAAQ,OAAO,CAAC;mBACjD;AACH,8BAAgB,QAAQ,QAAQ,IAAI,QAAQ,OAAO,CAAC;;;AAI5D,iBAAO;QACX;QAEA,IAAY,kBAAe;AACvB,iBAAO,KAAK,uBAAuB,KAAK,oBAAoB,eAAe,KAAK,oBAAoB;QACxG;;AArWJ,cAAA,0BAAA;AAkBkB,8BAAA,oBAA6B;;;;;;;;;;ACzD/C,UAAA,eAAA;AAaA,UAAA,+BAAA;AAEA,UAAa,sBAAb,MAAgC;QAQ5B,YACI,KACA,iBACA,SACA,kBACA,WACA,oBAA6B,OAC7B,cAAqB;AATjB,eAAA,iBAA0B;AAW9B,cAAI,CAAC,KAAK;AACN,kBAAM,IAAI,aAAA,kBAAkB,KAAK;;AAGrC,cAAI,CAAC,kBAAkB;AACnB,kBAAM,IAAI,aAAA,kBAAkB,kBAAkB;;AAGlD,eAAK,uBAAuB;AAE5B,cAAI,cAAc;AAClB,cAAI,IAAI;AAER,cAAI,iBAAiB;AACjB,uBAAW,aAAa,iBAAiB;AACrC,kBAAI,WAAW;AACX,+BAAiB,MAAM,KAAO,IAAI,QAAQ,GAAG,MAAM,KAAO,MAAM;AAEhE,sBAAM,MAAM,mBAAmB,SAAS;AACxC,+BAAe;AAEf,oBAAI,MAAM,gBAAgB,SAAS;AACnC,oBAAI,KAAK;AACL,wBAAM,mBAAmB,GAAG;AAC5B,iCAAe,IAAI,GAAG;;AAG1B;;;;AAKZ,cAAI,SAAS;AACT,uBAAW,cAAc,SAAS;AAC9B,kBAAI,YAAY;AACZ,+BAAiB,MAAM,KAAO,IAAI,QAAQ,GAAG,MAAM,KAAO,MAAM;AAChE,sBAAM,MAAM,mBAAmB,QAAQ,UAAU,CAAC;AAClD,+BAAe,GAAG,UAAU,IAAI,GAAG;AACnC;;;;AAKZ,eAAK,UAAU,MAAM;AACrB,eAAK,SAAS,eAAe,eAAe,aAAA,iBAAgB;AAE5D,eAAK,+BAA+B,IAAI,6BAAA,wBACpC,KAAK,SACL,KAAK,IACL,KAAK,sBACL,WACA,SACA,iBAAiB;QACzB;QAEO,MAAM,UAAO;AAChB,eAAK,iBAAiB;AAEtB,cAAI,KAAK,8BAA8B;AACnC,kBAAM,KAAK,6BAA6B,MAAK;;QAErD;QAEO,aAAU;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK;QAChB;QAEA,IAAW,MAAG;AACV,iBAAO,KAAK;QAChB;QAEO,QAAK;AACR,iBAAO,KAAK,6BAA6B;QAC7C;QAEO,OAAI;AACP,iBAAO,KAAK,6BAA6B,KAAI;QACjD;QAEO,KAAK,SAA0B;AAClC,iBAAO,KAAK,6BAA6B,KAAK,OAAO;QACzD;QAEO,OAAI;AACP,iBAAO,KAAK,6BAA6B,KAAI;QACjD;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,6BAA6B;QAC7C;;AA9GJ,cAAA,sBAAA;;;;;;;;;;ACTA,UAAa,sBAAb,MAAgC;QAY5B,YAAmB,aAA+B,gBAAsB;AAThE,eAAA,cAA6B,CAAA;AAC7B,eAAA,mBAA2B;AAC3B,eAAA,uBAA+B;AAC/B,eAAA,wBAAgC;AAChC,eAAA,mBAA2B;AAC3B,eAAA,oBAA4B;AAC5B,eAAA,aAAsB;AACtB,eAAA,4BAAoC;AAGxC,eAAK,gBAAgB;AACrB,eAAK,qBAAqB;QAC9B;QAEO,KAAE;AACL,iBAAO,KAAK,cAAc,GAAE;QAChC;;;;;QAMO,OAAI;AAEP,cAAI,CAAC,CAAC,KAAK,cAAc,KAAK,YAAY,WAAW,GAAG;AAIpD,kBAAM,eAAuB,KAAK,mBAAmB,KAAK;AAE1D,gBAAI,cAAsB,KAAK,MAAM,eAAe,KAAK,qBAAqB,IAAI;AAClF,gBAAI,MAAO,cAAc,GAAI;AACzB;;AAGJ,gBAAI,IAAY;AAEhB,mBAAO,IAAI,KAAK,YAAY,UAAU,eAAe,KAAK,YAAY,CAAC,EAAE,MAAM,OAAO,YAAY;AAC9F,6BAAe,KAAK,YAAY,GAAG,EAAE,MAAM,OAAO;;AAGtD,gBAAI,IAAI,KAAK,YAAY,QAAQ;AAC7B,oBAAM,SAAsB,KAAK,YAAY,CAAC,EAAE,MAAM,OAAO,MAAM,WAAW;AAE9E,mBAAK,oBAAqB,OAAO,aAAa,KAAK,qBAAsB;AAGzE,kBAAI,MAAM,KAAK,YAAY,SAAS,GAAG;AACnC,qBAAK,aAAa;;AAGtB,qBAAO,QAAQ,QAAmC;gBAC9C,QAAQ;gBACR,OAAO;gBACP,cAAc,KAAK,YAAY,CAAC,EAAE,MAAM;eAC3C;;;AAIT,iBAAO,KAAK,cAAc,KAAI,EACzB,KAAK,CAAC,WAAgE;AACnE,gBAAI,UAAU,OAAO,QAAQ;AACzB,mBAAK,YAAY,KAAK,IAAI,YAAY,QAAQ,KAAK,oBAAoB,KAAK,iBAAiB,CAAC;AAC9F,mBAAK,qBAAqB,OAAO,OAAO;;AAE5C,mBAAO;UACX,CAAC;QACT;QAEO,SAAM;AACT,eAAK,cAAc;AACnB,iBAAO,KAAK,cAAc,OAAM;QACpC;QAEO,SAAM;AACT,cAAI,KAAK,eAAe,MAAM,KAAK,YAAY,QAAQ;AACnD,iBAAK,aAAa;AAClB,iBAAK,mBAAmB,KAAK;;QAErC;;;;QAKO,cAAc,QAAc;AAC/B,cAAI,KAAK,gBAAgB,UAAa,KAAK,YAAY,WAAW,GAAG;AACjE;;AAGJ,eAAK,uBAAuB;AAK5B,gBAAM,eAAuB,SAAS,KAAK;AAE3C,cAAI,cAAsB,KAAK,MAAM,eAAe,KAAK,qBAAqB,IAAI;AAElF,cAAI,IAAY;AAEhB,iBAAO,IAAI,KAAK,YAAY,UAAU,eAAe,KAAK,YAAY,CAAC,EAAE,MAAM,OAAO,YAAY;AAC9F,2BAAe,KAAK,YAAY,GAAG,EAAE,MAAM,OAAO;;AAEtD,eAAK,wBAAwB,KAAK,MAAM,SAAW,cAAc,KAAK,qBAAsB,GAAK;AACjG,eAAK,cAAc,KAAK,YAAY,MAAM,CAAC;QAC/C;;QAGO,iBAAiB,QAAc;AAClC,cAAI,SAAS,KAAK,yBAAyB,KAAK,gBAAgB,QAAW;AACvE,mBAAO;;AAGX,qBAAW,SAAS,KAAK,aAAa;AAClC,kBAAM,cAAuB,MAAM,aAAa,KAAK,qBAAsB;AAC3E,kBAAM,YAAoB,cAAgB,MAAM,MAAM,OAAO,aAAa,KAAK,qBAAsB;AAErG,gBAAI,UAAU,eAAe,UAAU,WAAW;AAC9C,qBAAO,MAAM,MAAM;;;AAI3B,iBAAO;QACX;;AA9HJ,cAAA,sBAAA;AAoIA,UAAM,cAAN,MAAiB;QAKb,YAAmB,OAAkC,QAAgB,YAAkB;AACnF,eAAK,QAAQ;AACb,eAAK,SAAS;AACd,eAAK,aAAa;QACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnJJ,UAAA,KAAA,aAAA,YAAA;AAEA,UAAA,iBAAA;AAIA,UAAa,kBAAb,MAA4B;QAMxB,YAAmB,UAAqB;AACpC,yBAAA,UAAU,uBAAuB,GAAG,UAAU,8EAA8E;AAC5H,eAAK,SAAS,GAAG,SAAS,UAAU,GAAG;QAC3C;QAEA,IAAW,OAAOC,SAAyB;AACvC,yBAAA,UAAU,oBAAoB,KAAK,iBAAiB,uBAAuB;AAC3E,eAAK,kBAAkBA;AACvB,cAAI,eAAuB;AAC3B,cAAI,KAAK,gBAAgB,WAAW;AAChC,2BAAe,KAAK,gBAAgB,OAAO;;AAE/C,cAAI,KAAK,WAAW,QAAW;AAC3B,iBAAK,kBAAkB,GAAG,kBAAkB,IAAI,EAAC,IAAI,KAAK,QAAQ,OAAO,cAAc,WAAW,MAAK,CAAC;;QAEhH;QAEO,MAAM,QAAmB;AAC5B,yBAAA,UAAU,uBAAuB,KAAK,iBAAiB,iCAAiC;AACxF,cAAI,KAAK,oBAAoB,QAAW;AACpC,iBAAK,gBAAgB,MAAM,IAAI,WAAW,OAAO,MAAM,CAAC,CAAC,CAAC;;QAElE;QAEO,QAAK;AACR,cAAI,KAAK,WAAW,QAAW;AAC3B,iBAAK,gBAAgB,GAAG,UAAU,MAAW;AACzC,kBAAI,KAAK,gBAAgB,WAAW;AAChC,qBAAK,gBAAgB,aAAa,KAAK,gBAAgB,YAAY;AACnE,mBAAG,UAAU,KAAK,QACd,IAAI,UAAU,KAAK,gBAAgB,MAAM,GACzC,GACA,KAAK,gBAAgB,OAAO,YAC5B,CAAC;;AAET,iBAAG,UAAU,KAAK,MAAM;AACxB,mBAAK,SAAS;YAClB,CAAC;AACD,iBAAK,gBAAgB,IAAG;;QAEhC;QAEO,KAAE;AACL,iBAAO,KAAK;QAChB;;AAlDJ,cAAA,kBAAA;;;;;;;;;;ACJA,UAAA,eAAA;AAKA,UAAA,eAAA;AAeA,UAAA,YAAA;AACA,UAAA,eAAA;AACA,UAAA,yBAAA;AAMA,UAAsB,mBAAtB,MAAsC;;;;;QAMlC,cAAA;AACI;QACJ;;;;;;;;;;QAWO,OAAO,iBAAiBC,SAA0B;AACrD,iBAAO,qBAAqB,OAAOA,OAAM;QAC7C;;;;;;;;;;;;;QAcO,OAAO,iBAAiB,UAAwCA,SAA0B;AAC7F,iBAAO,qBAAqB,OAAO,UAAUA,OAAM;QAEvD;;AAtCJ,cAAA,mBAAA;AAqDA,UAAsB,uBAAtB,cAAmD,iBAAgB;;;;;;;;;;QAWxD,OAAO,OAAOA,SAA0B;AAC3C,iBAAO,IAAI,yBAAyBA,OAAM;QAC9C;;AAbJ,cAAA,uBAAA;AAsCA,UAAa,2BAAb,cAA8C,qBAAoB;;;;;;QAY9D,YAAmBA,SAA0B;AACzC,gBAAK;AACL,cAAIA,YAAW,QAAW;AACtB,iBAAK,aAAa,uBAAA,sBAAsB,sBAAqB;iBAC1D;AACH,iBAAK,aAAaA;;AAEtB,eAAK,aAAa,IAAI,aAAA,YAAW;AACjC,eAAK,SAAS,UAAA,iBAAgB;AAC9B,eAAK,aAAa,IAAI,aAAA,yBAAyB,KAAK,WAAW,iBAAiB,EAAE;QACtF;;;;QAKA,IAAW,SAAM;AACb,iBAAO,QAAQ,QAAQ,KAAK,UAAU;QAC1C;;;;;;;;QASO,MAAM,YAAuB;AAChC,eAAK,WAAW,iBAAiB;YAC7B,QAAQ;YACR,OAAO;YACP,cAAc,KAAK,IAAG;WACzB;QACL;;;;;;;QAQO,QAAK;AACR,eAAK,WAAW,MAAK;QACzB;QAEO,KAAE;AACL,iBAAO,KAAK;QAChB;QAEO,SAAM;AACT,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,MAAM,CAAC;AAC1D,eAAK,QAAQ,IAAI,aAAA,sBAAsB,KAAK,MAAM,CAAC;AACnD;QACJ;QAEO,MAAM,OAAO,aAAmB;AACnC,eAAK,QAAQ,IAAI,aAAA,8BAA8B,KAAK,QAAQ,WAAW,CAAC;AAExE,gBAAM,KAAK,OAAM;AACjB,gBAAM,SAAS,KAAK;AACpB,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,iBAAO;YACH,QAAQ,YAA0B;AAC9B,mBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,qBAAO,KAAK,QAAO;YACvB;YACA,IAAI,MAAc;YAClB,MAAM,MAA0C,OAAO,KAAI;;QAEnE;QAEO,OAAO,aAAmB;AAC7B,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;QAC3E;QAEO,UAAO;AACV;QACJ;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,QAAQ,QAAQ;YACnB,eAAe,KAAK,WAAW;YAC/B,cAAc,KAAK,WAAW;YAC9B,cAAc,aAAA,aAAa;YAC3B,cAAc;YACd,OAAO;YACP,YAAY,KAAK,WAAW;YAC5B,MAAM,aAAA,KAAK;WACd;QACL;QAEQ,QAAQ,OAAuB;AACnC,eAAK,WAAW,QAAQ,KAAK;AAC7B,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;QAEQ,SAAS,aAAwB;AACrC,gBAAM,MAAc,OAAO,MAAM,YAAY,UAAU;AACvD,gBAAM,OAAmB,IAAI,WAAW,WAAW;AACnD,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACjC,gBAAI,CAAC,IAAI,KAAK,CAAC;;AAEnB,iBAAO;QACX;;AAtHJ,cAAA,2BAAA;AA6HA,UAAsB,uBAAtB,cAAmD,iBAAgB;;;;;QAK/D,cAAA;AACH,gBAAK;QACN;;;;;;;;;;;;;QAcW,OAAO,OAAO,UAAwCA,SAA0B;AACnF,iBAAO,IAAI,yBAAyB,UAAUA,OAA+B;QACjF;;AAvBJ,cAAA,uBAAA;AAwCA,UAAa,2BAAb,cAA8C,qBAAoB;;;;;;;;;;QAkB9D,YAAmB,UAAwCA,SAA8B;AACrF,gBAAK;AACL,cAAI,WAAcA,SAAQ;AACtB,iBAAK,aAAa,aAAA,kBAAkB,sBAAqB;iBACtD;AACH,iBAAK,aAAaA;;AAEtB,eAAK,aAAa,IAAI,aAAA,YAAW;AACjC,eAAK,SAAS,UAAA,iBAAgB;AAC9B,eAAK,eAAe;AACpB,eAAK,eAAe;AACpB,eAAK,iBAAiB,KAAK,WAAW,iBAAiB;QAC3D;;;;QAKA,IAAW,SAAM;AACb,iBAAO,QAAQ,QAAQ,KAAK,UAAU;QAC1C;;;;;;;QAQO,QAAK;AACR,eAAK,eAAe;AACpB,eAAK,aAAa,MAAK;QAC3B;QAEO,KAAE;AACL,iBAAO,KAAK;QAChB;QAEO,SAAM;AACT,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,MAAM,CAAC;AAC1D,eAAK,QAAQ,IAAI,aAAA,sBAAsB,KAAK,MAAM,CAAC;AACnD;QACJ;QAEO,MAAM,OAAO,aAAmB;AACnC,eAAK,QAAQ,IAAI,aAAA,8BAA8B,KAAK,QAAQ,WAAW,CAAC;AAExE,gBAAM,KAAK,OAAM;AACjB,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,iBAAO;YACH,QAAQ,MAAoB;AACxB,mBAAK,aAAa,MAAK;AACvB,mBAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;AACvE,qBAAO,KAAK,QAAO;YACvB;YACA,IAAI,MAAc;YAClB,MAAM,MAAyC;AAC3C,kBAAI,aAAqB;AACzB,kBAAI;AAEJ,qBAAO,aAAa,KAAK,gBAAgB;AAGrC,sBAAM,WAAwB,IAAI,YAAY,KAAK,iBAAiB,UAAU;AAC9E,sBAAM,cAAsB,KAAK,aAAa,KAAK,QAAQ;AAI3D,oBAAI,WAAc,cAAc;AAC5B,iCAAe;uBACZ;AAEH,wBAAM,UAAqB,IAAI,UAAU,YAAY;AACrD,0BAAQ,IAAI,IAAI,UAAU,QAAQ,GAAG,UAAU;;AAGnD,oBAAI,MAAM,aAAa;AACnB;;AAEJ,8BAAc;;AAElB,qBAAO,QAAQ,QAAmC;gBAC9C,QAAQ,aAAa,MAAM,GAAG,UAAU;gBACxC,OAAO,KAAK,gBAAgB,eAAe;gBAC3C,cAAc,KAAK,IAAG;eACzB;YACL;;QAER;QAEO,OAAO,aAAmB;AAC7B,eAAK,QAAQ,IAAI,aAAA,6BAA6B,KAAK,QAAQ,WAAW,CAAC;QAC3E;QAEO,UAAO;AACV;QACJ;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,QAAQ,QAAQ;YACnB,eAAe,KAAK,WAAW;YAC/B,cAAc,KAAK,WAAW;YAC9B,cAAc,aAAA,aAAa;YAC3B,cAAc;YACd,OAAO;YACP,YAAY,KAAK,WAAW;YAC5B,MAAM,aAAA,KAAK;WACd;QACL;QAEQ,QAAQ,OAAuB;AACnC,eAAK,WAAW,QAAQ,KAAK;AAC7B,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;;AArIJ,cAAA,2BAAA;;;;;;;;;;ACzRA,UAAY;AAAZ,OAAA,SAAYC,8BAA2B;AAKnC,QAAAA,6BAAAA,6BAAA,sBAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,0BAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,2BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,6BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,8BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,6BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,6BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,6BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,8BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,2BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,sBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,sBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,sBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,qBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,sBAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,EAAA,IAAA;AAKA,QAAAA,6BAAAA,6BAAA,6BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,6BAAAA,6BAAA,8BAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,wBAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,wBAAA,IAAA,EAAA,IAAA;AAOC,QAAAA,6BAAAA,6BAAA,2BAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,qBAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,6BAAAA,6BAAA,sBAAA,IAAA,EAAA,IAAA;AAQD,QAAAA,6BAAAA,6BAAA,8BAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,6BAAAA,6BAAA,+BAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,6BAAAA,6BAAA,+BAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,6BAAAA,6BAAA,+BAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,6BAAAA,6BAAA,wBAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,6BAAAA,6BAAA,yBAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,6BAAAA,6BAAA,wBAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,6BAAAA,6BAAA,yBAAA,IAAA,EAAA,IAAA;MACJ,GAtPY,8BAAA,QAAA,gCAAA,QAAA,8BAA2B,CAAA,EAAA;;;;;;;;;;ACJvC,UAAA,mCAAA;AACA,UAAA,yBAAA;AAQA,UAAa,wBAAb,MAAa,+BAA8B,uBAAA,sBAAqB;;;;;;;;;;;;;;QA6D5D,YAAmB,WACA,UACA,eACA,gBACA,YACA,eACA,mBACA,0BACA,WAAkB;AACjC,gBAAM,eAAe,eAAe,UAAU,SAAS;AACvD,eAAK,YAAY;AACjB,eAAK,iBAAiB;AACtB,eAAK,aAAa;AAClB,eAAK,uBAAuB;AAC5B,eAAK,8BAA8B;AACnC,eAAK,eAAe;QACxB;QAEO,OAAO,gCAAgC,6BAAyD;AACnG,cAAI,gCAAgC,QAAW;AAC3C,mBAAO,uBAAsB,uBAAsB;;AAEvD,iBAAO,uBAAsB,sCACzB,uBAAsB,oCAAoC,2BAA2B,CAAC;QAC9F;QAEO,OAAO,sCAAsC,mCAAyC;AACzF,kBAAQ,mCAAmC;YACvC,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,OACf,GACA,KACA,KACA,GACA,GACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,OACf,GACA,MACA,KACA,IACA,GACA,mCACA,iCACA,IAAI;YACZ,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,OACf,GACA,MACA,KACA,IACA,GACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,OAAO,GACP,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,OAAO,GACP,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;YAEb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,KACA,MACA,GACA,IACA,mCACA,2BACA,IAAI;YACZ,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,IAAI;YACZ,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,OACf,GACA,KACA,KACA,GACA,GACA,mCACA,4BACA,IAAI;YACZ,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,KACA,MACA,GACA,IACA,mCACA,2BACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,UACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,UACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,IAAI;YACZ,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,OAAO,GACP,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,UACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,KACA,KACA,GACA,GACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,KACA,KACA,GACA,GACA,mCACA,2BACA,IAAI;YACZ,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,8BACA,IAAI;YACZ,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA,KAAK;YACb,KAAK;AACD,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,8BACA,IAAI;YACZ,KAAK;YACL;AACI,qBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,6BACA,4BACA,IAAI;;QAEpB;QAEO,OAAO,yBAAsB;AAChC,iBAAO,uBAAsB,sCACxB,OAAO,WAAW,cAAe,oCAAoC,2BAA2B;QACzG;;;;;;;QAgBA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;;;;;QAQA,IAAW,SAAM;AACb,cAAI,KAAK,WAAW;AAChB,mBAAO,KAAK;;AAEhB,iBAAO;QACX;;;;;;;;QASO,aAAa,aAAmB;AACnC,cAAI,KAAK,cAAc;AACnB,kBAAM,OAAO,IAAI,SAAS,KAAK,UAAU;AACzC,iBAAK,UAAU,GAAG,cAAc,KAAK,WAAW,aAAa,GAAG,IAAI;AACpE,iBAAK,UAAU,IAAI,aAAa,IAAI;;QAE5C;;;;;;;QAQA,IAAW,2BAAwB;AAC/B,iBAAO,KAAK;QAChB;;;;;;QAQO,UAAU,OAAkB;AAC/B,cAAI,CAAC,KAAK,WAAW;AACjB,mBAAO;;AAEX,eAAK,aAAa,MAAM,UAAU;AAClC,gBAAM,MAAM,IAAI,WAAW,MAAM,aAAa,KAAK,OAAO,UAAU;AACpE,cAAI,IAAI,IAAI,WAAW,KAAK,MAAM,GAAG,CAAC;AACtC,cAAI,IAAI,IAAI,WAAW,KAAK,GAAG,KAAK,OAAO,UAAU;AACrD,iBAAO,IAAI;QACf;;AAvlBJ,cAAA,wBAAA;AACkB,4BAAA,sCAAiE;QAC3E,CAAC,iCAAA,4BAA4B,oBAAoB,GAAG;QACpD,CAAC,iCAAA,4BAA4B,wBAAwB,GAAG;QACxD,CAAC,iCAAA,4BAA4B,yBAAyB,GAAG;QACzD,CAAC,iCAAA,4BAA4B,2BAA2B,GAAG;QAC3D,CAAC,iCAAA,4BAA4B,4BAA4B,GAAG;QAC5D,CAAC,iCAAA,4BAA4B,2BAA2B,GAAG;QAC3D,CAAC,iCAAA,4BAA4B,2BAA2B,GAAG;QAC3D,CAAC,iCAAA,4BAA4B,2BAA2B,GAAG;QAC3D,CAAC,iCAAA,4BAA4B,4BAA4B,GAAG;QAC5D,CAAC,iCAAA,4BAA4B,yBAAyB,GAAG;QACzD,CAAC,iCAAA,4BAA4B,qBAAqB,GAAG;QACrD,CAAC,iCAAA,4BAA4B,oBAAoB,GAAG;QACpD,CAAC,iCAAA,4BAA4B,qBAAqB,GAAG;QACrD,CAAC,iCAAA,4BAA4B,qBAAqB,GAAG;QACrD,CAAC,iCAAA,4BAA4B,oBAAoB,GAAG;QACpD,CAAC,iCAAA,4BAA4B,oBAAoB,GAAG;QACpD,CAAC,iCAAA,4BAA4B,mBAAmB,GAAG;QACnD,CAAC,iCAAA,4BAA4B,qBAAqB,GAAG;QACrD,CAAC,iCAAA,4BAA4B,qBAAqB,GAAG;QACrD,CAAC,iCAAA,4BAA4B,oBAAoB,GAAG;QACpD,CAAC,iCAAA,4BAA4B,qBAAqB,GAAG;QACrD,CAAC,iCAAA,4BAA4B,2BAA2B,GAAG;QAC3D,CAAC,iCAAA,4BAA4B,4BAA4B,GAAG;QAC5D,CAAC,iCAAA,4BAA4B,qBAAqB,GAAG;QACrD,CAAC,iCAAA,4BAA4B,sBAAsB,GAAG;QACtD,CAAC,iCAAA,4BAA4B,sBAAsB,GAAG;QACtD,CAAC,iCAAA,4BAA4B,4BAA4B,GAAG;QAC5D,CAAC,iCAAA,4BAA4B,yBAAyB,GAAG;QACzD,CAAC,iCAAA,4BAA4B,mBAAmB,GAAG;QACnD,CAAC,iCAAA,4BAA4B,oBAAoB,GAAG;QACpD,CAAC,iCAAA,4BAA4B,6BAA6B,GAAG;QAC7D,CAAC,iCAAA,4BAA4B,6BAA6B,GAAG;QAC7D,CAAC,iCAAA,4BAA4B,6BAA6B,GAAG;QAC7D,CAAC,iCAAA,4BAA4B,sBAAsB,GAAG;QACtD,CAAC,iCAAA,4BAA4B,uBAAuB,GAAG;QACvD,CAAC,iCAAA,4BAA4B,sBAAsB,GAAG;QACtD,CAAC,iCAAA,4BAA4B,uBAAuB,GAAG;;;;;;;;;;;AC9C/D,UAAA,eAAA;AAMA,UAAA,iBAAA;AAKA,UAAA,yBAAA;AAMA,UAAsB,oBAAtB,MAAuC;;;;;QAMnC,cAAA;AACI;QACJ;;;;;;;;QAgBO,OAAO,mBAAgB;AAC1B,iBAAO,sBAAsB,OAAM;QACvC;;AA1BJ,cAAA,oBAAA;AAyCA,UAAsB,wBAAtB,cAAoD,kBAAiB;;;;;;;;QAS1D,OAAO,SAAM;AAChB,iBAAO,IAAI,0BAAyB;QACxC;;AAXJ,cAAA,wBAAA;AAqCA,UAAa,4BAAb,cAA+C,sBAAqB;;;;;QAUhE,cAAA;AACI,gBAAK;AACL,eAAK,SAAS,aAAA,iBAAgB;AAC9B,eAAK,aAAa,IAAI,aAAA,OAAM;QAChC;;;;;QAMA,IAAW,OAAOC,SAAyB;AACvC,cAAIA,YAAW,UAAaA,YAAW,MAAM;AACzC,iBAAK,aAAa,uBAAA,sBAAsB,uBAAsB;;AAElE,eAAK,aAAaA;QACtB;;;;QAKA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;;QAQA,IAAW,WAAQ;AACf,iBAAO,KAAK,WAAW;QAC3B;;;;;;;QAQO,KAAE;AACL,iBAAO,KAAK;QAChB;;;;;;;;;QAUO,MAAM,KAAK,YAAuB;AACrC,gBAAM,UAAqB,IAAI,UAAU,UAAU;AACnD,cAAI,aAAqB;AAEzB,cAAI,KAAK,sBAAsB,QAAW;AACtC,gBAAI,KAAK,kBAAkB,SAAS,WAAW,YAAY;AACvD,sBAAQ,IAAI,KAAK,kBAAkB,MAAM,GAAG,WAAW,UAAU,CAAC;AAClE,mBAAK,oBAAoB,KAAK,kBAAkB,MAAM,WAAW,UAAU;AAC3E,qBAAO,QAAQ,QAAQ,WAAW,UAAU;;AAEhD,oBAAQ,IAAI,KAAK,iBAAiB;AAClC,yBAAa,KAAK,kBAAkB;AACpC,iBAAK,oBAAoB;;AAI7B,iBAAO,aAAa,WAAW,cAAc,CAAC,KAAK,WAAW,aAAa;AACvE,kBAAM,QAAmC,MAAM,KAAK,WAAW,KAAI;AACnE,gBAAI,UAAU,UAAa,CAAC,MAAM,OAAO;AACrC,kBAAI;AACJ,kBAAI,MAAM,OAAO,aAAa,WAAW,aAAa,YAAY;AAC9D,4BAAY,MAAM,OAAO,MAAM,GAAG,WAAW,aAAa,UAAU;AACpE,qBAAK,oBAAoB,IAAI,UAAU,MAAM,OAAO,MAAM,WAAW,aAAa,UAAU,CAAC;qBAC1F;AACH,4BAAY,MAAM;;AAEtB,sBAAQ,IAAI,IAAI,UAAU,SAAS,GAAG,UAAU;AAChD,4BAAc,UAAU;mBACrB;AACH,mBAAK,WAAW,UAAS;;;AAGjC,iBAAO;QACX;;;;;;;;QASO,MAAM,YAAuB;AAChC,yBAAA,UAAU,uBAAuB,KAAK,YAAY,gCAAgC;AAClF,eAAK,WAAW,iBAAiB;YAC7B,QAAQ;YACR,OAAO;YACP,cAAc,KAAK,IAAG;WACzB;QACL;;;;;;;QAQO,QAAK;AACR,eAAK,WAAW,MAAK;QACzB;;AAzHJ,cAAA,4BAAA;AAgIA,UAAsB,wBAAtB,cAAoD,kBAAiB;;;;;QAKjE,cAAA;AACI,gBAAK;QACT;;;;;;;;;;;QAYO,OAAO,OAAO,UAAuC;AACxD,iBAAO,IAAI,0BAA0B,QAAQ;QACjD;;AArBJ,cAAA,wBAAA;AAsCA,UAAa,4BAAb,cAA+C,sBAAqB;;;;;;;;QAWhE,YAAmB,UAAuC;AACtD,gBAAK;AACL,eAAK,SAAS,aAAA,iBAAgB;AAC9B,eAAK,eAAe;QACxB;;QAGA,IAAW,OAAOA,SAAyB;QAAI;QAExC,MAAM,QAAmB;AAC5B,cAAI,CAAC,CAAC,KAAK,aAAa,OAAO;AAC3B,iBAAK,aAAa,MAAM,MAAM;;QAEtC;QAEO,QAAK;AACR,cAAI,CAAC,CAAC,KAAK,aAAa,OAAO;AAC3B,iBAAK,aAAa,MAAK;;QAE/B;QAEO,KAAE;AACL,iBAAO,KAAK;QAChB;;AAlCJ,cAAA,4BAAA;;;;;;;;;;ACpQA,UAAA,eAAA;AAaA,UAAA,iBAAA;AACA,UAAA,eAAA;AAWA,UAAA,uBAAA;AACA,UAAA,wBAAA;AACA,UAAA,yBAAA;AAQA,UAAsBC,eAAtB,MAAsB,aAAW;;;;;;;;QAQtB,OAAO,6BAA0B;AACpC,gBAAM,cAAc,IAAI,aAAA,YAAY,IAAI;AACxC,iBAAO,IAAI,gBAAgB,IAAI,aAAA,eAAe,WAAW,CAAC;QAC9D;;;;;;;;;;QAWO,OAAO,oBAAoB,UAAiB;AAC/C,gBAAM,cAAc,IAAI,aAAA,YAAY,IAAI;AACxC,iBAAO,IAAI,gBAAgB,IAAI,aAAA,eAAe,aAAa,QAAQ,CAAC;QACxE;;;;;;;;;QAUO,OAAO,iBAAiB,MAAqB,OAAe,qBAAmB;AAClF,iBAAO,IAAI,gBAAgB,IAAI,aAAA,gBAAgB,MAAM,IAAI,CAAC;QAC9D;;;;;;;;;;QAWO,OAAO,gBAAgB,aACb;AACb,cAAI,uBAAuB,aAAA,8BAA8B;AACrD,mBAAO,IAAI,gBAAgB,IAAI,sBAAA,yBAAyB,WAAW,CAAC;;AAGxE,cAAI,uBAAuB,aAAA,kBAAkB;AACzC,mBAAO,IAAI,gBAAgB,WAAuC;;AAEtE,cAAI,OAAO,gBAAgB,eAAe,uBAAuB,aAAa;AAC1E,kBAAM,cAAc,IAAI,aAAA,YAAY,KAAK;AACzC,mBAAO,IAAI,gBAAgB,IAAI,aAAA,eAAe,aAAa,MAAM,MAAM,WAAW,CAAC;;AAGvF,gBAAM,IAAI,MAAM,oBAAoB;QACxC;;;;;;;;;QAUO,OAAO,2BAAwB;AAClC,iBAAO,IAAI,sBAAsB,IAAI,aAAA,wBAAuB,CAAE;QAClE;;;;;;;;;;;QAYO,OAAO,kBAAkB,QAAgB;AAC5C,cAAI,WAAW,QAAW;AACtB,mBAAO,aAAY,yBAAwB;;AAE/C,cAAI,kBAAkB,aAAA,yBAAyB;AAC3C,mBAAO,IAAI,sBAAsB,MAAM;;AAG3C,gBAAM,IAAI,MAAM,oBAAoB;QACxC;;;;;;;;;;QAWO,OAAO,oBAAoB,UAAkB;AAChD,iBAAO,IAAI,sBAAsB,IAAI,qBAAA,gBAAgB,QAAQ,CAAC;QAClE;;;;;;;;;;;QAYO,OAAO,iBAAiB,aAA8D;AACzF,cAAI,uBAAuB,aAAA,+BAA+B;AACtD,mBAAO,IAAI,sBAAsB,IAAI,uBAAA,0BAA0B,WAAW,CAAC;;AAG/E,cAAI,uBAAuB,aAAA,uBAAuB;AAC9C,mBAAO,IAAI,sBAAsB,WAAwC;;AAG7E,cAAI,uBAAuB,aAAA,uBAAuB;AAC9C,mBAAO,IAAI,sBAAsB,WAAwC;;AAG7E,gBAAM,IAAI,MAAM,oBAAoB;QACxC;;AAvIJ,cAAA,cAAAA;AA6KA,UAAa,kBAAb,cAAqCA,aAAW;;;;;;QAQ5C,YAAmB,QAAoB;AACnC,gBAAK;AACL,eAAK,aAAa;QACtB;;;;QAKA,IAAW,SAAM;AACb,iBAAO,KAAK,WAAW;QAC3B;;;;;;QAOO,MAAM,IAAiB,KAA6B;AACvD,eAAK,WAAW,QAAO,EAAG,KAAK,MAAW;AACtC,gBAAI,CAAC,CAAC,IAAI;AACN,iBAAE;;UAEV,GAAG,CAAC,UAAuB;AACvB,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI,KAAK;;UAEjB,CAAC;QACL;;;;;;QAOO,KAAE;AACL,iBAAO,KAAK,WAAW,GAAE;QAC7B;;;;;;;QAQO,SAAM;AACT,iBAAO,KAAK,WAAW,OAAM;QACjC;;;;;;;;QASO,OAAO,aAAmB;AAC7B,iBAAO,KAAK,WAAW,OAAO,WAAW;QAC7C;;;;;;;QAQO,OAAO,aAAmB;AAC7B,iBAAO,KAAK,WAAW,OAAO,WAAW;QAC7C;;;;;;;QAQO,UAAO;AACV,iBAAO,KAAK,WAAW,QAAO;QAClC;;;;;;;QAQA,IAAW,SAAM;AACb,iBAAO,KAAK,WAAW;QAC3B;QAEO,YAAY,MAAc,OAAa;AAC1C,yBAAA,UAAU,YAAY,OAAO,OAAO;AAEpC,cAAI,WAAc,KAAK,WAAW,aAAa;AAC3C,iBAAK,WAAW,YAAY,MAAM,KAAK;iBACpC;AACH,kBAAM,IAAI,MAAM,gEAAgE;;QAGxF;QAEO,YAAY,MAAc,KAAY;AACzC,cAAI,WAAc,KAAK,WAAW,aAAa;AAC3C,mBAAO,KAAK,WAAW,YAAY,MAAM,GAAG;iBACzC;AACH,kBAAM,IAAI,MAAM,gEAAgE;;AAGpF,iBAAO;QACX;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK,WAAW;QAC3B;;AAxHJ,cAAA,kBAAA;AA2HA,UAAa,wBAAb,cAA2CA,aAAW;;;;;;QAQlD,YAAmB,aAA8B;AAC7C,gBAAK;AACL,eAAK,kBAAkB;QAC3B;QAEA,IAAW,OAAOC,SAAyB;AACvC,eAAK,gBAAgB,SAASA;QAClC;QAEO,MAAM,QAAmB;AAC5B,eAAK,gBAAgB,MAAM,MAAM;QACrC;QAEO,QAAK;AACR,eAAK,gBAAgB,MAAK;QAC9B;QAEO,KAAE;AACL,iBAAO,KAAK,gBAAgB,GAAE;QAClC;QAEO,cAAW;AACd,gBAAM,IAAI,MAAM,gEAAgE;QACpF;QAEO,cAAW;AACd,gBAAM,IAAI,MAAM,gEAAgE;QACpF;;AAnCJ,cAAA,wBAAA;;;;;;;;;;AC1UA,UAAY;AAAZ,OAAA,SAAYC,qBAAkB;AAK1B,QAAAA,oBAAAA,oBAAA,OAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,oBAAAA,oBAAA,aAAA,IAAA,CAAA,IAAA;MACJ,GAZY,qBAAA,QAAA,uBAAA,QAAA,qBAAkB,CAAA,EAAA;;;;;;;;;;ACA9B,UAAsB,+BAAtB,MAAkD;;AAAlD,cAAA,+BAAA;;;;;;;;;;ACAA,UAAsB,gCAAtB,MAAmD;;AAAnD,cAAA,gCAAA;;;;;;;;;;ACJA,UAAA,iBAAA;AAOA,UAAa,0BAAb,MAAoC;;;;;QAOhC,cAAA;AANQ,eAAA,eAAwB;AAO5B;QACJ;;;;;;;;;;;QAYO,OAAO,SAAS,UAAgB;AACnC,yBAAA,UAAU,wBAAwB,UAAU,UAAU;AAEtD,gBAAM,IAAI,MAAM,sBAAsB;QAC1C;;;;;;;;;;QAWO,OAAO,WAAW,MAAU;AAC/B,yBAAA,UAAU,YAAY,MAAM,MAAM;AAElC,gBAAM,IAAI,MAAM,sBAAsB;QAC1C;;;;;;;QAQO,QAAK;AACR,cAAI,KAAK,cAAc;AACnB;;AAGJ,eAAK,eAAe;QACxB;;AAtDJ,cAAA,0BAAA;;;;;;;;;;ACHA,UAAa,mBAAb,MAA6B;;;;;;QAQzB,YAAmB,WAAiB;AAChC,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AArBJ,cAAA,mBAAA;;;;;;;;;;ACJA,UAAA,eAAA;AAMA,UAAa,uBAAb,cAA0C,aAAA,iBAAgB;;;;;;;QAStD,YAAmB,QAAgB,WAAkB;AACjD,gBAAM,SAAS;AAEf,eAAK,aAAa;QACtB;;;;;;;QAQA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAvBJ,cAAA,uBAAA;;;;;;;;;;ACFA,UAAYC;AAAZ,OAAA,SAAYA,eAAY;AAIpB,QAAAA,cAAAA,cAAA,QAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;MACJ,GAVYA,gBAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;;;;;;;;;;ACJxB,UAAA,eAAA;AAMA,UAAa,6BAAb,cAAgD,aAAA,qBAAoB;;;;;;;;QAUhE,YAAmB,QAAiC,QAAiB,WAAkB;AACnF,gBAAM,QAAQ,SAAS;AAEvB,eAAK,aAAa;QACtB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAzBJ,cAAA,6BAAA;;;;;;;;;;ACAA,UAAa,oBAAb,MAA8B;;;;;;;;;;;;;;;QA0B1B,YAAmB,UAAmB,QAAuB,MAAe,UAChE,QAAiB,UAAmB,6BAAsC,cAAuB,MAAe,YAA+B;AACvJ,eAAK,eAAe;AACpB,eAAK,aAAa;AAClB,eAAK,WAAW;AAChB,eAAK,eAAe;AACpB,eAAK,aAAa;AAClB,eAAK,eAAe;AACpB,eAAK,kCAAkC;AACvC,eAAK,mBAAmB;AACxB,eAAK,WAAW;AAChB,eAAK,iBAAiB;QAC1B;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,8BAA2B;AAClC,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;AApJJ,cAAA,oBAAA;;;;;;;;;;ACNA,UAAA,eAAA;AAMA,UAAaC,2BAAb,cAA6C,aAAA,kBAAiB;;;;;;;;;;;;;;;;;QAkB1D,YAAmB,UAAmB,QAAuB,MAC1C,UAAmB,QAAiB,UACpC,6BAAsC,WAAoB,cAC1D,MAAe,YAA+B;AAC7D,gBAAM,UAAU,QAAQ,MAAM,UAAU,QAAQ,UAAU,6BAA6B,cAAc,MAAM,UAAU;AACrH,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AAnCJ,cAAA,0BAAAA;;;;;;;;;;ACNA,UAAA,eAAA;AAMA,UAAa,0BAAb,cAA6C,aAAA,wBAAuB;;;;;;;;;;;;;;;;QAkBhE,YAAmB,UAAmB,UAAmB,QAAuB,MACpE,UAAmB,QAAiB,UAAmB,6BACvD,cAAuB,MAAe,YAA+B;AAC7E,gBAAM,UAAU,QAAQ,MAAM,UAAU,QAAQ,UAAU,6BAA6B,QAAW,cAAc,MAAM,UAAU;AAEhI,eAAK,eAAe;QACxB;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;AAnCJ,cAAA,0BAAA;;;;;;;;;;ACLA,UAAA,iBAAA;AAMA,UAAa,6BAAb,MAAuC;;;;;QAKnC,cAAA;AACI;QACJ;;;;;;;;;QAUO,OAAO,aAAa,KAAQ;AAC/B,yBAAA,UAAU,YAAY,KAAK,KAAK;AAChC,yBAAA,UAAU,wBAAwB,IAAI,UAAU,KAAK;AAErD,gBAAM,eAA+C,IAAI,+BAA8B;AAOvF,gBAAM,WAAmB,IAAI,KAAK,QAAQ,GAAG;AAC7C,cAAI,OAAO,UAAU;AACjB,kBAAM,IAAI,MAAM,0CAA0C;;AAE9D,uBAAa,SAAS,IAAI,KAAK,OAAO,GAAG,QAAQ;AAIjD,gBAAM,cAAsB,IAAI,SAAS,YAAY,GAAG,IAAI;AAC5D,cAAI,OAAO,aAAa;AACpB,kBAAM,IAAI,MAAM,yCAAyC;;AAG7D,uBAAa,QAAQ,IAAI,SAAS,OAAO,WAAW;AAGpD,uBAAa,kBAAkB,IAAI,aAAa,IAAI,kBAAkB;AACtE,cAAI,WAAc,aAAa,iBAAiB;AAC5C,kBAAM,IAAI,MAAM,oDAAoD;;AAGxE,iBAAO;QACX;;;;;;;;;QAUO,OAAO,UAAU,OAAa;AACjC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAEhD,gBAAM,eAA+C,IAAI,+BAA8B;AACvF,uBAAa,QAAQ;AACrB,iBAAO;QACX;;;;;;;;;;;;;;;QAgBO,OAAO,iBAAiB,iBAAyB,OAAe,QAAc;AACjF,yBAAA,UAAU,wBAAwB,iBAAiB,iBAAiB;AACpE,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,eAA+C,IAAI,+BAA8B;AACvF,uBAAa,QAAQ;AACrB,uBAAa,SAAS;AACtB,uBAAa,kBAAkB;AAC/B,iBAAO;QACX;;AA5FJ,cAAA,6BAAA;AAmGA,UAAa,iCAAb,cAAoD,2BAA0B;;AAA9E,cAAA,iCAAA;;;;;;;;;;ACzGA,UAAA,eAAA;AAMA,UAAa,6BAAb,cAAgD,aAAA,qBAAoB;;;;;;;;QAUhE,YAAmB,QAAiC,QAAiB,WAAkB;AACnF,gBAAM,QAAQ,SAAS;AAEvB,eAAK,aAAa;QACtB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAzBJ,cAAA,6BAAA;AAgCA,UAAa,qCAAb,cAAwD,aAAA,qBAAoB;;;;;;;;QAUxE,YAAmB,QAAyC,QAAiB,WAAkB;AAC3F,gBAAM,QAAQ,SAAS;AAEvB,eAAK,aAAa;QACtB;;;;;;;;QASI,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAzBR,cAAA,qCAAA;AAgCA,UAAa,gCAAb,cAAmD,2BAA0B;;AAA7E,cAAA,gCAAA;;;;;;;;;;ACvEA,UAAA,eAAA;AAWA,UAAa,4BAAb,cAA+C,aAAA,qBAAoB;;;;;;;;;QAa/D,YAAmB,QAA4B,cAC5B,WAAkC,QAAiB,WAAkB;AACpF,gBAAM,QAAQ,SAAS;AAEvB,eAAK,aAAa;AAClB,eAAK,mBAAmB;AACxB,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;QAMA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AAlDJ,cAAA,4BAAA;;;;;;;;;;ACXA,UAAA,iCAAA;AAIA,UAAa,qCAAb,cAAwD,+BAAA,0BAAyB;;AAAjF,cAAA,qCAAA;;;;;;;;;;ACJA,UAAA,eAAA;AAMA,UAAa,kCAAb,cAAqD,aAAA,qBAAoB;;;;;;;;QAUrE,YAAmB,QAAsC,QAAiB,WAAkB;AACxF,gBAAM,QAAQ,SAAS;AAEvB,eAAK,aAAa;QACtB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAzBJ,cAAA,kCAAA;;;;;;;;;;ACNA,UAAA,eAAA;AAMA,UAAa,gCAAb,cAAmD,aAAA,iBAAgB;;;;;;;QAS/D,YAAmB,QAAoC,WAAkB;AACrE,gBAAM,SAAS;AAEf,eAAK,aAAa;QACtB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAxBJ,cAAA,gCAAA;;;;;;;;;;ACNA,UAAA,eAAA;AAMA,UAAa,+BAAb,MAAa,sCAAqC,aAAA,wBAAuB;;;;;;;;;;;;;;;;QAkBrE,YAAmB,cAA4B,UAAmB,QAC/C,MAAe,UAAmB,QAAiB,UACnD,6BAAsC,cACtC,MAAe,YAA+B;AAC7D,gBAAM,UAAU,QAAQ,MAAM,UAAU,QAAQ,UAAU,6BAA6B,QAAW,cAAc,MAAM,UAAU;AAEhI,eAAK,mBAAmB;QAC5B;QAEO,OAAO,4BAA4B,QAA+B;AACrE,iBAAO,IAAI,8BAA6B,QAAW,OAAO,UAAU,OAAO,QAAQ,OAAO,MAAM,OAAO,UAAU,OAAO,QAAQ,OAAO,UAAU,OAAO,6BAA6B,OAAO,cAAc,OAAO,MAAM,OAAO,UAAU;QAC5O;;;;;;;;;;;QAYA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AA3CJ,cAAA,+BAAA;;;;;;;;;;ACCA,UAAa,6BAAb,MAAuC;;;;;;;QAUnC,YAAmB,QAAsB,OAAkB;AACvD,eAAK,aAAa;AAClB,eAAK,YAAY;QACrB;;;;;;;;QASA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAnCJ,cAAA,6BAAA;;;;;;;;;;ACHA,UAAYC;AAAZ,OAAA,SAAYA,eAAY;AAMpB,QAAAA,cAAAA,cAAA,SAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,mBAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,cAAAA,cAAA,kBAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,cAAAA,cAAA,mBAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,mBAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,cAAAA,cAAA,kBAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,mBAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,cAAAA,cAAA,kBAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,mBAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,4BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,0BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,uBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,sBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,oBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,mBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,mBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,qBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,cAAAA,cAAA,qBAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,cAAAA,cAAA,8BAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,cAAAA,cAAA,6BAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,cAAAA,cAAA,0BAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,cAAAA,cAAA,qCAAA,IAAA,EAAA,IAAA;MACJ,GAtJYA,gBAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;;;;;;;;;;ACHxB,UAAA,eAAA;AAMA,UAAA,iBAAA;AACA,UAAA,eAAA;AAaA,UAAsBC,gBAAtB,MAAkC;;;;;QAK9B,cAAA;AACI;QACJ;;;;;;;;;;;QAYO,OAAO,iBAAiB,iBAAyB,QAAc;AAClE,yBAAA,UAAU,wBAAwB,iBAAiB,iBAAiB;AACpE,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,aAA+B,IAAI,iBAAgB;AACzD,qBAAW,YAAY,aAAA,WAAW,gCAAgC,MAAM;AACxE,qBAAW,YAAY,aAAA,WAAW,sCAAsC,MAAM;AAC9E,qBAAW,YAAY,aAAA,WAAW,6BAA6B,eAAe;AAE9E,iBAAO;QACX;;;;;;;;;;;;;;;;;;;;QAqBO,OAAO,aAAa,UAAe,iBAAwB;AAC9D,yBAAA,UAAU,YAAY,UAAU,UAAU;AAE1C,gBAAM,aAA+B,IAAI,iBAAgB;AACzD,qBAAW,YAAY,aAAA,WAAW,kCAAkC,SAAS,IAAI;AAEjF,cAAI,WAAc,iBAAiB;AAC/B,uBAAW,YAAY,aAAA,WAAW,6BAA6B,eAAe;;AAElF,iBAAO;QACX;;;;;;;;;;;;;;;;QAiBO,OAAO,SAAS,UAAe,iBAAwB;AAC1D,yBAAA,UAAU,YAAY,UAAU,UAAU;AAE1C,gBAAM,aAA+B,IAAI,iBAAgB;AACzD,qBAAW,YAAY,aAAA,WAAW,8BAA8B,SAAS,WAAW,OAAO,SAAS,YAAY,SAAS,SAAS,KAAK,KAAK,MAAM,SAAS,KAAK;AAEhK,cAAI,WAAc,iBAAiB;AAC/B,uBAAW,YAAY,aAAA,WAAW,6BAA6B,eAAe;;AAElF,iBAAO;QACX;;;;;;;;;;;;;;;;;QAkBO,OAAO,uBAAuB,oBAA4B,QAAc;AAC3E,yBAAA,UAAU,YAAY,oBAAoB,oBAAoB;AAC9D,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,aAA+B,IAAI,iBAAgB;AACzD,qBAAW,YAAY,aAAA,WAAW,gCAAgC,MAAM;AACxE,qBAAW,YAAY,aAAA,WAAW,sCAAsC,MAAM;AAC9E,qBAAW,qBAAqB;AAChC,iBAAO;QACX;;;;;;;;QA6HO,QAAK;QAAW;;AA/O3B,cAAA,eAAAA;AAoXA,UAAa,mBAAb,MAAa,0BAAyBA,cAAY;QAI9C,cAAA;AACI,gBAAK;AACL,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,eAAK,4BAA4B;AACjC,eAAK,eAAe,aAAA,aAAa;QACrC;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,iBAAO,IAAI,IAAI,KAAK,eAAe,YAAY,aAAA,WAAW,gCAAgC,CAAC;QAC/F;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,2BAA2B;QACjF;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,8BAA8B;QACpF;QAEA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,gCAAgC;QACtF;QAEA,IAAW,mBAAmB,OAAa;AACvC,eAAK,eAAe,YAAY,aAAA,WAAW,kCAAkC,KAAK;QACtF;QAEA,IAAW,4BAAyB;AAChC,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,oCAAoC;QAC1F;QAEA,IAAW,0BAA0B,OAAa;AAC9C,eAAK,eAAe,YAAY,aAAA,WAAW,sCAAsC,KAAK;QAC1F;QAEA,IAAW,4BAAyB;AAChC,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,iDAAiD;QACvG;QAEA,IAAW,0BAA0B,OAAa;AAC9C,eAAK,eAAe,YAAY,aAAA,WAAW,mDAAmD,KAAK;QACvG;QAEA,IAAW,eAAY;AACnB,iBAAO,aAAA,aAAa,KAAK,eAAe,YAAY,aAAA,0BAA0B,MAAS,CAA8B;QACzH;QAEA,IAAW,aAAa,OAAmB;AACvC,eAAK,eAAe,YAAY,aAAA,0BAA0B,aAAA,aAAa,KAAK,CAAC;QACjF;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,kCAAkC;QACxF;QAEA,IAAW,WAAW,OAAa;AAC/B,eAAK,eAAe,YAAY,aAAA,WAAW,oCAAoC,KAAK;QACxF;QAEO,YAAY,MAA2B,OAAa;AACvD,yBAAA,UAAU,YAAY,OAAO,OAAO;AAEpC,eAAK,eAAe,YAAY,MAAM,KAAK;QAC/C;QAEO,YAAY,MAA2B,KAAY;AAEtD,iBAAO,KAAK,eAAe,YAAY,MAAM,GAAG;QACpD;QAIO,SAAS,eAAoB,WAAgB,eAAqB,eAAmB;AACxF,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,qCAAqC,GAAG,aAAuB;AACtG,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,iCAAiC,GAAG,SAAmB;AAC9F,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,qCAAqC,GAAG,aAAuB;AACtG,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,qCAAqC,GAAG,aAAuB;QAC1G;QAEO,mBAAmB,MAAc,OAAa;AACjD,gBAAM,oBAA+C,KAAK,MAAM,KAAK,eAAe,YAAY,aAAA,+BAA+B,IAAI,CAAC;AAEpI,4BAAkB,IAAI,IAAI;AAE1B,eAAK,eAAe,YAAY,aAAA,+BAA+B,KAAK,UAAU,iBAAiB,CAAC;QACpG;QAEO,aAAa,WAA0B;AAC1C,eAAK,eAAe,YAAY,aAAA,WAAW,uCAAuC,aAAA,gBAAgB,SAAS,CAAC;QAChH;QAEO,qBAAkB;AACrB,eAAK,eAAe,YAAY,aAAA,WAAW,4CAA4C,MAAM;QACjG;QACO,6BAA0B;AAC7B,eAAK,eAAe,YAAY,aAAA,WAAW,kDAAkD,MAAM;QACvG;QACO,kBAAe;AAClB,eAAK,eAAe,YAAY,aAAA,4BAA4B,MAAM;QACtE;QAEO,QAAK;AACR,gBAAM,MAAwB,IAAI,kBAAgB;AAClD,cAAI,iBAAiB,KAAK,eAAe,MAAK;AAC9C,iBAAO;QACX;QAEA,IAAW,0BAAuB;AAC9B,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,qCAAqC;QAC3F;QAEA,IAAW,wBAAwB,UAAgB;AAC/C,eAAK,eAAe,YAAY,aAAA,WAAW,uCAAuC,QAAQ;QAC9F;QAEA,IAAW,2BAAwB;AAC/B,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,kCAAkC;QACxF;QAEA,IAAW,yBAAyB,OAAa;AAC7C,eAAK,eAAe,YAAY,aAAA,WAAW,oCAAoC,KAAK;QACxF;QAEA,IAAW,8BAA2B;AAClC,iBAAO,aAAA,4BAA4B,KAAK,eAAe,YAAY,aAAA,WAAW,2CAA2C,MAAS,CAA6C;QACnL;QAEA,IAAW,4BAA4BC,SAAmC;AACtE,eAAK,eAAe,YAAY,aAAA,WAAW,2CAA2C,aAAA,4BAA4BA,OAAM,CAAC;QAC7H;;AAzIJ,cAAA,mBAAA;;;;;;;;;;ACxYA,UAAA,eAAA;AAMA,UAAA,iBAAA;AACA,UAAA,eAAA;AAaA,UAAsB,0BAAtB,cAAsD,aAAA,aAAY;;;;QAK9D,cAAA;AACI,gBAAK;QACT;;;;;;;;;;QAWO,OAAO,iBAAiB,iBAAyB,QAAc;AAClE,yBAAA,UAAU,wBAAwB,iBAAiB,iBAAiB;AACpE,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,MAAmC,IAAI,4BAA2B;AACxE,cAAI,WAAW,YAAY,aAAA,WAAW,6BAA6B,eAAe;AAClF,cAAI,WAAW,YAAY,aAAA,WAAW,gCAAgC,MAAM;AAC5E,iBAAO;QACX;;;;;;;;;;;;;;;;;;QAmBO,OAAO,uBAAuB,oBAA4B,QAAc;AAC3E,yBAAA,UAAU,wBAAwB,oBAAoB,oBAAoB;AAC1E,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,MAAmC,IAAI,4BAA2B;AACxE,cAAI,WAAW,YAAY,aAAA,WAAW,kCAAkC,kBAAkB;AAC1F,cAAI,WAAW,YAAY,aAAA,WAAW,gCAAgC,MAAM;AAC5E,iBAAO;QACX;;;;;;;;;;;;;;;;QAiBO,OAAO,SAAS,UAAe,iBAAwB;AAC1D,yBAAA,UAAU,YAAY,UAAU,UAAU;AAE1C,gBAAM,aAA0C,IAAI,4BAA2B;AAC/E,qBAAW,YAAY,aAAA,WAAW,8BAA8B,SAAS,WAAW,OAAO,SAAS,YAAY,SAAS,SAAS,KAAK,KAAK,MAAM,SAAS,KAAK;AAEhK,cAAI,WAAc,iBAAiB;AAC/B,uBAAW,YAAY,aAAA,WAAW,6BAA6B,eAAe;;AAElF,iBAAO;QACX;;;;;;;;;;;;;;;;;;;QAoBO,OAAO,aAAa,UAAe,iBAAuB;AAC7D,yBAAA,UAAU,YAAY,UAAU,UAAU;AAC1C,yBAAA,UAAU,YAAY,iBAAiB,iBAAiB;AAExD,gBAAM,MAAmC,IAAI,4BAA2B;AACxE,cAAI,WAAW,YAAY,aAAA,WAAW,kCAAkC,SAAS,IAAI;AACrF,cAAI,WAAW,YAAY,aAAA,WAAW,6BAA6B,eAAe;AAClF,iBAAO;QACX;;AA5GJ,cAAA,0BAAA;AA6LA,UAAa,8BAAb,cAAiD,wBAAuB;QAIpE,cAAA;AACI,gBAAK;AACL,eAAK,uBAAuB,IAAI,aAAA,mBAAkB;AAClD,eAAK,eAAe,aAAA,aAAa;QACrC;;;;;;;;;;QAUA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAEhD,eAAK,qBAAqB,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAC5F;;;;;;;;QASA,IAAW,0BAA0B,OAAa;AAC9C,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,qBAAqB,YAAY,aAAA,WAAW,sCAAsC,KAAK;QAChG;;;;;;;;QASA,IAAW,4BAAyB;AAChC,iBAAO,KAAK,qBAAqB,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;QAC5G;;;;;;QAOA,IAAW,kBAAe;AACtB,iBAAO,KAAK,qBAAqB,YAAY,aAAA,WAAW,aAAA,WAAW,2BAA2B,CAAC;QACnG;;;;;;;QAQA,IAAW,eAAY;AAEnB,iBAAQ,aAAA,aAAqB,KAAK,qBAAqB,YAAY,aAAA,0BAA0B,MAAS,CAAC;QAC3G;;;;;;;QAQA,IAAW,aAAa,OAAmB;AACvC,eAAK,qBAAqB,YAAY,aAAA,0BAA0B,aAAA,aAAa,KAAK,CAAC;QACvF;;;;;;;QAQA,IAAW,aAAU;AACjB,iBAAO,KAAK,qBAAqB,YAAY,aAAA,WAAW,kCAAkC;QAC9F;;;;;;;QAQA,IAAW,WAAW,OAAa;AAC/B,eAAK,qBAAqB,YAAY,aAAA,WAAW,oCAAoC,KAAK;QAC9F;;;;;;;;QASO,kBAAkB,OAAa;AAClC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAEhD,gBAAM,YAAsB,KAAK;AACjC,cAAI,CAAC,UAAU,SAAS,KAAK,GAAG;AAC5B,sBAAU,KAAK,KAAK;AACpB,iBAAK,qBAAqB,YAAY,aAAA,WAAW,gDAAgD,UAAU,KAAK,GAAG,CAAC;;QAE5H;;;;;;;;QASA,IAAW,kBAAe;AAEtB,cAAI,KAAK,qBAAqB,YAAY,aAAA,WAAW,gDAAgD,MAAS,MAAM,QAAW;AAC3H,mBAAO,KAAK,qBAAqB,YAAY,aAAA,WAAW,8CAA8C,EAAE,MAAM,GAAG;iBAC9G;AACH,mBAAO,CAAA;;QAGf;;;;;;;QAQA,IAAW,YAAS;AAChB,iBAAO,KAAK,YAAY,aAAA,WAAW,aAAA,WAAW,wCAAwC,CAAC;QAC3F;;;;;;;;QASA,IAAW,UAAU,OAAa;AAC9B,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAEhD,eAAK,qBAAqB,YAAY,aAAA,WAAW,0CAA0C,KAAK;QACpG;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK,qBAAqB,YAAY,aAAA,WAAW,8BAA8B;QAC1F;QAIO,SAAS,eAAoB,WAAgB,eAAqB,eAAmB;AACxF,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,qCAAqC,GAAG,aAAuB;AACtG,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,iCAAiC,GAAG,SAAmB;AAC9F,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,qCAAqC,GAAG,aAAuB;AACtG,eAAK,YAAY,aAAA,WAAW,aAAA,WAAW,qCAAqC,GAAG,aAAuB;QAC1G;;;;;;;;;;QAWO,YAAY,MAAc,KAAY;AACzC,iBAAO,KAAK,qBAAqB,YAAY,MAAM,GAAG;QAC1D;;;;;;;;;QAUO,YAAY,MAA2B,OAAa;AACvD,eAAK,qBAAqB,YAAY,MAAM,KAAK;QACrD;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;QAQO,QAAK;AACR;QACJ;QAEO,mBAAmB,MAAc,OAAa;AACjD,gBAAM,oBAA+C,KAAK,MAAM,KAAK,qBAAqB,YAAY,aAAA,+BAA+B,IAAI,CAAC;AAE1I,4BAAkB,IAAI,IAAI;AAE1B,eAAK,qBAAqB,YAAY,aAAA,+BAA+B,KAAK,UAAU,iBAAiB,CAAC;QAC1G;QAEO,aAAa,WAA0B;AAC1C,eAAK,qBAAqB,YAAY,aAAA,WAAW,uCAAuC,aAAA,gBAAgB,SAAS,CAAC;QACtH;QAEO,qBAAkB;AACrB,eAAK,qBAAqB,YAAY,aAAA,WAAW,4CAA4C,MAAM;QACvG;QACO,6BAA0B;AAC7B,eAAK,qBAAqB,YAAY,aAAA,WAAW,kDAAkD,MAAM;QAC7G;QACO,kBAAe;AAClB,eAAK,qBAAqB,YAAY,aAAA,4BAA4B,MAAM;QAC5E;QAEA,IAAW,0BAAuB;AAC9B,iBAAO,KAAK,qBAAqB,YAAY,aAAA,WAAW,qCAAqC;QACjG;QAEA,IAAW,wBAAwB,UAAgB;AAC/C,eAAK,qBAAqB,YAAY,aAAA,WAAW,uCAAuC,QAAQ;QACpG;QAEA,IAAW,2BAAwB;AAC/B,iBAAO,KAAK,qBAAqB,YAAY,aAAA,WAAW,kCAAkC;QAC9F;QAEA,IAAW,yBAAyB,OAAa;AAC7C,eAAK,qBAAqB,YAAY,aAAA,WAAW,oCAAoC,KAAK;QAC9F;QAEA,IAAW,8BAA2B;AAElC,iBAAQ,aAAA,4BAAoC,KAAK,qBAAqB,YAAY,aAAA,WAAW,2CAA2C,MAAS,CAAC;QACtJ;QAEA,IAAW,4BAA4BC,SAAmC;AACtE,eAAK,qBAAqB,YAAY,aAAA,WAAW,2CAA2C,aAAA,4BAA4BA,OAAM,CAAC;QACnI;;AAzQJ,cAAA,8BAAA;;;;;;;;;;AClNA,UAAA,eAAA;AAMA,UAAa,qBAAb,MAAa,oBAAkB;QAA/B,cAAA;AACY,eAAA,WAAqB,CAAA;AACrB,eAAA,aAAuB,CAAA;QA4GnC;;;;;;;;;;;;;QA9FW,YAAY,KAA0B,KAA+B;AACxE,cAAI;AAEJ,cAAI,OAAO,QAAQ,UAAU;AACzB,uBAAW;iBACR;AACH,uBAAW,aAAA,WAAW,GAAG;;AAG7B,mBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,gBAAI,KAAK,SAAS,CAAC,MAAM,UAAU;AAC/B,qBAAO,KAAK,WAAW,CAAC;;;AAIhC,cAAI,QAAQ,QAAW;AACnB,mBAAO;;AAGX,iBAAO,OAAO,GAAG;QACrB;;;;;;;;;QAUO,YAAY,KAA0B,OAAa;AACtD,cAAI;AAEJ,cAAI,OAAO,QAAQ,UAAU;AACzB,uBAAW;iBACR;AACH,uBAAW,aAAA,WAAW,GAAG;;AAG7B,mBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,gBAAI,KAAK,SAAS,CAAC,MAAM,UAAU;AAC/B,mBAAK,WAAW,CAAC,IAAI;AACrB;;;AAIR,eAAK,SAAS,KAAK,QAAQ;AAC3B,eAAK,WAAW,KAAK,KAAK;QAC9B;;;;;;;;QASO,QAAK;AACR,gBAAM,YAAY,IAAI,oBAAkB;AAExC,mBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,sBAAU,SAAS,KAAK,KAAK,SAAS,CAAC,CAAC;AACxC,sBAAU,WAAW,KAAK,KAAK,WAAW,CAAC,CAAC;;AAGhD,iBAAO;QACX;;;;;;;;QASO,QAAQ,uBAAyC;AACpD,eAAK,SAAS,QAAQ,CAAC,QAAkC;AACrD,gBAAI,sBAAsB,YAAY,KAAK,MAAS,MAAM,QAAW;AACjE,oBAAM,QAAQ,KAAK,YAAY,GAAG;AAClC,oCAAsB,YAAY,KAAK,KAAK;;UAEpD,CAAC;QACL;;;;;;;;QASA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;AA7GJ,cAAA,qBAAA;;;;;;;;;;ACFA,UAAYC;AAAZ,OAAA,SAAYA,aAAU;AASlB,QAAAA,YAAAA,YAAA,6BAAA,IAAA,CAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,kCAAA,IAAA,CAAA,IAAA;AAQA,QAAAA,YAAAA,YAAA,gCAAA,IAAA,CAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,kCAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,iCAAA,IAAA,CAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,oCAAA,IAAA,CAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,gDAAA,IAAA,CAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,0CAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,6CAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,sCAAA,IAAA,CAAA,IAAA;AAQA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,YAAAA,YAAA,mCAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,kCAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,YAAAA,YAAA,sCAAA,IAAA,EAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,kBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,oCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,2CAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,mDAAA,IAAA,EAAA,IAAA;AAQA,QAAAA,YAAAA,YAAA,sDAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,uDAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,kCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,wCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,4BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,gCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,wCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,iDAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,6BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,iDAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,6CAAA,IAAA,EAAA,IAAA;AAeA,QAAAA,YAAAA,YAAA,qCAAA,IAAA,EAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,4CAAA,IAAA,EAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,wCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,oDAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,4CAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,kDAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,oDAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,0CAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,6DAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,2CAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,kDAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,+CAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,4BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,yBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,sCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,sBAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,8BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,0CAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,0CAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,kCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,8BAAA,IAAA,EAAA,IAAA;AAKA,QAAAA,YAAAA,YAAA,6BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,6BAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,sCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,8BAAA,IAAA,EAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,uCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,qCAAA,IAAA,EAAA,IAAA;AASA,QAAAA,YAAAA,YAAA,sCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,8BAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,gCAAA,IAAA,EAAA,IAAA;AAMA,QAAAA,YAAAA,YAAA,gCAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,mBAAA,IAAA,EAAA,IAAA;AAOA,QAAAA,YAAAA,YAAA,iCAAA,IAAA,EAAA,IAAA;MACJ,GA3eYA,cAAA,QAAA,eAAA,QAAA,aAAU,CAAA,EAAA;;;;;;;;;;ACJtB,UAAA,eAAA;AAYA,UAAA,eAAA;AAIA,UAAA,iBAAA;AAGA,UAAA,eAAA;AAaA,UAAsB,aAAtB,MAAsB,YAAU;;;;;;;;QAc5B,YAAsB,aAA0B,YAAgC,mBAAqC;AACjH,eAAK,cAAe,gBAAgB,SAAa,cAAc,aAAA,YAAY,2BAA0B;AACrG,eAAK,eAAe;AACpB,eAAK,iBAAiB,WAAW,MAAK;AACtC,eAAK,wBAAwB;AAC7B,eAAK,0BAAyB;QAClC;;;;;;;QAwCO,MAAM,IAAiB,SAAiC;AAC3D,yBAAA,UAAU,gBAAgB,KAAK,YAAY;AAC3C,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,OAAO;QAC7D;;;;;;QAOA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;;;;;;;;;;QAYU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,cAAc;AACnB;;AAGJ,eAAK,eAAe;AAEpB,cAAI,WAAW;AACX,gBAAI,KAAK,UAAU;AACf,oBAAM,KAAK,SAAS,YAAY,QAAO;AACvC,oBAAM,KAAK,SAAS,QAAO;;;QAGvC;;;;;;;;QASO,WAAW,mBAAgB;AAC9B,iBAAO,aAAA,sBAAsB;QACjC;;;;;;;;;;;QAYO,OAAO,gBAAgB,SAAgB;AAC1C,uBAAA,sBAAsB,uBAAuB;QACjD;;QAkBU,4BAAyB;AAE/B,cAAI,aAAc,OAAO,WAAW,cAAe,YAAY;AAC/D,cAAI,SAAS;AACb,cAAI,YAAY;AAEhB,cAAI,OAAO,cAAc,aAAa;AAClC,yBAAa,aAAa,MAAM,UAAU;AAC1C,qBAAS,UAAU;AACnB,wBAAY,UAAU;;AAG1B,gBAAM,mBAAmB,KAAK,uBAC1B,IAAI,aAAA,oBACA,IAAI,aAAA,QAAQ,IAAI,aAAA,GAAG,YAAY,QAAQ,SAAS,CAAC,CAAC,CAAC;AAE3D,eAAK,WAAW,KAAK,wBACjB,YAAW,sBAAsB,KAAK,cAAc,GACpD,KAAK,uBACL,KAAK,aACL,gBAAgB;QACxB;QAEU,MAAM,uBAAuB,iBAAgC;AACnE,yBAAA,UAAU,gBAAgB,KAAK,YAAY;AAC3C,gBAAM,MAAyC,IAAI,aAAA,SAAQ;AAE3D,gBAAM,KAAK,mBAAkB;AAC7B,gBAAM,KAAK,SAAS,UAAU,iBAAiB,IAAI,SAAS,IAAI,MAAM;AACtE,gBAAM,SAAkC,MAAM,IAAI;AAClD,gBAAM,KAAK,mBAAkB;AAE7B,iBAAO;QAEX;QAEU,MAAM,oCAAoC,iBAAgC;AAChF,yBAAA,UAAU,gBAAgB,KAAK,YAAY;AAE3C,gBAAM,KAAK,mBAAkB;AAC7B,gBAAM,KAAK,SAAS,UAAU,iBAAiB,QAAW,MAAS;QACvE;QAEU,MAAM,qCAAkC;AAC9C,yBAAA,UAAU,gBAAgB,KAAK,YAAY;AAC3C,gBAAM,KAAK,mBAAkB;QACjC;QAEU,MAAM,qBAAkB;AAC9B,cAAI,KAAK,UAAU;AACf,kBAAM,KAAK,SAAS,gBAAe;;AAEvC;QACJ;QAEU,OAAO,sBAAsB,YAA8B;AACjE,gBAAM,kBAAkB,WAAW,YAAY,aAAA,WAAW,6BAA6B,MAAS;AAChG,gBAAM,iBAAkB,mBAAmB,oBAAoB,KAC3D,IAAI,aAAA,uCAAuC,eAAe,IAC1D,IAAI,aAAA,6BACA,MAAsB;AAClB,kBAAM,qBAAqB,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AACxG,mBAAO,QAAQ,QAAQ,kBAAkB;UAC7C,GACA,MAAsB;AAClB,kBAAM,qBAAqB,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AACxG,mBAAO,QAAQ,QAAQ,kBAAkB;UAC7C,CAAC;AAET,iBAAO;QACX;;AAlNJ,cAAA,aAAA;;;;;;;;;;AChCA,UAAA,eAAA;AAWA,UAAA,eAAA;AAEA,UAAA,iBAAA;AACA,UAAA,eAAA;AAkBA,UAAaC,oBAAb,MAAa,0BAAyB,aAAA,WAAU;;;;;;;QAS5C,YAAmB,cAA4B,aAAyB;AACpE,gBAAM,mBAAqC;AAC3C,yBAAA,UAAU,YAAY,kBAAkB,cAAc;AAEtD,yBAAA,UAAU,wBACN,iBAAiB,WAAW,YAAY,aAAA,WAAW,oCAAoC,GACvF,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;AAE/D,gBAAM,aAAa,iBAAiB,YAAY,IAAI,aAAA,wBAAuB,CAAE;AAC7E,eAAK,yBAAyB;QAClC;;;;;;;;QASO,OAAO,WAAW,cAA4B,gCAAgE,aAAyB;AAC1I,gBAAM,mBAAqC;AAC3C,yCAA+B,WAAW,QAAQ,iBAAiB,UAAU;AAC7E,gBAAM,aAAa,IAAI,kBAAiB,cAAc,WAAW;AACjE,iBAAO;QACX;;;;;;;;QAiCA,IAAW,aAAU;AACjB,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC,sCAAsC;QAC5H;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;QASA,IAAW,4BAAyB;AAChC,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC;QACtF;;;;;;;;QASA,IAAW,eAAY;AACnB,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,cAAI,KAAK,WAAW,YAAY,aAAA,0BAA0B,aAAA,aAAa,aAAA,aAAa,MAAM,CAAC,MAAM,aAAA,aAAa,aAAA,aAAa,MAAM,GAAG;AAChI,mBAAO,aAAA,aAAa;iBACjB;AACH,mBAAO,aAAA,aAAa;;QAE5B;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;;;;;;QAcO,mBAAmB,IAA2C,KAAyB;AAC1F,uBAAA,0BAA0B,KAAK,uBAAuB,aAAA,gBAAgB,WAAW,GAAG,IAAI,GAAG;QAC/F;;;;;;;;;;QAWO,gCAAgC,IAAiB,KAAyB;AAC7E,uBAAA,0BAA0B,KAAK,oCAAoC,aAAA,gBAAgB,YAAY,GAAG,IAAI,GAAG;QAC7G;;;;;;;;;QAUO,+BAA+B,IAAiB,KAAyB;AAC5E,uBAAA,0BAA0B,KAAK,mCAAkC,GAAI,IAAI,GAAG;QAChF;;;;;;;;;;;;;;;QAgBO,6BAA6B,OAAgC,IAAiB,KAAyB;AAC1G,yBAAA,UAAU,YAAY,OAAO,OAAO;AAEpC,cAAI,CAAC,CAAC,KAAK;AACP,gBAAI,sBAAsB;;QAElC;;;;;;;;;;;QAYO,4BAA4B,IAAe;AAC9C,cAAI,CAAC,CAAC,IAAI;AACN,eAAE;;QAEV;;;;;;;QAQO,MAAM,IAAiB,SAAiC;AAC3D,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AACrD,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,OAAO;QAC7D;;;;;;;;QASU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,wBAAwB;AAC7B;;AAGJ,cAAI,WAAW;AACX,iBAAK,yBAAyB;AAC9B,kBAAM,KAAK,mBAAkB;;AAGjC,gBAAM,MAAM,QAAQ,SAAS;QACjC;QAEU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,cAAc;QACjE;QAEU,wBACN,gBACA,mBACA,aACA,kBAAkC;AAClC,gBAAM,aAA8B;AACpC,iBAAO,IAAI,aAAA,wBAAwB,gBAAgB,mBAAmB,YAAY,kBAAkB,IAAI;QAC5G;;AAjQJ,cAAA,mBAAAA;;;;;;;;;;AChCA,UAAA,eAAA;AAWA,UAAA,eAAA;AAEA,UAAA,iBAAA;AACA,UAAA,eAAA;AAmBA,UAAa,mBAAb,cAAsC,aAAA,WAAU;;;;;;;QAY5C,YAAmB,cAA4B,aAAyB;AACpE,yBAAA,UAAU,uBAAuB,cAAc,cAAc;AAC7D,gBAAM,aAA+B;AACrC,yBAAA,UAAU,uBAAuB,YAAY,cAAc;AAE3D,gBAAM,aAAa,WAAW,YAAY,IAAI,aAAA,wBAAuB,CAAE;AACvE,eAAK,mBAAmB,CAAA;AACxB,eAAK,qBAAqB,CAAA;AAE1B,eAAK,+BAA+B;AACpC,eAAK,iBAAiB,WAAW;AAEjC,yBAAA,UAAU,wBAAwB,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC,GAAG,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;QAC/K;;;;;;;;QAiCA,IAAW,4BAAyB;AAChC,yBAAA,UAAU,gBAAgB,KAAK,4BAA4B;AAE3D,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC;QACtF;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;;QAUA,IAAW,mBAAmB,OAAa;AACvC,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;;QAUA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;;;;;;QAcO,mBAAmB,IAA2C,KAAyB;AAC1F,yBAAA,UAAU,gBAAgB,KAAK,4BAA4B;AAE3D,cAAI,OAAO,KAAK,KAAK,kBAAkB,EAAE,WAAW,KAAK,WAAc,KAAK,oBAAoB;AAC5F,kBAAM,UAA0B,KAAK,mBAAkB;AAEvD,iBAAK,SAAS,cAAc,WAAW,UAAU,QAAQ,MAAM;AAC/D,iBAAK,SAAS,eAAe,oBAAoB,QAAQ,iBAAiB;AAE1E,kBAAM,aAAsC,KAAK;AACjD,uBAAW,WAAW,KAAK,oBAAoB,KAAK,kBAAkB;;AAG1E,uBAAA,0BAA0B,KAAK,uBAAuB,aAAA,gBAAgB,WAAW,GAAG,IAAI,GAAG;QAC/F;;;;;;;;;;QAWO,gCAAgC,IAAiB,KAAyB;AAC7E,cAAI,OAAO,KAAK,KAAK,kBAAkB,EAAE,WAAW,KAAK,WAAc,KAAK,oBAAoB;AAC5F,kBAAM,UAA0B,KAAK,mBAAkB;AAEvD,iBAAK,SAAS,cAAc,WAAW,UAAU,QAAQ,MAAM;AAC/D,iBAAK,SAAS,eAAe,oBAAoB,QAAQ,iBAAiB;AAE1E,kBAAM,aAAsC,KAAK;AACjD,uBAAW,WAAW,KAAK,oBAAoB,KAAK,kBAAkB;;AAG1E,uBAAA,0BAA0B,KAAK,oCAAoC,aAAA,gBAAgB,YAAY,GAAG,IAAI,GAAG;QAC7G;;;;;;;;;QAUO,+BAA+B,IAAiB,KAAyB;AAC5E,uBAAA,0BAA0B,KAAK,mCAAkC,GAAI,IAAI,GAAG;QAChF;;;;;;;;;;;;;QAcO,6BAA6B,OAAgC,IAAiB,KAAyB;AAC1G,yBAAA,UAAU,YAAY,OAAO,OAAO;AAEpC,cAAI,CAAC,CAAC,KAAK;AACP,gBAAI,sBAAsB;;QAElC;;;;;;;;;;;QAYO,4BAA4B,IAAiB,KAAyB;AACzE,cAAI,CAAC,CAAC,IAAI;AACN,gBAAI;AACA,iBAAE;qBACG,GAAG;AACR,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,CAAW;;;;QAI/B;;;;;;;;;QAUO,UAAU,cAAsB,UAAiB;AACpD,yBAAA,UAAU,gBAAgB,KAAK,4BAA4B;AAC3D,yBAAA,UAAU,wBAAwB,UAAU,UAAU;AACtD,yBAAA,UAAU,wBAAwB,cAAc,cAAc;AAE9D,eAAK,iBAAiB,KAAK,CAAC,UAAU,YAAY,CAAC;QACvD;;;;;;;;;;;;QAaO,2BAA2B,UAAkB,OAAmC,YAAmB;AACtG,yBAAA,UAAU,gBAAgB,KAAK,4BAA4B;AAC3D,yBAAA,UAAU,wBAAwB,UAAU,UAAU;AACtD,yBAAA,UAAU,YAAY,OAAO,OAAO;AAEpC,gBAAM,YAA4C;AAClD,yBAAA,UAAU,wBAAwB,UAAU,OAAO,aAAa;AAEhE,eAAK,mBAAmB,QAAQ,IAAI,IAAI,aAAA,cAAc,WAAW,UAAU;QAC/E;;;;;;;;;;;QAYO,cAAc,OAAmC,UAAiB;AACrE,yBAAA,UAAU,YAAY,OAAO,OAAO;AAEpC,gBAAM,YAA4C;AAClD,yBAAA,UAAU,wBAAwB,UAAU,OAAO,aAAa;AAEhE,eAAK,qBAAqB,IAAI,aAAA,cAAc,WAAW,QAAQ;QACnE;;;;;;;QAQO,MAAM,IAAiB,SAAiC;AAC3D,yBAAA,UAAU,gBAAgB,KAAK,4BAA4B;AAE3D,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,OAAO;QAC7D;QAEU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,cAAc;QACjE;QAEU,wBAAwB,gBAAiC,mBAAuC,aAA0B,kBAAkC;AAClK,gBAAM,YAA6B;AACnC,iBAAO,IAAI,aAAA,wBAAwB,gBAAgB,mBAAmB,WAAW,kBAAkB,IAAI;QAC3G;QAEU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,8BAA8B;AACnC;;AAGJ,cAAI,WAAW;AACX,iBAAK,+BAA+B;AACpC,kBAAM,MAAM,QAAQ,SAAS;;QAErC;QAEQ,qBAAkB;AACtB,cAAI;AACJ,cAAI;AACJ,cAAI;AACJ,gBAAM,cAAwB,CAAA;AAE9B,cAAI,WAAc,KAAK,oBAAoB;AACvC,oBAAQ,KAAK,mBAAmB,UAAU;AAC1C,qBAAS,KAAK,mBAAmB,UAAU;AAC3C,8BAAkB,KAAK,mBAAmB,UAAU;;AAIxD,qBAAW,YAAY,OAAO,KAAK,KAAK,kBAAkB,GAAG;AACzD,kBAAM,gBAA+B,KAAK,mBAAmB,QAAQ;AAGrE,gBAAI,UAAU,QAAW;AACrB,sBAAQ,cAAc,UAAU;mBAC7B;AACH,kBAAI,UAAU,cAAc,UAAU,OAAO;AACzC,sBAAM,IAAI,MAAM,8CAA8C;;;AAItE,gBAAI,WAAW,QAAW;AACtB,uBAAS,cAAc,UAAU;mBAC9B;AACH,kBAAI,WAAW,cAAc,UAAU,QAAQ;AAC3C,sBAAM,IAAI,MAAM,iEAAiE;;;AAIzF,gBAAI,oBAAoB,QAAW;AAC/B,gCAAkB,cAAc,UAAU;mBACvC;AACH,kBAAI,oBAAoB,cAAc,UAAU,iBAAiB;AAC7D,sBAAM,IAAI,MAAM,gDAAgD;;;AAIxE,kBAAM,UAAkB,UAAU,QAAQ,iBAAiB;AAC3D,wBAAY,KAAK,OAAO;;AAG5B,iBAAO;YACH,QAAQ;cACJ,IAAI;cACJ,KAAM,oBAAoB,SAAa,KAAK,eAAe,YAAY,aAAA,WAAW,aAAA,WAAW,2BAA2B,CAAC,IAAI;cAC7H,UAAU;;YAEd,mBAAoB,WAAc,KAAK,qBAAsB,cAAc,CAAC,UAAU,QAAQ,aAAa;;QAEnH;;AA1VJ,cAAA,mBAAA;;;;;;;;;;AC7BA,UAAY;AAAZ,OAAA,SAAYC,mBAAgB;AAMxB,QAAAA,kBAAAA,kBAAA,+BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,kBAAAA,kBAAA,2BAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,kBAAAA,kBAAA,6BAAA,IAAA,CAAA,IAAA;MACJ,GAnBY,mBAAA,QAAA,qBAAA,QAAA,mBAAgB,CAAA,EAAA;;;;;;;;;;ACD5B,UAAA,mBAAA;AACA,UAAA,eAAA;AAIA,UAAA,0BAAA;AAGA,UAAA,kBAAA;AAUA,UAAsB,oBAAtB,MAAuC;;AAAvC,cAAA,oBAAA;AA0CA,UAAa,wBAAb,MAAkC;QAK9B,YAAmB,SAA6B;AAC5C,eAAK,wBAAwB;AAC7B,eAAK,iBAAiB,IAAI,wBAAA,mBAAkB;AAC5C,cAAI,CAAC,CAAC,KAAK,sBAAsB,QAAQ,iBAAA,YAAY,YAAY,GAAG;AAChE,iBAAK,eAAe,YAAY,gBAAA,WAAW,kBAAkB,KAAK,sBAAsB,QAAQ,iBAAA,YAAY,YAAY,CAAC;;AAG7H,iBAAO,KAAK,KAAK,sBAAsB,OAAO,EAAE,QAAQ,CAAC,WAAwB;AAC7E,iBAAK,eAAe,YAAY,QAAQ,KAAK,sBAAsB,QAAQ,MAAM,CAAC;UACtF,CAAC;QACL;;;;QAKA,IAAW,OAAI;AACX,iBAAO,KAAK,sBAAsB,QAAQ,OAAO,KAAK,KAAK,sBAAsB,OAAO,EAAE,KAAK,CAAC,QAAyB,IAAI,YAAW,MAAO,OAAO,YAAW,CAAE,CAAC;QACxK;;;;;QAMA,IAAW,gBAAa;AACpB,iBAAO,KAAK,sBAAsB,gBAAgB,aAAA,YAAY;QAClE;;;;;QAMA,IAAW,kBAAe;AACtB,iBAAO,KAAK,sBAAsB,gBAAgB,aAAA,YAAY;QAClE;;;;;;QAOA,IAAW,cAAW;AAClB,iBAAO,KAAK,sBAAsB;QACtC;;;;QAKA,IAAW,gBAAa;AACpB,iBAAO,KAAK,sBAAsB;QACtC;;;;;QAMA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;QAKO,WAAQ;AACX,iBAAO;QACX;;AArEJ,cAAA,wBAAA;;;;;;;;;;AC7DA,UAAA,eAAA;AAIA,UAAA,eAAA;AAQA,UAAA,yBAAA;AAGA,UAAA,iBAAA;AACA,UAAA,eAAA;AAsBA,UAAa,aAAb,MAAa,YAAU;;;;;;QAUZ,OAAO,eAAe,YAAgD;AACzE,gBAAM,WAAW,WAAW;AAC5B,gBAAM,MAAkB,IAAI,YAAU;AAEtC,cAAI,mBAAmB;AACvB,cAAI,YAAW;AACf,iBAAO;QACX;;;;;;QAOO,OAAO,gBAAgB,aAA8B;AACxD,gBAAM,YAAkC,YAAY;AAEpD,gBAAM,MAAkB,IAAI,YAAU;AAEtC,cAAI,mBAAmB;AACvB,cAAI,YAAW;AACf,iBAAO;QACX;;;;;;;;;QAUO,eAAe,IAAiB,KAA6B;AAChE,uBAAA,0BAA0B,KAAK,iBAAiB,QAAO,GAAI,IAAI,GAAG;QACtE;;;;;;;QAQO,gBAAgB,IAAiB,KAA6B;AACjE,cAAI,KAAK,4BAA4B,aAAA,sBAAsB;AACvD,kBAAM,IAAI,MAAM,qEAAqE;iBAClF;AACH,yBAAA,0BAA0B,KAAK,iBAAiB,WAAU,GAAI,IAAI,GAAG;;QAE7E;;;;;;;;QASO,mBAAmB,MAAc,cAAsB,eAA8B;AACxF,yBAAA,UAAU,wBAAwB,cAAc,cAAc;AAE9D,cAAI,KAAK,4BAA4B,aAAA,uBAAuB;AACxD,gBAAI,KAAK,YAAW,MAAO,kBAAkB;AACzC,oBAAM,IAAI,MAAM,kFAAkF;mBAC/F;AACH,mBAAK,iBAAiB,cAAc,WAAW,cAAc,aAAa;;qBAEvE,KAAK,4BAA4B,aAAA,sBAAsB;AAC9D,gBAAI,KAAK,YAAW,MAAO,qBAAqB;AAC5C,oBAAM,IAAI,MAAM,sFAAsF;mBACnG;AACH,mBAAK,iBAAiB,iBAAiB,WAAW,cAAc,aAAa;;;QAGzF;;;;;;;;;QAUO,iBAAiB,MAAc,SAA+B,SAAsB,OAA+B;AACtH,uBAAA,0BAA0B,KAAK,iBAAiB,mBAAmB,MAAM,OAAO,GAAG,SAAS,KAAK;QACrG;;;;QAgCO,QAAK;QAEZ;QAEQ,cAAW;AACf,eAAK,oBAAoB,KAAK,iBAAiB,iBAAiB,OAAO,CAAC,oBAA0C;AAC9G,gBAAI,gBAAgB,SAAS,8BAA8B;AACvD,kBAAI,CAAC,CAAC,KAAK,WAAW;AAClB,qBAAK,UAAU,IAAI,aAAA,oBAAoB,gBAAgB,YAAY,CAAC;;uBAEjE,gBAAgB,SAAS,yBAAyB;AACzD,kBAAI,CAAC,CAAC,KAAK,cAAc;AACrB,qBAAK,aAAa,IAAI,aAAA,oBAAoB,gBAAgB,YAAY,CAAC;;uBAEpE,gBAAgB,SAAS,8BAA8B;AAC9D,kBAAI,CAAC,CAAC,KAAK,aAAa;AACpB,qBAAK,YAAY,IAAI,aAAA,2BAA2B,IAAI,uBAAA,sBAAuB,gBAA+C,OAAO,CAAC,CAAC;;uBAEhI,gBAAgB,SAAS,kCAAkC;AAClE,kBAAI,CAAC,CAAC,KAAK,iBAAiB;AACxB,qBAAK,gBAAgB,IAAI,aAAA,2BAA2B,IAAI,uBAAA,sBAAuB,gBAAmD,OAAO,CAAC,CAAC;;;UAGvJ,CAAC;AAED,eAAK,2BAA2B,KAAK,iBAAiB,cAAc,OAAO,CAAC,MAAyB;AACjG,gBAAI,CAAC,CAAC,KAAK,wBAAwB;AAC/B,mBAAK,uBAAuB,IAAI,aAAA,iBAAiB,EAAE,YAAY,EAAE,IAAI,CAAC;;UAE9E,CAAC;QACL;;AA7JJ,cAAA,aAAA;;;;;;;;;;ACxCA,UAAA,eAAA;AAUA,UAAA,eAAA;AAEA,UAAA,kBAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AAiBA,UAAa,wBAAb,MAAa,+BAA8B,aAAA,WAAU;;;;;;;;QA0CjD,YAAmB,cAAuC,aAA2B,mBAAsC;AACvH,gBAAM,aAAa;AACnB,yBAAA,UAAU,YAAY,YAAY,cAAc;AAEhD,gBAAM,aAAa,WAAW,YAAY,qBAAqB,IAAI,aAAA,6BAA4B,CAAE;AAEjG,eAAK,oCAAoC;AAEzC,cAAI,KAAK,WAAW,YAAY,aAAA,WAAW,0CAA0C,MAAS,MAAM,QAAW;AAC3G,2BAAA,UAAU,wBACN,KAAK,WAAW,YAAY,aAAA,WAAW,wCAAwC,GAC/E,aAAA,WAAW,aAAA,WAAW,wCAAwC,CAAC;;AAGvE,yBAAA,UAAU,wBACN,KAAK,WAAW,YAAY,aAAA,WAAW,8CAA8C,GACrF,aAAA,WAAW,aAAA,WAAW,8CAA8C,CAAC;AAEzE,yBAAA,UAAU,wBAAwB,KAAK,WAAW,YAC9C,aAAA,WAAW,oCAAoC,GAC/C,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;QAEnE;;;;;;;;QASO,OAAO,WAAW,yBAAkD,gCAAgE,aAAyB;AAChK,gBAAM,8BAA2D;AACjE,yCAA+B,WAAW,QAAQ,4BAA4B,UAAU;AACxF,iBAAO,IAAI,uBAAsB,yBAAyB,WAAW;QACzE;;;;;;;;QASA,IAAW,4BAAyB;AAChC,yBAAA,UAAU,gBAAgB,KAAK,iCAAiC;AAEhE,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC;QACtF;;;;;;;;;QAUA,IAAW,kBAAe;AACtB,yBAAA,UAAU,gBAAgB,KAAK,iCAAiC;AAEhE,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,8CAA8C,EAAE,MAAM,GAAG;QAC3G;;;;;;;;QASA,IAAW,YAAS;AAChB,yBAAA,UAAU,gBAAgB,KAAK,iCAAiC;AAEhE,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,0CAA0C,MAAS;QACrG;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;;;;;;QAcO,mBAAmB,IAAgD,KAAyB;AAC/F,yBAAA,UAAU,gBAAgB,KAAK,iCAAiC;AAChE,uBAAA,0BAA0B,KAAK,uBAAuB,aAAA,gBAAgB,WAAW,GAAG,IAAI,GAAG;QAC/F;;;;;;;;;;QAWO,gCAAgC,IAAiB,KAAyB;AAC7E,uBAAA,0BAA0B,KAAK,oCAAoC,aAAA,gBAAgB,YAAY,GAAG,IAAI,GAAG;QAC7G;;;;;;;;;QAUO,+BAA+B,IAAiB,KAAyB;AAC5E,uBAAA,0BAA0B,KAAK,mCAAkC,GAAI,IAAI,GAAG;QAChF;;;;;;;;;QAUO,qBAAqB,MAAY;AACpC,yBAAA,UAAU,uBAAuB,MAAM,wBAAwB;AAC/D,cAAI,KAAK,WAAW,YAAY,aAAA,WAAW,gDAAgD,MAAS,MAAM,QAAW;AACjH,kBAAM,YAAsB,KAAK,WAAW,YAAY,aAAA,WAAW,8CAA8C,EAAE,MAAM,GAAG;AAC5H,kBAAM,QAAgB,UAAU,QAAQ,IAAI;AAC5C,gBAAI,QAAQ,IAAI;AACZ,wBAAU,OAAO,OAAO,CAAC;AACzB,mBAAK,WAAW,YAAY,aAAA,WAAW,gDAAgD,UAAU,KAAK,GAAG,CAAC;AAC1G,mBAAK,gBAAgB,SAAS;;;QAG1C;;;;;;;;;QAUO,kBAAkB,MAAY;AACjC,yBAAA,UAAU,uBAAuB,MAAM,sBAAsB;AAC7D,cAAI,YAAsB,CAAA;AAC1B,cAAI,KAAK,WAAW,YAAY,aAAA,WAAW,gDAAgD,MAAS,MAAM,QAAW;AACjH,wBAAY,KAAK,WAAW,YAAY,aAAA,WAAW,8CAA8C,EAAE,MAAM,GAAG;AAC5G,gBAAI,CAAC,UAAU,SAAS,IAAI,GAAG;AAC3B,wBAAU,KAAK,IAAI;AACnB,mBAAK,WAAW,YAAY,aAAA,WAAW,gDAAgD,UAAU,KAAK,GAAG,CAAC;;iBAE3G;AACH,iBAAK,WAAW,YAAY,aAAA,WAAW,gDAAgD,IAAI;AAC3F,wBAAY,CAAC,IAAI;;AAErB,eAAK,gBAAgB,SAAS;QAClC;;;;;;;QAQO,MAAM,IAAiB,SAAiC;AAC3D,yBAAA,UAAU,gBAAgB,KAAK,iCAAiC;AAChE,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,OAAO;QAC7D;;;;;;;;QASO,eAAY;QAAW;QAEpB,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,mCAAmC;AACxC;;AAGJ,eAAK,oCAAoC;AAEzC,cAAI,WAAW;AACX,kBAAM,KAAK,mBAAkB;AAC7B,kBAAM,MAAM,QAAQ,SAAS;;QAErC;QAGU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,cAAc;QACjE;QAEU,wBACN,gBACA,mBACA,aACA,kBAAkC;AAElC,gBAAM,aAA8B;AAEpC,iBAAO,IAAI,aAAA,6BAA6B,gBAAgB,mBAAmB,YAAY,kBAAkB,IAAI;QACjH;QAEQ,gBAAgB,WAAmB;AACvC,gBAAM,OAAmB,gBAAA,WAAW,eAAe,IAAI;AACvD,cAAI,CAAC,CAAC,MAAM;AACR,iBAAK,mBAAmB,kBAAkB,sBAAsB,EAAC,IAAI,UAAS,CAAC;AAC/E,iBAAK,iBAAiB,SAAS,KAAK,UAAU;cAC1C,IAAI;cACJ,MAAM;cACN,IAAI;aACH,CAAC;;QAEd;;AA1SJ,cAAA,wBAAA;;;;;;;;;;AC/BA,UAAA,eAAA;AAMA,UAAa,eAAb,MAAyB;QAAzB,cAAA;AAEY,eAAA,UAA8B,IAAI,aAAA,mBAAkB;QAuChE;;;;;;;;QA9BI,IAAW,YAAS;AAChB,iBAAO,KAAK,QAAQ;QACxB;;;;;;;;;;;;QAaO,IAAI,KAAa,KAAY;AAChC,iBAAO,KAAK,QAAQ,YAAY,KAAK,GAAG;QAC5C;;;;;;;;;QAUO,IAAI,KAAa,OAAa;AACjC,eAAK,QAAQ,YAAY,KAAK,KAAK;QACvC;;AAxCJ,cAAA,eAAA;;;;;;;;;;ACFA,UAAY;AAAZ,OAAA,SAAYC,gBAAa;AAMrB,QAAAA,eAAAA,eAAA,eAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,eAAAA,eAAA,uBAAA,IAAA,CAAA,IAAA;AAOA,QAAAA,eAAAA,eAAA,sBAAA,IAAA,CAAA,IAAA;MACJ,GArBY,gBAAA,QAAA,kBAAA,QAAA,gBAAa,CAAA,EAAA;;;;;;;;;;ACJzB,UAAA,eAAA;AACA,UAAA,eAAA;AAMA,UAAa,iBAAb,MAAa,gBAAc;;;;;;QAQvB,YAAoB,QAAqB;AACrC,eAAK,aAAa;QACtB;;;;;;;;;;QAWO,OAAO,WAAW,QAAwF;AAC7G,gBAAM,eAAmC,aAAA,mBAAmB,SAAS,OAAO,IAAI;AAEhF,cAAI,SAAwB,aAAA,cAAc;AAE1C,kBAAQ,aAAa,mBAAmB;YACpC,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,cAAc;AACvB;YACJ,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,cAAc;AACvB;YACJ;AACI,uBAAS,aAAA,cAAc;AACvB;;AAGR,iBAAO,IAAI,gBAAe,MAAM;QACpC;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AAlDJ,cAAA,iBAAA;;;;;;;;;;ACDA,UAAa,0CAAb,MAAoD;;;;;;;;;QAehD,YACI,WACA,oBACA,cACA,WACA,QAAoC;AACpC,eAAK,mBAAmB;AACxB,eAAK,mBAAmB;AACxB,eAAK,aAAa;AAClB,eAAK,gBAAgB;AACrB,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;QAOA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AA/EJ,cAAA,0CAAA;;;;;;;;;;ACLA,UAAA,eAAA;AAMA,UAAa,qCAAb,cAAwD,aAAA,2BAA0B;;;;;;;;QAY9E,YACI,QACA,cACA,WACA,QACA,QACA,WAAkB;AAClB,gBAAM,QAAQ,QAAQ,SAAS;AAE/B,eAAK,aAAa;AAClB,eAAK,mBAAmB;AACxB,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;QAOA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AAvDJ,cAAA,qCAAA;;;;;;;;;;ACEA,UAAa,0BAAb,MAAoC;;;;;;;QAWhC,YAAsB,QAA4B,cAAsB,WAAgC;AACpG,eAAK,aAAa;AAClB,eAAK,mBAAmB;AACxB,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;;;;;QAOA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AA9CJ,cAAA,0BAAA;;;;;;;;;;ACTA,UAAA,eAAA;AACA,UAAA,+BAAA;AACA,UAAA,eAAA;AAWA,UAAa,sBAAb,MAAa,6BAA4B,6BAAA,wBAAuB;QAE5D,YAAoB,QAA4B,cAAsB,WAAgC;AAClG,gBAAM,QAAQ,cAAc,SAAS;QACzC;;;;;;;;;QAUO,OAAO,WAAW,QAAiD;AACtE,cAAI,SAAS,aAAA,mBAAmB;AAChC,cAAI,YAAmC,aAAA,sBAAsB;AAE7D,cAAI,kBAAkB,aAAA,qBAAqB,CAAC,CAAC,OAAO,MAAM;AACtD,kBAAM,eAAmC,aAAA,mBAAmB,SAAS,OAAO,IAAI;AAChF,qBAAS,aAAA,gBAAgB,0BAA0B,aAAa,iBAAiB;;AAGrF,cAAI,CAAC,CAAC,OAAO,YAAY;AACrB,wBAAY,aAAA,sBAAsB,OAAO,WAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,aAAA,sBAAsB,OAAO,CAAC,CAAuC;;AAGlM,iBAAO,IAAI,qBAAoB,QAAQ,OAAO,gBAAgB,aAAA,gBAAgB,0BAA0B,SAAS,GAAG,SAAS;QACjI;;AA5BJ,cAAA,sBAAA;;;;;;;;;;ACTA,UAAY;AAAZ,OAAA,SAAYC,wBAAqB;AAI7B,QAAAA,uBAAAA,uBAAA,SAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,uBAAAA,uBAAA,uBAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,uBAAAA,uBAAA,sBAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,uBAAAA,uBAAA,iBAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,uBAAAA,uBAAA,mBAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,uBAAAA,uBAAA,gBAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,uBAAAA,uBAAA,cAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,uBAAAA,uBAAA,cAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,uBAAAA,uBAAA,WAAA,IAAA,CAAA,IAAA;MACJ,GA9CY,wBAAA,QAAA,0BAAA,QAAA,wBAAqB,CAAA,EAAA;;;;;;;;;;ACFjC,UAAA,eAAA;AAMA,UAAa,sBAAb,cAAyC,aAAA,iBAAgB;;AAAzD,cAAA,sBAAA;;;;;;;;;;ACNA,UAAA,eAAA;AAOA,UAAa,mBAAb,cAAsC,aAAA,iBAAgB;;;;;;QASlD,YAAmB,MAAe,MAAc,WAAkB;AAC9D,gBAAM,SAAS;AACf,eAAK,iBAAiB;AACtB,eAAK,gBAAgB;QACzB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AArBJ,cAAA,mBAAA;;;;;;;;;;ACOA,UAAa,oBAAb,MAAa,mBAAiB;QAG1B,YAAoB,WAAgC;AAChD,eAAK,qBAAqB,UAAU;QACxC;;;;;QAMO,OAAO,eAAe,YAAqE;AAC9F,gBAAM,WAAW,WAAW;AAC5B,iBAAO,IAAI,mBAAkB,QAAQ;QACzC;;;;;QAMO,UAAU,QAAc;AAC3B,eAAK,mBAAmB,UAAU,MAAM;QAC5C;;;;;QAMO,WAAW,SAAiB;AAC/B,eAAK,mBAAmB,UAAU,OAAO;QAC7C;;;;QAKO,QAAK;AACR,eAAK,mBAAmB,aAAY;QACxC;;AArCJ,cAAA,oBAAA;;;;;;;;;;ACfA,UAAA,iBAAA;AACA,UAAA,eAAA;AAOA,UAAsB,sBAAtB,MAAyC;;;;;QAMrC,cAAA;AACI;QACJ;;;;;;;;;QA+EA,IAAW,cAAc,OAAa;QAAI;QAEnC,WAAW,cAAW;AACzB,iBAAO;YACH,cAAc;YACd,gBAAgB;;QAExB;;AA9FJ,cAAA,sBAAA;AAqGA,UAAa,0BAAb,cAA6C,oBAAmB;;;;QAO5D,cAAA;AACI,gBAAK;AACL,eAAK,mBAAmB,IAAI,aAAA,iBAAgB;QAChD;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK,iBAAiB;QACjC;;;;;;;QAQA,IAAW,4BAAyB;AAChC,iBAAO,KAAK,iBAAiB;QACjC;;;;;;;;QASA,IAAW,0BAA0B,OAAa;AAC9C,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,iBAAiB,4BAA4B;QACtD;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,aAAa,OAAmB;AACvC,eAAK,iBAAiB,eAAe;QACzC;;;;;;;;;QAUO,YAAY,MAA2B,OAAa;AACvD,eAAK,iBAAiB,YAAY,MAAM,KAAK;QACjD;;;;;;;;;;QAWO,YAAY,MAA2B,KAAY;AAEtD,iBAAO,KAAK,iBAAiB,YAAY,IAAI;QACjD;;;;;;;;;;QAWO,SAAS,eAAuB,WAAmB,eAAwB,eAAsB;AACpG,eAAK,YAAY,aAAA,WAAW,uCAAuC,aAAa;AAChF,eAAK,YAAY,aAAA,WAAW,mCAAmC,GAAG,SAAS,EAAE;AAC7E,cAAI,eAAe;AACf,iBAAK,YAAY,aAAA,WAAW,uCAAuC,aAAa;;AAEpF,cAAI,eAAe;AACf,iBAAK,YAAY,aAAA,WAAW,uCAAuC,aAAa;;QAExF;QAEO,mBAAmB,MAAc,OAAe,SAA+B;AAElF,eAAK,iBAAiB,mBAAmB,MAAM,KAAK;QACxD;;;;;;;QAQO,QAAK;AACR;QACJ;;AAhHJ,cAAA,0BAAA;;;;;;;;;;AC9GA,UAAA,iBAAA;AACA,UAAA,2BAAA;AACA,UAAA,eAAA;AAMA,UAAa,qBAAb,cAAwC,yBAAA,wBAAuB;;;;QAK3D,cAAA;AACI,gBAAK;QACT;;;;;;;;;;;;QAaO,OAAO,iBAAiB,cAAsB,QAAgB,OAAc;AAC/E,yBAAA,UAAU,wBAAwB,cAAc,cAAc;AAC9D,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,qBAAyC,IAAI,yBAAA,wBAAuB;AAC1E,6BAAmB,YACf,aAAA,WAAW,yBACX,yBAAA,oBAAoB,YAAY,YAAY;AAChD,6BAAmB,YAAY,aAAA,WAAW,6BAA6B,YAAY;AACnF,6BAAmB,YAAY,aAAA,WAAW,gCAAgC,MAAM;AAEhF,cAAI,OAAO;AACP,+BAAmB,YAAY,aAAA,WAAW,4BAA4B,KAAK;;AAG/E,iBAAO;QACX;;;;;;;;;;;;;;;;;;;QAoBO,OAAO,uBACV,oBAA4B,QAAgB,OAAc;AAE1D,yBAAA,UAAU,wBAAwB,oBAAoB,oBAAoB;AAC1E,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,qBAAyC,IAAI,yBAAA,wBAAuB;AAC1E,6BAAmB,YACf,aAAA,WAAW,yBACX,yBAAA,oBAAoB,YAAY,YAAY;AAChD,6BAAmB,YAAY,aAAA,WAAW,kCAAkC,kBAAkB;AAC9F,6BAAmB,YAAY,aAAA,WAAW,gCAAgC,MAAM;AAEhF,cAAI,OAAO;AACP,+BAAmB,YAAY,aAAA,WAAW,4BAA4B,KAAK;;AAG/E,iBAAO;QACX;;;;;;;;;;;;;;;;;;;;;QAsBO,OAAO,SACV,MACA,iBACA,OAAc;AAGd,yBAAA,UAAU,uBAAuB,MAAM,MAAM;AAC7C,gBAAM,eAAoB,gBAAgB,MAAM,OAAO,IAAI,IAAI,SAAS,IAAI,yBAAyB;AACrG,yBAAA,UAAU,uBAAuB,cAAc,cAAc;AAE7D,gBAAM,qBAAyC,IAAI,yBAAA,wBAAuB;AAC1E,6BAAmB,YACf,aAAA,WAAW,yBACX,yBAAA,oBAAoB,YAAY,YAAY;AAChD,6BAAmB,YAAY,aAAA,WAAW,8BAA8B,aAAa,SAAQ,CAAE;AAE/F,cAAI,WAAc,iBAAiB;AAC/B,+BAAmB,YAAY,aAAA,WAAW,6BAA6B,eAAe;;AAG1F,iBAAO;QACX;;;;;;;;;;;;;;;;;QAkBO,OAAO,aAAa,UAAe,iBAAwB;AAC9D,yBAAA,UAAU,YAAY,UAAU,UAAU;AAE1C,gBAAM,qBAAyC,IAAI,yBAAA,wBAAuB;AAC1E,6BAAmB,YACf,aAAA,WAAW,yBACX,yBAAA,oBAAoB,YAAY,YAAY;AAChD,6BAAmB,YAAY,aAAA,WAAW,kCAAkC,SAAS,SAAQ,CAAE;AAE/F,cAAI,WAAc,iBAAiB;AAC/B,+BAAmB,YAAY,aAAA,WAAW,6BAA6B,eAAe;;AAG1F,iBAAO;QACX;;AArJJ,cAAA,qBAAA;;;;;;;;;;ACRA,UAAA,iBAAA;AACA,UAAA,2BAAA;AACA,UAAA,eAAA;AAMA,UAAa,uBAAb,cAA0C,yBAAA,wBAAuB;;;;QAK7D,cAAA;AACI,gBAAK;QACT;;;;;;;;;;;QAYO,OAAO,iBAAiB,eAAuB,cAAsB,QAAc;AACtF,yBAAA,UAAU,wBAAwB,eAAe,eAAe;AAChE,yBAAA,UAAU,wBAAwB,cAAc,cAAc;AAC9D,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,uBAA6C,IAAI,yBAAA,wBAAuB;AAC9E,+BAAqB,YAAY,aAAA,WAAW,yBAAyB,yBAAA,oBAAoB,YAAY,cAAc;AACnH,+BAAqB,YAAY,aAAA,WAAW,4BAA4B,aAAa;AACrF,+BAAqB,YAAY,aAAA,WAAW,6BAA6B,YAAY;AACrF,+BAAqB,YAAY,aAAA,WAAW,gCAAgC,MAAM;AAClF,iBAAO;QACX;;;;;;;;;;;;;;;;QAiBO,OAAO,uBAAuB,eAAuB,oBAA4B,QAAc;AAClG,yBAAA,UAAU,wBAAwB,eAAe,eAAe;AAChE,yBAAA,UAAU,wBAAwB,oBAAoB,oBAAoB;AAC1E,yBAAA,UAAU,wBAAwB,QAAQ,QAAQ;AAElD,gBAAM,uBAA6C,IAAI,yBAAA,wBAAuB;AAC9E,+BAAqB,YAAY,aAAA,WAAW,yBAAyB,yBAAA,oBAAoB,YAAY,cAAc;AACnH,+BAAqB,YAAY,aAAA,WAAW,4BAA4B,aAAa;AACrF,+BAAqB,YAAY,aAAA,WAAW,kCAAkC,kBAAkB;AAChG,+BAAqB,YAAY,aAAA,WAAW,gCAAgC,MAAM;AAClF,iBAAO;QACX;;;;;;;;QASA,IAAW,cAAc,OAAa;AAClC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,YAAY,aAAA,WAAW,4BAA4B,KAAK;QACjE;;;;;;;;QASA,IAAW,gBAAa;AACpB,iBAAO,KAAK,YAAY,aAAA,WAAW,0BAA0B;QACjE;;AAjFJ,cAAA,uBAAA;;;;;;;;;;ACRA,UAAa,sBAAb,MAAgC;;AAAhC,cAAA,sBAAA;AACkB,0BAAA,QAAgB;AAChB,0BAAA,2BAAmC;AACnC,0BAAA,0BAAkC;AAClC,0BAAA,qBAA6B;AAC7B,0BAAA,mBAA2B;AAC3B,0BAAA,4BAAoC;AACpC,0BAAA,sBAA8B;AAC9B,0BAAA,+BAAuC;AACvC,0BAAA,SAAiB;AACjB,0BAAA,0BAAkC;AAClC,0BAAA,WAAmB;AACnB,0BAAA,YAAoB;AACpB,0BAAA,2BAAmC;AACnC,0BAAA,8BAAsC;AACtC,0BAAA,oBAA4B;AAC5B,0BAAA,YAAoB;AACpB,0BAAA,iBAAyB;AACzB,0BAAA,eAAuB;AACvB,0BAAA,cAAsB;AACtB,0BAAA,mBAA2B;AAC3B,0BAAA,eAAuB;;;;;;;;;;ACrBzC,UAAA,eAAA;AAIA,UAAA,eAAA;AAEA,UAAA,2BAAA;AAEA,UAAsB,wBAAtB,MAA2C;QAEhC,OAAO,cAAc,QAAc;AACtC,cAAI,CAAC,CAAC,QAAQ;AACV,gBAAI,OAAO,YAAW,EAAG,WAAW,OAAO,GAAG;AAC1C,qBAAO;;AAEX,gBAAI,OAAO,YAAW,EAAG,WAAW,OAAO,GAAG;AAC1C,qBAAO;;;AAGf,iBAAO;QACX;QAOU,mBACN,QACA,aACA,UAAgB;AAEhB,gBAAM,2BAAgD,oBAAI,IAAI;YAC1D,CAAC,aAAA,WAAW,qCAAqC,yBAAA,oBAAoB,4BAA4B;YACjG,CAAC,aAAA,WAAW,4CAA4C,yBAAA,oBAAoB,kBAAkB;YAC9F,CAAC,aAAA,WAAW,6CAA6C,yBAAA,oBAAoB,mBAAmB;YAChG,CAAC,aAAA,WAAW,iDAAiD,yBAAA,oBAAoB,uBAAuB;YACxG,CAAC,aAAA,WAAW,4CAA4C,yBAAA,oBAAoB,cAAc;YAC1F,CAAC,aAAA,WAAW,uCAAuC,yBAAA,oBAAoB,SAAS;YAChF,CAAC,aAAA,WAAW,kDAAkD,yBAAA,oBAAoB,yBAAyB;YAC3G,CAAC,aAAA,WAAW,oDAAoD,yBAAA,oBAAoB,2BAA2B;WAClH;AAED,mCAAyB,QAAQ,CAAC,eAAuB,eAAgC;AACrF,iBAAK,gBAAgB,YAAY,eAAe,QAAQ,aAAa,QAAQ;UACjF,CAAC;AAGD,gBAAM,oBAA+C,KAAK,MAAM,OAAO,WAAW,YAAY,aAAA,+BAA+B,IAAI,CAAC;AAElI,iBAAO,KAAK,iBAAiB,EAAE,QAAQ,CAAC,UAAuB;AAC3D,wBAAY,KAAK,IAAI,kBAAkB,KAAK;UAChD,CAAC;QACL;QAEU,gBACN,QACA,eACA,QACA,aACA,UAAgB;AAEhB,gBAAM,QAAgB,OAAO,WAAW,YAAY,QAAQ,MAAS;AAIrE,cAAI,UAAU,CAAC,YAAY,SAAS,OAAO,aAAa,MAAM,KAAK;AAC/D,wBAAY,aAAa,IAAI,MAAM,kBAAiB;;QAE5D;;AA7DJ,cAAA,wBAAA;;;;;;;;;;ACPA,UAAA,eAAA;AAIA,UAAA,eAAA;AAEA,UAAA,eAAA;AACA,UAAA,6BAAA;AACA,UAAA,eAAA;AACA,UAAA,mBAAA;AACA,UAAA,2BAAA;AAEA,UAAa,0BAAb,MAAa,iCAAgC,2BAAA,sBAAqB;QAKvD,OACH,QACA,UACA,cAAqB;AAErB,gBAAM,gBAAwB,OAAO,WAAW,YAAY,aAAA,WAAW,4BAA4B,EAAE;AACrG,gBAAM,aAAqB,OAAO,WAAW,YAAY,aAAA,WAAW,uBAAuB;AAC3F,gBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B;AAC9F,gBAAM,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,sCAAsC,OAAO;AAC/G,gBAAM,oBAA4B,OAAO,WAAW,YAAY,aAAA,WAAW,0CAA0C,MAAM;AAE3H,gBAAM,cAAyC,CAAA;AAC/C,sBAAY,iBAAA,YAAY,YAAY,IAAI;AACxC,sBAAY,yBAAA,oBAAoB,MAAM,IAAI,OAAO,WAAW,YAAY,aAAA,0BAA0B,aAAA,aAAa,aAAA,aAAa,MAAM,CAAC,EAAE,YAAW;AAChJ,sBAAY,yBAAA,oBAAoB,QAAQ,IAAI;AAC5C,sBAAY,yBAAA,oBAAoB,wBAAwB,IAAI;AAC5D,cAAI,eAAe;AACf,wBAAY,yBAAA,oBAAoB,KAAK,IAAI;AACzC,gBAAI,eAAe,aAAA,oBAAoB,YAAY,gBAAgB;AAC/D,0BAAY,iBAAA,YAAY,mBAAmB,IAAI;;;AAIvD,gBAAM,gBACF,eAAe,aAAA,oBAAoB,YAAY,iBAAiB,cAC9D;AACN,gBAAM,UACF,eAAe,aAAA,oBAAoB,YAAY,iBAAiB,OAC9D,eAAe,aAAA,oBAAoB,YAAY,eAAe,OAC9D;AAEN,gBAAM,UAAqC,CAAA;AAE3C,cAAI,SAAS,SAAS,QAAQ,SAAS,UAAU,IAAI;AACjD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAO5C,cAAI,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,kCAAkC,EAAE;AACpG,cAAI,CAAC,UAAU;AACX,kBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,kBAAM,OAAe,OAAO,WAAW,YACnC,aAAA,WAAW,8BACX,SAAS,MAAM,IAAI,yBAAwB,OAAO,GAAG,UAAU,EAAE;AACrE,kBAAM,mBAA2B,KAAK,SAAS,GAAG,IAAI,OAAO,OAAO;AACpE,uBAAW,GAAG,gBAAgB,GAAG,aAAa,GAAG,yBAAwB,MAAM,IAAI,OAAO;;AAG9F,eAAK,mBAAmB,QAAQ,aAAa,QAAQ;AAErD,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AACnH,iBAAO,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;QAC3K;;AA5DJ,cAAA,0BAAA;AAE4B,8BAAA,SAAiB;AACjB,8BAAA,UAAkB;;;;;;;;;;AChB9C,UAAA,8BAAA;AACA,UAAA,eAAA;AAUA,UAAA,eAAA;AAMA,UAAA,iBAAA;AAEA,UAAA,eAAA;AAQA,UAAA,kBAAA;AAOA,UAAa,yBAAb,cAA4C,aAAA,WAAU;;;;;;;QAUlD,YAAmB,cAAmC,aAAyB;AAC3E,gBAAM,0BAA0B;AAChC,yBAAA,UAAU,YAAY,cAAc,cAAc;AAElD,gBAAM,aAAa,wBAAwB,YAAY,IAAI,4BAAA,wBAAuB,CAAE;AAEpF,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB,wBAAwB,WAAW,MAAK;AAE9D,gBAAM,cAAc,KAAK,iBAAgB;AACzC,eAAK,SAAS,YAAY,IAAI,WAAW;QAC7C;;;;;;;;;;;QAuDO,QAAQ,IAAiB,KAA6B;AACzD,uBAAA,0BAA0B,KAAK,SAAS,QAAO,GAAI,IAAI,GAAG;QAC9D;;;;;;;QAQO,WAAW,IAAiB,KAA6B;AAC5D,uBAAA,0BAA0B,KAAK,SAAS,WAAU,GAAI,IAAI,GAAG;QACjE;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,gBAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,gBAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;QAMA,IAAW,yBAAsB;AAC7B,iBAAO,KAAK,WAAW,YAAY,gBAAA,WAAW,qCAAqC;QACvF;;;;;;QAOA,IAAW,uBAAuB,wBAA8B;AAC5D,eAAK,WAAW,YAAY,gBAAA,WAAW,uCAAuC,sBAAsB;QACxG;;;;;;;;;QAUO,gBAAgB,IAA2C,KAAyB;AACvF,cAAI,KAAK,gBAAgB;AACrB,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,kBAAM,iBAAiB,YAA6C;AAChE,oBAAM,KAAK,SAAS,QAAO;AAC3B,oBAAM,KAAK,mBAAkB;AAC7B,mBAAK,iBAAiB;AAEtB,oBAAM,MAAyC,IAAI,aAAA,SAAQ;AAC3D,oBAAM,KAAK,SAAS,UAAU,aAAA,gBAAgB,cAAc,IAAI,SAAS,IAAI,MAAM;AAEnF,oBAAM,IAA6B,MAAM,IAAI;AAC7C,oBAAM,KAAK,mBAAkB;AAE7B,qBAAO;YACX;AAEA,kBAAM,aAA+C,eAAc;AAEnE,uBAAW,MAAM,MAAW;AAIxB,mBAAK,QAAQ,IAAI,EAAE,MAAM,MAAW;cAAG,CAAC;YAC5C,CAAC;AAED,yBAAA,0BAA0B,WAAW,QAAQ,MAAW;AACpD,mBAAK,iBAAiB;YAC1B,CAAC,GAAG,IAAI,GAAG;;QAEnB;QAEO,kBAAkB,UAAkB,IAAiB,OAA+B;AACvF,uBAAA,0BAA2B,KAAK,SAAkC,YAAY,QAAQ,GAAG,IAAI,KAAK;QACtG;;;;;;;QAQO,MAAM,IAAiB,KAA6B;AACvD,yBAAA,UAAU,gBAAgB,KAAK,cAAc;AAE7C,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,GAAG;QACzD;QAEU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,gBAAgB;AACrB;;AAGJ,cAAI,WAAW;AACX,iBAAK,iBAAiB;AACtB,kBAAM,KAAK,mBAAkB;AAC7B,kBAAM,MAAM,QAAQ,SAAS;;QAErC;QAEU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,cAAc;QACjE;QAEU,wBACN,gBACA,mBACA,aACA,kBAAkC;AAElC,gBAAM,cAA+B;AAErC,iBAAO,IAAI,aAAA,qBAAqB,gBAAgB,mBAAmB,aAAa,kBAAkB,IAAI;QAC1G;QAEQ,mBAAgB;AACpB,gBAAM,oBAAoB,KAAK,WAAW,YAAY,mCAAmC,SAAS;AAElG,iBAAO;YACH,SAAS;cACL,UAAU;cACV,iBAAiB;cACjB,cAAc,KAAK,WAAW,YAAY,gBAAA,WAAW,gCAAgC;cACrF,gBAAgB,KAAK,WAAW,YAAY,gBAAA,WAAW,8BAA8B,MAAS;cAC9F,QAAQ,KAAK,WAAW,YAAY,gBAAA,WAAW,sBAAsB,MAAS;cAC9E,gBAAgB,KAAK,WAAW,YAAY,gBAAA,WAAW,2CAA2C,MAAS;;YAE/G,SAAS;;QAEjB;;AA/OJ,cAAA,yBAAA;;;;;;;;;;AClBA,UAAa,4BAAb,MAAsC;;;;;;QASlC,YAAmB,UAAe,aAAmC;AACjE,eAAK,eAAe;AACpB,eAAK,kBAAkB;QAC3B;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AA3BJ,cAAA,4BAAA;;;;;;;;;;ACVA,UAAa,4BAAb,MAAa,2BAAyB;QAGlC,YAAoB,MAAY;AAC5B,eAAK,4BAA4B,KAAK,MAAM,IAAI;QACpD;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,2BAA0B,IAAI;QAC7C;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK,0BAA0B;QAC1C;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK,0BAA0B;QAC1C;QAEA,IAAW,aAAU;AAGjB,kBAAQ,KAAK,0BAA0B,YAAY;YAC/C,KAAK;AACD,qBAAO;YACX,KAAK;AACD,qBAAO;YACX,KAAK;AACD,qBAAO;YACX;AAEI,qBAAO,KAAK,0BAA0B;;QAElD;;AAjCJ,cAAA,4BAAA;;;;;;;;;;ACNA,UAAA,yBAAA;AASA,UAAa,8BAAb,MAAwC;;;;;;QAQpC,YAAmB,YAAkB;AACjC,eAAK,iBAAiB,uBAAA,0BAA0B,SAAS,UAAU;QACvE;;;;;;;;QASA,IAAW,gBAAa;AACpB,iBAAO,KAAK,eAAe;QAC/B;;;;;;;;QASA,IAAW,iBAAc;AACrB,iBAAO,KAAK,eAAe;QAC/B;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK,eAAe;QAC/B;;AA3CJ,cAAA,8BAAA;;;;;;;;;;ACLA,UAAY;AAAZ,OAAA,SAAYC,yBAAsB;AAI9B,QAAAA,wBAAAA,wBAAA,mBAAA,IAAA,CAAA,IAAA;MACJ,GALY,yBAAA,QAAA,2BAAA,QAAA,yBAAsB,CAAA,EAAA;;;;;;;;;;ACAlC,UAAY;AAAZ,OAAA,SAAYC,kBAAe;AACvB,QAAAA,iBAAAA,iBAAA,QAAA,IAAA,CAAA,IAAA;AACA,QAAAA,iBAAAA,iBAAA,SAAA,IAAA,CAAA,IAAA;AACA,QAAAA,iBAAAA,iBAAA,KAAA,IAAA,CAAA,IAAA;MACJ,GAJY,kBAAA,QAAA,oBAAA,QAAA,kBAAe,CAAA,EAAA;;;;;;;;;;ACJ3B,UAAA,aAAA;AACA,UAAA,eAAA;AACA,UAAA,yBAAA;AAQA,UAAa,kBAAb,MAA4B;;;;;;QAcxB,YAAmB,aAA+B;AAZ1C,eAAA,eAA6B;AAC7B,eAAA,WAAqB;AAErB,eAAA,wBAA6B;AAUjC,cAAI,gBAAgB,QAAW;AAC3B,0BAAc,aAAA,kBAAkB,sBAAqB;;AAEzD,eAAK,KAAK,WAAW;QACzB;;;;;QAMO,gBAAgB,cAA2B,IAAiB,KAA6B;AAC5F,cAAI;AACA,iBAAK,yBAAwB;AAC7B,kBAAM,YAAY,KAAK,gBAAgB,YAAY;AACnD,kBAAM,iBAAiB,IAAI,aAAa,KAAK,QAAQ,SAAS,UAAU,MAAM;AAC9E,2BAAe,IAAI,KAAK,SAAS,CAAC;AAClC,2BAAe,IAAI,WAAW,KAAK,QAAQ,MAAM;AACjD,iBAAK,UAAU;AACf,gBAAI,CAAC,CAAC,IAAI;AACN,iBAAE;;mBAED,GAAG;AACR,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI,CAAW;;;QAG3B;;;;QAKO,UAAU,IAAiB,KAA6B;AAC3D,cAAI,KAAK,iBAAiB,MAAM;AAC5B,iBAAK,UAAU,IAAI,aAAY;AAE/B,0BAAc,KAAK,qBAAqB;AACxC,iBAAK,aAAa,MAAK,EAAG,KAAK,MAAW;AACtC,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAE;;YAEV,GAAG,CAAC,UAAuB;AACvB,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,KAAK;;YAEjB,CAAC;AACD,iBAAK,eAAe;;QAE5B;QAEQ,KAAK,aAA8B;AACvC,eAAK,cAAc;AACnB,eAAK,UAAU,IAAI,aAAY;QACnC;QAEQ,2BAAwB;AAC5B,cAAI,KAAK,iBAAiB,MAAM;AAC5B,iBAAK,mBAAkB;AACvB,kBAAM,cAAc;AACpB,iBAAK,wBAAwB,YAAY,MAAW;AAChD,mBAAK,kBAAiB;YAC1B,GAAG,WAAW;;QAEtB;QAEQ,qBAAkB;AAEtB,eAAK,eAAe,uBAAA,sBAAsB,gBAAe;AAIzD,eAAK,WAAW,KAAK,aAAa,WAAU;AAC5C,eAAK,SAAS,KAAK,QAAQ;AAC3B,eAAK,SAAS,QAAQ,KAAK,aAAa,WAAW;AACnD,eAAK,YAAY,KAAK,aAAa;QACvC;QAEQ,gBAAgB,WAAsB;AAC1C,kBAAQ,KAAK,YAAY,eAAe;YACpC,KAAK;AACD,qBAAO,KAAK,kBAAkB,IAAI,UAAU,SAAS,GAAG,GAAG;YAC/D,KAAK;AACD,qBAAO,KAAK,kBAAkB,IAAI,WAAW,SAAS,GAAG,KAAK;YAClE,KAAK;AACD,qBAAO,KAAK,kBAAkB,IAAI,WAAW,SAAS,GAAG,UAAU;YACvE;AACI,oBAAM,IAAI,WAAA,sBAAsB,kEAAkE;;QAE9G;QAEQ,kBAAkB,WAAgCC,WAAgB;AACtE,gBAAM,cAAc,IAAI,aAAa,UAAU,MAAM;AACrD,mBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,wBAAY,CAAC,IAAI,UAAU,CAAC,IAAIA;;AAEpC,iBAAO;QACX;QAEQ,oBAAiB;AACrB,cAAI,KAAK,QAAQ,WAAW,GAAG;AAC3B;;AAGJ,gBAAM,eAAe,KAAK,YAAY;AACtC,gBAAM,eAAe,KAAK,aAAa,mBAAkB;AACzD,gBAAM,aAAa,KAAK,QAAQ,SAAS;AACzC,gBAAM,cAAc,KAAK,aAAa,aAAa,cAAc,YAAY,KAAK,YAAY,aAAa;AAG3G,mBAAS,UAAU,GAAG,UAAU,cAAc,WAAW;AAErD,gBAAI,gBAAgB;AACpB,kBAAM,YAAY,YAAY,eAAe,OAAO;AACpD,qBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK,iBAAiB,cAAc;AACzE,wBAAU,CAAC,IAAI,KAAK,QAAQ,aAAa;;;AAIjD,cAAI,KAAK,YAAY,KAAK,aAAa,aAAa;AAChD,iBAAK,YAAY,KAAK,aAAa;;AAGvC,uBAAa,SAAS;AACtB,uBAAa,QAAQ,KAAK,QAAQ;AAClC,uBAAa,MAAM,KAAK,SAAS;AAGjC,eAAK,aAAa,YAAY;AAG9B,eAAK,UAAU,IAAI,aAAY;QACnC;QAEQ,MAAM,UAAU,WAAsB;AAC1C,cAAI,KAAK,iBAAiB,MAAM;AAC5B,iBAAK,mBAAkB;;AAE3B,gBAAM,SAAgC,KAAK,aAAa,mBAAkB;AAC1E,gBAAM,cAAoC,KAAK,aAAa;AAC5D,gBAAM,KAAK,aAAa,gBAAgB,WAAW,CAAC,cAAgC;AAChF,mBAAO,SAAS;AAChB,mBAAO,QAAQ,WAAW;AAC1B,mBAAO,MAAM,CAAC;UAClB,CAAC;QACL;;AA9JJ,cAAA,kBAAA;;;;;;;;;;ACJA,UAAa,6BAAb,MAAuC;QAInC,YAAmB,SAA0B;AACzC,eAAK,wBAAwB;QACjC;;;;QAKA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;;;QAKO,WAAQ;AACX,iBAAO,cAAc,KAAK,sBAAsB,SAAQ;QAC5D;;AApBJ,cAAA,6BAAA;;;;;;;;;;ACAA,UAAa,eAAb,MAAyB;;;;;;;QAUrB,YAAmB,WAAmB,aAA6B;AAC/D,eAAK,SAAS;AACd,eAAK,kBAAkB;QAC3B;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AAnCJ,cAAA,eAAA;;;;;;;;;;ACLA,UAAA,eAAA;AACA,UAAA,eAAA;AAuCA,UAAa,+BAAb,MAAa,8BAA4B;QAMrC,YAAmB,QAAsB,MAAc,YAAkB;AACrE,eAAK,aAAa;AAClB,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,cAAI,KAAK,eAAe,aAAA,aAAa,UAAU;AAC3C,gBAAI,CAAC,CAAC,MAAM;AACR,mBAAK,cAAc,KAAK,MAAM,IAAI;AAClC,kBAAI,KAAK,YAAY,iBAAiB,YAAW,MAAO,aAAa;AACjE,qBAAK,aAAa,aAAA,aAAa;;;iBAGpC;AACH,iBAAK,mBAAmB;AACxB,iBAAK,eAAe,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,aAAA,sBAAsB,YAAY,CAAC;;QAEpI;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK,YAAY;QAC5B;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK,YAAY;QAC5B;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,0BAAuB;AAC9B,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;QAEO,OAAO,8BAA8B,MAAuC;AAC/E,gBAAM,UAA0C,CAAA;AAChD,qBAAW,QAAQ,KAAK,OAAO;AAC3B,kBAAM,SAAuB,KAAK,iBAAiB,YAAW,MAAO,cACjE,aAAA,aAAa,wBAAwB,KAAK,iBAAiB,YAAW,MAAO,aAC7E,aAAA,aAAa,uBAAuB,aAAA,aAAa;AACrD,kBAAM,SAAS,IAAI,8BAA6B,QAAQ,MAAM,IAAI;AAClE,mBAAO,cAAc,KAAK,yBAAyB,IAAI;AACvD,oBAAQ,KAAK,MAAM;;AAEvB,iBAAO;QACX;QAEO,OAAO,4BAA4B,MAAuC;AAC7E,gBAAM,UAA0C,CAAA;AAChD,qBAAW,QAAQ,KAAK,OAAO;AAC3B,kBAAM,SAAuB,KAAK,iBAAiB,YAAW,MAAO,cACjE,aAAA,aAAa,wBAAwB,KAAK,iBAAiB,YAAW,MAAO,aAC7E,aAAA,aAAa,uBAAuB,aAAA,aAAa;AACrD,kBAAM,SAAS,IAAI,8BAA6B,QAAQ,MAAM,IAAI;AAClE,mBAAO,cAAc,KAAK,uBAAuB,IAAI;AACrD,oBAAQ,KAAK,MAAM;;AAEvB,iBAAO;QACX;QAEQ,OAAO,yBAAyB,MAA0B;AAC9D,iBAAO;YACH,aAAa,KAAK,cAAc,WAAW,KAAK,WAAW,IAAI;YAC/D,mBAAmB,KAAK,oBAAoB,WAAW,KAAK,iBAAiB,IAAI;YACjF,kBAAkB,KAAK;YACvB,kBAAkB,KAAK,oBAAoB;YAC3C,mBAAmB,KAAK,oBAAoB,WAAW,KAAK,iBAAiB,IAAI;YACjF,yBAAyB,KAAK,0BAA0B,WAAW,KAAK,uBAAuB,IAAI;YACnG,WAAW,KAAK,aAAa,KAAK;YAClC,kCAAkC,KAAK,mCAAmC,WAAW,KAAK,gCAAgC,IAAI;;QAEtI;QAEQ,OAAO,uBAAuB,MAA0B;AAC5D,iBAAO;YACH,aAAa,KAAK,cAAc,WAAW,KAAK,WAAW,IAAI;YAC/D,mBAAmB,KAAK,oBAAoB,WAAW,KAAK,iBAAiB,IAAI;YACjF,kBAAkB,KAAK;YACvB,kBAAkB,KAAK;YACvB,mBAAmB,KAAK,oBAAoB,WAAW,KAAK,iBAAiB,IAAI;YACjF,yBAAyB,KAAK,0BAA0B,WAAW,KAAK,uBAAuB,IAAI;YACnG,WAAW,KAAK,aAAa,KAAK;YAClC,2BAA2B,KAAK,wBAAwB,KAAK;YAC7D,kCAAkC,KAAK,mCAAmC,WAAW,KAAK,gCAAgC,IAAI;;QAEtI;;AAjGJ,cAAA,+BAAA;AAuGA,UAAa,4CAAb,MAAa,mDAAkD,aAAA,wBAAuB;QAElF,YAAoB,QAA4B,cAAsB,WAAgC;AAClG,gBAAM,QAAQ,cAAc,SAAS;QACzC;;;;;;;;;QAUO,OAAO,WAAW,QAAoC;AACzD,gBAAM,SAAS,aAAA,mBAAmB;AAClC,cAAI,YAAmC,aAAA,sBAAsB;AAE7D,cAAI,CAAC,CAAC,OAAO,YAAY;AACrB,wBAAa,aAAA,sBAA8B,OAAO,WAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,aAAA,sBAAsB,OAAO,CAAC,CAAC;;AAGrK,iBAAO,IAAI,2CAA0C,QAAQ,OAAO,cAAc,SAAS;QAC/F;;AAvBJ,cAAA,4CAAA;;;;;;;;;;AC/IA,UAAA,eAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AAYA,UAAa,qBAAb,MAA+B;QAK3B,YAAmB,QAAsB,YAAkB;AACvD,eAAK,aAAa;AAClB,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,cAAI,WAAW,aAAA,aAAa,UAAU;AAClC,2BAAA,UAAU,uBAAuB,YAAY,YAAY;AACzD,iBAAK,mBAAmB;AACxB,iBAAK,eAAe,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,aAAA,sBAAsB,YAAY,CAAC;;QAEpI;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AAzBJ,cAAA,qBAAA;AA+BA,UAAa,kCAAb,MAAa,yCAAwC,aAAA,wBAAuB;QAExE,YAAoB,QAA4B,cAAsB,WAAgC;AAClG,gBAAM,QAAQ,cAAc,SAAS;QACzC;;;;;;;;;QAUO,OAAO,WAAW,QAA0B;AAC/C,gBAAM,SAAS,aAAA,mBAAmB;AAClC,cAAI,YAAmC,aAAA,sBAAsB;AAE7D,cAAI,CAAC,CAAC,OAAO,YAAY;AACrB,wBAAa,aAAA,sBAA8B,OAAO,WAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,aAAA,sBAAsB,OAAO,CAAC,CAAC;;AAGrK,iBAAO,IAAI,iCAAgC,QAAQ,OAAO,cAAc,SAAS;QACrF;;AAvBJ,cAAA,kCAAA;;;;;;;;;;AC9CA,UAAA,iBAAA;AACA,UAAA,eAAA;AASA,UAAa,2BAAb,cAA8C,aAAA,mBAAkB;QAI5D,YAAmB,QAAsB,YAAoB,MAAc,aAAqB;AAC5F,gBAAM,QAAQ,UAAU;AAJpB,eAAA,cAAwB,CAAA;AAK5B,yBAAA,UAAU,uBAAuB,aAAa,cAAc;AAC5D,eAAK,WAAW;AAChB,cAAI,CAAC,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,GAAG;AACnC,iBAAK,cAAc;;QAE3B;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;AAnBJ,cAAA,2BAAA;;;;;;;;;;ACPA,UAAA,eAAA;AASA,UAAA,mBAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AAmBA,UAAa,qBAAb,cAAwC,aAAA,WAAU;;;;;;QAU9C,YAAmB,cAA0B;AACzC,yBAAA,UAAU,uBAAuB,cAAc,cAAc;AAC7D,gBAAM,mBAAqC;AAC3C,yBAAA,UAAU,YAAY,kBAAkB,cAAc;AAEtD,gBAAM,iBAAA,YAAY,gBAAgB,aAAA,iBAAiB,iBAAgB,CAAE,GAAG,iBAAiB,YAAY,IAAI,aAAA,8BAA6B,CAAE;AAExI,eAAK,iBAAiB,iBAAiB,WAAW,MAAK;AACvD,eAAK,mBAAmB,KAAK;AAC7B,eAAK,2BAA2B;QACpC;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;;;;QAYO,MAAM,mBAAmB,aAA+B,MAAY;AACvE,gBAAM,aAAuB,MAAM,KAAK,iBAAiB,cAAc,aAAa,IAAI;AACxF,iBAAO,IAAI,aAAA,aAAa,WAAW,CAAC,GAAG,WAAW;QACtD;;;;;;;;;;QAWO,MAAM,8BAA8B,SAAqB;AAC5D,iBAAO,KAAK,iBAAiB,yBAAyB,OAAO;QACjE;;;;;;;;;;QAWO,MAAM,oBAAoB,aAA6B;AAC1D,iBAAO,KAAK,iBAAiB,eAAe,WAAW;QAQ3D;;;;;;;;;;QAWO,MAAM,0BAA0B,aAA+B,MAAY;AAC9E,iBAAO,KAAK,iBAAiB,qBAAqB,aAAa,IAAI;QACvE;;;;;;;;;;;QAYO,MAAM,mBAAmB,SAAuB,aAAwB;AAC3E,gBAAM,aAA8B;AACpC,yBAAA,UAAU,uBAAuB,YAAY,aAAa;AAC1D,eAAK,cAAc;AACnB,eAAK,iBAAiB,qBAAqB;AAE3C,iBAAO,KAAK,iBAAiB,cAAc,OAAO;QACtD;;;;;;;;;;QAWO,MAAM,mBAAmB,SAAqB;AACjD,iBAAO,KAAK,iBAAiB,cAAc,OAAO;QACtD;;;;;;;;;;QAWO,MAAM,kBAAkB,SAAqB;AAChD,iBAAO,KAAK,iBAAiB,aAAa,OAAO;QACrD;;;;;;;;QASO,MAAM,QAAK;AACd,gBAAM,KAAK,QAAQ,IAAI;QAC3B;QAEU,wBAAwB,gBAAiC,mBAAuC,aAA0B,kBAAkC;AAClK,gBAAM,YAA6B;AACnC,iBAAO,IAAI,aAAA,uBAAuB,gBAAgB,mBAAmB,WAAW,kBAAkB,IAAI;QAC1G;QAEU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,0BAA0B;AAC/B;;AAGJ,eAAK,2BAA2B;AAEhC,cAAI,WAAW;AACX,kBAAM,MAAM,QAAQ,SAAS;;QAErC;QAEU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,UAAU;QAC7D;QAEQ,UAAU,QAAuB,eAA2B;AAChE,gBAAM,WACF,IAAI,aAAA,mBACA,OAAO,KAAK,gBAAgB,aAAA,aAAa,UACzC,OAAO,UAAU;AAEzB,iBAAQ;QACZ;;AAzMJ,cAAA,qBAAA;;;;;;;;;;ACjCA,UAAA,eAAA;AAWA,UAAA,iBAAA;AACA,UAAA,eAAA;AAeA,UAAa,oBAAb,cAAuC,aAAA,WAAU;;;;;;;QAU7C,YAAmB,cAA4B,aAAwB;AACnE,yBAAA,UAAU,uBAAuB,cAAc,cAAc;AAC7D,gBAAM,aAA+B;AACrC,yBAAA,UAAU,uBAAuB,YAAY,cAAc;AAE3D,gBAAM,aAAa,WAAW,YAAY,IAAI,aAAA,oCAAmC,CAAE;AACnF,eAAK,sBAAsB;AAC3B,yBAAA,UAAU,YAAY,KAAK,qBAAqB,aAAa;AAE7D,eAAK,gCAAgC;AACrC,eAAK,iBAAiB,WAAW;QACrC;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;;;;QAYO,MAAM,mBAAmB,OAA4D;AACxF,yBAAA,UAAU,gBAAgB,KAAK,6BAA6B;AAE5D,iBAAO,KAAK,8BAA8B,KAAK;QACnD;;;;;;;;QASO,MAAM,QAAK;AACd,yBAAA,UAAU,gBAAgB,KAAK,6BAA6B;AAC5D,gBAAM,KAAK,QAAQ,IAAI;QAC3B;QAEU,MAAM,8BAA8B,OAA8B;AACxE,yBAAA,UAAU,gBAAgB,KAAK,6BAA6B;AAE5D,gBAAM,KAAK,mBAAkB;AAC7B,gBAAM,SAAmC,MAAM,KAAK,SAAS,iBAAiB,KAAK;AACnF,gBAAM,KAAK,mBAAkB;AAE7B,iBAAO;QACX;QAEU,MAAM,qBAAkB;AAC9B,cAAI,KAAK,UAAU;AACf,kBAAM,KAAK,SAAS,gBAAe;;AAEvC;QACJ;QAEU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,cAAc;QACjE;QAEU,wBAAwB,gBAAiC,mBAAuC,aAA0B,kBAAkC;AAClK,gBAAM,YAA6B;AACnC,iBAAO,IAAI,aAAA,yBAAyB,gBAAgB,mBAAmB,WAAW,kBAAkB,IAAI;QAC5G;QAEU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,+BAA+B;AACpC;;AAGJ,cAAI,WAAW;AACX,iBAAK,gCAAgC;AACrC,kBAAM,MAAM,QAAQ,SAAS;;QAErC;;AAxHJ,cAAA,oBAAA;;;;;;;;;;AC3BA,UAAA,iBAAA;AAEA,UAAA,eAAA;AAUA,UAAa,6BAAb,MAAa,4BAA0B;QAInC,YAAoB,UAAwB;AAHpC,eAAA,oBAAoC,CAAA;AACpC,eAAA,iBAA2B,CAAA;AAG/B,yBAAA,UAAU,uBAAuB,UAAU,eAAe;AAC1D,cAAI,SAAS,WAAW,GAAG;AACvB,kBAAM,IAAI,MAAM,4BAA4B;;AAEhD,qBAAW,WAAW,UAAU;AAC5B,gBAAI,QAAQ,gBAAgB,aAAA,iBAAiB,+BAA+B;AACxE,oBAAM,IAAI,MAAM,2EAA2E,QAAQ,SAAS;;AAEhH,iBAAK,kBAAkB,KAAK,OAAO;AACnC,iBAAK,eAAe,KAAK,QAAQ,SAAS;;QAElD;QACO,OAAO,aAAa,UAAwB;AAC/C,iBAAO,IAAI,4BAA2B,QAAQ;QAClD;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK,eAAe,KAAK,GAAG;QACvC;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,iBAAO;QACX;;AA/BJ,cAAA,6BAAA;;;;;;;;;;ACZA,UAAA,iBAAA;AAEA,UAAA,eAAA;AAUA,UAAa,2BAAb,MAAa,0BAAwB;QAGjC,YAAoB,SAAqB;AACrC,yBAAA,UAAU,uBAAuB,SAAS,cAAc;AACxD,cAAI,QAAQ,gBAAgB,aAAA,iBAAiB,+BAA+B;AACxE,kBAAM,IAAI,MAAM,kEAAkE;;AAEtF,eAAK,mBAAmB;QAC5B;QAEO,OAAO,YAAY,SAAqB;AAC3C,iBAAO,IAAI,0BAAyB,OAAO;QAC/C;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,CAAE,KAAK,aAAa,SAAS;QACxC;QAEA,IAAW,WAAQ;AACf,cAAI,KAAK,aAAa,gBAAgB,aAAA,iBAAiB,2BAA2B;AAC9E,mBAAO;iBACJ;AACH,mBAAO;;QAEf;;AA7BJ,cAAA,2BAAA;;;;;;;;;;ACRA,UAAY;AAAZ,OAAA,SAAYC,iBAAc;AAMtB,QAAAA,gBAAAA,gBAAA,SAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,gBAAAA,gBAAA,YAAA,IAAA,CAAA,IAAA;MACJ,GAbY,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;;;;;;;;;;ACJ1B,UAAA,eAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AAKA,UAAA,sBAAA;AAOA,UAAa,iCAAb,MAAa,gCAA8B;QAIvC,cAAA;AACI,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,eAAK,eAAe,YAAY,aAAA,WAAW,wCAAwC,SAAS;AAC5F,eAAK,qBAAqB,oBAAA,eAAe;QAC7C;;;;;;;;;;QAWO,OAAO,gBAAa;AACvB,gBAAM,SAAS,IAAI,gCAA8B;AACjD,iBAAO,WAAW,YAAY,aAAA,WAAW,mDAAmD,aAAA,4CAA4C;AACxI,iBAAO;QACX;;;;;;;;;QAUO,OAAO,cAAc,WAAmB;AAC3C,yBAAA,UAAU,8BAA8B,WAAW,WAAW;AAC9D,gBAAM,SAAS,IAAI,gCAA8B;AACjD,iBAAO,WAAW,YAAY,aAAA,WAAW,mDAAmD,UAAU,KAAI,CAAE;AAC5G,iBAAO;QACX;;;;;;;;;QAUO,OAAO,0BAA0B,SAA+B;AACnE,cAAI,QAAQ,SAAS,GAAG;AACpB,kBAAM,IAAI,MAAM,gDAAgD;;AAEpE,gBAAM,aAAa,IAAI,gCAA8B;AACrD,gBAAM,QAAkB,CAAA;AACxB,kBAAQ,QAAQ,CAAC,WAAsC;AACnD,kBAAM,KAAK,OAAO,QAAQ;AAC1B,gBAAI,OAAO,eAAe,UAAa,OAAO,eAAe,IAAI;AAC7D,oBAAM,iBAAiB,OAAO,WAAW,aAAA,WAAW,mCAAmC,SAAQ;AAC/F,yBAAW,WAAW,YAAY,gBAAgB,OAAO,UAAU;;UAE3E,CAAC;AACD,qBAAW,WAAW,YAAY,aAAA,WAAW,mDAAmD,MAAM,KAAI,CAAE;AAE5G,iBAAO;QACX;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,KAAK,MAAoB;AAChC,cAAI,SAAS,oBAAA,eAAe,YAAY;AACpC,iBAAK,eAAe,YAAY,aAAA,WAAW,oDAAoD,GAAG;AAClG,iBAAK,eAAe,YAAY,aAAA,WAAW,wCAAwC,YAAY;iBAC5F;AACH,iBAAK,eAAe,YAAY,aAAA,WAAW,oDAAoD,GAAG;AAClG,iBAAK,eAAe,YAAY,aAAA,WAAW,wCAAwC,SAAS;;AAEhG,eAAK,qBAAqB;QAC9B;;AA7FJ,cAAA,iCAAA;;;;;;;;;;ACdA,UAAA,iBAAA;AAUA,UAAa,iCAAb,MAAa,gCAA8B;QAKvC,YAAoB,UAAkB,6BAAmC;AACrE,yBAAA,UAAU,uBAAuB,UAAU,UAAU;AACrD,yBAAA,UAAU,uBAAuB,6BAA6B,6BAA6B;AAC3F,eAAK,eAAe;AACpB,eAAK,kCAAkC;QAC3C;;;;;;;;;QAUO,OAAO,WAAW,QAA+B;AACpD,iBAAO,IAAI,gCAA+B,OAAO,UAAU,OAAO,2BAA2B;QACjG;;;;;;;;;QAUW,OAAO,oCAAoC,QAAuC;AACrF,iBAAO,IAAI,gCAA+B,OAAO,UAAU,OAAO,2BAA2B;QACjG;QAEJ,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,8BAA2B;AAClC,iBAAO,KAAK;QAChB;;AA1CJ,cAAA,iCAAA;;;;;;;;;;ACVA,UAAA,iBAAA;AAMA,UAAa,uBAAb,MAAa,sBAAoB;QAI7B,YAAoB,UAAkB,YAAmB;AACrD,yBAAA,UAAU,uBAAuB,UAAU,UAAU;AACrD,eAAK,eAAe;AACpB,eAAK,iBAAiB;QAC1B;;;;;;;;;;;QAYO,OAAO,aAAa,UAAkB,YAAmB;AAC5D,iBAAO,IAAI,sBAAqB,UAAU,UAAU;QACxD;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;AA9BJ,cAAA,uBAAA;;;;;;;;;;ACLA,UAAA,eAAA;AACA,UAAA,eAAA;AASA,UAAY;AAAZ,OAAA,SAAYC,+BAA4B;AACpC,QAAAA,8BAAAA,8BAAA,QAAA,IAAA,CAAA,IAAA;AACA,QAAAA,8BAAAA,8BAAA,UAAA,IAAA,CAAA,IAAA;MACJ,GAHY,+BAAA,QAAA,iCAAA,QAAA,+BAA4B,CAAA,EAAA;AASxC,UAAa,2BAAb,MAAqC;QAOjC,YAAmB,UAA2B,eAA6B,aAAA,aAAa,mBAAmB,wBAA+C,aAAA,sBAAsB,SAAS,eAAuB,IAAE;AAC9M,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,gBAAM,aAAa,SAAS,aAAa,kCAAkC,6BAA6B,WAAW,6BAA6B;AAChJ,eAAK,aAAa;AAClB,cAAI,KAAK,eAAe,aAAA,aAAa,UAAU;AAC3C,gBAAI,eAAe,6BAA6B,UAAU;AACtD,mBAAK,gBAAgB,SAAS,qBAAqB,kBAAkB;AACrE,mBAAK,YAAY,SAAS,qBAAqB,kBAAkB;AACjE,mBAAK,aAAa,aAAA,aAAa;mBAC5B;AACH,mBAAK,YAAY,SAAS,mBAAmB;AAC7C,kBAAI,SAAS,mBAAmB,kBAAkB,YAAW,MAAO,UAAU;AAC1E,qBAAK,aAAa,aAAA,aAAa;;AAEnC,kBAAI,SAAS,mBAAmB,cAAc,UAAa,SAAS,mBAAmB,cAAc,IAAI;AACrG,qBAAK,gBAAgB,SAAS,mBAAmB;;;iBAGtD;AACH,iBAAK,mBAAmB;AACxB,iBAAK,eAAe,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,qBAAqB,CAAC;;AAEnH,eAAK,eAAe,YAAY,aAAA,WAAW,kCAAkC,KAAK,UAAU,QAAQ,CAAC;QACzG;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;;AAlDJ,cAAA,2BAAA;AAwDA,UAAa,wCAAb,MAAa,+CAA8C,aAAA,wBAAuB;QAE9E,YAAoB,QAA4B,cAAsB,WAAgC;AAClG,gBAAM,QAAQ,cAAc,SAAS;QACzC;;;;;;;;;QAUO,OAAO,WAAW,QAAgC;AACrD,gBAAM,SAAS,aAAA,mBAAmB;AAClC,cAAI,YAAmC,aAAA,sBAAsB;AAE7D,cAAI,CAAC,CAAC,OAAO,YAAY;AACrB,wBAAY,aAAA,sBAAsB,OAAO,WAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,aAAA,sBAAsB,OAAO,CAAC,CAAuC;;AAGlM,iBAAO,IAAI,uCAAsC,QAAQ,OAAO,cAAc,SAAS;QAC3F;;AAvBJ,cAAA,wCAAA;;;;;;;;;;ACzEA,UAAA,eAAA;AAkBA,UAAA,eAAA;AAKA,UAAA,iBAAA;AACA,UAAA,eAAA;AAkBA,UAAsB,eAAtB,MAAkC;QAE9B,cAAA;AACI;QACJ;;;;;;;QAoBO,OAAO,wBAAwB,cAAuC,MAA0B,MAAiB,MAAe;AACnI,yBAAA,UAAU,uBAAuB,cAAc,aAAA,6BAA6B,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAC7H,yBAAA,UAAU,uBAAuB,aAAa,QAAQ,aAAA,6BAA6B,WAAW,YAAY,QAAQ,SAAS,gCAAgC,CAAC;AAC5J,cAAI,CAAC,aAAa,mBAAmB,CAAC,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,gCAAgC,CAAC,GAAG;AACrH,2BAAA,UAAU,uBAAuB,aAAa,iBAAiB,aAAA,6BAA6B,WAAW,YAAY,QAAQ,SAAS,6BAA6B,CAAC;;AAEtK,cAAI;AACJ,cAAI;AACJ,cAAI;AACJ,cAAI,OAAO,SAAS,UAAU;AAC1B,+BAAmB,IAAI,iBAAiB,cAAc,IAAI;AAE1D,yBAAA,2BAA2B,YAA0B;YAAE,GAAE,GAAI,MAAM,IAAI;iBACpE;AACH,+BAAmB,IAAI,iBAAiB,YAAY;AACpD,iBAAK;AACL,kBAAM;AACN,6BAAiB,wBACZ,MAAW;AACR,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAE;;YAEV,GACA,CAAC,UAAoB;AACjB,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,KAAK;;YAEjB,CAAC;;AAET,iBAAO;QAEX;;AAvDJ,cAAA,eAAA;AAuGA,UAAa,mBAAb,cAAsC,aAAY;;;;;;QAwB9C,YAAmB,cAAuC,IAAW;AACjE,gBAAK;AAVD,eAAA,aAA6B,aAAA,6BAA6B;AAsqB1D,eAAA,cAAc,CAAC,MAAgC;AACnD,iBAAK,kBAAkB;AACvB,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B,gBAAgB;AACnD,qBAAK,2BAA2B,eAAe,KAAK,4BAA4B,CAAC;;qBAEhFC,IAAG;;UAGhB;AAEQ,eAAA,iBAAiB,CAAC,MAAgC;AACtD,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B,gBAAgB;AACnD,qBAAK,2BAA2B,eAAe,KAAK,4BAA4B,CAAC;;qBAEhFA,IAAG;;AAGR,mBAAK,KAAK,MAAM,KAAK;;UAE7B;AAEQ,eAAA,aAAa,CAAC,GAA2B,MAAqD;AAClG,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B,UAAU;AAC7C,qBAAK,2BAA2B,SAAS,KAAK,4BAA4B,CAAC;;qBAE1EA,IAAG;;UAGhB;AAEQ,eAAA,qCAAqC,CAAC,GAA2B,MAA0C;AAC/G,gBAAI;AACA,oBAAM,qBAA2C,KAAK,iBAAiB,eAAe,EAAE,EAAE;AAC1F,kBAAI,uBAAuB,QAAW;AAElC,wBAAQ,EAAE,KAAK;kBACX,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,cAAc,EAAE;AACnC;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,aAAa,EAAE;AAClC;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,YAAY,EAAE;AACjC;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,UAAU,EAAE;AAC/B;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,uBAAuB,EAAE;AAC5C;;AAER,qBAAK,iBAAiB,uBAAuB,kBAAkB;AAE/D,oBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,uBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,SAClE,CAAC,KAAK,cAAc,kBAAkB,CAAC,GAAG,EAAE,SAAS,CAAC;;;qBAGjEA,IAAG;;UAGhB;AAEQ,eAAA,4BAA4B,MAAW;UAE/C;AAEQ,eAAA,2BAA2B,CAAC,GAA2B,MAA6B;AACxF,gBAAI;AACA,mBAAK,iBAAiB,aAAa,QAAQ,CAAC,MAAqC,EAAE,UAAW,EAAE,SAAS,QAAQ,EAAE,OAAQ;AAC3H,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,SAClE,KAAK,eAAe,KAAK,GAAG,EAAE,SAAS,CAAC;;qBAE/CA,IAAG;;UAGhB;AAEQ,eAAA,mCAAmC,CAAC,GAA2B,MAAiC;AACpG,gBAAI;AACA,oBAAM,iBAAuC,KAAK,iBAAiB,uBAAuB,EAAE,WAAW;AACvG,kBAAI,mBAAmB,QAAW;AAC9B,oBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,uBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,oBAClE,CAAC,KAAK,cAAc,cAAc,CAAC,GAAG,EAAE,SAAS,CAAC;;;qBAG7DA,IAAG;;UAGhB;AAEQ,eAAA,oCAAoC,CAAC,GAA2B,MAAiC;AACrG,gBAAI;AACA,oBAAM,qBAA2C,KAAK,iBAAiB,eAAe,EAAE,YAAY,EAAE;AACtG,kBAAI,uBAAuB,QAAW;AAElC,qBAAK,iBAAiB,kBAAkB,EAAE,YAAY,EAAE;AACxD,oBAAI,CAAC,CAAC,KAAK,4BAA4B;AAEnC,uBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,kBAClE,CAAC,KAAK,cAAc,kBAAkB,CAAC,GAAG,EAAE,SAAS,CAAC;;;qBAGjEA,IAAG;;UAGhB;AAEQ,eAAA,wBAAwB,CAAC,GAA2B,MAAqD;AAC7G,gBAAI;AACA,sBAAQ,EAAE,SAAS;gBACf,KAAK,aAAA,mCAAmC;AACpC,sBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,yBAAK,2BAA2B,YAC5B,KAAK,4BACL,IAAI,aAAA,iCAAiC,EAAE,SAAS,QAAW,EAAE,SAAS,CAAC;;AAE/E;gBACJ,KAAK,aAAA,mCAAmC;AACpC,sBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,yBAAK,2BAA2B,aAC5B,KAAK,4BACL,IAAI,aAAA,iCAAiC,EAAE,SAAS,QAAW,EAAE,SAAS,CAAC;;AAE/E;gBACJ,KAAK,aAAA,mCAAmC;AACpC,sBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,yBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,iCAAiC,EAAE,SAAS,QAAW,EAAE,SAAS,CAAC;;AAE/E;;qBAEHA,IAAG;;UAGhB;AAEQ,eAAA,6BAA6B,CAAC,GAA2B,MAAsC;AACnG,gBAAI;AAEA,kBAAI,EAAE,iBAAiB,UAAa,EAAE,iBAAiB,MAAM;AACzD,qBAAK,SAAS,QAAQ,EAAE;;AAG5B,mBAAK,iBAAiB,eAAe,CAAC,GAAG,EAAE,YAAY;AAEvD,kBAAI,KAAK,iBAAiB,OAAO,QAAW;AACxC,qBAAK,cAAc;;AAEvB,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,oBAAoB,KAAK,eAAe,IAAI,GAAG,EAAE,SAAS,CAAC;;AAGzI,kBAAI,KAAK,GAAG,QAAQ;AAChB,sBAAM,WAAmB,KAAK,4BAA4B,WAAW,YAAY,aAAA,WAAW,2BAA2B;AACvH,oBAAI,aAAa,UAAa,SAAS,SAAS,KAAK,aAAa,KAAK,GAAG,aAAa;AAEnF,uBAAK,oBAAoB,QAAQ;;;qBAGpCA,IAAG;;UAGhB;AAEQ,eAAA,2BAA2B,CAAC,GAA2B,MAA4C;AACvG,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,uBAAuB,KAAK,4BAA4B,CAAC;;qBAExFA,IAAG;;UAGhB;AAz1BI,eAAK,kBAAkB;AACvB,eAAK,iBAAiB;AACtB,eAAK,qBAAqB;AAC1B,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,eAAK,cAAc,IAAI,aAAA,oBAAmB;AAG1C,gBAAM,WAAmB,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;AAC7G,cAAI,CAAC,UAAU;AACX,yBAAa,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,GAAG,aAAA,6BAA6B,mBAAmB;;AAE1I,eAAK,eAAe,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;AAExG,cAAI,CAAC,IAAI;AAEL,gBAAI,aAAa,gBAAgB,WAAW,GAAG;AAC3C,2BAAa,kBAAkB,KAAK,YAAY;;AAIpD,kBAAM,YAAoB,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,qCAAqC,CAAC;AAC/G,gBAAI,CAAC,WAAW;AACZ,2BAAa,aAAa,aAAA,gBAAgB,MAAM;;AAKpD,gBAAI,eAAuB,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,2BAA2B,CAAC;AACtG,gBAAI,iBAAiB,UAAa,iBAAiB,MAAM;AACrD,6BAAe;;AAEnB,2BAAA,UAAU,qBAAqB,cAAc,YAAY,EAAE;AAC3D,2BAAA,UAAU,sBAAsB,cAAc,YAAY,CAAC;AAC3D,yBAAa,YAAY,aAAA,WAAW,aAAA,WAAW,2BAA2B,GAAG,YAAY;iBAEtF;AACH,iBAAK,qBAAqB;;AAI9B,eAAK,aAAa;AAGlB,gBAAM,aAAa;AACnB,yBAAA,UAAU,YAAY,YAAY,cAAc;AAChD,eAAK,iBAAiB,WAAW,WAAW,MAAK;AACjD,eAAK,kBAAkB;AACvB,eAAK,mBAAmB,IAAI,aAAA,qBAAoB;AAChD,eAAK,cAAc;AACnB,eAAK,2BAA2B;QACpC;;QAGA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;QAGA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;QAGA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;QAGA,IAAW,iBAAc;AACrB,iBAAO,KAAK,WAAW,KAAK,SAAS,SAAS,KAAK;QACvD;;QAGA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;QAGA,IAAW,4BAAyB;AAChC,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK,iBAAiB,IAAI,SAAS,QAAQ,KAAK,iBAAiB,IAAI;QAChF;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK,mBAAmB,KAAK;QACxC;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,eAAe,IAAI;QACnC;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK,cAAc,KAAK,iBAAiB,EAAE;QACtD;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,cAAc,KAAK,iBAAiB,IAAI;QACxD;QAEA,IAAW,wBAAqB;AAC5B,iBAAO,KAAK;QAChB;QAEA,IAAW,mBAAgB;AACvB,gBAAM,SAAiB,KAAK;AAC5B,gBAAM,IAAgC,KAAK,aAAa,IAAI,CAAC,UACzD;YACI,IAAI,KAAK;YACT,mBAAmB,KAAK;YACxB,OAAO,KAAK;YAEnB;AACD,gBAAM,QAAgC,CAAA;AACtC,qBAAW,OAAO,aAAA,6BAA6B,wBAAwB;AACnE,kBAAM,MAAc,KAAK,WAAW,YAAY,KAAK,EAAE;AACvD,gBAAI,QAAQ,IAAI;AACZ,oBAAM,GAAG,IAAI;;;AAGrB,gBAAM,OAAyB,EAAE,IAAI,QAAQ,cAAc,GAAG,wBAAwB,MAAK;AAC3F,iBAAO;QACX;QAEA,IAAY,UAAO;AACf,iBAAO,KAAK,mBAAmB,CAAC,KAAK,iBAAiB,IAAI;QAC9D;QAEA,IAAY,gBAAa;AACrB,iBAAO,KAAK,mBAAmB,KAAK,iBAAiB,IAAI;QAC7D;;;QAIA,IAAW,qBAAkB;AACzB,iBAAO,KAAK;QAChB;QAEA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,oBAAoB;AAC7D,eAAK,YAAY;QACrB;QAEA,IAAW,uBAAuB,wBAA8C;AAC5E,eAAK,6BAA6B;QACtC;QAEO,QAAQ,OAAsB;AACjC,eAAK,2BAA2B,QAAQ,KAAK;QACjD;;;;;;QAOO,wBAAwB,IAAe,KAAc;AACxD,cAAI;AACA,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,qBAAqB,GAAG,GAAG;;AAE1E,iBAAK,YAAY,aAAa,KAAK,gBAAgB,QAC9C,CAAC,SAAqC;AACnC,kBAAI,CAAC,MAAM;AACP,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,uBAAuB,GAAG,GAAG;;AAE5E,mBAAK,WAAW;AAChB,mBAAK,eAAe,IAAI,GAAG;YAC/B,GACC,CAAC,UAAoB;AAClB,mBAAK,YAAY,OAAO,GAAG;YAC/B,CAAE;mBACD,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,uBAAuB,IAAe,KAAc;AACvD,cAAI;AAEA,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,qBAAqB,GAAG,GAAG;;AAG1E,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,uBAAuB;AAEvF,iBAAK,iBAAiB,OAAO,KAAK,SAAS;AAC3C,iBAAK,6BAA6B,aAAA,8BAA8B,WAAW,MAAM,KAAK,UAAU;AAIhG,iBAAK,2BAA2B,YAAY,KAAK;AACjD,iBAAK,2BAA2B,eAAe,KAAK;AACpD,iBAAK,2BAA2B,WAAW,KAAK;AAEhD,iBAAK,2BAA2B,mCAAmC,KAAK;AACxE,iBAAK,2BAA2B,0BAA0B,KAAK;AAC/D,iBAAK,2BAA2B,yBAAyB,KAAK;AAC9D,iBAAK,2BAA2B,iCAAiC,KAAK;AACtE,iBAAK,2BAA2B,kCAAkC,KAAK;AACvE,iBAAK,2BAA2B,sBAAsB,KAAK;AAC3D,iBAAK,2BAA2B,2BAA2B,KAAK;AAChE,iBAAK,2BAA2B,yBAAyB,KAAK;AAE9D,iBAAK,2BAA2B,QAAQ,KAAK,SAAS,OACjD,MAAW;AACR,mBAAK,eAAe,IAAI,GAAG;YAC/B,GACC,CAAC,UAAoB;AAClB,mBAAK,YAAY,OAAO,GAAG;YAC/B,CAAE;mBACD,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,oBAAoB,aAA2B,IAAe,KAAc;AAC/E,yBAAA,UAAU,uBAAuB,aAAa,aAAa;AAC3D,uBAAA,0BAA0B,KAAK,wBAAwB,WAAW,GAAG,IAAI,GAAG;QAChF;;;;;;;;;QAUO,sBAAsB,gBAAwB,UAAkB,MAAc,IAAe,KAAc;AAC9G,cAAI;AAKA,2BAAA,UAAU,wBAAwB,gBAAgB,KAAK,WAAW,YAAY,QAAQ,SAAS,gBAAgB,CAAC;AAChH,2BAAA,UAAU,wBAAwB,UAAU,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AACpG,2BAAA,UAAU,wBAAwB,MAAM,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AAEhG,iBAAK,YAAY,aAAa,KAAK,gBAAgB,gBAC9C,CAAC,SAAqC;AACnC,6BAAA,UAAU,uBAAuB,MAAM,KAAK,WAAW,uBAAuB;AAC9E,mBAAK,WAAW;AAChB,mBAAK,WAAW,qBAAqB,KAAK;AAE1C,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAG,KAAK,wBAAwB;;YAExC,GACC,CAAC,UAAoB;AAClB,mBAAK,YAAY,OAAO,GAAG;YAC/B,CAAE;mBACD,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,wBAAwB,IAAe,KAAc;AACxD,uBAAA,0BAA0B,KAAK,4BAA2B,GAAI,IAAI,GAAG;QACzE;QAEO,MAAM,8BAA2B;AAChC,yBAAA,UAAU,uBAAuB,KAAK,gBAAgB,KAAK,WAAW,uBAAuB;AAC7F,yBAAA,UAAU,wBAAwB,KAAK,SAAS,OAAO,KAAK,WAAW,uBAAuB;AAC9F,gBAAM,KAAK,YAAY,MAAM,KAAK,gBAAgB,KAAK,SAAS,KAAK;AAErE,eAAK,QAAO;QACpB;;;;;;QAOO,qBAAqB,IAAe,KAAc;AACrD,uBAAA,0BAA0B,KAAK,yBAAwB,GAAI,IAAI,GAAG;QACtE;QAEO,2BAAwB;AAC3B,iBAAO,KAAK,MAAM,IAAI;QAC1B;;;;;;QAOO,sBAAsB,IAAe,KAAc;AACtD,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAE9G,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,IAAI,GAC/D,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,yBAAyB,IAAe,KAAc;AACzD,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,4BAA4B,KAAK,WAAW,oBAAoB;AACtG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AAEpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAE9G,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kBAAkB,IAAI,GAClE,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,qBAAqB,QAAgB,IAAe,KAAc;AACrE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,QAAQ,KAAK,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAChG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AAEpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAGzE,gBAAI,CAAC,KAAK,GAAG,UAAU,KAAK,GAAG,OAAO,QAAQ;AAC1C,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,4BAA4B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAG7G,kBAAM,SAAiB,KAAK,iBAAiB,oBAAoB,MAAM;AACvE,gBAAI,WAAW,IAAI;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,yBAAyB,GAAG,GAAG;;AAE9E,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,QAAQ,IAAI,GAAI,MAAW;AACnF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,uBAAuB,QAAuC,IAAe,KAAc;AAC9F,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,gBAAI,CAAC,CAAC,KAAK,6BAA6B,OAAO,eAAe,IAAI,GAAG;AAEjE,2BAAA,0BAA0B,KAAK,2BAA2B,MAAsB,GAAG,IAAI,GAAG;mBACvF;AACH,6BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,6BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,kBAAI,CAAC,KAAK,eAAe;AACrB,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,4BAA4B,QAAQ,aAAa,QAAQ,CAAC,GAAG,GAAG;;AAE/G,kBAAI,gBAAgB;AACpB,kBAAI,OAAO,WAAW,UAAU;AAC5B,gCAAgB;yBACT,OAAO,eAAe,IAAI,GAAG;AACpC,sBAAM,cAA4B;AAClC,gCAAgB,YAAY;yBACrB,OAAO,eAAe,QAAQ,GAAG;AACxC,sBAAM,OAAc;AACpB,gCAAgB,KAAK;;AAEzB,6BAAA,UAAU,wBAAwB,eAAe,KAAK,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAEvG,oBAAM,QAAgB,KAAK,aAAa,UAAU,CAAC,MAA4B,EAAE,OAAO,aAAa;AACrG,kBAAI,UAAU,IAAI;AACd,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,yBAAyB,GAAG,GAAG;;AAE9E,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,YAAY,KAAK,gBAAgB,aAAa,GAAI,MAAW;AACzF,uBAAK,eAAe,IAAI,GAAG;gBAC/B,GACK,CAAC,UAAoB;AAClB,uBAAK,YAAY,OAAO,GAAG;gBAC/B,CAAE;;;mBAGT,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,wBAAwB,IAAe,KAAc;AACxD,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,QAAQ,CAAC,GAAG,GAAG;;AAEhH,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,KAAK,GAAI,MAAW;AAChF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,2BAA2B,IAAe,KAAc;AAC3D,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,YAAY,CAAC,GAAG,GAAG;;AAEpH,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kBAAkB,KAAK,GAAI,MAAW;AACnF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,uBAAuB,QAAgB,IAAe,KAAc;AACvE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,QAAQ,KAAK,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAChG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AAEpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAGzE,gBAAI,CAAC,KAAK,GAAG,UAAU,KAAK,GAAG,OAAO,QAAQ;AAC1C,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,4BAA4B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAG7G,kBAAM,SAAiB,KAAK,iBAAiB,oBAAoB,MAAM;AACvE,gBAAI,WAAW,IAAI;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,yBAAyB,GAAG,GAAG;;AAE9E,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,QAAQ,KAAK,GAAI,MAAW;AACxF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,qBAAqB,SAAiB,IAAe,KAAc;AACtE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,SAAS,KAAK,WAAW,YAAY,QAAQ,SAAS,SAAS,CAAC;AAClG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAGzE,gBAAI,QAAQ,SAAS,KAAK,0BAA0B;AAChD,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,YAAY,QAAQ,SAAS,gBAAgB,CAAC,GAAG,GAAG;;AAEnG,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kBAAkB,OAAO,GAAI,MAAW;AACrF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,4BAA4B,WAAqB,IAAe,KAAc;AACjF,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,8BAA8B,WAAW,KAAK,WAAW,YAAY,QAAQ,SAAS,WAAW,CAAC;AAC5G,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAEzE,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kCAAkC,SAAS,GACvF,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,oBAAoB,UAAkB,IAAe,KAAc;AACtE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,UAAU,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AACpG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAEzE,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,yBAAyB,QAAQ,GAC7E,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;QAEO,aAAU;AACb,iBAAO,KAAK;QAChB;QAEO,UAAO;AACV,cAAI,KAAK,YAAY;AACjB;;AAEJ,eAAK,iBAAiB;AACtB,cAAI,CAAC,CAAC,KAAK,QAAQ;AACf,iBAAK,OAAO,MAAK;;AAErB,eAAK,aAAa;AAClB,eAAK,eAAe;AACpB,eAAK,iBAAiB;AACtB,eAAK,WAAW;AAChB,eAAK,YAAY;AACjB,eAAK,cAAc;AACnB,eAAK,kBAAkB;AACvB,eAAK,cAAc;AACnB,eAAK,mBAAmB;QAC5B;QAEO,MAAM,6BAA6B,YAAiC;AACvE,cAAI,CAAC,CAAC,KAAK,2BAA2B;AAClC,kBAAM,KAAK,0BAA0B,MAAK;;AAE9C,gBAAM,WAAW,mBAAkB;AACnC,eAAK,4BAA4B;AACjC,eAAK,0BAA0B,eAAe;QAClD;QAEO,eAAY;AACf,gBAAM,WAAoB,CAAC,CAAC,KAAK,KAAM,KAAK,GAAG,cAAc;AAC7D,iBAAO,KAAK,UAAU;YAClB,IAAI;YACJ;YACA,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;WAC5C;QACL;;QAqMQ,wBAAwB,aAAyB;AACrD,gBAAM,iBAAuC,KAAK,iBAAiB,uBAAuB,WAAW;AACrG,cAAI,mBAAmB,QAAW;AAC9B,gBAAI,CAAC,CAAC,KAAK,2BAA2B;AAClC,oBAAM,mBAAmB,KAAK;AAC9B,+BAAiB,eAAe,CAAC,WAAW;AAC5C,qBAAO,KAAK,0BAA0B,sBAAsB,kBAAkB,MAAM;;;QAGhG;QAEQ,2BAA2B,aAAyB;AACxD,eAAK,iBAAiB,kBAAkB,YAAY,EAAE;AACtD,gBAAM,mBAAmB,KAAK;AAC9B,2BAAiB,eAAe,CAAC,WAAW;AAC5C,iBAAO,KAAK,0BAA0B,sBAAsB,kBAAkB,OAAO;QACzF;QAEQ,MAAM,MAAM,SAAgB;AAChC,cAAI;AACA,iBAAK,kBAAkB;AACvB,kBAAM,KAAK,4BAA4B,MAAK;AAC5C,iBAAK,6BAA6B;AAClC,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,QAAO;;mBAEtC,GAAG;AAER,kBAAM;;AAEV,cAAI,SAAS;AACT,iBAAK,QAAO;;QAEpB;;QAGQ,eAAe,IAAgB,KAA8B;AACjE,cAAI,CAAC,CAAC,IAAI;AACN,gBAAI;AACA,iBAAE;qBACG,GAAG;AACR,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,CAAW;;;AAGvB,iBAAK;;QAEb;QAEQ,YAAY,OAAY,KAA8B;AAC1D,cAAI,CAAC,CAAC,KAAK;AACP,gBAAI,iBAAiB,OAAO;AACxB,oBAAM,aAAoB;AAC1B,kBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;mBAE5C;AACH,kBAAI,KAAe;;;QAG/B;;QAGQ,eAAe,aAAoB;AAEvC,gBAAM,eAA8B,KAAK,iBAAiB,aAAa,IAAI,CAAC,MAA2C,KAAK,cAAc,CAAC,CAAG;AAC9I,cAAI,CAAC,aAAa;AACd,mBAAO,aAAa,OAAO,CAAC,MAA4B,EAAE,WAAW,KAAK;iBACvE;AACH,mBAAO;;QAEf;QAEQ,cAAc,GAAuB;AACzC,iBAAO,IAAI,aAAA,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,mBAAmB,EAAE,KAAK;QACzH;QAEQ,kBAAkB,SAAgB;AACtC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,eAAe,eAAuB,SAAgB;AAC1D,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,eAAe,eAAe;AAEhE,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;;YAE5C;YACA,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,eAAe,UAAiB;AACpC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,gBAAgB,eAAqB;AACzC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,eAAe,eAAe;AAEhE,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;;YAE5C;YACA,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;WAC5C;QACL;QAEQ,kCAAkC,WAAmB;AACzD,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,yBAAyB,UAAgB;AAC7C,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,UAAU,UAAU;AACtD,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C;YACA,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,kBAAkB,SAAe;AACrC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAC9E,yBAAA,UAAU,wBAAwB,SAAS,SAAS;AAEpD,iBAAO,KAAK,UAAU;YAClB,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM;YACN,MAAM,aAAA,mCAAmC;WAC5C;QACL;;AA9hCJ,cAAA,mBAAA;;;;;;;;;;AC9IA,UAAa,qBAAb,MAA+B;QAK3B,YAAmB,aAAyB;AACxC,eAAK,kBAAkB;QAC3B;QAEU,eAAe,IAAc,KAAa;AAChD,cAAI,CAAC,CAAC,IAAI;AACN,gBAAI;AACA,iBAAE;qBACG,GAAG;AACR,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,CAAC;;;AAGb,iBAAK;;QAEb;QAEU,YAAY,OAAY,KAAa;AAC3C,cAAI,CAAC,CAAC,KAAK;AACP,gBAAI,iBAAiB,OAAO;AACxB,oBAAM,aAAoB;AAC1B,kBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;mBAE5C;AACH,kBAAI,KAAK;;;QAGrB;;AAhCJ,cAAA,qBAAA;;;;;;;;;;ACLA,UAAA,eAAA;AAEA,UAAa,kCAAb,cAAqD,aAAA,iBAAgB;QAGjE,YAAmB,gBAAwB,WAAkB;AACzD,gBAAM,SAAS;AACf,eAAK,qBAAqB;QAC9B;;QAGA,IAAW,iBAAc;AACrB,iBAAO,KAAK;QAChB;;AAXJ,cAAA,kCAAA;;;;;;;;;;ACFA,UAAA,eAAA;AAIA,UAAa,2CAAb,cAA8D,aAAA,iBAAgB;QAI1E,YAAmB,QAAkC,cAA8B,WAAkB;AACjG,gBAAM,SAAS;AACf,eAAK,aAAa;AAClB,eAAK,kBAAkB;QAC3B;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,2CAAA;;;;;;;;;;ACJA,UAAA,iCAAA;AAEA,UAAa,2CAAb,cAA8D,+BAAA,0BAAyB;;AAAvF,cAAA,2CAAA;;;;;;;;;;ACFA,UAAA,eAAA;AAGA,UAAa,mCAAb,cAAsD,aAAA,qBAAoB;;;;;;;;QAUtE,YAAmB,QAAuC,QAAiB,WAAkB;AACzF,gBAAM,QAAQ,SAAS;AACvB,eAAK,aAAa;QACtB;;;;;QAMA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AArBJ,cAAA,mCAAA;;;;;;;;;;ACDA,UAAA,oCAAA;AAGA,UAAa,gCAAb,cAAmD,kCAAA,6BAA4B;QAI3E,YAAmB,eACA,cACA,kBACA,UACA,QACA,MACA,UACA,QACA,cACA,MACA,YAA+B;AAC9C,gBAAM,cAAc,UAAU,QAAQ,MAAM,UAAU,QAAQ,QAAW,QAAW,cAAc,MAAM,UAAU;AAClH,eAAK,SAAS;AACd,eAAK,eAAe;QACxB;;;;QAKA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;;;;QAKA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AAhCJ,cAAA,gCAAA;;;;;;;;;;ACDA,UAAa,cAAb,MAAwB;;;;;;;;QASb,OAAO,aAAaC,SAAgB,cAAuC;AAC9E,cAAI,CAACA,SAAQ;AACT,mBAAO;;AAGX,cAAI,CAAC,cAAc;AACf,mBAAOA;;AAGX,cAAI,YAAoB;AACxB,cAAI,MAAc;AAElB,gBAAM,oBAAoB,CAAC,QAAqB;AAC5C,yBAAa;UACjB;AACA,gBAAM,cAAc,CAAC,QAAqB;AACtC,mBAAO;UACX;AACA,cAAI,aAAoC;AAExC,mBAAS,IAAI,GAAG,IAAIA,QAAO,QAAQ,KAAK;AACpC,kBAAM,IAAYA,QAAO,CAAC;AAC1B,kBAAM,OAAe,IAAI,IAAIA,QAAO,SAASA,QAAO,IAAI,CAAC,IAAI;AAE7D,oBAAQ,GAAG;cACP,KAAK;AACD,oBAAI,SAAS,KAAK;AACd,6BAAW,GAAG;AACd;uBACG;AACH,+BAAa;;AAEjB;cAEJ,KAAK;AACD,oBAAI,SAAS,KAAK;AACd,6BAAW,GAAG;AACd;uBACG;AACH,sBAAI,aAAa,eAAe,GAAG,GAAG;AAClC,iCAAa,aAAa,GAAG;;AAGjC,+BAAa;AACb,wBAAM;;AAEV;cAEJ;AACI,2BAAW,CAAC;AACZ;;;AAIZ,iBAAO;QACX;;AAhEJ,cAAA,cAAA;;;;;;;;;;ACLA,UAAA,eAAA;AASA,UAAA,mBAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AAMA,UAAA,mBAAA;AACA,UAAA,2BAAA;AACA,UAAA,6BAAA;AAGA,UAAA,eAAA;AAYA,UAAa,0CAAb,MAAa,iDAAgD,2BAAA,sBAAqB;QAM9E,YAAmB,YAAkC;AACjD,gBAAK;AAEL,yBAAA,UAAU,uBAAuB,YAAY,YAAY;AACzD,eAAK,iBAAiB;QAC1B;QAEO,OAAO,QAA0B,UAAoB,cAAqB;AAC7E,gBAAM,yBAAyB,OAAO,WAAW,YAAY,4CAA4C,EAAE,EAAE,YAAW,MAAO;AAE/H,gBAAM,WAAW,KAAK,eAAc,EAAG;AACvC,gBAAM,SAAS,SAAS,yBAAyB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC,EAAE;AAE5H,gBAAM,oBAA+C;YACjD,YAAY,2BAAA,sBAAsB,cAAc,MAAM;YACtD,MAAM,yCAAwC;YAC9C,QAAQ,mBAAmB,MAAM;;AAErC,4BAAkB,yBAAA,oBAAoB,QAAQ,IAAI,mBAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,sCAAsC,EAAE,CAAC;AACvJ,4BAAkB,yBAAA,oBAAoB,YAAY,IAAI,mBAAmB,SAAS,MAAM;AACxF,4BAAkB,yBAAA,oBAAoB,WAAW,IAAI,mBAAmB,SAAS,aAAa;AAC9F,4BAAkB,yBAAA,oBAAoB,gBAAgB,IAAI,SAAS,SAAS,KAAM,MAAM,yBAAA,oBAAoB;AAE5G,cAAI,cAAsB;AAC1B,gBAAM,cAAyC,CAAA;AAC/C,gBAAM,UAAqC,CAAA;AAE3C,cAAI,wBAAwB;AAExB,0BAAc,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC;AACvF,gBAAI,CAAC,aAAa;AACd,oBAAM,WAAW,OAAO,WAAW,YAC/B,aAAA,WAAW,8BACX,4CAA4C;AAEhD,4BAAc,WAAW,WAAW;;AAKxC,0BAAc,iBAAA,YAAY,aAAa,aAAa,iBAAiB;AAErE,kBAAM,YAAY,IAAI,IAAI,WAAW;AACrC,sBAAU,aAAa,QAAQ,CAAC,KAAa,QAAqB;AAC9D,0BAAY,GAAG,IAAI;YACvB,CAAC;AAED,kBAAM,cAAc,IAAI,aAAA,6BAA4B;AACpD,wBAAY,eAAe,aAAa,QAAQ,WAAW;AAG3D,wBAAY,yBAAA,oBAAoB,YAAY,IAAI,kBAAkB,yBAAA,oBAAoB,YAAY;AAClG,wBAAY,yBAAA,oBAAoB,WAAW,IAAI,kBAAkB,yBAAA,oBAAoB,WAAW;AAChG,gBAAI,CAAC,SAAS,QAAQ;AAClB,0BAAY,yBAAA,oBAAoB,gBAAgB,IAAI;;AAGxD,gBAAI,EAAE,yBAAA,oBAAoB,UAAU,cAAc;AAC9C,0BAAY,yBAAA,oBAAoB,MAAM,IAAI;;AAG9C,sBAAU,aAAa,QAAQ,CAAC,KAAa,QAAqB;AAC9D,wBAAU,aAAa,IAAI,KAAK,YAAY,GAAG,CAAC;AAChD,qBAAO,YAAY,GAAG;YAC1B,CAAC;AAED,0BAAc,UAAU,SAAQ;iBAE7B;AAEH,kBAAM,cAAc,IAAI,aAAA,6BAA4B;AAEpD,0BAAc,YAAY,eAAe,QAAQ,IAAI;AACrD,0BAAc,iBAAA,YAAY,aAAa,aAAa,iBAAiB;AAErE,wBAAY,eAAe,aAAa,QAAQ,WAAW;;AAG/D,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AACpC,kBAAQ,aAAA,eAAe,aAAa,KAAK,IAAI,SAAS;AACtD,cAAI,CAAC,CAAC,SAAS,OAAO;AAClB,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAG5C,gBAAM,oBAAoB,OAAO,WAAW,YAAY,qCAAqC,EAAE,EAAE,YAAW,MAAO;AACnH,iBAAO,IAAI,aAAA,oBAAoB,aAAa,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;QAC9K;;AA5FJ,cAAA,0CAAA;AAE4B,8CAAA,oBAA4B;;;;;;;;;;ACjCxD,UAAA,eAAA;AAKA,UAAA,+CAAA;AACA,UAAA,eAAA;AAMA,UAAA,iBAAA;AACA,UAAA,eAAA;AAaA,UAAA,oBAAA;AACA,UAAA,eAAA;AAYA,UAAY;AAAZ,OAAA,SAAYC,cAAW;AACnB,QAAAA,aAAAA,aAAA,UAAA,IAAA,CAAA,IAAA;AAAU,QAAAA,aAAAA,aAAA,YAAA,IAAA,CAAA,IAAA;AAAY,QAAAA,aAAAA,aAAA,WAAA,IAAA,CAAA,IAAA;MAC1B,GAFY,cAAA,QAAA,gBAAA,QAAA,cAAW,CAAA,EAAA;AAKvB,UAAM,oCAAN,cAAgD,aAAA,sBAAqB;QAIjE,YAAmB,cAAuC,aAA0B,YAAoC,YAAkC;AAEtJ,gBAAM,cAAc,aAAa,IAAI,6CAAA,wCAAwC,UAAU,CAAC;AAExF,eAAK,kBAAkB,YAAY;AACnC,cAAI,CAAC,CAAC,YAAY;AACd,iBAAK,iBAAiB;AACtB,iBAAK,iBAAiB,MAAW;AAC7B,mBAAK,kBAAkB,YAAY;YACvC;AAEA,iBAAK,iBAAiB,MAAW;AAC7B,mBAAK,kBAAkB,YAAY;YACvC;AAEA,iBAAK,cAAc,CAAC,IAA2B,MAA4C;AACvF,kBAAI,CAAC,CAAC,KAAK,eAAe,aAAa;AACnC,qBAAK,eAAe,YAAY,KAAK,gBAAgB,CAAC;;YAE9D;AAGA,iBAAK,aAAa,OAAO,IAA2B,MAAqD;AAErG,kBAAI,EAAE,QAAQ,cAAc;AACxB,sBAAM,KAAK,aAAY;AAEvB,qBAAK,gBAAgB,EAAE,OAAO,YAAY;qBACvC;AACH,oBAAI,CAAC,CAAC,KAAK,eAAe,YAAY;AAClC,uBAAK,eAAe,WAAW,KAAK,gBAAgB,CAAC;;;AAG7D;YACJ;AAGA,iBAAK,WAAW,YAA0B;AACtC,kBAAI,KAAK,oBAAoB,YAAY,UAAU;AAC/C,oBAAI;AACA,wBAAM,KAAK,aAAY;yBAClB,OAAO;AACZ,uBAAK,kBAAkB,YAAY;;;YAG/C;;QAER;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;QAEA,IAAW,MAAM,UAAqB;AAClC,eAAK,kBAAkB;QAC3B;QAEA,IAAW,eAAe,OAAsB;AAC5C,eAAK,SAAS,iBAAiB;QACnC;QAGO,eAAY;AACf,eAAK,kBAAkB,YAAY;QACvC;QAEO,MAAM,iBAAc;AACvB,eAAK,kBAAkB,YAAY;AACnC,gBAAM,KAAK,aAAY;QAC3B;;;;;QAMQ,gBAAgB,OAAa;AACjC,cAAI;AACA,gBAAI,CAAC,CAAC,KAAK,eAAe,UAAU;AAChC,oBAAM,cAAwD,IAAI,aAAA,yCAC9D,aAAA,mBAAmB,OACnB,OACA,aAAA,sBAAsB,YAAY;AAGtC,mBAAK,eAAe,SAAS,KAAK,gBAAgB,WAAW;;mBAE5D,GAAG;;QAGhB;QAEQ,MAAM,eAAY;AACtB,cAAI;AACA,iBAAK,+BAA8B;AACnC,kBAAM,KAAK,UAAU,WAAU;AAC/B,iBAAK,kBAAkB,YAAY;mBAC9B,GAAG;;QAGhB;;AAMJ,UAAa,yBAAb,cAA4C,aAAA,mBAAkB;QA2B1D,YAAmB,aAAyB;AACxC,gBAAM,WAAW;AALb,eAAA,aAA6B,aAAA,6BAA6B;AAM9D,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AACtB,eAAK,qBAAqB;AAC1B,eAAK,wBAAwB;AAC7B,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;QAChD;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,4BAAyB;AAChC,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,kBAAkB;QAClC;QAEA,IAAY,WAAQ;AAGhB,cAAI,CAAC,KAAK,iBAAiB,eAAe,CAAC,KAAK,kBAAkB;AAC9D,mBAAO;;AAIX,cAAI,KAAK,kBAAkB,KAAK,iBAAiB,UAAU,YAAY,aAAa,KAAK,iBAAiB,UAAU,YAAY,YAAY;AACxI,mBAAO;;AAIX,cAAI,KAAK,iBAAiB,eAAe;AACrC,mBAAO;;AAGX,iBAAO;QACX;QAEO,QAAQ,OAAsB;AACjC,eAAK,iBAAiB,iBAAiB;QAC3C;QAEO,mBAAmB,MAAc,OAAa;AACjD,gBAAM,oBAA+C,KAAK,MAAM,KAAK,eAAe,YAAY,aAAA,+BAA+B,IAAI,CAAC;AAEpI,4BAAkB,IAAI,IAAI;AAE1B,eAAK,eAAe,YAAY,aAAA,+BAA+B,KAAK,UAAU,iBAAiB,CAAC;QACpG;QAYO,sBAAsB,cAAsC,UAAkB,QAA4B,QAAmB,QAAiB;AAEjJ,cAAI;AAEA,gBAAI,OAAO,iBAAiB,UAAU;AAElC,6BAAA,UAAU,uBAAuB,cAAc,KAAK,WAAW,YAAY,QAAQ,SAAS,iBAAiB,CAAC;AAC9G,6BAAA,UAAU,wBAAwB,UAAU,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AAEpG,kBAAI,CAAC,CAAC,KAAK,kBAAkB;AACzB,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,qBAAqB,GAAG,MAAM;;AAG7E,kBAAI,OAAe;AACnB,kBAAI,SAAS,UAAa,SAAS,QAAQ,SAAS,IAAI;AACpD,uBAAO,aAAA,6BAA6B;;AAIxC,mBAAK,8BAA8B,aAAA,wBAAwB,iBACvD,KAAK,oBACL,KAAK,qBAAqB;AAC9B,mBAAK,4BAA4B,aAAa,aAAA,gBAAgB,MAAM;AACpE,mBAAK,4BAA4B,kBAAkB,IAAI;AACvD,mBAAK,4BAA4B,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,GAAG,IAAI;AAC9G,mBAAK,4BAA4B,YAAY,aAAA,WAAW,aAAA,WAAW,2BAA2B,GAAG,QAAQ;AAEzG,oBAAM,oBAA6C;gBAC/C,aAAA,WAAW;gBACX,aAAA,WAAW;gBACX,aAAA,WAAW;gBACX,aAAA,WAAW;gBACX,aAAA,WAAW;gBACX,aAAA,WAAW;gBACX,aAAA,WAAW;gBACX;gBACA;;AAGJ,yBAAW,QAAQ,mBAAmB;AAClC,sBAAM,QAAQ,KAAK,eAAe,YAAY,IAAI;AAClD,oBAAI,OAAO;AACP,wBAAM,MAAM,OAAO,SAAS,WAAW,OAAO,aAAA,WAAW,IAAI;AAC7D,uBAAK,4BAA4B,YAAY,KAAK,KAAK;;;AAI/D,oBAAM,oBAAqB,KAAK,MAAM,KAAK,eAAe,YAAY,aAAA,+BAA+B,IAAI,CAAC;AAC1G,yBAAW,QAAQ,OAAO,KAAK,iBAAiB,GAAG;AAC/C,qBAAK,4BAA4B,mBAAmB,MAAM,kBAAkB,IAAI,GAAG,aAAA,uBAAuB,iBAAiB;;AAI/H,mBAAK,mBAAmB,IAAI,kBAAA,iBAAiB,KAAK,2BAA2B;AAC7E,mBAAK,iBAAiB,yBAAyB;AAE/C,mBAAK,iBAAiB,sBAClB,cACA,UACA,MACC,CAAC,WAAwB;AAEtB,oBAAI,CAAC,QAAQ;AACT,uBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,uBAAuB,GAAG,MAAM;;AAG/E,qBAAK,4BAA4B,qBAAqB;AACtD,qBAAK,iBAAiB,KAAK,SAAS;AAGpC,qBAAK,iBAAiB,uBACjB,MAAW;AACR,uBAAK,eAAe,QAAQ,MAAM;gBACtC,GACC,CAAC,UAAoB;AAClB,uBAAK,YAAY,OAAO,MAAM;gBAClC,CAAE;cAEV,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,MAAM;cAClC,CAAE;uBAEC,OAAO,iBAAiB,UAAU;AAEzC,6BAAA,UAAU,uBAAuB,cAAc,KAAK,WAAW,YAAY,QAAQ,SAAS,iBAAiB,CAAC;AAC9G,6BAAA,UAAU,wBAAwB,UAAU,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AAGpG,mBAAK,eAAe,YAAY,aAAA,WAAW,6BAA6B,QAAQ;AAEhF,mBAAK,mBAAmB;AAExB,mBAAK,iBAAiB,yBAAyB;AAC/C,mBAAK,iBAAiB,KAAK,SAAS;AAEpC,6BAAA,UAAU,uBAAuB,KAAK,kBAAkB,KAAK,WAAW,uBAAuB;AAC/F,6BAAA,UAAU,uBAAuB,KAAK,iBAAiB,KAAK,OAAO,KAAK,WAAW,uBAAuB;AAE1G,mBAAK,8BAA8B,aAAa;AAEhD,mBAAK,eAAe,QAAoB,MAAM;mBAC3C;AACH,mBAAK,YACD,IAAI,MAAM,KAAK,WAAW,YAAY,QAAQ,SAAS,2BAA2B,CAAC,GACnF,MAAM;;mBAGT,OAAO;AACZ,iBAAK,YAAY,OAAO,OAAO,WAAW,WAAW,SAAS,MAAM;;QAE5E;;;;;;QAOO,uBAAuB,IAAe,KAAc;AAEvD,uBAAA,2BAA2B,YAA0B;AAGjD,kBAAM,KAAK,aAAY;AAEvB,kBAAM,KAAK,iBAAiB,yBAAwB;AAEpD,kBAAM,KAAK,iBAAiB,4BAA2B;AACvD,iBAAK,QAAO;UAEhB,GAAE,GAAI,IAAI,GAAG;QACjB;;;;;;;QAQO,qBAAqB,SAAiB,IAAe,KAAc;AAEtE,cAAI;AACA,2BAAA,UAAU,uBAAuB,KAAK,kBAAkB,KAAK,WAAW,oBAAoB;AAC5F,2BAAA,UAAU,wBAAwB,SAAS,KAAK,WAAW,YAAY,QAAQ,SAAS,OAAO,CAAC;AAEhG,iBAAK,iBAAiB,qBAAqB,SAAS,IAAI,GAAG;mBACtD,OAAO;AAEZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,uBAAuB,IAAe,KAAc;AACvD,uBAAA,2BAA2B,YAA0B;AACjD,gBAAI;AACA,6BAAA,UAAU,uBAAuB,KAAK,kBAAkB,KAAK,WAAW,oBAAoB;AAC5F,6BAAA,UAAU,uBAAuB,KAAK,iBAAiB,KAAK,OAAO,KAAK,WAAW,uBAAuB;AAE1G,kBAAI,KAAK,qBAAqB,QAAW;AACrC,sBAAM,KAAK,4BAA2B;;AAE1C,6BAAA,UAAU,uBAAuB,KAAK,kBAAkB,KAAK,WAAW,oBAAoB;AAE5F,kBAAI,CAAC,KAAK,UAAU;AAChB,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAGzE,oBAAM,KAAK,2BAA0B;AAErC,mBAAK,iBAAiB;qBACjB,OAAO;AACZ,mBAAK,iBAAiB;AACtB,oBAAM,KAAK,aAAY;AACvB,oBAAM;;UAEd,GAAE,GAAI,IAAI,GAAG;QACjB;;;;;;QAOO,sBAAsB,IAAe,KAAc;AACtD,uBAAA,2BAA2B,YAA0B;AACjD,gBAAI;AACA,kBAAI,CAAC,KAAK,gBAAgB;AAEtB,sBAAM,KAAK,aAAY;AACvB;;AAIJ,mBAAK,iBAAiB;AACtB,oBAAM,IAAI,QAAQ,CAAC,SAAqB,WAAyC;AAC7E,qBAAK,iBAAiB,+BAA+B,SAAS,MAAM;cACxE,CAAC;qBAEI,OAAO;AACZ,oBAAM,KAAK,aAAY;;UAE/B,GAAE,GAAI,IAAI,GAAG;QACjB;QAEO,aAAU;AACb,iBAAO,KAAK;QAChB;QAEO,QAAQ,QAAiB,SAAsB,KAA6B;AAC/E,uBAAA,2BAA2B,YAA0B;AACjD,gBAAI,KAAK,cAAc,CAAC,KAAK,gBAAgB;AACzC;;AAEJ,kBAAM,KAAK,aAAY;AACvB,iBAAK,iBAAiB;AACtB,iBAAK,4BAA4B,MAAK;AACtC,iBAAK,gCAAgC;AACrC,iBAAK,iBAAiB;AACtB,iBAAK,kBAAkB;AACvB,iBAAK,8BAA8B;AACnC,iBAAK,iBAAiB,QAAO;AAC7B,iBAAK,mBAAmB;UAC5B,GAAE,GAAI,SAAS,GAAG;QACtB;;;;QAKQ,MAAM,eAAY;AACtB,cAAI;AACA,iBAAK,iBAAiB;AACtB,kBAAM,KAAK,kBAAkB,eAAc;AAC3C,iBAAK,mBAAmB;mBACnB,GAAG;;QAGhB;;;;;;;QAQQ,MAAM,8BAA2B;AACrC,cAAI;AAEA,gBAAI,KAAK,oBAAoB,QAAW;AACpC,mBAAK,kBAAkB,aAAA,YAAY,2BAA0B;;AAIjE,gBAAI,KAAK,4BAA4B,YAAY,aAAA,WAAW,aAAA,WAAW,2BAA2B,CAAC,MAC3F,KAAK,oBAAoB;AAC7B,mBAAK,4BAA4B,YAAY,aAAA,WAAW,aAAA,WAAW,2BAA2B,GAAG,EAAE;;AAGvG,kBAAM,aAAa,MAAwB,KAAK;AAChD,iBAAK,mBAAmB,IAAI,kCAAkC,KAAK,6BAA6B,KAAK,iBAAiB,MAAM,UAAU;mBACjI,OAAO;AACZ,kBAAM,KAAK,aAAY;AACvB,kBAAM;;QAEd;;;;QAKQ,6BAA0B;AAC9B,iBAAO,IAAI,QAAQ,CAAC,SAAqB,WAAyC;AAC9E,iBAAK,iBAAiB,gCAAgC,SAAS,MAAM;UACzE,CAAC;QACL;;AA/WJ,cAAA,yBAAA;;;;;;;;;;AC5JA,UAAA,eAAA;AAYA,UAAA,eAAA;AAEA,UAAA,iBAAA;AACA,UAAA,eAAA;AAgBA,UAAa,0BAAb,MAAa,iCAAgC,aAAA,WAAU;;;;;;;QASnD,YAAmB,cAA4B,aAAyB;AACpE,gBAAM,mBAAqC;AAC3C,yBAAA,UAAU,YAAY,kBAAkB,cAAc;AAEtD,yBAAA,UAAU,wBACN,iBAAiB,WAAW,YAAY,aAAA,WAAW,oCAAoC,GACvF,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;AAE/D,gBAAM,aAAa,iBAAiB,YAAY,IAAI,aAAA,yCAAwC,CAAE;AAC9F,eAAK,eAAe,YAAY,aAAA,WAAW,oDAAoD,GAAG;AAClG,eAAK,yBAAyB;QAClC;;;;;;;;QASO,OAAO,WAAW,cAA4B,gCAAgE,aAAyB;AAC1I,gBAAM,mBAAqC;AAC3C,yCAA+B,WAAW,QAAQ,iBAAiB,UAAU;AAC7E,gBAAM,aAAa,IAAI,yBAAwB,cAAc,WAAW;AACxE,iBAAO;QACX;;;;;;;;QAiCA,IAAW,aAAU;AACjB,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC,sCAAsC;QAC5H;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;QASA,IAAW,4BAAyB;AAChC,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC;QACtF;;;;;;;;QASA,IAAW,eAAY;AACnB,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,cAAI,KAAK,WAAW,YAAY,aAAA,0BAA0B,aAAA,aAAa,aAAA,aAAa,MAAM,CAAC,MAAM,aAAA,aAAa,aAAA,aAAa,MAAM,GAAG;AAChI,mBAAO,aAAA,aAAa;iBACjB;AACH,mBAAO,aAAA,aAAa;;QAE5B;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;;;QAWO,uBAAuB,IAAiB,KAAyB;AACpE,uBAAA,0BAA0B,KAAK,oCAAoC,aAAA,gBAAgB,YAAY,GAAG,IAAI,GAAG;QAC7G;;;;;;;;;QAUO,sBAAsB,IAAiB,KAAyB;AACnE,uBAAA,0BAA0B,KAAK,mCAAkC,GAAI,IAAI,GAAG;QAChF;;;;;;;QAQO,MAAM,IAAiB,SAAiC;AAC3D,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AACrD,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,OAAO;QAC7D;;;;;;;;QASU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,wBAAwB;AAC7B;;AAGJ,cAAI,WAAW;AACX,iBAAK,yBAAyB;AAC9B,kBAAM,KAAK,mBAAkB;;AAGjC,gBAAM,MAAM,QAAQ,SAAS;QACjC;QAEU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,cAAc;QACjE;QAEU,wBACN,gBACA,mBACA,aACA,kBAAkC;AAClC,gBAAM,aAA8B;AACpC,2BAAiB,8BAA8B;AAC/C,iBAAO,IAAI,aAAA,2CAA2C,gBAAgB,mBAAmB,YAAY,kBAAkB,IAAI;QAC/H;;AA7MJ,cAAA,0BAAA;;;;;;;;;;AC7BA,UAAA,eAAA;AAWA,UAAa,OAAb,MAAiB;QAGb,YAAmB,QAAc;AAC7B,eAAK,aAAa;QACtB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AATJ,cAAA,OAAA;AAiDA,UAAa,cAAb,MAAa,aAAW;QAWpB,YAAmB,IAAY,QAAgB,aAAqB,QAAiB,SAAkB,YAAqB,mBAA2B,OAAc;AACjK,eAAK,SAAS;AACd,eAAK,aAAa;AAClB,eAAK,kBAAkB;AACvB,eAAK,aAAa;AAClB,eAAK,cAAc;AACnB,eAAK,iBAAiB;AACtB,eAAK,wBAAwB;AAC7B,eAAK,YAAY;AACjB,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;QAChD;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK;QAChB;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEO,OAAO,KAAK,IAAY,UAAkB,OAAa;AAC1D,iBAAO,IAAI,aAAY,IAAI,IAAI,IAAI,OAAO,OAAO,OAAO,UAAU,KAAK;QAC3E;;AA7DJ,cAAA,cAAA;;;;;;;;;;AC7DA,UAAY;AAAZ,OAAA,SAAYC,2BAAwB;AAEhC,QAAAA,0BAAAA,0BAAA,oBAAA,IAAA,CAAA,IAAA;AAKA,QAAAA,0BAAAA,0BAAA,kBAAA,IAAA,CAAA,IAAA;AAGA,QAAAA,0BAAAA,0BAAA,SAAA,IAAA,CAAA,IAAA;MACJ,GAXY,2BAAA,QAAA,6BAAA,QAAA,2BAAwB,CAAA,EAAA;;;;;;;;;;ACEpC,UAAA,eAAA;AAgBA,UAAA,eAAA;AAKA,UAAA,iBAAA;AACA,UAAA,eAAA;AAiBA,UAAsB,UAAtB,MAA6B;QAEzB,cAAA;AACI;QACJ;;;;;;;;QAqBO,OAAO,mBAAmB,cAAuC,WAAmB,MAAiB,MAAe;AACvH,yBAAA,UAAU,uBAAuB,cAAc,aAAA,6BAA6B,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAC7H,yBAAA,UAAU,uBAAuB,aAAa,QAAQ,aAAA,6BAA6B,WAAW,YAAY,QAAQ,SAAS,gCAAgC,CAAC;AAC5J,yBAAA,UAAU,YAAY,WAAW,WAAW;AAC5C,cAAI,UAAU,WAAW,GAAG;AACxB,kBAAM,IAAI,MAAM,2BAA2B;;AAE/C,cAAI,CAAC,aAAa,mBAAmB,CAAC,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,gCAAgC,CAAC,GAAG;AACrH,2BAAA,UAAU,uBAAuB,aAAa,iBAAiB,aAAA,6BAA6B,WAAW,YAAY,QAAQ,SAAS,6BAA6B,CAAC;;AAEtK,gBAAM,cAAc,IAAI,YAAY,cAAc,SAAS;AAE3D,uBAAA,2BAA2B,YAA0B;UAAE,GAAE,GAAI,MAAM,IAAI;AACvE,iBAAO;QACX;;AAvCJ,cAAA,UAAA;AAuFA,UAAa,cAAb,cAAiC,QAAO;;;;;;QAwBpC,YAAmB,cAAuC,IAAU;AAChE,gBAAK;AAVD,eAAA,aAA6B,aAAA,6BAA6B;AAooB1D,eAAA,cAAc,CAAC,MAAgC;AACnD,iBAAK,kBAAkB;AACvB,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B,gBAAgB;AACnD,qBAAK,2BAA2B,eAAe,KAAK,4BAA4B,CAAC;;qBAEhFC,IAAG;;UAGhB;AAEQ,eAAA,iBAAiB,CAAC,MAAgC;AACtD,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B,gBAAgB;AACnD,qBAAK,2BAA2B,eAAe,KAAK,4BAA4B,CAAC;;qBAEhFA,IAAG;;AAGR,mBAAK,KAAK,MAAM,KAAK;;UAE7B;AAEQ,eAAA,aAAa,CAAC,GAA2B,MAAqD;AAClG,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B,UAAU;AAC7C,qBAAK,2BAA2B,SAAS,KAAK,4BAA4B,CAAC;;qBAE1EA,IAAG;;UAGhB;AAEQ,eAAA,qCAAqC,CAAC,GAA2B,MAA0C;AAC/G,gBAAI;AACA,oBAAM,qBAA2C,KAAK,iBAAiB,eAAe,EAAE,EAAE;AAC1F,kBAAI,uBAAuB,QAAW;AAElC,wBAAQ,EAAE,KAAK;kBACX,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,cAAc,EAAE;AACnC;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,aAAa,EAAE;AAClC;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,YAAY,EAAE;AACjC;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,UAAU,EAAE;AAC/B;kBACJ,KAAK,aAAA,mCAAmC;AACpC,uCAAmB,uBAAuB,EAAE;AAC5C;;AAER,qBAAK,iBAAiB,uBAAuB,kBAAkB;AAE/D,oBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,uBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,SAClE,CAAC,KAAK,cAAc,kBAAkB,CAAC,GAAG,EAAE,SAAS,CAAC;;;qBAGjEA,IAAG;;UAGhB;AAEQ,eAAA,4BAA4B,MAAW;UAE/C;AAEQ,eAAA,2BAA2B,CAAC,GAA2B,MAA6B;AACxF,gBAAI;AACA,mBAAK,iBAAiB,aAAa,QAAQ,CAAC,MAAqC,EAAE,UAAW,EAAE,SAAS,QAAQ,EAAE,OAAQ;AAC3H,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,SAClE,KAAK,eAAe,KAAK,GAAG,EAAE,SAAS,CAAC;;qBAE/CA,IAAG;;UAGhB;AAEQ,eAAA,mCAAmC,CAAC,GAA2B,MAAiC;AACpG,gBAAI;AACA,oBAAM,iBAAuC,KAAK,iBAAiB,uBAAuB,EAAE,WAAW;AACvG,kBAAI,mBAAmB,QAAW;AAC9B,oBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,uBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,oBAClE,CAAC,KAAK,cAAc,cAAc,CAAC,GAAG,EAAE,SAAS,CAAC;;;qBAG7DA,IAAG;;UAGhB;AAEQ,eAAA,oCAAoC,CAAC,GAA2B,MAAiC;AACrG,gBAAI;AACA,oBAAM,qBAA2C,KAAK,iBAAiB,eAAe,EAAE,YAAY,EAAE;AACtG,kBAAI,uBAAuB,QAAW;AAElC,qBAAK,iBAAiB,kBAAkB,EAAE,YAAY,EAAE;AACxD,oBAAI,CAAC,CAAC,KAAK,4BAA4B;AAEnC,uBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,kBAClE,CAAC,KAAK,cAAc,kBAAkB,CAAC,GAAG,EAAE,SAAS,CAAC;;;qBAGjEA,IAAG;;UAGhB;AAEQ,eAAA,wBAAwB,CAAC,GAA2B,MAAqD;AAC7G,gBAAI;AACA,sBAAQ,EAAE,SAAS;gBACf,KAAK,aAAA,mCAAmC;AACpC,sBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,yBAAK,2BAA2B,YAC5B,KAAK,4BACL,IAAI,aAAA,iCAAiC,EAAE,SAAS,QAAW,EAAE,SAAS,CAAC;;AAE/E;gBACJ,KAAK,aAAA,mCAAmC;AACpC,sBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,yBAAK,2BAA2B,aAC5B,KAAK,4BACL,IAAI,aAAA,iCAAiC,EAAE,SAAS,QAAW,EAAE,SAAS,CAAC;;AAE/E;gBACJ,KAAK,aAAA,mCAAmC;AACpC,sBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,yBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,iCAAiC,EAAE,SAAS,QAAW,EAAE,SAAS,CAAC;;AAE/E;;qBAEHA,IAAG;;UAGhB;AAEQ,eAAA,6BAA6B,CAAC,GAA2B,MAAsC;AACnG,gBAAI;AAEA,kBAAI,EAAE,iBAAiB,UAAa,EAAE,iBAAiB,MAAM;AACzD,qBAAK,SAAS,QAAQ,EAAE;;AAG5B,mBAAK,iBAAiB,eAAe,CAAC,GAAG,EAAE,YAAY;AAEvD,kBAAI,KAAK,iBAAiB,OAAO,QAAW;AACxC,qBAAK,cAAc;;AAEvB,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,oBAC5B,KAAK,4BACL,IAAI,aAAA,yCAAyC,aAAA,yBAAyB,oBAAoB,KAAK,eAAe,IAAI,GAAG,EAAE,SAAS,CAAC;;AAGzI,kBAAI,KAAK,GAAG,QAAQ;AAChB,sBAAM,WAAmB,KAAK,4BAA4B,WAAW,YAAY,aAAA,WAAW,2BAA2B;AACvH,oBAAI,aAAa,UAAa,SAAS,SAAS,KAAK,aAAa,KAAK,GAAG,aAAa;AAEnF,uBAAK,oBAAoB,QAAQ;;;qBAGpCA,IAAG;;UAGhB;AAEQ,eAAA,2BAA2B,CAAC,GAA2B,MAA4C;AACvG,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,uBAAuB,KAAK,4BAA4B,CAAC;;qBAExFA,IAAG;;UAGhB;AAvzBI,eAAK,kBAAkB;AACvB,eAAK,iBAAiB;AACtB,eAAK,qBAAqB;AAC1B,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,eAAK,cAAc,IAAI,aAAA,oBAAmB;AAG1C,gBAAM,WAAmB,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;AAC7G,cAAI,CAAC,UAAU;AACX,yBAAa,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,GAAG,aAAA,6BAA6B,mBAAmB;;AAE1I,eAAK,eAAe,aAAa,YAAY,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;AACxG,eAAK,qBAAqB;AAG1B,eAAK,aAAa;AAGlB,gBAAM,aAAa;AACnB,yBAAA,UAAU,YAAY,YAAY,cAAc;AAChD,eAAK,iBAAiB,WAAW,WAAW,MAAK;AACjD,eAAK,kBAAkB;AACvB,eAAK,mBAAmB,IAAI,aAAA,qBAAoB;AAChD,eAAK,cAAc;AACnB,eAAK,2BAA2B;QACpC;;QAGA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;QAGA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;QAGA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;QAGA,IAAW,YAAS;AAChB,iBAAO,KAAK,WAAW,KAAK,SAAS,SAAS,KAAK;QACvD;;QAGA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;QAGA,IAAW,4BAAyB;AAChC,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK,iBAAiB,IAAI,SAAS,QAAQ,KAAK,iBAAiB,IAAI;QAChF;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK,mBAAmB,KAAK;QACxC;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,eAAe,IAAI;QACnC;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK,cAAc,KAAK,iBAAiB,EAAE;QACtD;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,cAAc,KAAK,iBAAiB,IAAI;QACxD;QAEA,IAAW,wBAAqB;AAC5B,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,gBAAM,SAAiB,KAAK;AAC5B,gBAAM,IAAgC,KAAK,aAAa,IAAI,CAAC,UACzD;YACI,IAAI,KAAK;YACT,mBAAmB,KAAK;YACxB,OAAO,KAAK;YAEnB;AACD,gBAAM,QAA2B,CAAA;AACjC,qBAAW,OAAO,aAAA,6BAA6B,wBAAwB;AACnE,kBAAM,MAAc,KAAK,WAAW,YAAY,KAAK,EAAE;AACvD,gBAAI,QAAQ,IAAI;AACZ,oBAAM,GAAG,IAAI;;;AAGrB,gBAAM,OAAoB,EAAE,IAAI,QAAQ,cAAc,GAAG,mBAAmB,MAAK;AACjF,iBAAO;QACX;QAEA,IAAY,UAAO;AACf,iBAAO,KAAK,mBAAmB,CAAC,KAAK,iBAAiB,IAAI;QAC9D;QAEA,IAAY,gBAAa;AACrB,iBAAO,KAAK,mBAAmB,KAAK,iBAAiB,IAAI;QAC7D;;;QAIA,IAAW,qBAAkB;AACzB,iBAAO,KAAK;QAChB;QAEA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,oBAAoB;AAC7D,eAAK,YAAY;QACrB;;;;;;QAOO,mBAAmB,IAAe,KAAc;AACnD,cAAI;AACA,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,qBAAqB,GAAG,GAAG;;AAE1E,iBAAK,YAAY,aAAa,KAAK,gBAAgB,QAC9C,CAAC,SAAqC;AACnC,kBAAI,CAAC,MAAM;AACP,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,uBAAuB,GAAG,GAAG;;AAE5E,mBAAK,WAAW;AAChB,mBAAK,eAAe,IAAI,GAAG;YAC/B,GACC,CAAC,UAAoB;AAClB,mBAAK,YAAY,OAAO,GAAG;YAC/B,CAAE;mBACD,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,kBAAkB,IAAe,KAAc;AAClD,cAAI;AAEA,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,qBAAqB,GAAG,GAAG;;AAG1E,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,uBAAuB;AAEvF,iBAAK,iBAAiB,OAAO,KAAK,SAAS;AAI3C,iBAAK,2BAA2B,YAAY,KAAK;AACjD,iBAAK,2BAA2B,eAAe,KAAK;AACpD,iBAAK,2BAA2B,WAAW,KAAK;AAEhD,iBAAK,2BAA2B,mCAAmC,KAAK;AACxE,iBAAK,2BAA2B,0BAA0B,KAAK;AAC/D,iBAAK,2BAA2B,yBAAyB,KAAK;AAC9D,iBAAK,2BAA2B,iCAAiC,KAAK;AACtE,iBAAK,2BAA2B,kCAAkC,KAAK;AACvE,iBAAK,2BAA2B,sBAAsB,KAAK;AAC3D,iBAAK,2BAA2B,2BAA2B,KAAK;AAChE,iBAAK,2BAA2B,yBAAyB,KAAK;AAE9D,iBAAK,2BAA2B,QAAQ,KAAK,SAAS,OACjD,MAAW;AACR,mBAAK,eAAe,IAAI,GAAG;YAC/B,GACC,CAAC,UAAoB;AAClB,mBAAK,YAAY,OAAO,GAAG;YAC/B,CAAE;mBACD,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,oBAAoB,aAA2B,IAAe,KAAc;AAC/E,yBAAA,UAAU,uBAAuB,aAAa,aAAa;AAC3D,uBAAA,0BAA0B,KAAK,wBAAwB,WAAW,GAAG,IAAI,GAAG;QAChF;;;;;;;;;QAUO,iBAAiB,WAAmB,UAAkB,MAAc,IAAe,KAAc;AACpG,cAAI;AAKA,2BAAA,UAAU,wBAAwB,WAAW,KAAK,WAAW,YAAY,QAAQ,SAAS,gBAAgB,CAAC;AAC3G,2BAAA,UAAU,wBAAwB,UAAU,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AACpG,2BAAA,UAAU,wBAAwB,MAAM,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AAEhG,iBAAK,YAAY,aAAa,KAAK,gBAAgB,WAC9C,CAAC,SAAqC;AACnC,6BAAA,UAAU,uBAAuB,MAAM,KAAK,WAAW,uBAAuB;AAC9E,mBAAK,WAAW;AAChB,mBAAK,WAAW,qBAAqB,KAAK;AAE1C,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAG,KAAK,wBAAwB;;YAExC,GACC,CAAC,UAAoB;AAClB,mBAAK,YAAY,OAAO,GAAG;YAC/B,CAAE;mBACD,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,mBAAmB,IAAe,KAAc;AACnD,uBAAA,0BAA0B,KAAK,uBAAsB,GAAI,IAAI,GAAG;QACpE;QAEO,MAAM,yBAAsB;AAC3B,yBAAA,UAAU,uBAAuB,KAAK,gBAAgB,KAAK,WAAW,uBAAuB;AAC7F,yBAAA,UAAU,wBAAwB,KAAK,SAAS,OAAO,KAAK,WAAW,uBAAuB;AAC9F,gBAAM,KAAK,YAAY,MAAM,KAAK,gBAAgB,KAAK,SAAS,KAAK;AAErE,eAAK,QAAO;QACpB;;;;;;QAOO,gBAAgB,IAAe,KAAc;AAChD,uBAAA,0BAA0B,KAAK,oBAAmB,GAAI,IAAI,GAAG;QACjE;QAEO,sBAAmB;AACtB,iBAAO,KAAK,MAAM,IAAI;QAC1B;;;;;;QAOO,iBAAiB,IAAe,KAAc;AACjD,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAE9G,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,IAAI,GAC/D,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,yBAAyB,IAAe,KAAc;AACzD,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,4BAA4B,KAAK,WAAW,oBAAoB;AACtG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AAEpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAE9G,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kBAAkB,IAAI,GAClE,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,qBAAqB,QAAgB,IAAe,KAAc;AACrE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,QAAQ,KAAK,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAChG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AAEpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAGzE,gBAAI,CAAC,KAAK,GAAG,UAAU,KAAK,GAAG,OAAO,QAAQ;AAC1C,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,4BAA4B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAG7G,kBAAM,SAAiB,KAAK,iBAAiB,oBAAoB,MAAM;AACvE,gBAAI,WAAW,IAAI;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,yBAAyB,GAAG,GAAG;;AAE9E,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,QAAQ,IAAI,GAAI,MAAW;AACnF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,uBAAuB,QAAuC,IAAe,KAAc;AAC9F,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,gBAAI,CAAC,CAAC,KAAK,6BAA6B,OAAO,eAAe,IAAI,GAAG;AAEjE,2BAAA,0BAA0B,KAAK,2BAA2B,MAAsB,GAAG,IAAI,GAAG;mBACvF;AACH,6BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,6BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,kBAAI,CAAC,KAAK,eAAe;AACrB,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,4BAA4B,QAAQ,aAAa,QAAQ,CAAC,GAAG,GAAG;;AAE/G,kBAAI,gBAAgB;AACpB,kBAAI,OAAO,WAAW,UAAU;AAC5B,gCAAgB;yBACT,OAAO,eAAe,IAAI,GAAG;AACpC,sBAAM,cAA4B;AAClC,gCAAgB,YAAY;yBACrB,OAAO,eAAe,QAAQ,GAAG;AACxC,sBAAM,OAAc;AACpB,gCAAgB,KAAK;;AAEzB,6BAAA,UAAU,wBAAwB,eAAe,KAAK,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAEvG,oBAAM,QAAgB,KAAK,aAAa,UAAU,CAAC,MAA4B,EAAE,OAAO,aAAa;AACrG,kBAAI,UAAU,IAAI;AACd,qBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,yBAAyB,GAAG,GAAG;;AAE9E,kBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,qBAAK,2BAA2B,YAAY,KAAK,gBAAgB,aAAa,GAAI,MAAW;AACzF,uBAAK,eAAe,IAAI,GAAG;gBAC/B,GACK,CAAC,UAAoB;AAClB,uBAAK,YAAY,OAAO,GAAG;gBAC/B,CAAE;;;mBAGT,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,mBAAmB,IAAe,KAAc;AACnD,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,QAAQ,CAAC,GAAG,GAAG;;AAEhH,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,KAAK,GAAI,MAAW;AAChF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;QAOO,2BAA2B,IAAe,KAAc;AAC3D,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,6BAA6B,QAAQ,aAAa,YAAY,CAAC,GAAG,GAAG;;AAEpH,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kBAAkB,KAAK,GAAI,MAAW;AACnF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,uBAAuB,QAAgB,IAAe,KAAc;AACvE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,QAAQ,KAAK,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAChG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AAEpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAGzE,gBAAI,CAAC,KAAK,GAAG,UAAU,KAAK,GAAG,OAAO,QAAQ;AAC1C,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,4BAA4B,QAAQ,aAAa,MAAM,CAAC,GAAG,GAAG;;AAG7G,kBAAM,SAAiB,KAAK,iBAAiB,oBAAoB,MAAM;AACvE,gBAAI,WAAW,IAAI;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,yBAAyB,GAAG,GAAG;;AAE9E,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,eAAe,QAAQ,KAAK,GAAI,MAAW;AACxF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,qBAAqB,SAAiB,IAAe,KAAc;AACtE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,SAAS,KAAK,WAAW,YAAY,QAAQ,SAAS,SAAS,CAAC;AAClG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAGzE,gBAAI,QAAQ,SAAS,KAAK,0BAA0B;AAChD,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,YAAY,QAAQ,SAAS,gBAAgB,CAAC,GAAG,GAAG;;AAEnG,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kBAAkB,OAAO,GAAI,MAAW;AACrF,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACK,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,4BAA4B,WAAqB,IAAe,KAAc;AACjF,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,8BAA8B,WAAW,KAAK,WAAW,YAAY,QAAQ,SAAS,WAAW,CAAC;AAC5G,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAEzE,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,kCAAkC,SAAS,GACvF,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;;;;;;;QAQO,oBAAoB,UAAkB,IAAe,KAAc;AACtE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,gBAAgB,KAAK,2BAA2B,WAAU,CAAE;AACtE,2BAAA,UAAU,wBAAwB,UAAU,KAAK,WAAW,YAAY,QAAQ,SAAS,UAAU,CAAC;AACpG,2BAAA,UAAU,uBAAuB,KAAK,UAAU,KAAK,WAAW,oBAAoB;AACpF,gBAAI,CAAC,KAAK,SAAS;AACf,mBAAK,YAAY,IAAI,MAAM,KAAK,WAAW,oBAAoB,GAAG,GAAG;;AAEzE,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,YAAY,KAAK,yBAAyB,QAAQ,GAC7E,MAAW;AACR,qBAAK,eAAe,IAAI,GAAG;cAC/B,GACC,CAAC,UAAoB;AAClB,qBAAK,YAAY,OAAO,GAAG;cAC/B,CAAE;;mBAEL,OAAO;AACZ,iBAAK,YAAY,OAAO,GAAG;;QAEnC;QAEO,aAAU;AACb,iBAAO,KAAK;QAChB;QAEO,UAAO;AACV,cAAI,KAAK,YAAY;AACjB;;AAEJ,eAAK,iBAAiB;AACtB,cAAI,CAAC,CAAC,KAAK,QAAQ;AACf,iBAAK,OAAO,MAAK;;AAErB,eAAK,aAAa;AAClB,eAAK,eAAe;AACpB,eAAK,iBAAiB;AACtB,eAAK,WAAW;AAChB,eAAK,YAAY;AACjB,eAAK,cAAc;AACnB,eAAK,kBAAkB;AACvB,eAAK,cAAc;AACnB,eAAK,mBAAmB;QAC5B;QAEO,MAAM,6BAA6B,YAAiC;AACvE,cAAI,CAAC,CAAC,KAAK,2BAA2B;AAClC,kBAAM,KAAK,0BAA0B,MAAK;;AAE9C,gBAAM,WAAW,mBAAkB;AACnC,eAAK,4BAA4B;AACjC,eAAK,0BAA0B,UAAU;QAC7C;QAEO,eAAY;AACf,gBAAM,WAAoB,CAAC,CAAC,KAAK,KAAM,KAAK,GAAG,cAAc;AAC7D,iBAAO,KAAK,UAAU;YAClB,IAAI;YACJ;YACA,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;WAC5C;QACL;;QAqMQ,wBAAwB,aAAyB;AACrD,gBAAM,iBAAuC,KAAK,iBAAiB,uBAAuB,WAAW;AACrG,cAAI,mBAAmB,QAAW;AAC9B,gBAAI,CAAC,CAAC,KAAK,2BAA2B;AAClC,oBAAM,cAAc,KAAK;AACzB,0BAAY,eAAe,CAAC,WAAW;AACvC,qBAAO,KAAK,0BAA0B,iBAAiB,aAAa,MAAM;;;QAGtF;QAEQ,2BAA2B,aAAyB;AACxD,eAAK,iBAAiB,kBAAkB,YAAY,EAAE;AACtD,gBAAM,cAAc,KAAK;AACzB,sBAAY,eAAe,CAAC,WAAW;AACvC,iBAAO,KAAK,0BAA0B,iBAAiB,aAAa,OAAO;QAC/E;QAEQ,MAAM,MAAM,SAAgB;AAChC,cAAI;AACA,iBAAK,kBAAkB;AACvB,kBAAM,KAAK,4BAA4B,MAAK;AAC5C,iBAAK,6BAA6B;AAClC,gBAAI,CAAC,CAAC,KAAK,4BAA4B;AACnC,mBAAK,2BAA2B,QAAO;;mBAEtC,GAAG;AAER,kBAAM;;AAEV,cAAI,SAAS;AACT,iBAAK,QAAO;;QAEpB;;QAGQ,eAAe,IAAgB,KAA8B;AACjE,cAAI,CAAC,CAAC,IAAI;AACN,gBAAI;AACA,iBAAE;qBACG,GAAG;AACR,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,CAAW;;;AAGvB,iBAAK;;QAEb;QAEQ,YAAY,OAAY,KAA8B;AAC1D,cAAI,CAAC,CAAC,KAAK;AACP,gBAAI,iBAAiB,OAAO;AACxB,oBAAM,aAAoB;AAC1B,kBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;mBAE5C;AACH,kBAAI,KAAe;;;QAG/B;;QAGQ,eAAe,aAAoB;AAEvC,gBAAM,eAA8B,KAAK,iBAAiB,aAAa,IAAI,CAAC,MAA2C,KAAK,cAAc,CAAC,CAAG;AAC9I,cAAI,CAAC,aAAa;AACd,mBAAO,aAAa,OAAO,CAAC,MAA4B,EAAE,WAAW,KAAK;iBACvE;AACH,mBAAO;;QAEf;QAEQ,cAAc,GAAuB;AACzC,iBAAO,IAAI,aAAA,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,mBAAmB,EAAE,KAAK;QACzH;QAEQ,kBAAkB,SAAgB;AACtC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,UAAU;AAClE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,eAAe,eAAuB,SAAgB;AAC1D,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,gBAAgB;AACxE,yBAAA,UAAU,wBAAwB,eAAe,eAAe;AAEhE,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;;YAE5C;YACA,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,eAAe,UAAiB;AACpC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,WAAW;AACnE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,gBAAgB,eAAqB;AACzC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,WAAW;AACnE,yBAAA,UAAU,wBAAwB,eAAe,eAAe;AAEhE,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;;YAE5C;YACA,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;WAC5C;QACL;QAEQ,kCAAkC,WAAmB;AACzD,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,WAAW;AACnE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,yBAAyB,UAAgB;AAC7C,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,WAAW;AACnE,yBAAA,UAAU,wBAAwB,UAAU,UAAU;AACtD,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAE9E,iBAAO,KAAK,UAAU;YAClB,SAAS,aAAA,mCAAmC;YAC5C;YACA,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM,aAAA,mCAAmC;YACzC,OAAO;WACV;QACL;QAEQ,kBAAkB,SAAe;AACrC,yBAAA,UAAU,wBAAwB,KAAK,SAAS,QAAQ,WAAW;AACnE,yBAAA,UAAU,wBAAwB,KAAK,SAAS,eAAe,eAAe;AAC9E,yBAAA,UAAU,wBAAwB,SAAS,SAAS;AAEpD,iBAAO,KAAK,UAAU;YAClB,eAAe,KAAK,SAAS;YAC7B,QAAQ,KAAK,SAAS;YACtB,MAAM;YACN,MAAM,aAAA,mCAAmC;WAC5C;QACL;;AA5/BJ,cAAA,cAAA;;;;;;;;;;AChIA,UAAA,iCAAA;AAEA,UAAa,wCAAb,cAA2D,+BAAA,0BAAyB;;AAApF,cAAA,wCAAA;;;;;;;;;;ACHA,UAAA,eAAA;AACA,UAAA,eAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AASA,UAAA,eAAA;AAOA,UAAa,qBAAb,MAA+B;;;;;;QA4E3B,YAAmB,aAAyB;AACxC,eAAK,kBAAkB;AACvB,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,eAAK,iBAAiB;AACtB,eAAK,yBAAyB;QAClC;;;;;;;;QASA,IAAW,4BAAyB;AAChC,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC;QACtF;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;QAOA,IAAW,eAAY;AACnB,iBAAO,KAAK,eAAe;QAC/B;;;;;;QAOA,IAAW,aAAU;AACjB,iBAAO,aAAA,WAAW,eAAe,KAAK,cAAc;QACxD;;;;;;;;QASA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;QAKO,iBAAiB,SAAmB,IAAe,KAAc;AAIpE,gBAAM,cAAc;AACpB,yBAAA,UAAU,uBAAuB,aAAA,aAAa,SAAS;AAIvD,eAAK,iBAAiB,IAAI,aAAA,sBAAsB,QAAQ,QAAQ,KAAK,eAAe;AACpF,yBAAA,UAAU,uBAAuB,KAAK,gBAAgB,YAAY;AAClE,eAAK,eAAe,wBAAwB,IAAI;AAEhD,uBAAA,0BAA0B,YAAY,6BAA6B,KAAK,cAAc,GAAG,IAAI,GAAG;QACpG;;;;;;;;;;QAWO,uBAAuB,IAAe,KAAc;AACvD,eAAK,eAAe,gCAAgC,IAAI,GAAG;QAC/D;;;;;;;;;;QAWO,sBAAsB,IAAe,KAAc;AACtD,eAAK,eAAe,+BAA+B,IAAI,GAAG;QAC9D;;;;QAKO,kBAAkB,IAAe,KAAc;AAClD,eAAK,eAAe,oBAAmB;AAEvC,uBAAA,2BAA2B,YAA0B;AAAG;UAAQ,GAAE,GAAI,IAAI,GAAG;QACjF;;;;;;;QAQO,MAAM,IAAiB,SAAiC;AAC3D,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AACrD,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,OAAO;QAC7D;;;;;;;;QASU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,wBAAwB;AAC7B;;AAEJ,cAAI,CAAC,CAAC,KAAK,gBAAgB;AACvB,kBAAM,KAAK,eAAe,MAAK;AAC/B,iBAAK,iBAAiB;;AAE1B,cAAI,WAAW;AACX,iBAAK,yBAAyB;;QAEtC;;AAvOJ,cAAA,qBAAA;;;;;;;;;;ACnBA,UAAA,eAAA;AAMA,UAAa,kCAAb,cAAqD,aAAA,kBAAiB;;;;;;;;;;;;;;;;;QAkBlE,YAAmB,UAAmB,QAAuB,MAC1C,UAAmB,QAAiB,UACpC,6BAAsC,WAAoB,cAC1D,MAAe,YAA+B;AAC7D,gBAAM,UAAU,QAAQ,MAAM,UAAU,QAAQ,UAAU,6BAA6B,cAAc,MAAM,UAAU;AACrH,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AAnCJ,cAAA,kCAAA;;;;;;;;;ACLA,UAAA,oBAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAY,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAgB,EAAA,CAAA;AAEvC,UAAA,0BAAA;AAAS,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAAkB,EAAA,CAAA;AAC3B,UAAA,uCAAA;AAAS,aAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAA+B,EAAA,CAAA;AACxC,UAAA,gDAAA;AAAS,aAAA,eAAA,SAAA,4CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8CAAA;MAAwC,EAAA,CAAA;AACjD,UAAA,gDAAA;AAAS,aAAA,eAAA,SAAA,4CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8CAAA;MAAwC,EAAA,CAAA;AACjD,UAAA,wCAAA;AAAS,aAAA,eAAA,SAAA,oCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sCAAA;MAAgC,EAAA,CAAA;AACzC,UAAA,qCAAA;AAAS,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,mCAAA;MAA6B,EAAA,CAAA;AACtC,UAAA,8BAAA;AAAS,aAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,4BAAA;MAAsB,EAAA,CAAA;AAC/B,UAAA,+BAAA;AAAS,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAAuB,EAAA,CAAA;AAChC,UAAA,oBAAA;AAAuB,aAAA,eAAA,SAAA,eAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAW,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,QAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAI,EAAA,CAAA;AACxC,UAAA,gCAAA;AAAS,aAAA,eAAA,SAAA,4BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8BAAA;MAAwB,EAAA,CAAA;AAEjC,UAAA,eAAA;AAAS,aAAA,eAAA,SAAA,WAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAO,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,eAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAW,EAAA,CAAA;AAE7B,UAAA,6CAAA;AAAS,aAAA,eAAA,SAAA,yCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,2CAAA;MAAqC,EAAA,CAAA;AAC9C,UAAA,0BAAA;AAAS,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAAkB,EAAA,CAAA;AAE3B,UAAA,uCAAA;AAAS,aAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAA+B,EAAA,CAAA;;;;;;;;;;ACjBxC,UAAA,eAAA;AAYA,UAAA,eAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AAEA,UAAsB,cAAtB,MAAsB,aAAW;;;;;;QA2D7B,YAAsB,cAA0B;AAC5C,gBAAM,mBAAqC;AAC3C,yBAAA,UAAU,YAAY,kBAAkB,cAAc;AAEtD,eAAK,iBAAiB,iBAAiB,WAAW,MAAK;AACvD,eAAK,eAAe;AACpB,eAAK,mBAAmB;AACxB,eAAK,wBAAwB,IAAI,aAAA,MAAK;QAC1C;;;;;;;;QAnDA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;;;;;;;;QASA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,2BAAwB;AAC/B,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,iDAAiD,MAAM,aAAA;QACzG;QAiBO,UAAU,MAAY;AACzB,gBAAM,yBAAqD;YACvf,cAAI,WAAW,KAAK,WAAW,YAAY,aAAA,WAAW,uCAAuC,OAAO;AACpG,cAAI,QAAQ,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC,EAAE;AACzF,cAAI,OAAe,aAAY,UAAU,IAAI;AAC7C,cAAI,KAAK,0BAA0B;AAC/B,uBAAW;iBACR;AACH,oBAAQ,SAAS,uBAAuB,QAAQ;;AAEpD,cAAI,OAAO;AACP,mBAAO,gBAAgB,KAAK,KAAK,IAAI;;AAEzC,iBAAO,yKAAyK,QAAQ,KAAK,IAAI;AACjM,iBAAO;QACX;;;;;;;;;;;QAYU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,cAAc;AACnB;;AAGJ,cAAI,WAAW;AACX,gBAAI,KAAK,aAAa;AAClB,oBAAM,KAAK,YAAY,QAAO;;;AAItC,eAAK,eAAe;QACxB;QAEU,MAAM,eAAY;AACxB,cAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,kBAAkB;AAC9C,iBAAK,mBAAmB;AACxB,kBAAM,UAA4B,MAAM,KAAK,sBAAsB,QAAO;AAC1E,mBAAO,KAAK,YAAY,MAAM,QAAQ,MAAM,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,IAAI,QAAQ,KAAK,QAAQ,UAAU;;QAElI;QAoBU,wBAAwB,cAAiC;AAC/D,iBAAO,IAAI,aAAA,kBACP,cACA,KAAK,cAAc;QAC3B;;QAGU,4BAAyB;AAE/B,cAAI,aAAc,OAAO,WAAW,cAAe,YAAY;AAC/D,cAAI,SAAS;AACb,cAAI,YAAY;AAEhB,cAAI,OAAO,cAAc,aAAa;AAClC,yBAAa,aAAa,MAAM,UAAU;AAC1C,qBAAS,UAAU;AACnB,wBAAY,UAAU;;AAG1B,gBAAM,oBAAuC,KAAK,wBAC9C,IAAI,aAAA,oBACA,IAAI,aAAA,QAAQ,IAAI,aAAA,GAAG,YAAY,QAAQ,SAAS,CAAC,CAAC,CAAC;AAE3D,gBAAM,kBAAkB,KAAK,eAAe,YAAY,aAAA,WAAW,6BAA6B,MAAS;AACzG,gBAAM,iBAAkB,mBAAmB,oBAAoB,KAC3D,IAAI,aAAA,uCAAuC,eAAe,IAC1D,IAAI,aAAA,6BACA,MAAsB;AAClB,kBAAM,qBAAqB,KAAK,eAAe,YAAY,aAAA,WAAW,kCAAkC,MAAS;AACjH,mBAAO,QAAQ,QAAQ,kBAAkB;UAC7C,GACA,MAAsB;AAClB,kBAAM,qBAAqB,KAAK,eAAe,YAAY,aAAA,WAAW,kCAAkC,MAAS;AACjH,mBAAO,QAAQ,QAAQ,kBAAkB;UAC7C,CAAC;AAET,eAAK,cAAc,KAAK,uBACpB,gBACA,KAAK,uBACL,iBAAiB;AAErB,eAAK,kBAAkB,KAAK,2BACxB,gBACA,iBAAiB;QACzB;QAEU,OAAO,UAAU,MAAY;AACnC,iBAAO,KAAK,QAAQ,MAAM,OAAO,EAC5B,QAAQ,MAAM,MAAM,EACpB,QAAQ,MAAM,MAAM,EACpB,QAAQ,MAAM,QAAQ,EACtB,QAAQ,MAAM,QAAQ;QAC/B;;AA/TJ,cAAA,cAAA;AAkUA,UAAa,mBAAb,MAA6B;QAQzB,YAAmB,WAAmB,MAAcC,SAAiB,IAAyC,KAA2B,YAA8B;AACnK,eAAK,YAAY;AACjB,eAAK,OAAO;AACZ,eAAK,SAASA;AACd,eAAK,KAAK;AACV,eAAK,MAAM;AACX,eAAK,aAAa;QACtB;;AAfJ,cAAA,mBAAA;;;;;;;;;;AChVA,UAAA,eAAA;AASA,UAAA,eAAA;AAKA,UAAA,uBAAA;AACA,UAAA,yBAAA;AACA,UAAA,yBAAA;AAIA,UAAA,iBAAA;AACA,UAAA,eAAA;AAkBA,UAAA,mBAAA;AAOA,UAAa,oBAAb,MAAa,2BAA0B,aAAA,YAAW;;;;;;;QAmE9C,YAAmB,cAA4B,aAAyB;AACpE,gBAAM,YAAY;AAElB,cAAI,gBAAgB,MAAM;AACtB,gBAAI,gBAAgB,QAAW;AAC3B,mBAAK,cAAe,OAAO,WAAW,cAAe,SAAY,aAAA,YAAY,yBAAwB;mBAClG;AACH,mBAAK,cAAc;;;AAI3B,eAAK,wBAAwB,IAAI,aAAA,iCAAgC;AACjE,eAAK,0BAAyB;QAClC;;;;;;;;QASO,OAAO,WAAW,cAA4B,gCAAgE,aAAyB;AAC1I,gBAAM,mBAAqC;AAC3C,yCAA+B,WAAW,QAAQ,iBAAiB,UAAU;AAC7E,iBAAO,IAAI,mBAAkB,cAAc,WAAW;QAC1D;;;;;;;;;;;;QAaO,eAAe,MAAc,IAAyC,KAA2B,QAAqE;AACzK,eAAK,UAAU,MAAM,OAAO,IAAI,KAAK,MAAM;QAC/C;;;;;;;;;;;;QAaO,eAAe,MAAc,IAAyC,KAA2B,QAAqE;AACzK,eAAK,UAAU,MAAM,MAAM,IAAI,KAAK,MAAM;QAC9C;;;;;;;;;;;QAYO,MAAM,eAAe,SAAiB,IAAE;AAC3C,iBAAO,KAAK,UAAU,MAAM;QAChC;;;;;;;QAQO,MAAM,IAAiB,KAA6B;AACvD,yBAAA,UAAU,gBAAgB,KAAK,YAAY;AAE3C,uBAAA,0BAA0B,KAAK,QAAQ,IAAI,GAAG,IAAI,GAAG;QACzD;;;;;QAMA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;;;;;;QASU,uBACN,gBACA,mBACA,mBAAoC;AACpC,iBAAO,IAAI,aAAA,uBAAuB,gBAAgB,mBAC9C,mBAAmB,MAAM,KAAK,WAAoC;QAC1E;QAEU,2BACN,gBACA,mBAAoC;AACpC,iBAAO,IAAI,aAAA,qBAAqB,mBAAmB,cAAc;QACrE;QAEU,4BAAyB;AAC/B,gBAAM,0BAAyB;AAE/B,eAAK,YAAY,oBAAoB,uBAAA,sBAAsB,gCACvD,aAAA,4BAA4B,KAAK,WAAW,YAAY,aAAA,WAAW,2CAA2C,MAAS,CAA6C,CAAC;QAE7K;QAEU,UAAU,MAAc,QAAiB,IAAyC,KAA2B,YAAyE;AAC5L,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,YAAY;AAC3C,kBAAM,YAAY,aAAA,iBAAgB;AAClC,gBAAI;AACJ,gBAAI,sBAAsB,aAAA,+BAA+B;AACrD,iCAAmB,IAAI,uBAAA,0BAA0B,UAAU;uBACpD,sBAAsB,aAAA,uBAAuB;AACpD,iCAAmB;uBACZ,eAAe,QAAW;AACjC,iCAAmB,IAAI,qBAAA,gBAAgB,UAAsB;mBAC1D;AACH,iCAAmB;;AAEvB,iBAAK,sBAAsB,QAAQ,IAAI,iBAAA,iBAAiB,WAAW,MAAM,QAAQ,CAAC,MAAkC;AAChH,mBAAK,mBAAmB;AACxB,kBAAI,CAAC,CAAC,IAAI;AACN,oBAAI;AACA,qBAAG,CAAC;yBACCC,IAAG;AACR,sBAAI,CAAC,CAAC,KAAK;AACP,wBAAIA,EAAW;;;;AAI3B,mBAAK;AAEL,mBAAK,aAAY,EAAG,MAAM,MAAW;cAAG,CAAC;YAE7C,GAAG,CAAC,MAAmB;AACnB,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,CAAC;;YAEb,GAAG,gBAAgB,CAAC;AAGpB,iBAAK,aAAY,EAAG,MAAM,MAAW;YAAG,CAAC;mBAEpC,OAAO;AACZ,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI,iBAAiB,OAAO;AACxB,sBAAM,aAAoB;AAC1B,oBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;qBAC5C;AACH,oBAAI,KAAe;;;AAM3B,iBAAK,QAAQ,IAAI,EAAE,MAAM,MAAW;YAAG,CAAC;;QAEhD;QAEU,MAAM,UAAU,QAAc;AACpC,gBAAM,YAAY,aAAA,iBAAgB;AAClC,gBAAM,WAA0B,MAAM,KAAK,gBAAgB,cAAc,SAAS;AAClF,cAAI,SAAS,MAAM,MAAM,QAAQ,SAAS,IAAI,GAAG;AAC7C,gBAAI,OAAO,SAAS;AACpB,gBAAI,CAAC,CAAC,UAAU,OAAO,SAAS,GAAG;AAC/B,qBAAO,KAAK,OAAO,CAAC,SAAsC,CAAC,CAAC,KAAK,UAAU,KAAK,OAAO,YAAW,MAAO,OAAO,YAAW,CAAE;;AAEjI,mBAAO,IAAI,aAAA,sBAAsB,WAAW,MAAM,MAAS;iBACxD;AACH,mBAAO,IAAI,aAAA,sBAAsB,WAAW,QAAW,UAAU,SAAS,MAAM,KAAK,SAAS,UAAU,EAAE;;QAEnH;;AA9PH,cAAA,oBAAA;;;;;;;;;;AC3CA,UAAa,kBAAb,MAA4B;;;;;;;;;QAcxB,YAAmB,UAAmB,QAAuB,cAAuB,YAA+B;AAC/G,eAAK,eAAe;AACpB,eAAK,aAAa;AAClB,eAAK,mBAAmB;AACxB,eAAK,iBAAiB;QAC1B;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;AA/DJ,cAAA,kBAAA;;;;;;;;;;ACPA,UAAA,eAAA;AAWA,UAAa,wBAAb,cAA2C,aAAA,gBAAe;;;;;;;;;;;QActD,YAAmB,UAAmB,QAAuB,WACjD,cAAuB,YAAiC,eAAsB;AACtF,gBAAM,UAAU,QAAQ,cAAc,UAAU;AAChD,eAAK,gBAAgB;AACrB,eAAK,oBAAoB;QAC7B;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;;AAzCJ,cAAA,wBAAA;;;;;;;;;;ACJA,UAAa,2BAAb,MAAqC;;;;;;QAQjC,YAAmB,QAA6B;AAC5C,eAAK,aAAa;QACtB;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AArBJ,cAAA,2BAAA;;;;;;;;;;ACAA,UAAa,uCAAb,MAAiD;;;;;;;;;;;QAkB7C,YAAmB,aAAqB,UAAkB,MAAc,YACrD,YAAoB,cAAyC;AAC5E,eAAK,kBAAkB;AACvB,eAAK,eAAe;AACpB,eAAK,WAAW;AAChB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AACtB,eAAK,mBAAmB;QAC5B;;;;;;;;QASA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AA5FJ,cAAA,uCAAA;;;;;;;;;;ACFA,UAAa,mCAAb,MAA6C;;;;;;;QAUzC,YAAmB,aAAqB,MAAY;AAChD,eAAK,kBAAkB;AACvB,eAAK,WAAW;QACpB;;;;;;;;QASA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;AAnCJ,cAAA,mCAAA;;;;;;;;;;ACAA,UAAa,iCAAb,MAA2C;;;;;;;;QAYvC,YAAmB,aAAqB,UAAkB,WAAiB;AACvE,eAAK,kBAAkB;AACvB,eAAK,eAAe;AACpB,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AAjDJ,cAAA,iCAAA;;;;;;;;;;ACAA,UAAY;AAAZ,OAAA,SAAYC,8BAA2B;AAKnC,QAAAA,6BAAA,MAAA,IAAA;AAMA,QAAAA,6BAAA,aAAA,IAAA;AAMA,QAAAA,6BAAA,UAAA,IAAA;MACJ,GAlBY,8BAAA,QAAA,gCAAA,QAAA,8BAA2B,CAAA,EAAA;;;;;;;;;;ACLvC,UAAA,eAAA;AAaA,UAAa,wBAAb,cAA2C,aAAA,gBAAe;;;;;;;QAStD,YAAmB,WAAmB,MAAW,cAAoB;AACjE,cAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,kBAAM,WAAW,aAAA,aAAa,qBAAqB,QAAW,IAAI,aAAA,mBAAkB,CAAE;AACtF,iBAAK,aAAa,CAAA;AAClB,uBAAW,QAAQ,MAAM;AACrB,mBAAK,WAAW,KAAK,IAAI,aAAA,UAAU,IAAkB,CAAC;;iBAEvD;AACH,kBAAM,WAAW,aAAA,aAAa,UAAU,eAAe,eAAe,iCAAiC,IAAI,aAAA,mBAAkB,CAAE;;QAEvI;;;;;;;;QASA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;AA9BJ,cAAA,wBAAA;;;;;;;;;;ACPA,UAAY;AAAZ,OAAA,SAAYC,uBAAoB;AAG5B,QAAAA,sBAAAA,sBAAA,SAAA,IAAA,CAAA,IAAA;AAGA,QAAAA,sBAAAA,sBAAA,QAAA,IAAA,CAAA,IAAA;AAGA,QAAAA,sBAAAA,sBAAA,MAAA,IAAA,CAAA,IAAA;AAGA,QAAAA,sBAAAA,sBAAA,SAAA,IAAA,CAAA,IAAA;MACJ,GAbY,uBAAA,QAAA,yBAAA,QAAA,uBAAoB,CAAA,EAAA;AAehC,UAAY;AAAZ,OAAA,SAAYC,qBAAkB;AAC1B,QAAAA,oBAAAA,oBAAA,cAAA,IAAA,CAAA,IAAA;AACA,QAAAA,oBAAAA,oBAAA,gBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,oBAAAA,oBAAA,eAAA,IAAA,CAAA,IAAA;AACA,QAAAA,oBAAAA,oBAAA,iBAAA,IAAA,CAAA,IAAA;MACJ,GALY,qBAAA,QAAA,uBAAA,QAAA,qBAAkB,CAAA,EAAA;AAO9B,UAAM,gBAAsD;QACxD,CAAC,qBAAqB,qBAAqB,OAAO,CAAC,GAAG,qBAAqB;QAC3E,CAAC,qBAAqB,qBAAqB,IAAI,CAAC,GAAG,qBAAqB;QACxE,CAAC,qBAAqB,qBAAqB,MAAM,CAAC,GAAG,qBAAqB;;AAQ9E,UAAa,YAAb,MAAsB;QAiBlB,YAAmB,MAAgB;AAR3B,eAAA,gBAAyC,CAAA;AAS7C,cAAI,CAAC,CAAC,MAAM;AACR,iBAAK,WAAW,KAAK;AACrB,iBAAK,aAAa,KAAK;AACvB,iBAAK,gBAAgB,KAAK;AAC1B,iBAAK,iBAAiB,KAAK;AAC3B,iBAAK,kBAAkB,KAAK;AAC5B,iBAAK,gBAAgB,KAAK;AAC1B,iBAAK,gBAAgB,KAAK,UAAU,SAAS,UAAU,IAAI,mBAAmB,iBAAiB,mBAAmB;AAClH,iBAAK,aAAa,cAAc,KAAK,MAAM,KAAK,qBAAqB;AAErE,gBAAI,CAAC,CAAC,KAAK,aAAa,MAAM,QAAQ,KAAK,SAAS,GAAG;AACnD,yBAAW,SAAS,KAAK,WAAW;AAChC,qBAAK,cAAc,KAAK,KAAK;;;AAIrC,iBAAK,sBAAsB,KAAK;AAChC,iBAAK,aAAa,KAAK;AAEvB,gBAAI,KAAK,qBAAqB;AAE1B,mBAAK,0BAA0B,KAAK;;AAGxC,iBAAK,qBAAqB,KAAK;AAE/B,gBAAI,MAAM,QAAQ,KAAK,mBAAmB,GAAG;AACzC,mBAAK,0BAA0B,CAAC,GAAG,KAAK,mBAAmB;;AAG/D,gBAAI,MAAM,QAAQ,KAAK,YAAY,GAAG;AAClC,mBAAK,mBAAmB,CAAC,GAAG,KAAK,YAAY;;;QAGzD;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,sBAAmB;AAE1B,iBAAO,KAAK;QAChB;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK;QAChB;QAEA,IAAW,sBAAmB;AAC1B,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AAjHJ,cAAA,YAAA;;;;;;;;;;ACvCA,UAAA,eAAA;AASA,UAAA,yBAAA;AACA,UAAA,yBAAA;AAEA,UAAM,kCAAkC,KAAK;AAE7C,UAAM,wBAAmD;QACrD,CAAC,uBAAA,eAAe,GAAG,GAAG;QACtB,CAAC,uBAAA,eAAe,KAAK,GAAG;QACxB,CAAC,uBAAA,eAAe,GAAG,GAAG;QACtB,CAAC,uBAAA,eAAe,QAAQ,GAAG;QAC3B,CAAC,uBAAA,eAAe,SAAS,GAAG;QAC5B,CAAC,uBAAA,eAAe,IAAI,GAAG;QACvB,CAAC,uBAAA,eAAe,IAAI,GAAG;;AAU3B,UAAa,0BAAb,MAAoC;QAehC,YAAmB,oBAA2B;AATtC,eAAA,sBAA+B;AAE/B,eAAA,wBAAiC;AACjC,eAAA,wBAAiC;AAIjC,eAAA,oBAA4B;AAGhC,eAAK,SAAS,qBAAqB,qBAAqB,aAAA,iBAAgB;AACxE,eAAK,eAAe;AACpB,eAAK,eAAe;QACxB;QAEO,KAAE;AACL,iBAAO,KAAK;QAChB;QAEO,MAAM,QAAqB,IAAiB,KAA6B;AAC5E,cAAI,KAAK,oBAAoB,QAAW;AACpC,iBAAK,gBAAgB,KAAK,MAAM;AAChC,iBAAK,mBAAkB,EAAG,KAAK,MAAW;AACtC,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAE;;YAEV,GAAG,CAAC,UAAuB;AACvB,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,KAAK;;YAEjB,CAAC;qBACM,KAAK,0BAA0B,QAAW;AACjD,iBAAK,sBAAsB,MAAM,MAAM;AACvC,iBAAK,qBAAqB,OAAO;;QAEzC;QAEO,MAAM,IAAiB,KAA6B;AACvD,eAAK,eAAe;AACpB,cAAI,KAAK,qBAAqB,QAAW;AACrC,iBAAK,4BAA2B,EAAG,KAAK,MAAW;AAC/C,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAE;;YAEV,GAAG,CAAC,UAAuB;AACvB,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,KAAK;;YAEjB,CAAC;qBACM,KAAK,0BAA0B,UAAa,OAAO,WAAW,aAAa;AAClF,iBAAK,KAAK,WAAW,cAAc,uBAAA,eAAe,OAAO,KAAK,WAAW,cAAc,uBAAA,eAAe,SAC/F,KAAK,WAAW,cAAc,uBAAA,eAAe,SAAS,KAAK,WAAW,cAAc,OAAO;AAE9F,sBAAQ,KAAK,8EAA8E;AAC3F,kBAAI,CAAC,CAAC,KAAK,YAAY;AACnB,qBAAK,WAAW,IAAI;;mBAErB;AACH,kBAAI,gBAAgB,IAAI,YAAY,KAAK,iBAAiB;AAC1D,mBAAK,sBAAsB,KAAK,aAAa,EAAE,KAAK,MAAW;AAC3D,gCAAgB,KAAK,WAAW,UAAU,aAAa;AACvD,sBAAM,YAAY,IAAI,KAAK,CAAC,aAAa,GAAG,EAAE,MAAM,sBAAsB,KAAK,WAAW,SAAS,EAAC,CAAE;AACtG,qBAAK,UAAU,MAAM,OAAO,IAAI,gBAAgB,SAAS;AACzD,qBAAK,eAAc,EAAG,KAAK,MAAW;AAClC,sBAAI,CAAC,CAAC,IAAI;AACN,uBAAE;;gBAEV,GAAG,CAAC,UAAuB;AACvB,sBAAI,CAAC,CAAC,KAAK;AACP,wBAAI,KAAK;;gBAEjB,CAAC;cACL,GAAG,CAAC,UAAuB;AACvB,oBAAI,CAAC,CAAC,KAAK;AACP,sBAAI,KAAK;;cAEjB,CAAC;;iBAEF;AAEH,gBAAI,CAAC,CAAC,KAAK,YAAY;AACnB,mBAAK,WAAW,IAAI;;;QAGhC;QAEA,IAAW,OAAOC,SAAyB;AAEvC,cAAI,OAAQ,iBAAkB,eAAgB,OAAQ,WAAY,eAAe,OAAS,OAAe,uBAAwB,aAAc;AAC3I,iBAAK,aAAaA;AAClB,kBAAM,WAAmB,sBAAsB,KAAK,WAAW,SAAS;AACxE,gBAAI,aAAa,QAAW;AAExB,sBAAQ,KACJ,+BAA+B,uBAAA,eAAe,KAAK,WAAW,SAAS,CAAC,8BAA8B;uBAEnG,OAAQ,gBAAiB,eAAe,YAAY,gBAAgB,QAAQ,GAAG;AACtF,mBAAK,YAAY,IAAI,MAAK;AAC1B,mBAAK,kBAAkB,CAAA;AACvB,mBAAK,kBAAkB,IAAI,YAAW;AACtC,mBAAK,UAAU,MAAM,IAAI,gBAAgB,KAAK,eAAe;AAC7D,mBAAK,UAAU,KAAI;AACnB,mBAAK,gBAAgB,eAAe,MAAW;AAC3C,qBAAK,wBAAwB;AAC7B,qBAAK,gBAAgB,WAAW;AAChC,qBAAK,mBAAmB,KAAK,gBAAgB,gBAAgB,QAAQ;AACrE,qBAAK,iBAAiB,WAAW,MAAW;AACxC,uBAAK,mBAAkB,EAAG,MAAM,CAAC,WAAwB;AACrD,iCAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;kBACvD,CAAC;gBACL;AACA,qBAAK,iBAAiB,cAAc,MAAW;AAC3C,uBAAK,4BAA2B,EAAG,MAAM,CAAC,WAAwB;AAC9D,iCAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;kBACvD,CAAC;gBACL;AACA,qBAAK,iBAAiB,gBAAgB,MAAW;AAC7C,uBAAK,wBAAwB;gBACjC;cACJ;AACA,mBAAK,mBAAkB,EAAG,MAAM,CAAC,WAAwB;AACrD,6BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;cACvD,CAAC;mBAEE;AAEH,sBAAQ,KACJ,UAAU,uBAAA,eAAe,KAAK,WAAW,SAAS,CAAC,iEAAiE;AACxH,mBAAK,wBAAwB,IAAI,uBAAA,0BAAyB;AAC1D,mBAAK,sBAAsB,SAAS,KAAK;AACzC,mBAAK,YAAY,IAAI,MAAK;;;QAGtC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,WAAW,UAAU;QACrC;QAEA,IAAW,OAAO,QAAc;AAC5B,cAAI,CAAC,CAAC,KAAK,WAAW;AAClB,iBAAK,UAAU,SAAS;;QAEhC;QAEO,OAAI;AACP,cAAI,CAAC,CAAC,KAAK,WAAW;AAClB,iBAAK,UAAU,QAAQ;;QAE/B;QAEO,SAAM;AACT,cAAI,CAAC,CAAC,KAAK,WAAW;AAClB,iBAAK,UAAU,QAAQ;;QAE/B;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,cAAI,KAAK,cAAc,QAAW;AAC9B,mBAAO,KAAK,UAAU;;AAE1B,iBAAO;QACX;QAEO,QAAK;AACR,cAAI,CAAC,KAAK,gBAAgB,KAAK,cAAc,QAAW;AACpD,iBAAK,UAAU,MAAK;AACpB,iBAAK,eAAe;;QAE5B;QAEO,OAAO,IAAiB,KAA6B;AACxD,cAAI,KAAK,gBAAgB,KAAK,cAAc,QAAW;AACnD,iBAAK,UAAU,KAAI,EAAG,KAAK,MAAW;AAClC,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAE;;YAEV,GAAG,CAAC,UAAuB;AACvB,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,KAAK;;YAEjB,CAAC;AACD,iBAAK,eAAe;;QAE5B;QAMA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEQ,MAAM,qBAAkB;AAC5B,cAAI,KAAK,oBAAoB,UAAc,KAAK,gBAAgB,SAAS,KAAM,KAAK,sBAAqB,GAAI;AACzG,iBAAK,wBAAwB;AAC7B,kBAAM,SAAS,KAAK,gBAAgB,MAAK;AACzC,gBAAI;AACA,mBAAK,iBAAiB,aAAa,MAAM;qBACpC,OAAO;AACZ,mBAAK,gBAAgB,QAAQ,MAAM;AAEnC,sBAAQ,IACJ,iEAAiE;AACrE;;AAEJ,kBAAM,KAAK,eAAc;qBAClB,KAAK,aAAY,GAAI;AAC5B,kBAAM,KAAK,4BAA2B;;QAE9C;QAEQ,MAAM,8BAA2B;AACrC,cAAI,KAAK,aAAY,KAAM,KAAK,sBAAqB,GAAI;AACrD,iBAAK,gBAAgB,YAAW;AAChC,kBAAM,KAAK,eAAc;;QAEjC;QAEQ,MAAM,iBAAc;AACxB,cAAI,CAAC,KAAK,uBAAuB,KAAK,cAAc,QAAW;AAC3D,iBAAK,sBAAsB;AAC3B,gBAAI,CAAC,CAAC,KAAK,cAAc;AACrB,mBAAK,aAAa,IAAI;;AAE1B,iBAAK,UAAU,UAAU,MAAW;AAChC,kBAAI,CAAC,CAAC,KAAK,YAAY;AACnB,qBAAK,WAAW,IAAI;;YAE5B;AACA,gBAAI,CAAC,KAAK,cAAc;AACpB,oBAAM,KAAK,UAAU,KAAI;;;QAGrC;QAEQ,eAAY;AAChB,iBAAQ,KAAK,YAAY,KAAK,qBAAqB,UAAc,KAAK,gBAAgB,WAAW,KAC1F,KAAK,yBAAyB,CAAC,KAAK,yBAAyB,KAAK,gBAAgB,eAAe;QAC5G;QAEQ,wBAAqB;AACzB,iBAAQ,KAAK,qBAAqB,UAAa,CAAC,KAAK,iBAAiB;QAC1E;;AA9PJ,cAAA,0BAAA;;;;;;;;;;AC/BA,UAAA,iCAAA;AAQA,UAAa,6CAAb,cAAgE,+BAAA,0BAAyB;;AAAzF,cAAA,6CAAA;;;;;;;;;;ACRA,UAAA,iCAAA;AAQA,UAAa,wCAAb,cAA2D,+BAAA,0BAAyB;;AAApF,cAAA,wCAAA;;;;;;;;;;ACHA,UAAY;AAAZ,OAAA,SAAYC,uCAAoC;AAK5C,QAAAA,sCAAAA,sCAAA,WAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,sCAAAA,sCAAA,aAAA,IAAA,CAAA,IAAA;MACJ,GAZY,uCAAA,QAAA,yCAAA,QAAA,uCAAoC,CAAA,EAAA;;;;;;;;;;ACAhD,UAAY;AAAZ,OAAA,SAAYC,qCAAkC;AAK1C,QAAAA,oCAAAA,oCAAA,SAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,oCAAAA,oCAAA,MAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,oCAAAA,oCAAA,UAAA,IAAA,CAAA,IAAA;MACJ,GAlBY,qCAAA,QAAA,uCAAA,QAAA,qCAAkC,CAAA,EAAA;;;;;;;;;;ACJ9C,UAAA,iBAAA;AACA,UAAA,eAAA;AAwBA,UAAa,gCAAb,MAAa,+BAA6B;;;;;;;;;QAetC,YAAmB,eACA,gBAAsD,aAAA,qCAAqC,WAC3F,cAAkD,aAAA,mCAAmC,SACrF,eAAwB,OAAK;AAC5C,yBAAA,UAAU,uBAAuB,eAAe,eAAe;AAC/D,eAAK,iBAAiB,IAAI,aAAA,mBAAkB;AAC5C,eAAK,eAAe,YAAY,aAAA,WAAW,uCAAuC,aAAa;AAC/F,eAAK,eAAe,YAAY,aAAA,WAAW,uCAAuC,aAAA,qCAAqC,aAAa,CAAC;AACrI,eAAK,eAAe,YAAY,aAAA,WAAW,qCAAqC,aAAA,mCAAmC,WAAW,CAAC;AAC/H,eAAK,eAAe,YAAY,aAAA,WAAW,sCAAsC,OAAO,YAAY,CAAC;QACzG;;;;;;;;;;;QAYO,OAAO,SAAS,MAAY;AAC/B,yBAAA,UAAU,uBAAuB,MAAM,MAAM;AAC7C,gBAAM,SAAS,IAAI,+BAA8B,EAAE;AACnD,iBAAO,iBAAiB,IAAI,aAAA,mBAAkB;AAC9C,iBAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,IAAI;AAC3E,iBAAO;QACX;QAEO,SAAM;AACT,eAAK,WAAU;AACf,iBAAO,KAAK,eAAe,YAAY,aAAA,WAAW,8BAA8B;QACpF;QAEO,QAAQ,YAAsB;AACjC,eAAK,WAAU;AACf,gBAAM,WAAW,WAAW;AAC5B,mBAAS,kCAAkC,CAAC,CAAC,KAAK;AAClD,mBAAS,cAAc,iCACnB,KAAK,WAAW,YAAY,aAAA,WAAW,8BAA8B,GACrE,KAAK,4BACL,SAAS,2BAA2B;QAC5C;;;;;;;;QASA,IAAW,gBAAa;AACpB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,qCAAqC;QACvF;;;;;;;;QASA,IAAW,cAAc,eAAqB;AAC1C,yBAAA,UAAU,wBAAwB,eAAe,eAAe;AAChE,eAAK,WAAW,YAAY,aAAA,WAAW,uCAAuC,aAAa;QAC/F;;;;;;;;;;QAWA,IAAW,gBAAgB,iBAAuB;AAC9C,yBAAA,UAAU,wBAAwB,iBAAiB,iBAAiB;AACpE,eAAK,sBAAsB;QAC/B;;;;;;;;;QAUA,IAAW,aAAa,cAAqB;AACzC,gBAAM,qBAAqB,eAAe,SAAS;AACnD,eAAK,WAAW,YAAY,aAAA,WAAW,sCAAsC,kBAAkB;QACnG;;;;;;;;;QAUA,IAAW,eAAY;AACnB,gBAAM,qBAAqB,KAAK,WAAW,YAAY,aAAA,WAAW,sCAAsC,OAAO;AAC/G,iBAAQ,mBAAmB,YAAW,MAAO;QACjD;;;;;;;;;QAUA,IAAW,kBAAkB,mBAAyB;AAClD,eAAK,wBAAwB;QACjC;;;;;;;;;QAUA,IAAW,wBAAwB,yBAAgC;AAC/D,eAAK,8BAA8B;QACvC;;;;;;;;;QAUO,iCAAiC,OAAa;AACjD,eAAK,6BAA6B;QACtC;;;;;;;;QASA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEQ,aAAU;AACd,gBAAM,aAAa,KAAK,eAAe,YAAY,aAAA,WAAW,8BAA8B,IAAI;AAChG,gBAAM,aAA0C,KAAK,MAAM,UAAU;AAErE,gBAAM,gBAAgB,KAAK,eAAe,YAAY,aAAA,WAAW,qCAAqC;AACtG,cAAI,eAAe;AACf,uBAAW,gBAAgB;;AAG/B,gBAAM,gBAAgB,KAAK,eAAe,YAAY,aAAA,WAAW,qCAAqC;AACtG,cAAI,eAAe;AACf,uBAAW,gBAAgB;;AAG/B,gBAAM,cAAc,KAAK,eAAe,YAAY,aAAA,WAAW,mCAAmC;AAClG,cAAI,aAAa;AACb,uBAAW,cAAc;;AAG7B,cAAI,KAAK,qBAAqB;AAC1B,uBAAW,kBAAkB,KAAK;;AAGtC,cAAI,KAAK,uBAAuB;AAC5B,uBAAW,oBAAoB,KAAK;;AAGxC,qBAAW,0BAA0B,KAAK;AAG1C,qBAAW,YAAY;AAEvB,gBAAM,qBAAqB,KAAK,eAAe,YAAY,aAAA,WAAW,oCAAoC;AAC1G,cAAI,oBAAoB;AACpB,uBAAW,eAAe,KAAK;;AAGnC,eAAK,eAAe,YAAY,aAAA,WAAW,gCAAgC,KAAK,UAAU,UAAU,CAAC;QACzG;;AAhNJ,cAAA,gCAAA;;;;;;;;;;ACxBA,UAAA,iBAAA;AACA,UAAA,eAAA;AAwCA,UAAa,0BAAb,MAAoC;;;;;QAOhC,YAAmB,cAA0B;AACzC,eAAK,eAAe;QACxB;;;;;;;;;;QAWA,IAAW,eAAY;AACnB,iBAAO,KAAK,aAAa,kBAAkB;QAC/C;;;;;;;;;;QAWA,IAAW,kBAAe;AACtB,iBAAO,KAAK,aAAa,kBAAkB;QAC/C;;;;;;;;;;QAWA,IAAW,aAAU;AACjB,iBAAO,KAAK,aAAa,kBAAkB;QAC/C;;AAhDJ,cAAA,0BAAA;AAwDA,UAAa,gCAAb,MAAa,+BAA6B;QAGtC,YAAoB,YAAkB;AAClC,gBAAM,IAAI,KAAK,MAAM,UAAU;AAC/B,yBAAA,UAAU,uBAAuB,EAAE,MAAM,CAAC,GAAG,OAAO;AACpD,eAAK,eAAe,EAAE,MAAM,CAAC;QACjC;;;;;;;;;QAUO,OAAO,WAAW,QAAyB;AAC9C,yBAAA,UAAU,uBAAuB,QAAQ,QAAQ;AACjD,gBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC;AAC9F,yBAAA,UAAU,uBAAuB,MAAM,MAAM;AAC7C,iBAAO,IAAI,+BAA8B,IAAI;QACjD;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;;;;;;;;QAUA,IAAW,gBAAa;AACpB,iBAAO,KAAK,aAAa,yBAAyB;QACtD;;;;;;;;;QAUA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,aAAa,yBAAyB;QACtD;;;;;;;;QASA,IAAW,oBAAiB;AACxB,iBAAO,KAAK,aAAa,yBAAyB;QACtD;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK,aAAa,yBAAyB;QACtD;;;;;;;;QASA,IAAW,eAAY;AACnB,iBAAO,KAAK,aAAa,yBAAyB;QACtD;;;;;;;;;QAUA,IAAW,0BAAuB;AAC9B,cAAI,KAAK,aAAa,sBAAsB,QAAW;AACnD,mBAAO;;AAEX,iBAAO,IAAI,wBAAwB,KAAK,YAAY;QACxD;;AAzGJ,cAAA,gCAAA;;;;;;;;;;ACnGA,UAAA,iBAAA;AACA,UAAA,eAAA;AASA,UAAa,eAAb,MAAyB;;;;;;;;QAoDrB,YAAmB,WAAmB,OAAe,aAA8B;AAnD3E,eAAA,iBAA0B;AAoD9B,yBAAA,UAAU,wBAAwB,WAAW,WAAW;AACxD,eAAK,YAAY;AACjB,eAAK,QAAQ;AACb,cAAI,gBAAgB,QAAW;AAC3B,0BAAc,IAAI,aAAA,kBAAiB;;AAEvC,eAAK,cAAc;QACvB;;;;QAxCA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;;;QAKA,IAAW,WAAW,OAAc;AAChC,eAAK,iBAAiB;QAC1B;;;;QAKA,IAAW,kBAAe;AACtB,iBAAO,KAAK;QAChB;;;;QAKA,IAAW,gBAAgB,OAAa;AACpC,eAAK,sBAAsB;QAC/B;;AA3CJ,cAAA,eAAA;;;;;;;;;;ACVA,UAAY;AAAZ,OAAA,SAAYC,mBAAgB;AACxB,QAAAA,kBAAA,oBAAA,IAAA;AACA,QAAAA,kBAAA,gBAAA,IAAA;AACA,QAAAA,kBAAA,eAAA,IAAA;MACJ,GAJY,mBAAA,QAAA,qBAAA,QAAA,mBAAgB,CAAA,EAAA;AAa5B,UAAa,kBAAb,MAA4B;;;;;;;QAWxB,YAAmB,aAAqB,aAAmB;AACvD,eAAK,aAAa;AAClB,eAAK,kBAAkB;QAC3B;;;;;;QAOA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;;;;;;QAOA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;;;;;;QAOA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AAzCJ,cAAA,kBAAA;;;;;;;;;;ACbA,UAAA,eAAA;AAQA,UAAA,eAAA;AACA,UAAA,6BAAA;AACA,UAAA,eAAA;AAKA,UAAA,mBAAA;AAEA,UAAA,2BAAA;AAIA,UAAa,mCAAb,MAA6C;QAA7C,cAAA;AAEqB,eAAA,eAAuB;QA0C5C;QAxCW,OACH,QACA,UACA,cAAqB;AAErB,cAAI,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AAC3G,gBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC,MAAS;AACzG,gBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,gBAAM,aAAa,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC,MAAS;AACzG,gBAAM,aAAc,eAAe,SAAa,QAAQ;AACxD,gBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,WAAW,SAAS,MAAM,aAAa,YAAY,UAAU;AAEzJ,gBAAM,cAAyC,CAAA;AAC/C,gBAAM,UAAqC,CAAA;AAE3C,cAAI,SAAS,UAAU,UAAa,SAAS,UAAU,IAAI;AACvD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAE5C,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AACpC,cAAI,eAAe,UAAa,eAAe,IAAI;AAC/C,gBAAI,CAAC,YAAY,SAAS,OAAO,yBAAA,oBAAoB,uBAAuB,MAAM,IAAI;AAClF,0BAAY,yBAAA,oBAAoB,uBAAuB,IAAI;;;AAInE,cAAI,OAAO,eAAe;AACtB,gBAAI,CAAC,YAAY,SAAS,OAAO,yBAAA,oBAAoB,YAAY,MAAM,IAAI;AACvE,0BAAY,yBAAA,oBAAoB,YAAY,IAAI;;;AAIxD,cAAI,CAAC,UAAU;AACX,uBAAW,OAAO,KAAK;;AAG3B,iBAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,QAAQ;AAE9E,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AACnH,iBAAO,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,eAAe,OAAO,UAAU,GAAG,mBAAmB,YAAY;QAChL;;AA3CJ,cAAA,mCAAA;;;;;;;;;;ACrBA,UAAA,wCAAA;AAGA,UAAA,eAAA;AAOA,UAAA,eAAA;AACA,UAAA,yBAAA;AACA,UAAA,eAAA;AAYA,UAAA,iBAAA;AACA,UAAA,mBAAA;AASA,UAAa,oBAAb,cAAuC,aAAA,YAAW;;;;;;;QAkB9C,YAAmB,cAA4B,cAA0B;AACrE,gBAAM,YAAY;AAElB,yBAAA,UAAU,uBAAuB,cAAc,cAAc;AAE7D,eAAK,wBAAwB,IAAI,sCAAA,iCAAgC;AACjE,eAAK,mBAAmB;AACxB,eAAK,0BAAyB;QAClC;QAEU,4BAAyB;AAC/B,gBAAM,0BAAyB;AAG/B,eAAK,YAAY,oBAAoB,uBAAA,sBAAsB,gCACvD,aAAA,4BAA4B,qBAAqB;QAEzD;;;;;;;;;QAUO,MAAM,iBAAiB,gBAAiC;AAC3D,yBAAA,UAAU,uBAAuB,gBAAgB,gBAAgB;AACjE,eAAK,iBAAiB,eAAe,iBAAgB,EAAG;AACxD,yBAAA,UAAU,uBAAuB,KAAK,gBAAgB,0BAA0B;AAChF,gBAAM,mBAAmB,IAAI,aAAA,SAAQ;AAErC,yBAAe,4BAA4B,MAAW;AAClD,yBAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,cAAc,2CAA2C,eAAe,mBAAmB,aAAA,UAAU,KAAK,CAAC;AACvI,gBAAI,eAAe,sBAAsB,YAAY;AACjD,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,cAAc,4CAA4C,aAAA,UAAU,IAAI,CAAC;AACrG,+BAAiB,QAAO;;UAEhC;AACA,yBAAe,iBAAiB,CAAC,UAA0C;AACvE,gBAAI,MAAM,WAAW;AACjB,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,cAAc,qCAAqC,MAAM,UAAU,WAAW,aAAA,UAAU,KAAK,CAAC;mBACvH;AACH,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,cAAc,4CAA4C,aAAA,UAAU,KAAK,CAAC;AACtG,+BAAiB,QAAO;;UAEhC;AAEA,qBAAW,MAAW;AAClB,gBAAI,eAAe,sBAAsB,YAAY;AACjD,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,cAAc,2CAA2C,aAAA,UAAU,OAAO,CAAC;AACvG,+BAAiB,QAAO;;UAEhC,GAAG,GAAI;AACP,gBAAM,MAAiC,MAAM,eAAe,YAAW;AACvE,gBAAM,eAAe,oBAAoB,GAAG;AAC5C,gBAAM,iBAAiB;AACvB,uBAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,cAAc,mCAAmC,aAAA,UAAU,IAAI,CAAC;AAC5F,eAAK,eAAe,YAAY,aAAA,WAAW,iCAAiC,KAAK,UAAU,eAAe,gBAAgB,CAAC;AAE3H,gBAAM,SAAgC,MAAM,KAAK,MAAM,IAAI,KAAK;AAChE,cAAI,OAAO,WAAW,aAAA,aAAa,4BAA4B;AAC3D,mBAAO,IAAI,aAAA,gBACP,OAAO,UACP,OAAO,QACP,OAAO,cACP,OAAO,UAAU;;AAGzB,gBAAM,kBAA0B,KAAK,OAAO,WAAW,YAAY,aAAA,WAAW,+BAA+B,CAAC;AAC9G,gBAAM,YAAmC,IAAI,sBACzC,KAAK,MAAM,eAAe,CAA8B;AAE5D,gBAAM,eAAe,qBAAqB,SAAS;AACnD,iBAAO,IAAI,aAAA,gBACP,OAAO,UACP,OAAO,QACP,QACA,OAAO,UAAU;QAEzB;;;;;;;;;QAUO,MAAM,eAAe,MAAY;AACpC,gBAAM,IAAI,MAAM,KAAK,MAAM,MAAM,KAAK;AACtC,iBAAO,IAAI,aAAA,gBACP,EAAE,UACF,EAAE,QACF,EAAE,cACF,EAAE,UAAU;QAEpB;;;;;;;;;QAUO,MAAM,eAAe,MAAY;AACpC,gBAAM,IAAI,MAAM,KAAK,MAAM,MAAM,IAAI;AACrC,iBAAO,IAAI,aAAA,gBACP,EAAE,UACF,EAAE,QACF,EAAE,cACF,EAAE,UAAU;QAEpB;;;;;;;;QASO,MAAM,oBAAiB;AAC1B,iBAAO,KAAK,sBAAsB,OAAM,IAAK,GAAG;AAC5C,kBAAM,UAAU,MAAM,KAAK,sBAAsB,QAAO;AACxD,oBAAQ,IAAI,gCAAgC;;AAEhD,iBAAO,KAAK,YAAY,aAAY;QACxC;;;;;;;;;;QAWO,MAAM,kBAAe;AACxB,yBAAA,UAAU,gBAAgB,KAAK,YAAY;AAC3C,iBAAO,KAAK,QAAQ,IAAI;QAC5B;;;;;;;QAQO,MAAM,QAAK;AACd,cAAI,KAAK,cAAc;AACnB;;AAGJ,iBAAO,KAAK,QAAQ,IAAI;QAC5B;;;;QAKA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;;QAGU,uBACN,gBACA,mBACA,mBAAoC;AACpC,iBAAO,IAAI,aAAA,uBACP,gBACA,mBACA,mBACA,MACA,KAAK,gBAAgB;QAC7B;QAEU,2BACN,iBACA,oBAAqC;AACrC,iBAAO;QACX;QAEU,wBAAwB,cAAiC;AAC/D,gBAAM,SAAS,MAAM,wBAAwB,YAAY;AACzD,iBAAO,gBAAgB;AACvB,iBAAO;QACX;QAEU,MAAM,MAAM,MAAcC,SAAe;AAC/C,gBAAM,YAAY,aAAA,iBAAgB;AAClC,gBAAM,iBAAiB,IAAI,aAAA,SAAQ;AACnC,eAAK,sBAAsB,QAAQ,IAAI,iBAAA,iBAAiB,WAAW,MAAMA,SACrE,CAAC,MAAkC;AAC/B,2BAAe,QAAQ,CAAC;AACxB,iBAAK,mBAAmB;AACxB,iBAAK,KAAK,aAAY;UAC1B,GACA,CAAC,MAAmB;AAChB,2BAAe,OAAO,CAAC;AACvB,iBAAK,mBAAmB;UAC5B,CAAC,CAAC;AACN,eAAK,KAAK,aAAY;AACtB,iBAAO,eAAe;QAC1B;;AAnOJ,cAAA,oBAAA;;;;;;;;;;AC3BA,UAAa,aAAb,MAAuB;QAInB,YAAmB,GAAW,GAAS;AACnC,eAAK,IAAI;AACT,eAAK,IAAI;QACb;;AAPJ,cAAA,aAAA;AAiBA,UAAa,oBAAb,MAA8B;;;;;;;;;QAkD1B,YAAmB,QAAgB,QAChB,UAAkB,KAClB,QAAgB,MAChB,SAAiB,MAAI;AAEpC,eAAK,QAAQ;AACb,eAAK,UAAU;AACf,eAAK,QAAQ;AACb,eAAK,SAAS;QAClB;;;;QAlCO,aAAa,SAAqB,aAAuB;AAC5D,eAAK,YAAY;YACb;YACA;;QAER;;AA9BJ,cAAA,oBAAA;;;;;;;;;;ACxBA,UAAA,eAAA;AAaA,UAAa,+BAAb,cAAkD,aAAA,gBAAe;;;;;;;;;;QAY7D,YAAmB,WAAuC,UAAmB,QAAuB,cAAuB,YAA+B;AACtJ,gBAAM,UAAU,QAAQ,cAAc,UAAU;AAChD,eAAK,gBAAgB;QACzB;;;;;;;;QASA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AA1BJ,cAAA,+BAAA;;;;;;;;;;ACXA,UAAA,eAAA;AACA,UAAA,eAAA;AASA,UAAa,cAAb,MAAwB;QAGb,OAAO,gBAAgB,UAAkB;AAC5C,eAAK,eAAe,IAAI,aAAA,uBAAuB,QAAQ;AACvD,uBAAA,OAAO,SAAS,sBAAsB,KAAK,YAAY;QAC3D;QAEO,OAAO,qBAAkB;AAC5B,cAAI,CAAC,CAAC,KAAK,cAAc;AACrB,iBAAK,aAAa,sBAAsB;;QAEhD;QAEO,OAAO,oBAAiB;AAC3B,cAAI,CAAC,CAAC,KAAK,cAAc;AACrB,iBAAK,aAAa,sBAAsB;;QAEhD;QAEO,OAAO,iBAAiB,MAAY;AACvC,cAAI,OAAO,WAAW,aAAa;AAC/B,gBAAI,CAAC,CAAC,KAAK,cAAc;AACrB,mBAAK,aAAa,UAAU;;iBAE7B;AACH,kBAAM,IAAI,MAAM,+CAA+C;;QAEvE;QAGO,WAAW,YAAa,UAAqB;AAChD,cAAI,CAAC,CAAC,KAAK,cAAc;AACrB,iBAAK,aAAa,cAAc;;QAExC;;AAnCJ,cAAA,cAAA;AACmB,kBAAA,eAAuC;;;;;;;;;ACb1D,UAAA,mBAAA;AAAS,aAAA,eAAA,SAAA,eAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,iBAAA;MAAW,EAAA,CAAA;AACpB,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAc,EAAA,CAAA;AAC1C,UAAA,wBAAA;AAAS,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAgB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAoB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAoB,EAAA,CAAA;AACrE,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAqB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAqB,EAAA,CAAA;AACxE,UAAA,0BAAA;AAAS,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAAkB,EAAA,CAAA;AAC3B,UAAA,oCAAA;AAAS,aAAA,eAAA,SAAA,gCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kCAAA;MAA4B,EAAA,CAAA;AACrC,UAAA,qCAAA;AAAS,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,mCAAA;MAA6B,EAAA,CAAA;AACtC,UAAA,+BAAA;AAAS,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAAuB,EAAA,CAAA;AAChC,UAAA,wBAAA;AAAS,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAgB,EAAA,CAAA;AACzB,UAAA,4BAAA;AAAS,aAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,0BAAA;MAAoB,EAAA,CAAA;AAC7B,UAAA,oBAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAY,EAAA,CAAA;AACrB,UAAA,kCAAA;AAAS,aAAA,eAAA,SAAA,8BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA0B,EAAA,CAAA;AACnC,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAC1B,UAAA,+BAAA;AAAS,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAAuB,EAAA,CAAA;AAChC,UAAA,+BAAA;AAAS,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAAuB,EAAA,CAAA;AAChC,UAAA,kCAAA;AAAS,aAAA,eAAA,SAAA,8BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA0B,EAAA,CAAA;AACnC,UAAA,kCAAA;AAAS,aAAA,eAAA,SAAA,8BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA0B,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAAkC,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA6B,EAAA,CAAA;AACtG,UAAA,0CAAA;AAAS,aAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wCAAA;MAAkC,EAAA,CAAA;AAC3C,UAAA,uCAAA;AAAS,aAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAA+B,EAAA,CAAA;AACxC,UAAA,qCAAA;AAAS,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,mCAAA;MAA6B,EAAA,CAAA;AACtC,UAAA,oCAAA;AAAS,aAAA,eAAA,SAAA,gCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kCAAA;MAA4B,EAAA,CAAA;AACrC,UAAA,kCAAA;AAAS,aAAA,eAAA,SAAA,8BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA0B,EAAA,CAAA;AACnC,UAAA,oBAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAY,EAAA,CAAA;AACrB,UAAA,oBAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAY,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAgB,EAAA,CAAA;AACvC,UAAA,+BAAA;AAAS,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAAuB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,+BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAA2B,EAAA,CAAA;AAC7D,UAAA,0BAAA;AAAS,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAAkB,EAAA,CAAA;AAC3B,UAAA,kBAAA;AAAS,aAAA,eAAA,SAAA,cAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gBAAA;MAAU,EAAA,CAAA;AACnB,UAAA,kBAAA;AAAS,aAAA,eAAA,SAAA,cAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gBAAA;MAAU,EAAA,CAAA;AACnB,UAAA,wBAAA;AAAS,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAgB,EAAA,CAAA;AACzB,UAAA,wBAAA;AAAS,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAgB,EAAA,CAAA;AACzB,UAAA,wBAAA;AAAS,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAgB,EAAA,CAAA;AACzB,UAAA,6BAAA;AAAS,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,2BAAA;MAAqB,EAAA,CAAA;AAC9B,UAAA,oBAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAY,EAAA,CAAA;AACrB,UAAA,qBAAA;AAAS,aAAA,eAAA,SAAA,iBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,mBAAA;MAAa,EAAA,CAAA;AACtB,UAAA,sBAAA;AAAS,aAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,oBAAA;MAAc,EAAA,CAAA;AACvB,UAAA,+CAAA;AAAS,aAAA,eAAA,SAAA,2CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6CAAA;MAAuC,EAAA,CAAA;AAChD,UAAA,0CAAA;AAAS,aAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wCAAA;MAAkC,EAAA,CAAA;AAC3C,UAAA,+BAAA;AAAS,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAAuB,EAAA,CAAA;AAChC,UAAA,2BAAA;AAAS,aAAA,eAAA,SAAA,uBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,yBAAA;MAAmB,EAAA,CAAA;AAC5B,UAAA,8BAAA;AAAS,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,4BAAA;MAAqB,EAAA,CAAA;AAC9B,UAAA,2BAAA;AAAS,aAAA,eAAA,SAAA,uBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,yBAAA;MAAmB,EAAA,CAAA;AAC5B,UAAA,wBAAA;AAAS,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sBAAA;MAAgB,EAAA,CAAA;AACzB,UAAA,kBAAA;AAAS,aAAA,eAAA,SAAA,cAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gBAAA;MAAU,EAAA,CAAA;AACnB,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAC1B,UAAA,2BAAA;AAAS,aAAA,eAAA,SAAA,uBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,yBAAA;MAAmB,EAAA,CAAA;AAC5B,UAAA,0BAAA;AAAS,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAAkB,EAAA,CAAA;AAC3B,UAAA,4BAAA;AAAS,aAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,0BAAA;MAAoB,EAAA,CAAA;AAC7B,UAAA,8BAAA;AAAS,aAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,4BAAA;MAAsB,EAAA,CAAA;AAC/B,UAAA,iCAAA;AAAS,aAAA,eAAA,SAAA,6BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,+BAAA;MAAyB,EAAA,CAAA;AAClC,UAAA,mCAAA;AAAS,aAAA,eAAA,SAAA,+BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,iCAAA;MAA2B,EAAA,CAAA;AACpC,UAAA,8BAAA;AAAS,aAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,4BAAA;MAAsB,EAAA,CAAA;AAC/B,UAAA,uBAAA;AAAS,aAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qBAAA;MAAe,EAAA,CAAA;AACxB,UAAA,uBAAA;AAAS,aAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qBAAA;MAAe,EAAA,CAAA;AACxB,UAAA,kCAAA;AAAS,aAAA,eAAA,SAAA,8BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA0B,EAAA,CAAA;AACnC,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAC1B,UAAA,oBAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAY,EAAA,CAAA;AACrB,UAAA,oCAAA;AAAS,aAAA,eAAA,SAAA,gCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kCAAA;MAA4B,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,6CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kCAAA;MAAyC,EAAA,CAAA;AAChF,UAAA,0BAAA;AAAS,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAAkB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAA+B,EAAA,CAAA;AAC5D,UAAA,gCAAA;AAAS,aAAA,eAAA,SAAA,4BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8BAAA;MAAwB,EAAA,CAAA;AACjC,UAAA,0BAAA;AAAS,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wBAAA;MAAkB,EAAA,CAAA;AAC3B,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAC1B,UAAA,kCAAA;AAAS,aAAA,eAAA,SAAA,8BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA0B,EAAA,CAAA;AACnC,UAAA,gCAAA;AAAS,aAAA,eAAA,SAAA,4BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8BAAA;MAAwB,EAAA,CAAA;AACjC,UAAA,sCAAA;AAAS,aAAA,eAAA,SAAA,kCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,oCAAA;MAA8B,EAAA,CAAA;AACvC,UAAA,sCAAA;AAAS,aAAA,eAAA,SAAA,kCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,oCAAA;MAA8B,EAAA,CAAA;AACvC,UAAA,4BAAA;AAAS,aAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,0BAAA;MAAoB,EAAA,CAAA;AAC7B,UAAA,gCAAA;AAAS,aAAA,eAAA,SAAA,4BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8BAAA;MAAwB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,gCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8BAAA;MAA4B,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,yCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8BAAA;MAAqC,EAAA,CAAA;AACtG,UAAA,eAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAY,EAAA,CAAA;AACjB,aAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAA+B,EAAA,CAAA;AAE/B,aAAA,eAAA,SAAA,4CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAwC,EAAA,CAAA;AACxC,aAAA,eAAA,SAAA,4CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAwC,EAAA,CAAA;AACxC,aAAA,eAAA,SAAA,oCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAgC,EAAA,CAAA;AAChC,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAA6B,EAAA,CAAA;AAC7B,aAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAsB,EAAA,CAAA;AACtB,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAuB,EAAA,CAAA;AACvB,aAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAA+B,EAAA,CAAA;AAC/B,aAAA,eAAA,SAAA,WAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAO,EAAA,CAAA;AAEP,aAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAkB,EAAA,CAAA;AAElB,aAAA,eAAA,SAAA,eAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAW,EAAA,CAAA;AACX,aAAA,eAAA,SAAA,4BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAwB,EAAA,CAAA;AACxB,aAAA,eAAA,SAAA,QAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,aAAA;MAAI,EAAA,CAAA;AAGR,UAAA,mBAAA;AAAS,aAAA,eAAA,SAAA,eAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,iBAAA;MAAW,EAAA,CAAA;AACpB,UAAA,mCAAA;AAAS,aAAA,eAAA,SAAA,+BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,iCAAA;MAA2B,EAAA,CAAA;AACpC,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAC1B,UAAA,uBAAA;AAAS,aAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qBAAA;MAAe,EAAA,CAAA;AACxB,UAAA,6BAAA;AAAS,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,2BAAA;MAAqB,EAAA,CAAA;AAC9B,UAAA,gCAAA;AAAS,aAAA,eAAA,SAAA,4BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,8BAAA;MAAwB,EAAA,CAAA;AACjC,UAAA,4CAAA;AAAS,aAAA,eAAA,SAAA,wCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,0CAAA;MAAoC,EAAA,CAAA;AAC7C,UAAA,wCAAA;AAAS,aAAA,eAAA,SAAA,oCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sCAAA;MAAgC,EAAA,CAAA;AACzC,UAAA,sCAAA;AAAS,aAAA,eAAA,SAAA,kCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,oCAAA;MAA8B,EAAA,CAAA;AACvC,UAAA,mCAAA;AAAS,aAAA,eAAA,SAAA,+BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,iCAAA;MAA2B,EAAA,CAAA;AACpC,UAAA,6BAAA;AAAS,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,2BAAA;MAAqB,EAAA,CAAA;AAC9B,UAAA,iBAAA;AAAS,aAAA,eAAA,SAAA,aAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,eAAA;MAAS,EAAA,CAAA;AAElB,UAAA,+BAAA;AAAS,aAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,6BAAA;MAAuB,EAAA,CAAA;AAEhC,UAAA,kDAAA;AAAS,aAAA,eAAA,SAAA,8CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gDAAA;MAA0C,EAAA,CAAA;AACnD,UAAA,6CAAA;AAAS,aAAA,eAAA,SAAA,yCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,2CAAA;MAAqC,EAAA,CAAA;AAC9C,UAAA,4CAAA;AAAS,aAAA,eAAA,SAAA,wCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,0CAAA;MAAoC,EAAA,CAAA;AAC7C,UAAA,0CAAA;AAAS,aAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,wCAAA;MAAkC,EAAA,CAAA;AAC3C,UAAA,qCAAA;AAAS,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,mCAAA;MAA6B,EAAA,CAAA;AACtC,UAAA,qCAAA;AAAS,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,mCAAA;MAA6B,EAAA,CAAA;AACtC,UAAA,sBAAA;AAAS,aAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,oBAAA;MAAc,EAAA,CAAA;AACvB,UAAA,oBAAA;AAAS,aAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kBAAA;MAAY,EAAA,CAAA;AACrB,UAAA,uBAAA;AAAS,aAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qBAAA;MAAe,EAAA,CAAA;AACxB,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAC1B,UAAA,yBAAA;AAAS,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAiB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,cAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,uBAAA;MAAU,EAAA,CAAA;AACtC,UAAA,oCAAA;AAAS,aAAA,eAAA,SAAA,gCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kCAAA;MAA4B,EAAA,CAAA;AACrC,UAAA,mBAAA;AAAS,aAAA,eAAA,SAAA,eAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,iBAAA;MAAW,EAAA,CAAA;AACpB,UAAA,gBAAA;AAAS,aAAA,eAAA,SAAA,YAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,cAAA;MAAQ,EAAA,CAAA;;;;;;;;;;ACjHjB,UAAA,eAAA;AAEA,UAAa,YAAb,MAAa,WAAS;QAMlB,YAAoB,eAAuB,WAAmB,eAAuB,eAAqB;AACtG,eAAK,oBAAoB;AACzB,eAAK,gBAAgB;AACrB,eAAK,oBAAoB;AACzB,eAAK,oBAAoB;QAC7B;QAEO,OAAO,eAAe,YAA8B;AACvD,iBAAO,IAAI,WAAU,WAAW,YAAY,aAAA,WAAW,qCAAqC,GACxF,SAAS,WAAW,YAAY,aAAA,WAAW,iCAAiC,GAAG,EAAE,GACjF,WAAW,YAAY,aAAA,WAAW,qCAAqC,GACvE,WAAW,YAAY,aAAA,WAAW,qCAAqC,CAAC;QAChF;QAEO,OAAO,qBAAqB,QAAwB;AACvD,iBAAO,KAAK,eAAe,OAAO,UAAU;QAChD;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;;AAtCJ,cAAA,YAAA;;;;;ACNA;AAAA;AAAA;AACA,UAAM,YAAY,oBAAI,IAAI,CAAC,QAAQ,UAAU,QAAQ,CAAC;AAEtD,aAAO,UAAU,eAAa,IAAI,SAAS;AACzC,cAAM,cAAc,oBAAI,IAAI;AAC5B,YAAI;AACJ,YAAI;AACJ,YAAI;AACJ,YAAI,UAAU;AAEd,aAAK,QAAQ,SAAO;AAClB,cAAI,OAAO,QAAQ,UAAU;AAC3B,gBAAI,IAAI,YAAY,MAAM,KAAK;AAC7B,kBAAI,QAAQ;AACV,sBAAM,MAAM,uBAAuB,GAAG,oBAAoB,MAAM;AAChE,sBAAM,IAAI,MAAM,GAAG;AAAA,cACrB,OAAO;AACL,yBAAS;AAAA,cACX;AAAA,YACF,WAAW,IAAI,WAAW,OAAO,KAAK,IAAI,WAAW,QAAQ,GAAG;AAC9D,wBAAU;AAAA,YACZ,OAAO;AACL,kBAAI,UAAU,IAAI,GAAG,GAAG;AACtB,2BAAW;AAAA,cACb,OAAO;AACL,sBAAM,IAAI,MAAM,qBAAqB,GAAG,EAAE;AAAA,cAC5C;AAAA,YACF;AAAA,UACF,WAAW,OAAO,QAAQ,UAAU;AAClC,wBAAY,IAAI,GAAG;AAAA,UACrB,WAAW,OAAO,QAAQ,UAAU;AAClC,gBAAI,MAAM,QAAQ,GAAG,KAAK,eAAe,KAAK;AAC5C,kBAAI,QAAQ,UAAQ,YAAY,IAAI,IAAI,CAAC;AAAA,YAC3C,OAAO;AACL,kBAAI,SAAS;AACX,sBAAM,IAAI,MAAM,2BAA2B;AAAA,cAC7C;AACA,wBAAU;AAAA,YACZ;AAAA,UACF,OAAO;AACL,kBAAM,IAAI,MAAM,iBAAiB,OAAO,GAAG,EAAE;AAAA,UAC/C;AAAA,QACF,CAAC;AAED,YAAI,CAAC;AAAQ,mBAAS;AACtB,YAAI,YAAY,SAAS,GAAG;AAC1B,sBAAY,IAAI,GAAG;AAAA,QACrB;AAEA,eAAO,UAAU,aAAa,QAAQ,UAAU,SAAS,OAAO;AAAA,MAClE;AAAA;AAAA;;;AClDA,MAAAC,mBAAA;AAAA;AAAA;AAEA,UAAM,OAAO;AAEb,UAAM,cAAN,MAAM,qBAAoB,MAAM;AAAA,QAC9B,YAAa,QAAQ,QAAQ;AAC3B,gBAAM,GAAG,MAAM;AAEf,cAAI,MAAM,mBAAmB;AAC3B,kBAAM,kBAAkB,MAAM,YAAW;AAAA,UAC3C;AAEA,eAAK,OAAO;AACZ,eAAK,UAAU,IAAI;AACnB,eAAK,aAAa,IAAI;AACtB,eAAK,MAAM;AACX,eAAK,OAAO,IAAI,KAAK,KAAK,GAAG;AAC7B,eAAK,OAAO,IAAI,KAAK,KAAK,GAAG;AAC7B,eAAK,cAAc,IAAI,YAAY,KAAK,GAAG;AAC3C,cAAI;AACJ,gBAAM,MAAM,MAAM;AAChB,gBAAI,CAAC;AAAQ,uBAAS,KAAK,YAAY;AACvC,mBAAO;AAAA,UACT;AACA,iBAAO,eAAe,MAAM,gBAAgB,EAAE,IAAI,CAAC;AAEnD,eAAK,UAAU,CAAC;AAChB,qBAAW,CAAC,KAAK,KAAK,KAAK,IAAI,QAAQ,QAAQ,GAAG;AAChD,iBAAK,QAAQ,IAAI,YAAY,CAAC,IAAI;AAAA,UACpC;AAAA,QACF;AAAA,MACF;AAEA,UAAM,YAAY,CAAC,aAAa,QAAQ,UAAU,SAAS,YAAY,OAAO,MAAM,MAAM,WAAW,CAAC,MAAM;AAC1G,eAAO,WAAW,QAAQ;AAC1B,YAAI,SAAS,IAAI,IAAI,IAAI;AAEzB,YAAI,CAAC;AAAS,oBAAU,CAAC;AACzB,YAAI,OAAO,UAAU;AACnB,kBAAQ,gBAAgB,WAAW,KAAK,OAAO,WAAW,MAAM,OAAO,QAAQ;AAC/E,mBAAS,IAAI,IAAI,OAAO,WAAW,OAAO,OAAO,OAAO,OAAO,WAAW,OAAO,MAAM;AAAA,QACzF;AACA,YAAI,OAAO,aAAa,YAAY,OAAO,aAAa,SAAS;AAC/D,gBAAM,IAAI,MAAM,qBAAqB,OAAO,QAAQ,EAAE;AAAA,QACxD;AAEA,YAAI,MAAM;AACR,cAAI,gBAAgB,eAClB,YAAY,OAAO,IAAI,KACvB,OAAO,SAAS,UAChB;AAAA,UAEF,WAAW,OAAO,SAAS,UAAU;AACnC,mBAAO,KAAK,UAAU,IAAI;AAC1B,oBAAQ,cAAc,IAAI;AAAA,UAC5B,OAAO;AACL,kBAAM,IAAI,MAAM,oBAAoB;AAAA,UACtC;AAAA,QACF;AAEA,mBAAW,IAAI,QAAQ,EAAE,GAAI,WAAW,CAAC,GAAI,GAAG,SAAS,CAAC;AAE1D,cAAM,OAAO,MAAM,MAAM,QAAQ,EAAE,QAAQ,SAAS,UAAU,KAAK,CAAC;AACpE,aAAK,aAAa,KAAK;AAEvB,YAAI,CAAC,YAAY,IAAI,KAAK,MAAM,GAAG;AACjC,gBAAM,IAAI,YAAY,IAAI;AAAA,QAC5B;AAEA,YAAI,aAAa;AAAQ,iBAAO,KAAK,KAAK;AAAA,iBACjC,aAAa;AAAU,iBAAO,KAAK,YAAY;AAAA,iBAC/C,aAAa;AAAU,iBAAO,KAAK,KAAK;AAAA;AAC5C,iBAAO;AAAA,MACd;AAEA,aAAO,UAAU,KAAK,SAAS;AAAA;AAAA;;;;;;;;;;;ACxE/B,UAAA,SAAA,gBAAA,kBAAA;AACA,UAAA,eAAA;AAMA,UAAY;AAAZ,OAAA,SAAYC,kBAAe;AACvB,QAAAA,iBAAA,KAAA,IAAA;AACA,QAAAA,iBAAA,MAAA,IAAA;AACA,QAAAA,iBAAA,QAAA,IAAA;AACA,QAAAA,iBAAA,MAAA,IAAA;MACJ,GALY,kBAAA,QAAA,oBAAA,QAAA,kBAAe,CAAA,EAAA;AAuB3B,UAAa,qBAAb,MAA+B;QAK3B,YACI,cAA6B;AAG7B,cAAI,CAAC,cAAc;AACf,kBAAM,IAAI,aAAA,kBAAkB,cAAc;;AAG9C,eAAK,cAAc,aAAa;AAChC,eAAK,kBAAkB,aAAa;QACxC;QAEO,OAAO,mBAAmB,WAAmB,SAAe;AAC/D,cAAI,cAAsB;AAE1B,cAAI;AACA,kBAAM,MAAM,QAAQ,KAAI,EAAG,MAAM,SAAS;AAC1C,kBAAM,YAAuC,CAAA;AAC7C,gBAAI,QAAQ,CAAC,SAAsB;AAC/B,oBAAM,QAAQ,KAAK,MAAM,IAAI;AAC7B,oBAAM,SAAS,MAAM,MAAK,EAAG,YAAW;AACxC,oBAAM,QAAQ,MAAM,KAAK,IAAI;AAC7B,wBAAU,MAAM,IAAI;YACxB,CAAC;AAED,0BAAc,UAAU,UAAU,YAAW,CAAE;mBAC1C,GAAG;;AAIZ,iBAAO;QACX;QAEA,IAAW,QAAQ,cAA6B;AAC5C,eAAK,cAAc,aAAa;AAChC,eAAK,kBAAkB,aAAa;QACxC;QAEO,WAAW,KAAa,OAAa;AACxC,eAAK,YAAY,GAAG,IAAI;QAC5B;QAEO,QACH,QACA,KACA,cAAsC,CAAA,GACtC,OAAY,MAAI;AAGhB,gBAAM,2BAA2B,IAAI,aAAA,SAAQ;AAE7C,gBAAM,iBAAiB,WAAW,gBAAgB,OAAO,SAAS;AAClE,gBAAM,qBAAqB,CAAC,MAAoB,IAAe,CAAA,MAAqB;AAChF,kBAAM,IAAqD;AAC3D,mBAAO;cACH,MAAM,KAAK,UAAU,CAAC;cACtB,SAAS,KAAK,UAAU,KAAK,OAAO;cACpC,MAAM;cACN,IAAI,KAAK,cAAc,OAAO,KAAK,aAAa;cAChD,QAAQ,KAAK;cACb,YAAY,EAAE,QAAQ,EAAE,MAAM,UAAU,EAAE,aAAa,EAAE,aAAa,EAAE;;UAEhF;AAEA,gBAAM,OAAO,CAAC,aAA+B;AACzC,kBAAM,cAAc,OAAA,QAAK,KAAK,gBAAgB,KAAK,aAAa,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAC3G,kBAAM,SAAS,KAAK,YAAY,WAAW,MAAM,KAAK,KAAK,IAAI,KAAK,YAAY,WAAW,CAAC;AAC5F,wBAAY,QAAQ,QAAQ,EAAE,KAAM,OAAO,SAAqC;AAC5E,kBAAI,WAAW,gBAAgB,UAAU,KAAK,eAAe,KAAK;AAE9D,yCAAyB,QAAQ,mBAAmB,IAAI,CAAC;qBACtD;AACH,oBAAI;AACA,wBAAM,IAAe,MAAM,KAAK,KAAI;AACpC,2CAAyB,QAAQ,mBAAmB,MAAM,CAAC,CAAC;wBACxD;AACJ,2CAAyB,QAAQ,mBAAmB,IAAI,CAAC;;;YAGrE,CAAC,EAAE,MAAM,CAAC,UAAuB;AAC7B,uCAAyB,OAAO,KAAK;YACzC,CAAC;UACL;AAEA,cAAI,KAAK,iBAAiB;AACtB,iBAAK,YAAY,eAAe,IAAI;;AAGxC,cAAI,WAAW,gBAAgB,QAAQ,MAAM;AACzC,iBAAK,YAAY,cAAc,IAAI;AACnC,iBAAK,YAAY,cAAc,IAAI;;AAEvC,eAAK,IAAmB;AACxB,iBAAO,yBAAyB;QACpC;QAEQ,YAAY,SAAoC,CAAA,GAAE;AACtD,iBAAO,OAAO,KAAK,MAAM,EACpB,IAAI,CAAC,MAAsB,mBAAmB,CAAC,IAAI,MAAM,mBAAmB,OAAO,CAAC,CAAC,CAAC,EACtF,KAAK,GAAG;QACjB;;AAzGJ,cAAA,qBAAA;;;;;;;;;;ACHA,UAAa,iBAAb,MAAa,gBAAc;QAEhB,WAAW,iBAAc;AAC5B,iBAAO,gBAAe;QAC1B;QAEO,WAAW,eAAY;AAC1B,iBAAO,gBAAe;QAC1B;QAEO,WAAW,aAAU;AACxB,iBAAO,gBAAe;QAC1B;;AAZJ,cAAA,iBAAA;AAc4B,qBAAA,4BAA6C;QACjE,SAAS;UACL,QAAQ;;QAEZ,aAAa;QACb,SAAS;;AAGW,qBAAA,iBAAiC;QACrD,4BAA4B;QAC5B,+BAA+B;QAC/B,aAAa;QACb,uCAAuC;QACvC,2BAA2B;QAC3B,yBAAyB;QACzB,8BAA8B;QAC9B,6BAA6B;QAC7B,sBAAsB;QACtB,uBAAuB;;AAGH,qBAAA,oBAAiC;QACrD,YAAY;QACZ,eAAe;QACf,aAAa;QACb,gBAAgB;QAChB,eAAe;QACf,cAAc;QACd,UAAU;QACV,WAAW;QACX,WAAW;QACX,QAAQ;QACR,cAAc;QACd,iBAAiB;QACjB,oBAAoB;QACpB,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;AC5Ef,mBAAA,kCAAA,OAAA;AACA,mBAAA,qBAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;AACA,mBAAA,2BAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,+BAAA,OAAA;AACA,mBAAA,mCAAA,OAAA;AACA,mBAAA,+BAAA,OAAA;AACA,mBAAA,qBAAA,OAAA;AACA,mBAAA,8BAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;;;;;;;;;;ACVA,UAAA,eAAA;AAQA,UAAA,eAAA;AAGA,UAAA,6BAAA;AAGA,UAAA,eAAA;AAKA,UAAA,mBAAA;AAEA,UAAa,0BAAb,cAA6C,2BAAA,sBAAqB;QAEvD,OACH,QACA,UACA,cAAqB;AAErB,cAAI,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC;AAChG,cAAI,CAAC,UAAU;AACX,kBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC;AACpG,kBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,kBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,WAAW,SAAS,eAAe,UAAU;AACzI,uBAAW,OAAO;;AAGtB,gBAAM,cAAyC;YAC3C,QAAQ;YACR,UAAU,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC;;AAG3F,eAAK,mBAAmB,QAAQ,aAAa,QAAQ;AAErD,gBAAM,UAAqC,CAAA;AAC3C,cAAI,SAAS,UAAU,UAAa,SAAS,UAAU,IAAI;AACvD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAE5C,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AAEpC,iBAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,QAAQ;AAE9E,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AACnH,iBAAO,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;QAC3K;QAEQ,gCAAgC,cAAoB;AACxD,kBAAQ,cAAc;YAClB,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO;YACX;AACI,qBAAO;;QAEnB;;AAvFJ,cAAA,0BAAA;;;;;;;;;;ACnBA,UAAA,eAAA;AAQA,UAAA,eAAA;AAGA,UAAA,6BAAA;AAGA,UAAA,eAAA;AAKA,UAAA,mBAAA;AAEA,UAAM,0CAAN,cAAsD,2BAAA,sBAAqB;QAEhE,OACH,QACA,UACA,cACA,cAAqB;AAErB,cAAI,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC;AAChG,cAAI,CAAC,UAAU;AACX,kBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B;AAC9F,kBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,kBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,SAAS,MAAM,uBAAuB,UAAU,EAAE;AAC9I,kBAAM,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,uCAAuC,+BAA+B;AACxI,uBAAW,GAAG,IAAI,eAAe,KAAK,eAAe,QAAQ,CAAC,IAAI,YAAY;;AAGlF,gBAAM,cAAyC;YAC3C,QAAQ;YACR,UAAU,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC;;AAG3F,eAAK,mBAAmB,QAAQ,aAAa,QAAQ;AAErD,gBAAM,UAAqC,CAAA;AAC3C,cAAI,SAAS,UAAU,UAAa,SAAS,UAAU,IAAI;AACvD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAE5C,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AACpC,kBAAQ,iBAAA,YAAY,WAAW,IAAI,OAAO,WAAW,YAAY,aAAA,WAAW,2BAA2B;AAEvG,iBAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,QAAQ;AAE9E,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AACnH,iBAAO,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;QAC3K;QAEQ,eAAe,MAAY;AAC/B,kBAAQ,MAAM;YACV,KAAK;YACL,KAAK;AACD,qBAAO;YACX,KAAK;YACL,KAAK;AACD,qBAAO;YACX;AACI,qBAAO;;QAEnB;;AAGJ,UAAa,sCAAb,cAAyD,wCAAuC;QACrF,OAAQ,QAA0B,UAAoB,cAAqB;AAC9E,iBAAO,MAAM,OAAO,QAAQ,UAAU,eAAe,YAAY;QACrE;;AAHJ,cAAA,sCAAA;AAMA,UAAa,gCAAb,cAAmD,wCAAuC;QAC/E,OAAQ,QAA0B,UAAoB,cAAqB;AAC9E,iBAAO,MAAM,OAAO,QAAQ,UAAU,WAAW,YAAY;QACjE;;AAHJ,cAAA,gCAAA;;;;;;;;;;AC/EA,UAAA,eAAA;AAEA,UAAaC,0BAAb,cAA4C,aAAA,cAAa;QAIrD,YAAmB,WAAmB,WAAmB,WAAmB,YAAuB,aAAA,UAAU,MAAI;AAC7G,gBAAM,WAAW,SAAS;AAE1B,eAAK,gBAAgB;AACrB,eAAK,gBAAgB;QACzB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AAjBJ,cAAA,yBAAAA;AAoBA,UAAa,4BAAb,cAA+CA,wBAAsB;QAIjE,YAAmB,WAAmB,WAAmB,eAAuB,aAAmB;AAC/F,gBAAM,6BAA6B,WAAW,SAAS;AAEvD,eAAK,oBAAoB;AACzB,eAAK,kBAAkB;QAC3B;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AAjBJ,cAAA,4BAAA;AAoBA,UAAa,wBAAb,cAA2CA,wBAAsB;QAI7D,YAAmB,WAAmB,WAAmB,eAAuB,aAAmB;AAC/F,gBAAM,yBAAyB,WAAW,SAAS;AACnD,eAAK,oBAAoB;AACzB,eAAK,kBAAkB;QAC3B;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AAhBJ,cAAA,wBAAA;AAmBA,UAAa,2BAAb,cAA8CA,wBAAsB;QAGhE,YAAmB,WAAmB,kBAA0B,WAAiB;AAC7E,gBAAM,4BAA4B,WAAW,SAAS;AACtD,eAAK,uBAAuB;QAChC;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,2BAAA;AAaA,UAAa,0BAAb,cAA6CA,wBAAsB;QAK/D,YAAmB,WAAmB,eAAuB,aAAqB,kBAA0B,WAAiB;AACzH,gBAAM,2BAA2B,WAAW,SAAS;AAErD,eAAK,oBAAoB;AACzB,eAAK,kBAAkB;AACvB,eAAK,uBAAuB;QAChC;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;;AAvBJ,cAAA,0BAAA;AA0BA,UAAY;AAAZ,OAAA,SAAYC,8BAA2B;AACnC,QAAAA,6BAAAA,6BAAA,SAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,kBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,oBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,qBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,uBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,cAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,gBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,cAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,kCAAA,IAAA,CAAA,IAAA;AACA,QAAAA,6BAAAA,6BAAA,cAAA,IAAA,CAAA,IAAA;MACJ,GAXY,8BAAA,QAAA,gCAAA,QAAA,8BAA2B,CAAA,EAAA;AAavC,UAAa,wBAAb,cAA2CD,wBAAsB;QAQ7D,YACI,WACA,eACA,aACA,kBACA,WACA,YACA,QACA,OAAa;AAEb,gBAAM,yBAAyB,WAAW,WAAW,WAAW,4BAA4B,UAAU,aAAA,UAAU,OAAO,aAAA,UAAU,KAAK;AAEtI,eAAK,oBAAoB;AACzB,eAAK,kBAAkB;AACvB,eAAK,uBAAuB;AAC5B,eAAK,aAAa;AAClB,eAAK,YAAY;AACjB,eAAK,iBAAiB;QAC1B;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK;QAChB;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;;AAlDJ,cAAA,wBAAA;;;;;;;;;;AClHA,UAAA,eAAA;AACA,UAAA,mBAAA;AAEA,UAAa,0BAAb,MAAa,iCAAgC,aAAA,kBAAiB;QAQ1D,YACI,aACA,MACA,WACA,aACA,MACA,UACA,mBACA,IAAW;AAEX,cAAI,CAAC,MAAM;AACP,kBAAM,IAAI,aAAA,kBAAkB,MAAM;;AAGtC,cAAI,CAAC,WAAW;AACZ,kBAAM,IAAI,aAAA,kBAAkB,WAAW;;AAG3C,gBAAM,UAAqC,CAAA;AAC3C,kBAAQ,iBAAA,YAAY,IAAI,IAAI;AAC5B,kBAAQ,iBAAA,YAAY,SAAS,IAAI;AACjC,kBAAQ,iBAAA,YAAY,gBAAgB,KAAI,oBAAI,KAAI,GAAG,YAAW;AAC9D,cAAI,aAAa;AACb,oBAAQ,iBAAA,YAAY,WAAW,IAAI;;AAGvC,cAAI,UAAU;AACV,oBAAQ,iBAAA,YAAY,eAAe,IAAI;;AAG3C,cAAI,mBAAmB;AACnB,uBAAW,cAAc,mBAAmB;AACxC,kBAAI,YAAY;AACZ,wBAAQ,UAAU,IAAI,kBAAkB,UAAU;;;;AAM9D,cAAI,IAAI;AACJ,kBAAM,aAAa,MAAM,SAAS,EAAE;iBACjC;AACH,kBAAM,aAAa,MAAM,OAAO;;AAGpC,eAAK,WAAW;AAChB,eAAK,gBAAgB;AACrB,eAAK,kBAAkB;AACvB,eAAK,eAAe;AACpB,eAAK,wBAAwB;QACjC;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK;QAChB;QAEO,OAAO,sBAAsB,SAA0B;AAC1D,cAAI,OAAO;AACX,cAAI,YAAY;AAChB,cAAI,cAAc;AAElB,cAAI,WAAW;AACf,gBAAM,oBAA+C,CAAA;AAErD,cAAI,QAAQ,SAAS;AACjB,uBAAW,cAAc,QAAQ,SAAS;AACtC,kBAAI,YAAY;AACZ,oBAAI,WAAW,YAAW,MAAO,iBAAA,YAAY,KAAK,YAAW,GAAI;AAC7D,yBAAO,QAAQ,QAAQ,UAAU;2BAC1B,WAAW,YAAW,MAAO,iBAAA,YAAY,UAAU,YAAW,GAAI;AACzE,8BAAY,QAAQ,QAAQ,UAAU;2BAG/B,WAAW,YAAW,MAAO,iBAAA,YAAY,YAAY,YAAW,GAAI;AAC3E,gCAAc,QAAQ,QAAQ,UAAU;2BACjC,WAAW,YAAW,MAAO,iBAAA,YAAY,gBAAgB,YAAW,GAAI;AAC/E,6BAAW,QAAQ,QAAQ,UAAU;uBAClC;AACH,oCAAkB,UAAU,IAAI,QAAQ,QAAQ,UAAU;;;;;AAM1E,iBAAO,IAAI,yBACP,QAAQ,aACR,MACA,WACA,aACA,QAAQ,MACR,UACA,mBACA,QAAQ,EAAE;QAClB;;AArHJ,cAAA,0BAAA;;;;;;;;;;ACHA,UAAA,eAAA;AAEA,UAAA,eAAA;AAkBA,UAAA,eAAA;AAYA,UAAA,eAAA;AAiBA,UAAA,wCAAA;AAgCA,UAAsB,wBAAtB,MAAsB,uBAAqB;QAmCvC,YACI,gBACA,mBACA,aACA,kBACA,YAAsB;AAlClB,eAAA,qCAA2D;AAI3D,eAAA,wBAA8C;AAU9C,eAAA,iBAA4D;AAE5D,eAAA,kBAA2B;AAC3B,eAAA,wBAAgC;AAS9B,eAAA,sBAA+B;AAC/B,eAAA,sCAA+C;AAiP/C,eAAA,oBAAqI;AAExI,eAAA,mBAA0F;AA2GvF,eAAA,qBAA0C;AA0G1C,eAAA,yBAA8C;AAkH9C,eAAA,6BAAyE;AA8BzE,eAAA,0BAAsF;AAmCtF,eAAA,2BAA8E;AAC9E,eAAA,4BAAiE;AACjE,eAAA,gCAA4D;AApnBlE,cAAI,CAAC,gBAAgB;AACjB,kBAAM,IAAI,aAAA,kBAAkB,gBAAgB;;AAGhD,cAAI,CAAC,mBAAmB;AACpB,kBAAM,IAAI,aAAA,kBAAkB,mBAAmB;;AAGnD,cAAI,CAAC,aAAa;AACd,kBAAM,IAAI,aAAA,kBAAkB,aAAa;;AAG7C,cAAI,CAAC,kBAAkB;AACnB,kBAAM,IAAI,aAAA,kBAAkB,kBAAkB;;AAGlD,eAAK,sBAAsB,iBAAiB;AAC5C,eAAK,4BAA4B;AACjC,eAAK,qBAAqB;AAC1B,eAAK,wBAAwB;AAC7B,eAAK,kBAAkB;AACvB,eAAK,uBAAuB;AAC5B,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AACtB,eAAK,qBAAqB,IAAI,aAAA,eAAe,KAAK,gBAAgB,GAAE,CAAE;AACtE,eAAK,uBAAuB,IAAI,aAAA,YAAW;AAC3C,eAAK,oBAAoB,IAAI,aAAA,YAAW;AACxC,eAAK,qBAAqB,IAAI,aAAA,sBAAqB;AACnD,eAAK,oBAAoB,IAAI,aAAA,cAAc,KAAK,kBAAkB;AAClE,eAAK,kBAAkB,IAAI,aAAA,YAAW;AACtC,gBAAM,oBAA4B,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,mBAAmB,IAAI,EAAE,YAAW;AAClI,cAAI,sBAAsB,QAAQ,OAAQ,SAAU,eAAe,OAAQ,WAAY,aAAa;AAChG,iBAAK,iBAAiB,aAAA,QAAQ;iBAC3B;AACH,gBAAI,OAAO,WAAW,aAAa;AAE/B,mBAAK,iBAAiB,OAAO,WAAW,KAAK,MAAM;;;AAI3D,eAAK,iBAAiB,OAAO,CAAC,oBAA0C;AACpE,gBAAI,gBAAgB,SAAS,yBAAyB;AAClD,oBAAM,wBAAwB;AAC9B,kBAAI,sBAAsB,eAAe,QACrC,sBAAsB,eAAe,QACrC,sBAAsB,eAAe,QACrC,sBAAsB,eAAe,OACrC,KAAK,mBAAmB,wBAAwB,KAAK,qBAAqB,eAC5E;AACE,qBAAK,KAAK,uBAAuB,aAAA,mBAAmB,OAChD,sBAAsB,eAAe,OAAO,aAAA,sBAAsB,uBAAuB,aAAA,sBAAsB,mBAC/G,GAAG,sBAAsB,MAAM,0BAA0B,sBAAsB,UAAU,EAAE;;;UAG3G,CAAC;AAED,cAAI,KAAK,qBAAqB;AAC1B,iBAAK,2BAA2B,aAAA,iBAAgB;;AAGpD,eAAK,kBAAiB;AACtB,eAAK,yBAAwB;QACjC;QAEU,qBAAkB;AACxB,gBAAM,kBAA0B,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,gDAAgD,MAAS;AACrJ,cAAI,oBAAoB,QAAW;AAC/B,kBAAM,YAAY,gBAAgB,MAAM,GAAG;AAC3C,kBAAM,mBAA4B,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,0CAA0C,MAAS;AACjJ,kBAAM,SAAW,qBAAqB,SAAc,eAAe;AACnE,iBAAK,kBAAkB,WAAW,eAAe;cAC7C,WAAW,EAAE,OAAM;cACnB,QAAQ,EAAE,gBAAgB,EAAE,MAAM,SAAQ,EAAE;cAC5C,iBAAiB;aACpB;AAED,gBAAI,qBAAqB,QAAW;AAChC,oBAAM,qBAAgD,CAAA;AACtD,yBAAW,QAAQ,WAAW;AAC1B,mCAAmB,IAAI,IAAI;;AAE/B,mBAAK,kBAAkB,WAAW,aAAa;gBAC3C,eAAe;eAClB;;;QAGb;QAEU,mCAAgC;AACtC,gBAAM,4BAAoC,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,qCAAqC,MAAS;AACpJ,cAAI,8BAA8B,QAAW;AACzC,kBAAM,OAAO,KAAK,oBAAoB,aAAA,gBAAgB,eAAe,iBACjE,KAAK,oBAAoB,aAAA,gBAAgB,YAAY,cAAc;AACvE,kBAAM,+BAAuC,SAAS,2BAA2B,EAAE;AACnF,kBAAM,kBAAkB,KAAK,kBAAkB,WAAW,iBAAiB;AAC3E,4BAAgB,OAAO;AACvB,4BAAgB,IAAI,IAAI;cACpB,cAAc;gBACV,MAAM;gBACN;;;AAGR,iBAAK,kBAAkB,WAAW,mBAAmB,eAAe;;QAE5E;QAEU,oBAAiB;AACvB,gBAAM,kBAAkB,KAAK,kBAAkB,WAAW,iBAAiB;AAC3E,cAAI,KAAK,qBAAqB,8BAA8B,QAAW;AACnE,kBAAM,kBAA4B,KAAK,qBAAqB,0BAA0B,MAAM,GAAG;AAE/F,gBAAI;AACJ,gBAAI,KAAK,qBAAqB,mBAAmB,cAAc;AAC3D,qCAAuB;mBACpB;AACH,qCAAuB;;AAG3B,iBAAK,kBAAkB,WAAW,cAAc;cAC5C,UAAU;cACV,WAAW;cACX,MAAM;cACN,WAAW,EAAE,QAAQ,YAAW;cAChC,WAAW,EAAE,QAAQ,OAAM;aAC9B;AACD,iBAAK,kBAAkB,WAAW,gBAAgB;cAC9C,gBAAgB;gBACZ,YAAY;;cAEhB,eAAe;gBACX,YAAY;;aAEnB;AACD,kBAAM,eAA8B,KAAK,qBAAqB;AAC9D,gBAAI,iBAAiB,QAAW;AAC5B,8BAAgB,eAAe;AAC/B,8BAAgB,YAAY,EAAE,QAAQ,OAAM;AAC5C,8BAAgB,YAAY,EAAE,QAAQ,OAAM;;;AAGpD,gBAAM,kBAA0B,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,gDAAgD,MAAS;AACrJ,cAAI,oBAAoB,QAAW;AAC/B,4BAAgB,YAAY,EAAE,QAAQ,YAAW;AACjD,4BAAgB,YAAY,EAAE,QAAQ,YAAW;AACjD,iBAAK,kBAAkB,WAAW,gBAAgB;cAC9C,gBAAgB;gBACZ,YAAY;;cAEhB,eAAe;gBACX,YAAY;;aAEnB;;AAGL,eAAK,kBAAkB,WAAW,mBAAmB,eAAe;QACxE;QAEU,2BAAwB;AAC9B,cAAI,KAAK,qBAAqB;AAC1B,kBAAM,6BAAqC,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,kDAAkD,OAAO,EAAE,YAAW;AAC7K,gBAAI,+BAA+B,QAAQ;AACvC,mBAAK,kBAAkB,oBAAmB;mBACvC;AACH,oBAAM,eAAuB,KAAK,qBAAqB,WAAW,YAAY,aAAA,0BAA0B,aAAA,aAAa,aAAA,aAAa,MAAM,CAAC,EAAE,YAAW;AACtJ,kBAAI,iBAAiB,aAAA,aAAa,aAAA,aAAa,QAAQ,EAAE,kBAAiB,GAAI;AAC1E,qBAAK,kBAAkB,wBAAuB;;;;QAI9D;QAEA,IAAW,8BAA2B;AAClC,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,4BAA4B,OAAa;AAChD,eAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,8BAA8B,KAAK;QACnG;QAEA,IAAW,iBAAiB,MAAY;AACpC,eAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,uCAAuC,IAAI;QAC3G;QAEA,IAAW,eAAe,MAAqB;AAC3C,eAAK,qBAAqB;QAC9B;QAEO,aAAU;AACb,iBAAO,KAAK;QAChB;QAEO,MAAM,QAAQ,QAAe;AAChC,eAAK,iBAAiB;AACtB,cAAI,KAAK,uCAAuC,QAAW;AACvD,gBAAI;AACA,oBAAM,aAA0B,MAAM,KAAK;AAC3C,oBAAM,WAAW,QAAQ,MAAM;qBAC1B,OAAO;AAEZ;;;QAGZ;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK,qBAAqB;QACrC;QAMO,MAAM,UACT,UACA,iBACA,eAAkC;AAGlC,cAAI,KAAK,sBAAsB,QAAW;AACtC,kBAAM,KAAK,kBAAkB,UAAU,iBAAiB,aAAa;AACrE;;AAGJ,eAAK,qCAAqC;AAC1C,eAAK,qBAAqB,kBAAkB;AAC5C,eAAK,iCAAgC;AACrC,eAAK,mBAAkB;AAEvB,eAAK,sBAAsB;AAC3B,eAAK,oBAAoB;AAEzB,eAAK,mBAAmB,oBAAmB;AAC3C,eAAK,mBAAmB,0BAA0B,KAAK,gBAAgB,MAAM;AAG7E,gBAAM,aAAmC,KAAK,YAAW;AACzD,cAAI;AAEJ,cAAI;AACA,kBAAM,kBAAoC,MAAM,KAAK,YAAY,OAAO,KAAK,mBAAmB,WAAW;AAC3G,kBAAME,UAAgC,MAAM,KAAK,YAAY;AAC7D,kBAAM,aAAuC,MAAM,KAAK,YAAY;AACpE,iBAAK,kBAAkB,WAAW,QAAQ,WAAW,SAAS,aAAA,KAAK;AAEnE,wBAAY,IAAI,aAAA,oBAAoB,iBAAiBA,QAAO,cAAc;AAC1E,kBAAM,KAAK,mBAAmB,6BAA6B,WAAW,KAAK;AAC3E,iBAAK,qBAAqB,oBAAoB,QAAQ,QAAQ,EAAE,QAAQ,WAAU;mBAE7E,OAAO;AACZ,kBAAM,KAAK,mBAAmB,kBAAiB;AAC/C,kBAAM;;AAGV,cAAI;AACA,kBAAM;mBACD,OAAO;AACZ,kBAAM,KAAK,uBAAuB,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,mBAAmB,KAAe;AACpH;;AAGJ,gBAAM,wBAA0C,IAAI,aAAA,iBAAiB,KAAK,mBAAmB,SAAS;AAEtG,cAAI,CAAC,CAAC,KAAK,eAAe,gBAAgB;AACtC,iBAAK,eAAe,eAAe,KAAK,gBAAgB,qBAAqB;;AAGjF,eAAK,KAAK,eAAc;AACxB,gBAAM,mBAAmB,KAAK,UAAU,SAAS;AAEjD,2BAAiB,MAAM,OAAO,UAAgC;AAC1D,kBAAM,KAAK,uBAAuB,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,cAAc,KAAK;UACzG,CAAC;AAED;QACJ;QAEO,MAAM,kBAAe;AACxB,cAAI,KAAK,mBAAmB,eAAe;AACvC,gBAAI;AACA,oBAAM,KAAK,YAAY,QAAO;AAC9B,oBAAM,KAAK,eAAc;AACzB,oBAAM,KAAK,mBAAmB,kBAAiB;AAC/C,oBAAM,KAAK,mBAAmB;;AAE9B,oBAAM,KAAK,mBAAmB,QAAO;;;AAG7C;QACJ;QAEO,MAAM,UAAO;AAChB,gBAAM,KAAK,YAAW;AACtB,iBAAO,QAAQ,QAAO;QAC1B;QAEO,aAAa,IAAe,KAAc;AAC7C,eAAK,YAAW,EAAG,KAAK,MAAW;AAC/B,gBAAI;AACA,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAE;;qBAED,GAAG;AACR,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,CAAC;;;UAGjB,GAAG,CAAC,WAAqB;AACrB,gBAAI;AACA,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,MAAM;;qBAGT,OAAO;;UAEpB,CAAC;QACL;QAIO,MAAM,aAAU;AACnB,gBAAM,KAAK,uBAAuB,aAAA,mBAAmB,OACjD,aAAA,sBAAsB,SACtB,eAAe;AAEnB,cAAI,KAAK,uBAAuB,QAAW;AACvC,kBAAM,KAAK,mBAAkB;;AAGjC,cAAI,KAAK,0BAA0B,QAAW;AAC1C,gBAAI;AACA,qBAAO,MAAM,KAAK,uBAAuB,QAAO;qBAC3C,OAAO;;;AAIpB,eAAK,wBAAwB;QACjC;;QAQO,YAAY,SAAe;AAC9B;QACJ;QAEO,MAAM,mBAAmB,MAAc,SAA6B;AACvE,gBAAM,OAAoB,OAAO,YAAY,WAAW,aAAA,YAAY,OAAO,aAAA,YAAY;AACvF,gBAAM,cAAsB,OAAO,YAAY,WAAW,qBAAqB;AAE/E,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBAAwB,MAAM,MAAM,KAAK,mBAAmB,WAAW,aAAa,OAAO,CAAC;QAC3H;QAEA,IAAW,iBAAiB,gBAAsB;AAC9C,eAAK,uBAAuB;QAChC;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;QAEA,IAAW,gCAAgC,OAAc;AACrD,eAAK,sCAAsC;QAC/C;QAOU,MAAM,oBAAiB;AAC7B,gBAAM,gBAAgB,KAAK,mBAAmB,aAAY;AAC1D,cAAI,uBAAsB,yBAAyB,QAC/C,KAAK,kBACL,SAAS,eAAe;AACxB;;AAGJ,cAAI,CAAC,CAAC,uBAAsB,eAAe;AACvC,gBAAI;AACA,qCAAsB,cAAc,aAAa;oBAE7C;YAAA;;AAGZ,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,gBAAM,WAAW,KAAK,IAAI,sCAAA,wBACtB,aAAA,YAAY,MACZ,aACA,KAAK,mBAAmB,WACxB,oBACA,aAAa,CAAC;QACtB;;QAWU,MAAM,uBACZ,oBACA,WACA,OAAa;AAEb,cAAI,CAAC,CAAC,KAAK,mBAAmB,eAAe;AACzC,kBAAM,KAAK,mBAAmB,kBAAiB;AAE/C,iBAAK,kBACD,KAAK,mBAAmB,WACxB,KAAK,mBAAmB,WACxB,oBACA,WACA,KAAK;;QAEjB;QAIU,MAAM,iBAAc;AAC1B,cAAI;AACA,gBAAI,KAAK,gBAAgB;AAErB;;AAGJ,gBAAI,aAAa,MAAM,KAAK,gBAAe;AAC3C,kBAAM,UAAU,MAAM,WAAW,KAAI;AAErC,gBAAI,KAAK,2BAA2B,QAAW;AAC3C,qBAAO,KAAK,uBAAsB;;AAItC,gBAAI,CAAC,SAAS;AACV,qBAAO,KAAK,eAAc;;AAG9B,iBAAK,4BAA4B;AACjC,kBAAM,oBAAoB,sCAAA,wBAAwB,sBAAsB,OAAO;AAE/E,gBAAI,kBAAkB,UAAU,YAAW,MAAO,KAAK,mBAAmB,UAAU,YAAW,GAAI;AAC/F,sBAAQ,kBAAkB,KAAK,YAAW,GAAI;gBAC1C,KAAK;AACD,uBAAK,4BAA4B;AACjC,uBAAK,mBAAmB,2BAA0B;AAClD;gBAEJ,KAAK;AACD,wBAAM,sBAAsC,aAAA,eAAe,SAAS,kBAAkB,QAAQ;AAC9F,wBAAM,uBAAuB,IAAI,aAAA,qBAAqB,oBAAoB,QAAQ,KAAK,mBAAmB,SAAS;AACnH,sBAAI,CAAC,CAAC,KAAK,eAAe,qBAAqB;AAC3C,yBAAK,eAAe,oBAAoB,KAAK,gBAAgB,oBAAoB;;AAErF;gBAEJ,KAAK;AACD,sBAAI;AACJ,sBAAI,kBAAkB,SAAS,SAAS,GAAG;AACvC,2BAAO,kBAAkB;yBACtB;AAEH,2BAAO;;AAEX,wBAAM,qBAAqC,aAAA,eAAe,SAAS,IAAI;AACvE,wBAAM,sBAAsB,IAAI,aAAA,qBAAqB,mBAAmB,SAAS,KAAK,mBAAmB,wBAAwB,KAAK,mBAAmB,SAAS;AAClK,sBAAI,CAAC,CAAC,KAAK,eAAe,mBAAmB;AACzC,yBAAK,eAAe,kBAAkB,KAAK,gBAAgB,mBAAmB;;AAElF;gBAEJ,KAAK;AACD,wBAAM,KAAK,kBAAiB;AAC5B,sBAAI,KAAK,mBAAmB,iBAAiB,KAAK,2BAA2B;AACzE,yBAAK,4BAA4B;AACjC,0BAAM,KAAK,uBAAuB,aAAA,mBAAmB,aAAa,aAAA,sBAAsB,SAAS,MAAS;;AAE9G,wBAAM,uBAAyC,IAAI,aAAA,iBAAiB,KAAK,mBAAmB,SAAS;AACrG,wBAAM,KAAK,mBAAmB,yBAAyB,KAAK,qBAAqB,uBAAuB;AACxG,sBAAI,CAAC,KAAK,qBAAqB,2BAA2B,KAAK,mBAAmB,iBAAiB,CAAC,KAAK,mBAAmB,eAAe;AACvI,wBAAI,CAAC,CAAC,KAAK,eAAe,gBAAgB;AACtC,2BAAK,eAAe,eAAe,KAAK,gBAAgB,oBAAoB;;AAEhF;yBACG;AACH,iCAAa,MAAM,KAAK,gBAAe;AACvC,0BAAM,KAAK,mBAAmB,UAAU;;AAE5C;gBAEJ;AACI,sBAAI,CAAC,MAAM,KAAK,4BAA4B,iBAAiB,GAAG;AAE5D,wBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,2BAAK,cAAc,QAAQ,IAAI,aAAA,aAAa,kBAAkB,KAAK,YAAW,GAAI,kBAAkB,QAAQ,CAAC;;;;;AAKjI,mBAAO,KAAK,eAAc;mBACrB,OAAO;AACZ,mBAAO;;QAEf;QAEQ,sCAAmC;AACvC,gBAAM,YAAoB,KAAK,mBAAmB;AAClD,gBAAM,gBAAwB,YAAY,KAAK;AAC/C,eAAK,kBAAkB,mCAAmC,aAAa;QAC3E;QAEU,kBAAkB,YAAyB,sBAA6B;AAC9E,cAAI,KAAK,qBAAqB;AAC1B,iBAAK,oCAAmC;;AAE5C,gBAAM,oBAAoB,KAAK,cAAc,OAAM;AACnD,cAAI,sBAAsB;AACtB,iBAAK,mBAAmB,gBAAe;;AAG3C,cAAI,mBAAmB;AACnB,mBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,kBACA,KAAK,mBAAmB,WACxB,oBACA,iBAAiB,CAAC;;AAE1B;QACJ;QAIU,OAAI;AAEV;QACJ;;QAGU,MAAM,mBAAmB,YAAyB,uBAAgC,MAAI;AAC5F,cAAI,KAAK,+BAA+B,QAAW;AAC/C,mBAAO,KAAK,2BAA2B,UAAU;;AAGrD,gBAAM,KAAK,kBAAkB,YAAY,oBAAoB;AAC7D,gBAAM,KAAK,eAAe,UAAU;AACpC;QACJ;QAEU,MAAM,eAAe,YAAuB;AAClD,gBAAMA,UAAgC,MAAM,KAAK,YAAY;AAE7D,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,QACZ,SACA,KAAK,mBAAmB,WACxB,eACAA,QAAO,MAAM,CAChB;QACL;;QAKU,cAAW;AACjB,cAAI,KAAK,0BAA0B,QAAW;AAC1C,mBAAO,KAAK,sBAAsB,KAAK,CAAC,eAAiD;AACrF,kBAAI,WAAW,MAAK,MAAO,aAAA,gBAAgB,cAAc;AACrD,qBAAK,mBAAmB;AACxB,qBAAK,wBAAwB;AAC7B,qBAAK,4BAA4B;AACjC,uBAAO,KAAK,YAAW;;AAE3B,qBAAO,KAAK;YAChB,GAAG,MAA2B;AAC1B,mBAAK,mBAAmB;AACxB,mBAAK,wBAAwB;AAC7B,mBAAK,4BAA4B;AACjC,qBAAO,KAAK,YAAW;YAC3B,CAAC;;AAGL,eAAK,wBAAwB,KAAK,iBAAgB;AAKlD,eAAK,sBAAsB,MAAM,MAAW;UAAG,CAAC;AAEhD,cAAI,KAAK,4BAA4B,QAAW;AAC5C,mBAAO,KAAK,wBAAwB,KAAK,qBAAqB;;AAGlE,iBAAO,KAAK;QAChB;QAMU,wBAAwB,YAAyB,gBAAgC,yBAA+B;AACtH,yBAAe,gBAAe;AAE9B,cAAI,uBAAsB,yBAAyB,MAAM;AACrD,kBAAM,gBAAiD,KAAK,MAAM,uBAAuB;AAEzF,kBAAM,cAAmB;cACrB,SAAS;gBACL,QAAQ,cAAc,QAAQ;;;AAItC,sCAA0B,KAAK,UAAU,WAAW;;AAGxD,cAAI,KAAK,qBAAqB,WAAW,YAAY,wCAAwC,OAAO,EAAE,YAAW,MAAO,QAAQ;AAC5H,kBAAM,OAA0E,KAAK,MAAM,uBAAuB;AAClH,iBAAK,QAAQ,0BAA0B;AACvC,iBAAK,QAAQ,UAAU;AACvB,sCAA0B,KAAK,UAAU,IAAI;;AAGjD,cAAI,yBAAyB;AACzB,mBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,iBACA,eAAe,WACf,oBACA,uBAAuB,CAAC;;AAGhC;QACJ;QAEU,MAAM,kBAAe;AAC3B,cAAI,KAAK,uCAAuC,QAAW;AACvD,mBAAO,KAAK,mCAAmC,KAAK,CAAC,eAAiD;AAClG,kBAAI,WAAW,MAAK,MAAO,aAAA,gBAAgB,cAAc;AACrD,qBAAK,mBAAmB;AACxB,qBAAK,qCAAqC;AAC1C,qBAAK,4BAA4B;AACjC,uBAAO,KAAK,gBAAe;;AAE/B,qBAAO,KAAK;YAChB,GAAG,MAA2B;AAC1B,mBAAK,mBAAmB;AACxB,mBAAK,qCAAqC;AAC1C,mBAAK,4BAA4B;AACjC,qBAAO,KAAK,gBAAe;YAC/B,CAAC;;AAGL,eAAK,qCAAqC,KAAK,oBAAmB;AAClE,iBAAO,MAAM,KAAK;QACtB;QAEU,MAAM,UAAU,iBAAiC;AACvD,gBAAM,cAAqC,MAAM,KAAK,YAAY;AAClE,eAAK,wBAAwB,YAAY,iBAAiB;AAE1D,cAAI,eAAuB,KAAK,IAAG;AAGnC,gBAAM,iBAAyB,KAAK,qBAAqB,WAAW,YAAY,wCAAwC,MAAM;AAC9H,gBAAM,0BAAkC,YAAY,iBAAiB,MAAO,SAAS,gBAAgB,EAAE;AACvG,gBAAM,mBAA2B,KAAK,mBAAmB;AAEzD,gBAAM,qBAAqB,YAA0B;AAEjD,gBAAI,CAAC,KAAK,kBACN,CAAC,KAAK,mBAAmB,iBACzB,KAAK,mBAAmB,iBACxB,KAAK,mBAAmB,gBAAgB,kBAAkB;AAE1D,oBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,oBAAM,mBAA8C,MAAM,gBAAgB,KAAI;AAE9E,kBAAI,KAAK,mBAAmB,eAAe;AAEvC;;AAGJ,kBAAI;AACJ,kBAAI;AAEJ,kBAAI,CAAC,oBAAoB,iBAAiB,OAAO;AAC7C,0BAAU;AACV,4BAAY;qBACT;AACH,0BAAU,iBAAiB;AAE3B,qBAAK,mBAAmB,YAAY,QAAQ,UAAU;AAEtD,oBAAI,2BAA2B,KAAK,mBAAmB,WAAW;AAC9D,8BAAY;uBACT;AACH,8BAAY,KAAK,IAAI,GAAG,eAAe,KAAK,IAAG,CAAE;;;AAIzD,kBAAI,MAAM,WAAW;AACjB,sBAAM,KAAK,MAAM,SAAS;;AAG9B,kBAAI,YAAY,MAAM;AAClB,+BAAe,KAAK,IAAG,IAAM,QAAQ,aAAa,OAAQ,YAAY,iBAAiB;;AAI3F,kBAAI,CAAC,KAAK,kBACN,CAAC,KAAK,mBAAmB,iBACzB,KAAK,mBAAmB,iBACxB,KAAK,mBAAmB,gBAAgB,kBAAkB;AAC1D,2BAAW,KACP,IAAI,sCAAA,wBAAwB,aAAA,YAAY,QAAQ,SAAS,KAAK,mBAAmB,WAAW,MAAM,OAAO,CAAC,EAC5G,MAAM,MAAW;AAEf,uBAAK,mBAAmB,yBAAyB,KAAK,qBAAqB,uBAAuB,EAAE,MAAM,MAAW;kBAAG,CAAC;gBAC7H,CAAC;AAED,oBAAI,CAAC,kBAAkB,OAAO;AAK1B,yBAAO,mBAAkB;uBACtB;AAGH,sBAAI,CAAC,KAAK,iBAAiB;AACvB,yBAAK,mBAAmB,cAAa;;;;;UAKzD;AAEA,iBAAO,mBAAkB;QAC7B;QAEQ,MAAM,mBAAgB;AAC1B,cAAI,iBAA0B;AAE9B,eAAK,uBAAuB,aAAA,iBAAgB;AAC5C,gBAAM,YAAoB,KAAK,mBAAmB;AAClD,eAAK,mBAAoB,cAAc,SAAa,YAAY,aAAA,iBAAgB;AAEhF,eAAK,mBAAmB,qBAAqB,KAAK,sBAAsB,KAAK,gBAAgB;AAC7F,cAAI,iBAAyB;AAC7B,cAAI,aAAqB;AAEzB,iBAAO,KAAK,mBAAmB,yBAAyB,KAAK,qBAAqB,eAAe;AAI7F,kBAAM,cAAc,iBAAiB,KAAK,mBAAmB,cAAc,KAAK,oBAAoB,IAAI,KAAK,mBAAmB,MAAM,KAAK,oBAAoB;AAC/J,kBAAM,OAAiB,MAAM;AAE7B,kBAAM,KAAK,mBAAmB,gBAAgB,KAAK;AAGnD,kBAAM,aAA0B,KAAK,sBAAsB,OAAO,KAAK,sBAAsB,MAAM,KAAK,gBAAgB;AAExH,iBAAK,mBAAmB,0BAA0B,WAAW,MAAM;AAInE,uBAAW,OAAO,OAAO,CAAC,UAAgC;AACtD,mBAAK,iBAAiB,QAAQ,KAAK;YACvC,CAAC;AAED,kBAAM,WAAmC,MAAM,WAAW,KAAI;AAE9D,gBAAI,SAAS,eAAe,KAAK;AAC7B,oBAAM,KAAK,mBAAmB,+BAA+B,SAAS,UAAU;AAChF,qBAAO,QAAQ,QAAQ,UAAU;uBAC1B,SAAS,eAAe,MAAM;AACrC,+BAAiB;;AAGrB,6BAAiB,SAAS;AAC1B,yBAAa,SAAS;AAEtB,iBAAK,mBAAmB,kBAAiB;;AAG7C,gBAAM,KAAK,mBAAmB,+BAA+B,gBAAgB,UAAU;AACvF,iBAAO,QAAQ,OAAO,yCAAyC,cAAc,KAAK,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,gCAAgC,CAAC,YAAY,UAAU,EAAE;QAC3M;QAEQ,MAAM,SAAe;AACzB,iBAAO,IAAI,QAAQ,CAAC,YAAgC,KAAK,eAAe,SAAS,OAAO,CAAC;QAC7F;QAEQ,qBAAqB,QAAmB;AAC5C,cAAI,MAAc;AAClB,cAAI,SAAS,QAAQ;AACjB,mBAAO;iBACJ;AACH,kBAAM,WAAuB,IAAI,WAAW,MAAM;AAClD,mBAAO,GAAG,OAAO,UAAU;;AAC3B,qBAAS,IAAY,GAAG,IAAI,OAAO,YAAY,KAAK;AAChD,qBAAO,SAAS,CAAC,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,IAAI;AACnD,mBAAM,IAAI,KAAK,OAAQ,GAAG;AAEtB,wBAAQ,KAAK,GAAG;AAChB,sBAAM;;;;AAKlB,kBAAQ,KAAK,GAAG;QACpB;QAEQ,MAAM,iBAAc;AACxB,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,gBAAM,WAAW,KAAK,IAAI,sCAAA,wBAAwB,aAAA,YAAY,QAAQ,SAAS,KAAK,mBAAmB,WAAW,MAAM,IAAI,CAAC;AAC7H;QACJ;;QAGQ,MAAM,sBAAmB;AAC7B,gBAAM,aAA0B,MAAM,KAAK,YAAW;AACtD,cAAI,KAAK,6BAA6B,QAAW;AAC7C,mBAAO,KAAK,yBAAyB,UAAU;;AAEnD,gBAAM,KAAK,wBAAwB,YAAY,KAAK,oBAAoB,KAAK,qBAAqB,oBAAoB,UAAS,CAAE;AACjI,gBAAM,KAAK,mBAAmB,YAAY,KAAK;AAC/C,iBAAO;QACX;;AAr4BJ,cAAA,wBAAA;AAuZkB,4BAAA,uBAAgC;;;;;;;;;;AC1elD,UAAA,eAAA;AAUA,UAAA,eAAA;AAcA,UAAa,gCAAb,cAAmD,aAAA,sBAAqB;QAEpE,YACI,gBACA,mBACA,aACA,kBACA,YAAsB;AACtB,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,UAAU;AAClF,eAAK,4BAA4B,OAAO,aAAoC,KAAK,mBAAmB,QAAQ;AAC5G,eAAK,gCAAgC,CAAC,aAA2B,KAAK,uBAAuB,QAAQ;QACzG;QAEU,4BAA4B,mBAA0C;AAE5E;QACJ;QAEU,yBAAyB,QAAiC,QAAgB,WAAiB;AAIjG;QACJ;QAEU,0BAA0B,QAAiC,UAAkB,WAAiB;AAIpG;QACJ;QAEU,MAAM,sBAAsB,mBAA0C;AAC5E,cAAI,YAAqB;AACzB,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAC1C,KAAK;YACL,KAAK;AACD,kBAAI,CAAC,CAAC,KAAK,+BAA+B;AACtC,qBAAK,8BAA8B,kBAAkB,QAAQ;;AAEjE,0BAAY;AACZ;YACJ,KAAK;AACD,kBAAI,CAAC,CAAC,KAAK,2BAA2B;AAClC,sBAAM,KAAK,0BAA0B,kBAAkB,QAAQ;;AAEnE,0BAAY;AACZ;YACJ;AACI;;AAER,iBAAO;QACX;QAEU,kBACN,WACA,WACA,oBACA,WACA,OAAa;QAOb;QAEM,MAAM,mBAAmB,UAAgB;AAE/C,gBAAM,SAA6B,aAAA,mBAAmB,SAAS,QAAQ;AACvE,gBAAM,eAA6B,aAAA,gBAAgB,+BAA+B,OAAO,iBAAiB;AAC1G,cAAI;AACJ,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,sBAAY,YAAY,aAAA,WAAW,kCAAkC,QAAQ;AAC7E,gBAAM,eAAe,OAAO,SAAS,KAAK,mBAAmB;AAC7D,cAAI,SAAS;AAEb,eAAK,mBAAmB,mBAAmB,KAAK,mBAAmB,yBAAyB,OAAO,SAAS,OAAO,QAAQ;AAE3H,cAAI,aAAA,aAAa,aAAa,cAAc;AACxC,kBAAM,eAAmC,aAAA,gBAAgB,0BAA0B,OAAO,iBAAiB;AAC3G,kBAAM,wBAA+C,aAAA,gBAAgB,6BAA6B,OAAO,iBAAiB;AAE1H,kBAAM,KAAK,uBACP,cACA,uBACA,aAAA,gBAAgB,0BAA0B,qBAAqB,CAAC;iBAEjE;AACH,gBAAI,EAAE,KAAK,mBAAmB,iBAAiB,iBAAiB,aAAA,aAAa,WAAW,OAAO,sBAAsB,aAAA,kBAAkB,wBAAwB;AAC3J,kBAAI,KAAK,qBAAqB,WAAW,YAAY,aAAA,wBAAwB,MAAM,aAAA,aAAa,aAAA,aAAa,MAAM,GAAG;AAClH,yBAAS,IAAI,aAAA,wBACT,KAAK,mBAAmB,WACxB,cACA,OAAO,aACP,OAAO,UACP,cACA,OAAO,UACP,OAAO,6BACP,OAAO,WACP,QACA,UACA,WAAW;qBACZ;AACH,sBAAM,WAAiC,aAAA,qBAAqB,SAAS,QAAQ;AAC7E,sBAAM,cAAsB,SAAS,SAAS,KAAK,mBAAmB;AACtE,sBAAM,sBAA8B,SAAS,4BAA4B,WAAW;AAEpF,yBAAS,IAAI,aAAA,wBACT,KAAK,mBAAmB,WACxB,cACA,SAAS,MACT,SAAS,UACT,aACA,SAAS,UACT,SAAS,6BACT,SAAS,WACT,QACA,qBACA,WAAW;AAEX,yBAAS,OAAO;;AAGxB,mBAAK,yBAAyB,QAAQ,QAAQ,KAAK,mBAAmB,SAAS;;;QAG3F;QAEU,uBAAuB,UAAgB;AAC7C,gBAAM,aAA+B,aAAA,iBAAiB,SAAS,QAAQ;AACvE,gBAAM,SAAiB,WAAW,SAAS,KAAK,mBAAmB;AACnE,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,sBAAY,YAAY,aAAA,WAAW,kCAAkC,QAAQ;AAE7E,gBAAM,SAAS,IAAI,aAAA,wBACf,KAAK,mBAAmB,WACxB,aAAA,aAAa,mBACb,WAAW,MACX,WAAW,UACX,QACA,WAAW,UACX,WAAW,6BACX,WAAW,WACX,QACA,UACA,WAAW;AAEf,eAAK,mBAAmB,aAAa,MAAM;AAE3C,eAAK,0BAA0B,QAAQ,WAAW,UAAU,KAAK,mBAAmB,SAAS;QACjG;;AAxJJ,cAAA,gCAAA;;;;;;;;;;ACpBA,UAAA,eAAA;AACA,UAAA,eAAA;AAEA,UAAY;AAAZ,OAAA,SAAYC,kBAAe;AACvB,QAAAA,iBAAAA,iBAAA,aAAA,IAAA,CAAA,IAAA;AACA,QAAAA,iBAAAA,iBAAA,cAAA,IAAA,CAAA,IAAA;AACA,QAAAA,iBAAAA,iBAAA,WAAA,IAAA,CAAA,IAAA;MACJ,GAJY,kBAAA,QAAA,oBAAA,QAAA,kBAAe,CAAA,EAAA;AAM3B,UAAY;AAAZ,OAAA,SAAYC,qBAAkB;AAC1B,QAAAA,oBAAAA,oBAAA,QAAA,IAAA,CAAA,IAAA;AACA,QAAAA,oBAAAA,oBAAA,UAAA,IAAA,CAAA,IAAA;MACJ,GAHY,qBAAA,QAAA,uBAAA,QAAA,qBAAkB,CAAA,EAAA;AAK9B,UAAa,mBAAb,MAA6B;QASzB,YACI,qBACA,YAA8B;AAC9B,eAAK,0BAA0B,sBAAsB,sBAAsB,IAAI,aAAA,oBAAoB,IAAI,aAAA,QAAQ,IAAI,CAAC;AACpH,eAAK,iBAAiB;AACtB,eAAK,oBAAoB,SAAS,WAAW,YAAY,8BAA8B,GAAG,GAAG,EAAE;AAC/F,eAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,wCAAwC,MAAS;AAC7G,eAAK,sBAAsB;QAC/B;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAgB,OAAsB;AAC7C,eAAK,sBAAsB;AAC3B,eAAK,iCAAiC,UAAU,gBAAgB,cAAc,MAAO;AACrF,eAAK,wBAAwB,cAAc,gBAAgB,KAAK;QACpE;QAEA,IAAW,sBAAmB;AAC1B,iBAAO,KAAK;QAChB;QAEA,IAAW,6BAA0B;AACjC,iBAAO,KAAK;QAChB;QAEA,IAAW,0BAAuB;AAC9B,iBAAO,KAAK,wBAAwB,gBAAgB;QACxD;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK;QAChB;QAEA,IAAW,4BAAyB;AAChC,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,mDAAmD,MAAS;QAC9G;QAEA,IAAW,6BAA0B;AACjC,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oDAAoD,MAAS;QAC/G;QAEA,IAAW,uBAAoB;AAC3B,gBAAM,SAAmD,CAAA;AACzD,cAAI,cAAuB;AAC3B,cAAI,KAAK,8BAA8B,QAAW;AAC9C,uBAAW,YAAY,KAAK,0BAA0B,MAAM,GAAG,GAAG;AAC9D,oBAAM,iBAAiB,WAAW,aAAA,WAAW,mCAAmC,SAAQ;AACxF,oBAAM,UAAkB,KAAK,WAAW,YAAY,gBAAgB,MAAS;AAC7E,kBAAI,YAAY,QAAW;AACvB,uBAAO,KAAM,EAAE,UAAU,UAAU,QAAO,CAAE;AAC5C,8BAAc;qBACX;AACH,uBAAO,KAAM,EAAE,UAAU,UAAU,GAAE,CAAE;;;;AAInD,iBAAO,cAAc,SAAS;QAClC;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,8BAA2B;AAClC,iBAAO,KAAK;QAChB;QAEA,IAAW,4BAA4B,OAAc;AACjD,eAAK,sBAAsB;QAC/B;;AArFJ,cAAA,mBAAA;;;;;;;;;;;;;;;;;;AChBA,UAAA,eAAA;AASA,UAAM,OAAe;AAErB,UAAa,4BAAb,MAAsC;QAE3B,oBAAoB,SAA4B;AACnD,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAE7B,cAAI;AACA,gBAAI,QAAQ,gBAAgB,aAAA,YAAY,MAAM;AAC1C,oBAAM,cAAsB,QAAQ;AACpC,kBAAI,UAAqC,CAAA;AACzC,kBAAI,OAAe;AAEnB,kBAAI,aAAa;AACb,sBAAM,kBAAkB,YAAY,MAAM,UAAU;AACpD,oBAAI,mBAAmB,gBAAgB,SAAS,GAAG;AAC/C,4BAAU,KAAK,aAAa,gBAAgB,CAAC,CAAC;AAC9C,sBAAI,gBAAgB,SAAS,GAAG;AAC5B,2BAAO,gBAAgB,CAAC;;;;AAKpC,uBAAS,QAAQ,IAAI,aAAA,kBAAkB,QAAQ,aAAa,MAAM,SAAS,QAAQ,EAAE,CAAC;uBAC/E,QAAQ,gBAAgB,aAAA,YAAY,QAAQ;AACnD,oBAAM,gBAA6B,QAAQ;AAC3C,kBAAI,UAAqC,CAAA;AACzC,kBAAI,OAAoB;AAExB,kBAAI,CAAC,iBAAiB,cAAc,aAAa,GAAG;AAChD,sBAAM,IAAI,MAAM,uDAAuD;;AAG3E,oBAAM,WAAW,IAAI,SAAS,aAAa;AAC3C,oBAAM,eAAe,SAAS,SAAS,CAAC;AAExC,kBAAI,cAAc,aAAa,eAAe,GAAG;AAC7C,sBAAM,IAAI,MAAM,wDAAwD;;AAG5E,kBAAI,gBAAgB;AACpB,uBAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,iCAAiB,OAAO,aAAc,SAAU,QAAQ,IAAI,CAAC,CAAC;;AAGlE,wBAAU,KAAK,aAAa,aAAa;AAEzC,kBAAI,cAAc,aAAa,eAAe,GAAG;AAC7C,uBAAO,cAAc,MAAM,IAAI,YAAY;;AAG/C,uBAAS,QAAQ,IAAI,aAAA,kBAAkB,QAAQ,aAAa,MAAM,SAAS,QAAQ,EAAE,CAAC;;mBAErF,GAAG;AACR,qBAAS,OAAO,wCAAwC,CAAW,EAAE;;AAGzE,iBAAO,SAAS;QACpB;QAEO,sBAAsB,SAA0B;AACnD,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAE7B,cAAI;AACA,gBAAI,QAAQ,gBAAgB,aAAA,YAAY,MAAM;AAC1C,oBAAM,UAAU,GAAG,KAAK,YAAY,OAAO,CAAC,GAAG,IAAI,GAAG,QAAQ,WAAW,QAAQ,WAAW,EAAE;AAE9F,uBAAS,QAAQ,IAAI,aAAA,oBAAoB,aAAA,YAAY,MAAM,SAAS,QAAQ,EAAE,CAAC;uBAExE,QAAQ,gBAAgB,aAAA,YAAY,QAAQ;AACnD,oBAAM,gBAAgB,KAAK,YAAY,OAAO;AAC9C,oBAAM,UAAU,QAAQ;AAExB,oBAAM,eAAe,KAAK,oBAAoB,aAAa;AAC3D,oBAAM,kBAAkB,IAAI,UAAU,YAAY;AAClD,oBAAM,eAAe,gBAAgB;AAErC,oBAAM,mBAAmB,IAAI,UAAU,IAAI,gBAAgB,UAAU,QAAQ,aAAa,EAAE;AAC5F,+BAAiB,CAAC,IAAM,gBAAgB,IAAK;AAC7C,+BAAiB,CAAC,IAAI,eAAe;AACrC,+BAAiB,IAAI,iBAAiB,CAAC;AAEvC,kBAAI,SAAS;AACT,sBAAM,gBAAgB,IAAI,UAAU,OAAO;AAC3C,iCAAiB,IAAI,eAAe,IAAI,YAAY;;AAGxD,oBAAM,UAAuB,iBAAiB;AAE9C,uBAAS,QAAQ,IAAI,aAAA,oBAAoB,aAAA,YAAY,QAAQ,SAAS,QAAQ,EAAE,CAAC;;mBAEhF,GAAG;AACR,qBAAS,OAAO,iCAAiC,CAAW,EAAE;;AAGlE,iBAAO,SAAS;QACpB;QAEQ,YAAY,SAA0B;AAC1C,cAAI,gBAAwB;AAE5B,cAAI,QAAQ,SAAS;AACjB,uBAAW,UAAU,QAAQ,SAAS;AAClC,kBAAI,QAAQ;AACR,iCAAiB,GAAG,MAAM,KAAK,QAAQ,QAAQ,MAAM,CAAC,GAAG,IAAI;;;;AAKzE,iBAAO;QACX;QAEQ,aAAa,eAAqB;AACtC,gBAAM,UAAqC,CAAA;AAE3C,cAAI,eAAe;AACf,kBAAM,gBAAgB,cAAc,MAAM,WAAW;AACrD,gBAAI,SAAS;AACT,yBAAW,UAAU,eAAe;AAChC,oBAAI,QAAQ;AACR,wBAAM,iBAAiB,OAAO,QAAQ,GAAG;AACzC,wBAAM,aAAa,iBAAiB,IAAI,OAAO,OAAO,GAAG,cAAc,EAAE,KAAI,EAAG,YAAW,IAAK;AAChG,wBAAM,cACF,iBAAiB,KAAK,OAAO,SAAU,iBAAiB,IACpD,OAAO,OAAO,iBAAiB,CAAC,EAAE,KAAI,IACtC;AAER,0BAAQ,UAAU,IAAI;;;;;AAMtC,iBAAO;QACX;QAEQ,oBAAoB,KAAW;AACnC,gBAAM,SAAS,IAAI,YAAY,IAAI,MAAM;AACzC,gBAAM,OAAO,IAAI,SAAS,MAAM;AAChC,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,iBAAK,SAAS,GAAG,IAAI,WAAW,CAAC,CAAC;;AAEtC,iBAAO;QACX;;AA7IJ,cAAA,4BAAA;;;;;;;;;;ACXA,UAAA,eAAA;AAIA,UAAA,eAAA;AAQA,UAAA,eAAA;AAIA,UAAA,6BAAA;AAGA,UAAA,eAAA;AAMA,UAAA,mBAAA;AACA,UAAA,2BAAA;AAIA,UAAa,0BAAb,cAA6C,2BAAA,sBAAqB;QAAlE,cAAA;;AAEqB,eAAA,yBAAiC;AACjC,eAAA,0BAAkC;AAClC,eAAA,uBAA+B;AAC/B,eAAA,eAAuB;QA8E5C;QA5EW,OACH,QACA,UACA,cAAqB;AAErB,cAAI,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AAC3G,gBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC,MAAS;AACzG,gBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,gBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,WAAW,SAAS,gBAAgB,UAAU;AAC1I,gBAAM,cAAyC,CAAA;AAC/C,gBAAM,aAAqB,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC,MAAS;AACjH,gBAAM,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,sCAAsC,MAAS;AAEjH,cAAI,YAAY;AACZ,gBAAI,CAAC,YAAY,SAAS,OAAO,yBAAA,oBAAoB,wBAAwB,MAAM,IAAI;AACnF,0BAAY,yBAAA,oBAAoB,wBAAwB,IAAI;;qBAEzD,UAAU;AACjB,gBAAI,CAAC,YAAY,SAAS,OAAO,yBAAA,oBAAoB,QAAQ,MAAM,IAAI;AACnE,0BAAY,yBAAA,oBAAoB,QAAQ,IAAI;;;AAIpD,cAAI,CAAC,YAAY,SAAS,OAAO,yBAAA,oBAAoB,MAAM,MAAM,IAAI;AACjE,wBAAY,yBAAA,oBAAoB,MAAM,IAAI,OAAO,WAAW,YAAY,aAAA,0BAA0B,aAAA,aAAa,aAAA,aAAa,MAAM,CAAC,EAAE,YAAW;;AAGpJ,cAAI,OAAO,8BAA8B,QAAW;AAChD,wBAAY,yBAAA,oBAAoB,gBAAgB,IAAI;;AAGxD,eAAK,mBAAmB,QAAQ,aAAa,QAAQ;AAErD,cAAI,CAAC,UAAU;AACX,oBAAQ,OAAO,iBAAiB;cAC5B,KAAK,aAAA,gBAAgB;AACjB,oBAAI,OAAO,WAAW,YAAY,aAAA,4BAA4B,OAAO,MAAM,QAAQ;AAC/E,6BAAW,OAAO,KAAK;uBACpB;AACH,sBAAI,OAAO,+BAA+B,UAAa,SAAS,OAAO,4BAA4B,EAAE,IAAI,GAAG;AACxG,+BAAW,GAAG,IAAI,GAAG,KAAK,YAAY,GAAG,OAAO,0BAA0B;yBACvE;AACH,+BAAW,OAAO,KAAK;;;AAG/B;cACJ,KAAK,aAAA,gBAAgB;AACjB,2BAAW,OAAO,KAAK;AACvB;cACJ;AACI,oBAAI,OAAO,+BAA+B,UAAa,SAAS,OAAO,4BAA4B,EAAE,IAAI,GAAG;AACxG,6BAAW,GAAG,IAAI,GAAG,KAAK,YAAY,GAAG,OAAO,0BAA0B;uBACvE;AACH,6BAAW,OAAO,KAAK;;AAE3B;;;AAIZ,gBAAM,UAAqC,CAAA;AAC3C,cAAI,SAAS,UAAU,UAAa,SAAS,UAAU,IAAI;AACvD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAE5C,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AAEpC,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AAEnH,gBAAM,sBAAsB,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;AAI5L,gBAAM,MAAc,oBAAoB;AACxC,iBAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,GAAG;AAEzE,iBAAO;QACX;;AAlFJ,cAAA,0BAAA;;;;;;;;;;AC9BA,UAAA,eAAA;AAQA,UAAA,eAAA;AAGA,UAAA,eAAA;AAGA,UAAA,6BAAA;AAGA,UAAA,eAAA;AAKA,UAAA,mBAAA;AACA,UAAA,2BAAA;AAIA,UAAa,2CAAb,cAA8D,2BAAA,sBAAqB;QAAnF,cAAA;;AACqB,eAAA,eAAuB;QA+E5C;QA7EW,OACH,QACA,UACA,cAAqB;AAErB,cAAI,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AAC3G,gBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC,MAAS;AACzG,gBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,gBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,WAAW,SAAS,gBAAgB,UAAU;AAC1I,gBAAM,cAAyC,CAAA;AAC/C,gBAAM,aAAqB,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC,MAAS;AACjH,gBAAM,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,sCAAsC,MAAS;AAEjH,cAAI,YAAY;AACZ,gBAAI,CAAC,YAAY,SAAS,OAAO,yBAAA,oBAAoB,wBAAwB,MAAM,IAAI;AACnF,0BAAY,yBAAA,oBAAoB,wBAAwB,IAAI;;qBAEzD,UAAU;AACjB,gBAAI,CAAC,YAAY,SAAS,OAAO,yBAAA,oBAAoB,QAAQ,MAAM,IAAI;AACnE,0BAAY,yBAAA,oBAAoB,QAAQ,IAAI;;;AAIpD,cAAI,OAAO,8BAA8B,QAAW;AAChD,wBAAY,yBAAA,oBAAoB,gBAAgB,IAAI;;AAGxD,eAAK,eAAe,QAAQ,aAAa,QAAQ;AAEjD,cAAI,CAAC,UAAU;AACX,uBAAW,GAAG,IAAI,GAAG,KAAK,YAAY;;AAG1C,gBAAM,UAAqC,CAAA;AAC3C,cAAI,SAAS,UAAU,UAAa,SAAS,UAAU,IAAI;AACvD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAE5C,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AAEpC,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AAEnH,gBAAM,sBAAsB,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;AAI5L,gBAAM,MAAc,oBAAoB;AACxC,iBAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,GAAG;AAEzE,iBAAO;QACX;QAEU,eACN,QACA,aACA,UAAgB;AAEhB,gBAAM,2BAAgD,oBAAI,IAAI;YAC1D,CAAC,aAAA,WAAW,qCAAqC,yBAAA,oBAAoB,4BAA4B;YACjG,CAAC,aAAA,WAAW,4CAA4C,yBAAA,oBAAoB,kBAAkB;YAC9F,CAAC,aAAA,WAAW,6CAA6C,yBAAA,oBAAoB,mBAAmB;YAChG,CAAC,aAAA,WAAW,iDAAiD,yBAAA,oBAAoB,uBAAuB;YACxG,CAAC,aAAA,WAAW,4CAA4C,yBAAA,oBAAoB,cAAc;YAC1F,CAAC,aAAA,WAAW,uCAAuC,yBAAA,oBAAoB,SAAS;YAChF,CAAC,aAAA,WAAW,oDAAoD,yBAAA,oBAAoB,2BAA2B;WAClH;AAED,mCAAyB,QAAQ,CAAC,eAAuB,eAAgC;AACrF,iBAAK,gBAAgB,YAAY,eAAe,QAAQ,aAAa,QAAQ;UACjF,CAAC;AAGD,gBAAM,oBAA+C,KAAK,MAAM,OAAO,WAAW,YAAY,aAAA,+BAA+B,IAAI,CAAC;AAElI,iBAAO,KAAK,iBAAiB,EAAE,QAAQ,CAAC,UAAuB;AAC3D,wBAAY,KAAK,IAAI,kBAAkB,KAAK;UAChD,CAAC;QACL;;AA/EJ,cAAA,2CAAA;;;;;;;;;;AC3BA,UAAA,eAAA;AAQA,UAAA,eAAA;AAIA,UAAA,6BAAA;AAGA,UAAA,eAAA;AAMA,UAAA,mBAAA;AACA,UAAA,2BAAA;AAIA,UAAa,+BAAb,cAAkD,2BAAA,sBAAqB;QAAvE,cAAA;;AAEqB,eAAA,wBAAgC;QAqDrD;QAnDW,OACH,QACA,UACA,cAAqB;AAErB,cAAI,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AAC3G,gBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC,WAAW;AAC3G,gBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,gBAAM,cAAsB,sBAAsB,SAAS,gBAAgB,aAAa,KAAK;AAC7F,gBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,WAAW;AAEvG,gBAAM,cAAyC,CAAA;AAC/C,eAAK,eAAe,aAAa,QAAQ,QAAQ;AAEjD,cAAI,CAAC,UAAU;AACX,uBAAW;;AAGf,gBAAM,UAAqC,CAAA;AAC3C,cAAI,SAAS,UAAU,UAAa,SAAS,UAAU,IAAI;AACvD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAE5C,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AAEpC,iBAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,QAAQ;AAE9E,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AACnH,iBAAO,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;QAC3K;QAEO,eAAe,aAAwC,QAA0B,aAAmB;AAEvG,gBAAM,aAAqB,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC,MAAS;AACjH,gBAAM,WAAmB,OAAO,WAAW,YAAY,aAAA,WAAW,sCAAsC,MAAS;AAEjH,cAAI,cAAc,EAAE,yBAAA,oBAAoB,4BAA4B,cAAc;AAC9E,wBAAY,yBAAA,oBAAoB,wBAAwB,IAAI;;AAGhE,cAAI,YAAY,EAAE,yBAAA,oBAAoB,YAAY,cAAc;AAC5D,wBAAY,yBAAA,oBAAoB,QAAQ,IAAI;;AAGhD,gBAAM,mBAA4B,OAAO,WAAW,YAAY,aAAA,WAAW,kDAAkD,OAAO,EAAE,YAAW,MAAO;AACxJ,gBAAM,WAAoB,OAAO,WAAW,YAAY,aAAA,0BAA0B,aAAA,aAAa,aAAA,aAAa,MAAM,CAAC,MAAM,aAAA,aAAa,aAAA,aAAa,MAAM;AACzJ,cAAI,oBAAoB,UAAU;AAC9B,wBAAY,yBAAA,oBAAoB,MAAM,IAAI,aAAA,aAAa,aAAA,aAAa,QAAQ,EAAE,YAAW;;AAG7F,eAAK,mBAAmB,QAAQ,aAAa,WAAW;QAC5D;;AAtDJ,cAAA,+BAAA;;;;;;;;;;AC1BA,UAAA,eAAA;AAQA,UAAA,mBAAA;AACA,UAAA,eAAA;AAGA,UAAA,6BAAA;AAGA,UAAA,eAAA;AAMA,UAAA,mBAAA;AACA,UAAA,2BAAA;AAEA,UAAa,+BAAb,cAAkD,2BAAA,sBAAqB;QAE5D,OACH,QACA,UACA,cAAqB;AAErB,gBAAM,WAAmB,KAAK,eAAe,MAAM;AAEnD,gBAAM,cAAyC,CAAA;AAE/C,cAAI,OAAO,8BAA8B,QAAW;AAChD,wBAAY,yBAAA,oBAAoB,gBAAgB,IAAI;;AAExD,eAAK,eAAe,aAAa,QAAQ,QAAQ;AAEjD,gBAAM,UAAqC,CAAA;AAC3C,cAAI,SAAS,UAAU,UAAa,SAAS,UAAU,IAAI;AACvD,oBAAQ,SAAS,UAAU,IAAI,SAAS;;AAE5C,kBAAQ,iBAAA,YAAY,YAAY,IAAI;AAEpC,iBAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,QAAQ;AAE9E,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AACnH,iBAAO,IAAI,aAAA,oBAAoB,UAAU,aAAa,SAAS,IAAI,aAAA,0BAAyB,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;QAC3K;QAEO,eAAe,QAA0B,yBAAiC;AAE7E,gBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B;AAC9F,gBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AAErE,cAAI,cAAsB,OAAO,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AAC9G,cAAI,CAAC,aAAa;AACd,gBAAI,OAAO,8BAA8B,QAAW;AAChD,oBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,8BAA8B,UAAU;AACpI,4BAAc,OAAO;mBAClB;AACH,oBAAM,OAAe,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,8BAA8B,UAAU;AACpI,4BAAc,OAAO;;;AAI7B,cAAI,4BAA4B,MAAM;AAClC,mBAAO;;AAGX,iBAAO,iBAAA,YAAY,aAAa,aAAa,EAAE,OAAM,CAAE;QAC3D;QAEO,eAAe,aAAwC,QAA0B,aAAmB;AAEvG,sBAAY,OAAO,OAAO,WAAW,YAAY,aAAA,WAAW,oCAAoC;AAChG,sBAAY,KAAK,OAAO,WAAW,YAAY,aAAA,WAAW,8CAA8C;AACxG,sBAAY,WAAW,OAAO,oBAAoB,aAAA,gBAAgB,cAAc,gBAC5E,OAAO,oBAAoB,aAAA,gBAAgB,eAAe,iBAAiB;AAE/E,eAAK,mBAAmB,QAAQ,aAAa,WAAW;AACxD,eAAK,gBACD,aAAA,WAAW,6DACX,yBAAA,oBAAoB,mBACpB,QACA,aACA,WAAW;AAGf,gBAAM,mBAA4B,OAAO,WAAW,YAAY,aAAA,WAAW,0CAA0C,MAAS;AAC9H,cAAI,qBAAqB,QAAW;AAChC,wBAAY,QAAQ;AACpB,wBAAY,WAAW;;QAE/B;;AAxEJ,cAAA,+BAAA;;;;;;;;;;ACxBA,UAAA,eAAA;AAKA,UAAA,eAAA;AAEA,UAAa,kBAAb,MAA4B;QACjB,OAAO,+BAA+B,mBAAsC,uBAAgC,OAAK;AACpH,cAAI,SAAS,aAAA,aAAa;AAC1B,kBAAQ,mBAAmB;YACvB,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,aAAa;AACtB;YACJ,KAAK,aAAA,kBAAkB;AAGnB,uBAAS,uBAAuB,aAAA,aAAa,mBAAmB,aAAA,aAAa;AAC7E;YACJ,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,aAAa;AACtB;YACJ,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB;AACI,uBAAS,aAAA,aAAa;AACtB;;AAER,iBAAO;QACX;QAEO,OAAO,0BAA0B,mBAAoC;AACxE,cAAI,SAAS,aAAA,mBAAmB;AAChC,kBAAQ,mBAAmB;YACvB,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,mBAAmB;AAC5B;YACJ,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB,KAAK,aAAA,kBAAkB;YACvB;AACI,uBAAS,aAAA,mBAAmB;AAC5B;;AAER,iBAAO;QACX;QAEO,OAAO,6BAA6B,mBAAoC;AAC3E,cAAI,SAAgC,aAAA,sBAAsB;AAC1D,kBAAQ,mBAAmB;YACvB,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,sBAAsB;AAC/B;YACJ,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,sBAAsB;AAC/B;YACJ,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,sBAAsB;AAC/B;YACJ,KAAK,aAAA,kBAAkB;AACnB,uBAAS,aAAA,sBAAsB;AAC/B;YACJ;AACI,uBAAS,aAAA,sBAAsB;AAC/B;;AAGR,iBAAO;QAEX;QAEO,OAAO,0BAA0B,uBAA4C;AAChF,cAAI,eAAuB;AAC3B,kBAAQ,uBAAuB;YAC3B,KAAK,aAAA,sBAAsB;AACvB,6BAAe;AACf;YACJ,KAAK,aAAA,sBAAsB;AACvB,6BAAe;AACf;YACJ,KAAK,aAAA,sBAAsB;AACvB,6BAAe;AACf;YACJ;AACI;;AAER,iBAAO;QACX;;AAvFJ,cAAA,kBAAA;;;;;;;;;;ACHA,UAAY;AAAZ,OAAA,SAAYC,kBAAe;AAKvB,QAAAA,iBAAAA,iBAAA,SAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,iBAAAA,iBAAA,cAAA,IAAA,CAAA,IAAA;AAMA,QAAAA,iBAAAA,iBAAA,OAAA,IAAA,CAAA,IAAA;MACJ,GAlBY,kBAAA,QAAA,oBAAA,QAAA,kBAAe,CAAA,EAAA;AAoB3B,UAAY;AAAZ,OAAA,SAAYC,oBAAiB;AACzB,QAAAA,mBAAAA,mBAAA,SAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,SAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,uBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,eAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,OAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,gBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,iBAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,YAAA,IAAA,CAAA,IAAA;AACA,QAAAA,mBAAAA,mBAAA,WAAA,IAAA,CAAA,IAAA;MACJ,GAVY,oBAAA,QAAA,sBAAA,QAAA,oBAAiB,CAAA,EAAA;;;;;;;;;;ACxB7B,UAAA,eAAA;AASA,UAAa,0BAAb,MAAa,yBAAuB;QAGhC,YAAoB,MAAY;AAC5B,eAAK,mBAAmB,KAAK,MAAM,IAAI;AACvC,cAAI,CAAC,CAAC,KAAK,iBAAiB,iBAAiB;AACzC,iBAAK,iBAAiB,kBAAkB,aAAA,gBAAgB,KAAK,iBAAiB,eAA0D;;AAE5I,cAAI,CAAC,CAAC,KAAK,iBAAiB,QAAQ;AAChC,iBAAK,iBAAiB,kBAAkB,aAAA,gBAAgB,KAAK,iBAAiB,MAAiD;;QAEvI;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,yBAAwB,IAAI;QAC3C;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK,iBAAiB;QACjC;;AAvBJ,cAAA,0BAAA;;;;;;;;;;ACTA,UAAA,iBAAA;AAEA,UAAA,yBAAA;AAWA,UAAa,wBAAb,MAAa,uBAAqB;QAG9B,YAAoB,YAAkC;AAClD,eAAK,4BAA4B;AACjC,eAAK,0BAA0B,YAAY,oBAAoB,uBAAA,kBAAkB,KAAK,0BAA0B,YAAY,iBAA8D;QAC9L;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,uBAAsB,KAAK,MAAM,IAAI,CAA2B;QAC/E;QAEO,OAAO,wBAAwB,uBAAmE;AACrG,yBAAA,UAAU,uBAAuB,uBAAuB,uBAAuB;AAC/E,gBAAM,aAAqC,sBAAsB;AACjE,gCAAsB,mBAAmB;AACzC,qBAAW,cAAe;AAC1B,iBAAO,IAAI,uBAAsB,UAAU;QAC/C;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,0BAA0B;QAC1C;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,0BAA0B;QAC1C;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,0BAA0B;QAC1C;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK,0BAA0B;QAC1C;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,0BAA0B,iBAAiB;QAC3D;;AAtCJ,cAAA,wBAAA;;;;;;;;;;ACbA,UAAA,iBAAA;AACA,UAAA,eAAA;AACA,UAAA,yBAAA;AAaA,UAAa,oBAAb,MAAa,mBAAiB;QAG1B,YAAoB,QAA0B;AAC1C,eAAK,wBAAwB;AAC7B,eAAK,sBAAsB,oBAAoB,aAAA,kBAAkB,KAAK,sBAAsB,iBAA8D;AAC1J,cAAI,KAAK,sBAAsB,gBAAgB,QAAW;AACtD,iBAAK,sBAAsB,YAAY,oBAAoB,uBAAA,kBAAkB,KAAK,sBAAsB,YAAY,iBAA8D;;QAE1L;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,mBAAkB,KAAK,MAAM,IAAI,CAAuB;QACvE;QAEO,OAAO,wBAAwB,qBAAyD;AAC3F,yBAAA,UAAU,uBAAuB,qBAAqB,qBAAqB;AAC3E,gBAAM,SAA6B,oBAAoB;AACvD,8BAAoB,eAAe;AACnC,iBAAO,cAAe;AACtB,iBAAO,OAAO,OAAO;AACrB,iBAAO,IAAI,mBAAkB,MAAM;QACvC;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK,sBAAsB;QACtC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,sBAAsB;QACtC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,sBAAsB;QACtC;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,sBAAsB;QACtC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,sBAAsB,iBAAiB;QACvD;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK,sBAAsB,iBAAiB;QACvD;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK,sBAAsB;QACtC;;AAlDJ,cAAA,oBAAA;;;;;;;;;;ACfA,UAAA,eAAA;AAMA,UAAA,eAAA;AAeA,UAAA,eAAA;AAkBA,UAAa,+BAAb,cAAkD,aAAA,8BAA6B;QAG3E,YACI,gBACA,mBACA,aACA,kBACA,uBAA4C;AAE5C,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,qBAAqB;AAC7F,eAAK,4BAA4B;AACjC,eAAK,iBAAiB,OAAO,CAAC,oBAA0C;AACpE,gBAAI,gBAAgB,SAAS,8BAA8B;AACvD,mBAAK,0BAA0B,aAAY;;UAEnD,CAAC;QAEL;QAEU,MAAM,4BAA4B,mBAA0C;AAElF,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,cAAI,YAAqB,MAAM,KAAK,sBAAsB,iBAAiB;AAC3E,cAAI,WAAW;AACX,mBAAO;;AAGX,gBAAM,0BAA0B,OAAO,qBAAsD;AACzF,iBAAK,mBAAmB,mBAAmB,KAAK,mBAAmB,yBAAyB,iBAAiB,SAAS,iBAAiB,QAAQ;AAE/I,gBAAI,iBAAiB,sBAAsB,aAAA,kBAAkB,SAAS;AAGlE,oBAAM,SAA0C,KAAK,mBAAmB,kBAAkB,WAAW;AACrG,kBAAI,CAAC,CAAC,KAAK,0BAA0B,YAAY;AAC7C,oBAAI;AACA,uBAAK,0BAA0B,WAAW,KAAK,2BAA2B,MAAM;yBAE3E,OAAO;;;AAOpB,kBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,oBAAI;AACA,uBAAK,oBAAoB,OAAO,MAAM;yBACjC,GAAG;AACR,sBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,yBAAK,kBAAkB,CAAW;;;AAM1C,qBAAK,sBAAsB;AAC3B,qBAAK,oBAAoB;;mBAE1B;AACH,oBAAM,SAAuB,aAAA,gBAAgB,+BAA+B,iBAAiB,iBAAiB;AAE9G,oBAAM,SAAS,IAAI,aAAA,6BACf,QACA,KAAK,mBAAmB,WACxB,QACA,iBAAiB,MACjB,iBAAiB,UACjB,KAAK,mBAAmB,yBAAyB,iBAAiB,QAClE,iBAAiB,UACjB,iBAAiB,YACjB,QACA,kBAAkB,UAClB,WAAW;AAEf,kBAAI,WAAW,aAAA,aAAa,UAAU;AAClC,sBAAM,eAAmC,aAAA,gBAAgB,0BAA0B,iBAAiB,iBAAiB;AACrH,sBAAM,wBAA+C,aAAA,gBAAgB,6BAA6B,iBAAiB,iBAAiB;AAEpI,sBAAM,KAAK,uBACP,cACA,uBACA,aAAA,gBAAgB,0BAA0B,qBAAqB,CAAC;qBAEjE;AACH,oBAAI,EAAE,KAAK,mBAAmB,iBAAiB,WAAW,aAAA,aAAa,WAAW,iBAAiB,sBAAsB,aAAA,kBAAkB,wBAAwB;AAC/J,wBAAM,KAAK,IAAI,aAAA,gCAAgC,QAAQ,OAAO,QAAQ,KAAK,mBAAmB,SAAS;AAEvG,sBAAI,CAAC,CAAC,KAAK,0BAA0B,YAAY;AAC7C,wBAAI;AACA,2BAAK,0BAA0B,WAAW,KAAK,2BAA2B,EAAE;6BAEvE,OAAO;;;;AAQxB,oBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,sBAAI;AACA,yBAAK,oBAAoB,MAAM;2BAC1B,GAAG;AACR,wBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,2BAAK,kBAAkB,CAAW;;;AAM1C,uBAAK,sBAAsB;AAC3B,uBAAK,oBAAoB;;;AAGjC,0BAAY;;UAGpB;AAEA,gBAAM,8BAA8B,CAAC,YAAmC,qBAA8C;AAClH,kBAAM,SAA0C,KAAK,mBAAmB,YAAY,gBAAgB;AACpG,iBAAK,mBAAmB,aAAa,KAAK,mBAAmB,yBAAyB,OAAO,MAAM;AAEnG,gBAAI,CAAC,CAAC,KAAK,0BAA0B,aAAa;AAC9C,kBAAI;AACA,qBAAK,0BAA0B,YAAY,KAAK,2BAA2B,MAAM;uBAE5E,OAAO;;;AAKpB,wBAAY;UAChB;AAEA,cAAI,kBAAkB,gBAAgB,aAAA,YAAY,MAAM;AACpD,wBAAY,YAAY,aAAA,WAAW,kCAAkC,kBAAkB,QAAQ;;AAGnG,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAC1C,KAAK;AACD,0CAA4B,aAAA,sBAAsB,SAAS,kBAAkB,QAAQ,GAAG,WAAW;AACnG;YAEJ,KAAK;AACD,oBAAM,SAA+C,KAAK,MAAM,kBAAkB,QAAQ;AAC1F,kBAAI,CAAC,CAAC,OAAO,cAAc;AACvB,sBAAM,wBAAwB,aAAA,kBAAkB,wBAAwB,MAAM,CAAC;qBAC5E;AACH,sBAAM,aAA2D,KAAK,MAAM,kBAAkB,QAAQ;AACtG,oBAAI,CAAC,CAAC,WAAW,kBAAkB;AAC/B,8CAA4B,aAAA,sBAAsB,wBAAwB,UAAU,GAAG,WAAW;;;AAG1G;YACJ,KAAK;AACD,oBAAM,wBAAwB,aAAA,kBAAkB,SAAS,kBAAkB,QAAQ,CAAC;AACpF;YAEJ,KAAK;AACD,mBAAK,mBAAmB,kBAAkB,YAAY,KAAK,mBAAmB,SAAS;AACvF,0BAAY;AACZ;YAEJ,KAAK;YACL,KAAK;AACD,oBAAM,WAAoC,aAAA,wBAAwB,SAAS,kBAAkB,QAAQ;AAErG,sBAAQ,SAAS,iBAAiB;gBAC9B,KAAK,aAAA,gBAAgB;AACjB,sBAAI,CAAC,CAAC,KAAK,0BAA0B,cAAc;AAC/C,0BAAM,SAAS,IAAI,aAAA,2BAA2B,aAAA,aAAa,UAAU,MAAS;AAC9E,0BAAM,WAA0C,IAAI,aAAA,8BAA8B,QAAQ,KAAK,mBAAmB,SAAS;AAE3H,wBAAI;AACA,2BAAK,0BAA0B,aAAa,KAAK,2BAA2B,QAAQ;6BAE/E,OAAO;;;AAMpB,sBAAI,CAAC,CAAC,KAAK,0BAA0B,UAAU;AAE3C,0BAAM,iBAA0D,IAAI,aAAA,wCAChE,KAAK,mBAAmB,WACxB,aAAA,mBAAmB,OACnB,SAAS,eACT,aAAA,sBAAsB,cACtB,IAAI;AAER,wBAAI;AACA,2BAAK,0BAA0B,SAAS,KAAK,2BAA2B,cAAc;6BAEjF,OAAO;;;AAKpB;gBACJ,KAAK,aAAA,gBAAgB;AACjB,uBAAK,mBAAmB,QAAW,KAAK,mBAAmB,SAAS;AACpE;gBACJ;AACI;;AAER,0BAAY;AACZ;YACJ;AACI;;AAER,iBAAO;QACX;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAE1F,cAAI,CAAC,CAAC,KAAK,0BAA0B,UAAU;AAE3C,kBAAM,cAAuD,IAAI,aAAA,wCAC7D,WACA,oBACA,OACA,WACA,MAAS;AAEb,gBAAI;AACA,mBAAK,0BAA0B,SAAS,KAAK,2BAA2B,WAAW;oBAE/E;YAAA;;AAGZ,cAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,kBAAM,SAAuC,IAAI,aAAA;cAC7C;;cACA;cACA,aAAA,aAAa;cACb;;cACA;;cACA;;cACA;;cACA;;cACA;cACA;;cACA;YAAU;AACd,gBAAI;AACA,mBAAK,oBAAoB,MAAM;AAE/B,mBAAK,sBAAsB;oBACvB;YAAA;;QAEhB;QAEU,0BAA0B,QAAiC,UAAkB,WAAiB;AACpG,cAAI;AACA,kBAAM,KAAK,IAAI,aAAA,gCAAgC,aAAA,6BAA6B,4BAA4B,MAAM,GAAG,UAAU,SAAS;AACpI,iBAAK,0BAA0B,YAAY,KAAK,2BAA2B,EAAE;mBAExE,OAAO;;QAIpB;QAEU,yBAAyB,QAAiC,QAAgB,WAAiB;AACjG,cAAI;AACA,kBAAM,KAAK,IAAI,aAAA,gCAAgC,aAAA,6BAA6B,4BAA4B,MAAM,GAAG,QAAQ,SAAS;AAClI,iBAAK,0BAA0B,WAAW,KAAK,2BAA2B,EAAE;mBACvE,OAAO;;QAIpB;QAEQ,mBAAmB,eAA0D,YAA8B;AAC/G,cAAI;AAEJ,cAAI,WAAc,cAAc,YAAY,cAAc;AACtD,2BAAe,IAAI,aAAA,aAAY;AAC/B,uBAAW,eAAe,cAAc,YAAY,cAAc;AAC9D,2BAAa,IAAI,YAAY,UAAU,YAAY,QAAQ,YAAY,WAAW;;;AAI1F,cAAI;AACJ,cAAI;AACJ,cAAI,yBAAyB,aAAA,mBAAmB;AAC5C,gBAAI,CAAC,CAAC,cAAc,eAAe,cAAc,YAAY,sBAAsB,aAAA,kBAAkB,SAAS;AAC1G,6BAAe,aAAA,aAAa;mBACzB;AACH,6BAAe,aAAA,aAAa;;AAEhC,yBAAa,cAAc;iBACxB;AACH,2BAAe,aAAA,aAAa;;AAEhC,gBAAM,WAAW,cAAc;AAE/B,gBAAM,SAAiB,cAAc,SAAS,KAAK,mBAAmB;AAEtE,gBAAM,SAAS,IAAI,aAAA,6BACf,cACA,KAAK,mBAAmB,WACxB,cACA,cAAc,MACd,cAAc,UACd,QACA,UACA,YACA,cAAc,YAAY,eAC1B,KAAK,UAAU,aAAa,GAC5B,UAAU;AAEd,gBAAM,KAAK,IAAI,aAAA,gCAAgC,QAAQ,QAAQ,KAAK,mBAAmB,SAAS;AAChG,iBAAO;QACX;QAEQ,mBAAmB,OAAoB,WAAiB;AAC5D,gBAAM,SAAU,WAAc,QAAS,aAAA,aAAa,6BAA6B,aAAA,aAAa;AAC9F,gBAAM,SAAS,IAAI,aAAA,2BAA2B,QAAQ,KAAK;AAC3D,gBAAM,WAA0C,IAAI,aAAA,8BAA8B,QAAQ,SAAS;AAEnG,cAAI,CAAC,CAAC,KAAK,0BAA0B,cAAc;AAC/C,gBAAI;AACA,mBAAK,0BAA0B,aAAa,KAAK,2BAA2B,QAAQ;qBAE/E,OAAO;;;QAMxB;;AAvVJ,cAAA,+BAAA;;;;;;;;;;AClCA,UAAa,iBAAb,MAAa,gBAAc;QAGvB,YAAoB,MAAY;AAC5B,eAAK,0BAA0B,KAAK,MAAM,IAAI;QAClD;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,gBAAe,IAAI;QAClC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,wBAAwB;QACxC;;AAbJ,cAAA,iBAAA;;;;;;;;;;ACMA,UAAa,mBAAb,MAAa,kBAAgB;QAGzB,YAAoB,MAAY;AAC5B,eAAK,uBAAuB,KAAK,MAAM,IAAI;QAC/C;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,kBAAiB,IAAI;QACpC;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,qBAAqB;QACrC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,qBAAqB;QACrC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,qBAAqB;QACrC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,qBAAqB,oBAAoB,SAAY,SAAY,KAAK,qBAAqB,gBAAgB;QAC3H;QAEA,IAAW,8BAA2B;AAClC,iBAAO,KAAK,qBAAqB,oBAAoB,SAAY,SAAY,KAAK,qBAAqB,gBAAgB;QAC3H;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK,qBAAqB;QACrC;;AAjCJ,cAAA,mBAAA;;;;;;;;;;ACHA,UAAa,gBAAb,MAAa,eAAa;QAGtB,YAAoB,MAAY;AAC5B,eAAK,oBAAoB,KAAK,MAAM,IAAI;QAC5C;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,eAAc,IAAI;QACjC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,kBAAkB;QAClC;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,kBAAkB;QAClC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,kBAAkB;QAClC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,kBAAkB;QAClC;;AAzBJ,cAAA,gBAAA;;;;;;;;;;ACPA,UAAA,eAAA;AAYA,UAAA,eAAA;AAgBA,UAAa,0BAAb,cAA6C,aAAA,sBAAqB;QAI9D,YACI,gBACA,mBACA,aACA,kBACA,kBAAkC;AAClC,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,gBAAgB;AACxF,eAAK,uBAAuB;QAEhC;QAEU,MAAM,4BAA4B,mBAA0C;AAElF,cAAI;AACJ,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,sBAAY,YAAY,aAAA,WAAW,kCAAkC,kBAAkB,QAAQ;AAC/F,cAAI,YAAqB;AAEzB,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAC1C,KAAK;YACL,KAAK;AACD,oBAAM,aAA+B,aAAA,iBAAiB,SAAS,kBAAkB,QAAQ;AACzF,oBAAM,SAAiB,WAAW,SAAS,KAAK,mBAAmB;AAEnE,uBAAS,IAAI,aAAA;gBACT,KAAK,mBAAmB;gBACxB,aAAA,aAAa;gBACb,WAAW;gBACX,WAAW;gBACX;gBACA,WAAW;gBACX,WAAW;gBACX;;gBACA;gBACA,kBAAkB;gBAClB;cAAW;AAEf,mBAAK,mBAAmB,aAAa,MAAM;AAE3C,oBAAM,KAAK,IAAI,aAAA,2BAA2B,QAAQ,WAAW,UAAU,KAAK,mBAAmB,SAAS;AAExG,kBAAI,CAAC,CAAC,KAAK,qBAAqB,aAAa;AACzC,oBAAI;AACA,uBAAK,qBAAqB,YAAY,KAAK,sBAAsB,EAAE;yBAE9D,OAAO;;;AAKpB,0BAAY;AACZ;YACJ,KAAK;AACD,oBAAM,SAA6B,aAAA,mBAAmB,SAAS,kBAAkB,QAAQ;AACzF,oBAAM,eAA6B,aAAA,gBAAgB,+BAA+B,OAAO,mBAAmB,KAAK,mCAAmC;AAEpJ,mBAAK,mBAAmB,mBAAmB,KAAK,mBAAmB,yBAAyB,OAAO,SAAS,OAAO,QAAQ;AAE3H,kBAAI,aAAA,aAAa,aAAa,cAAc;AACxC,sBAAM,eAAmC,aAAA,gBAAgB,0BAA0B,OAAO,iBAAiB;AAC3G,sBAAM,wBAA+C,aAAA,gBAAgB,6BAA6B,OAAO,iBAAiB;AAE1H,sBAAM,KAAK,uBACP,cACA,uBACA,aAAA,gBAAgB,0BAA0B,qBAAqB,CAAC;qBAEjE;AACH,oBAAI,EAAE,KAAK,mBAAmB,iBAAiB,iBAAiB,aAAA,aAAa,WAAW,OAAO,sBAAsB,aAAA,kBAAkB,wBAAwB;AAC3J,sBAAI,KAAK,qBAAqB,WAAW,YAAY,aAAA,wBAAwB,MAAM,aAAA,aAAa,aAAA,aAAa,MAAM,GAAG;AAClH,6BAAS,IAAI,aAAA;sBACT,KAAK,mBAAmB;sBACxB;sBACA,OAAO;sBACP,OAAO;sBACP,OAAO,SAAS,KAAK,mBAAmB;sBACxC,OAAO;sBACP,OAAO;sBACP;;sBACA;sBACA,kBAAkB;sBAClB;oBAAW;yBACZ;AACH,0BAAM,WAAiC,aAAA,qBAAqB,SAAS,kBAAkB,QAAQ;AAC/F,0BAAM,cAAsB,SAAS,SAAS,KAAK,mBAAmB;AACtE,0BAAM,sBAA8B,SAAS,4BAA4B,WAAW;AAEpF,6BAAS,IAAI,aAAA;sBACT,KAAK,mBAAmB;sBACxB;sBACA,SAAS,sBAAsB,aAAA,kBAAkB,UAAU,SAAS,MAAM,CAAC,EAAE,UAAU;sBACvF,SAAS;sBACT;sBACA,SAAS;sBACT,SAAS;sBACT;;sBACA;sBACA;sBACA;oBAAW;;AAGnB,wBAAM,QAAoC,IAAI,aAAA,2BAA2B,QAAQ,OAAO,QAAQ,KAAK,mBAAmB,SAAS;AAEjI,sBAAI,CAAC,CAAC,KAAK,qBAAqB,YAAY;AACxC,wBAAI;AACA,2BAAK,qBAAqB,WAAW,KAAK,sBAAsB,KAAK;6BAEhE,OAAO;;;;AAOxB,oBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,sBAAI;AACA,yBAAK,oBAAoB,MAAM;2BAC1B,GAAG;AACR,wBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,2BAAK,kBAAkB,CAAW;;;AAM1C,uBAAK,sBAAsB;AAC3B,uBAAK,oBAAoB;;;AAGjC,0BAAY;AACZ;YACJ;AACI;;AAER,iBAAO;QACX;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAE1F,cAAI,CAAC,CAAC,KAAK,qBAAqB,UAAU;AACtC,kBAAM,cAAkD,IAAI,aAAA,mCACxD,oBACA,OACA,WACA,QACA,SAAS;AACb,gBAAI;AACA,mBAAK,qBAAqB,SAAS,KAAK,sBAAsB,WAAW;oBAErE;YAAA;;AAGZ,cAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,kBAAM,SAAkC,IAAI,aAAA;cACxC;cACA,aAAA,aAAa;cACb;;cACA;;cACA;;cACA;;cACA;;cACA;;cACA;cACA;;cACA;YAAU;AACd,gBAAI;AACA,mBAAK,oBAAoB,MAAM;AAC/B,mBAAK,sBAAsB;oBAEvB;YAAA;;QAEhB;;AAxLJ,cAAA,0BAAA;;;;;;;;;;AC5BA,UAAA,eAAA;AAYA,UAAA,eAAA;AAiBA,UAAa,6CAAb,cAAgE,aAAA,sBAAqB;QAIjF,YACI,gBACA,mBACA,aACA,kBACA,yBAAgD;AAChD,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,uBAAuB;AAC/F,eAAK,8BAA8B;AACnC,eAAK,0BAAyB;QAClC;QAEU,4BAAyB;AAC/B,cAAI,KAAK,qBAAqB;AAC1B,kBAAM,kBAAkB,KAAK,kBAAkB,WAAW,iBAAiB;AAC3E,4BAAgB,OAAO;AACvB,kBAAM,qBAAyC,CAAA;AAC/C,+BAAmB,OAAO;AAC1B,+BAAmB,iBAAiB,KAAK;AACzC,+BAAmB,gBAAgB;AACnC,4BAAgB,qBAAqB;AACrC,iBAAK,kBAAkB,WAAW,mBAAmB,eAAe;;QAE5E;QAEU,MAAM,4BAA4B,mBAA0C;AAElF,cAAI;AACJ,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,sBAAY,YAAY,aAAA,WAAW,kCAAkC,kBAAkB,QAAQ;AAC/F,cAAI,YAAqB;AAEzB,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAC1C,KAAK;YACL,KAAK;AACD,oBAAM,aAA+B,aAAA,iBAAiB,SAAS,kBAAkB,QAAQ;AACzF,oBAAM,SAAiB,WAAW,SAAS,KAAK,mBAAmB;AAEnE,uBAAS,IAAI,aAAA;gBACT,KAAK,mBAAmB;gBACxB,aAAA,aAAa;gBACb,WAAW;gBACX,WAAW;gBACX;gBACA,WAAW;gBACX,WAAW;gBACX;;gBACA;gBACA,kBAAkB;gBAClB;cAAW;AAEf,mBAAK,mBAAmB,aAAa,MAAM;AAE3C,oBAAM,KAAK,IAAI,aAAA,mCAAmC,QAAQ,WAAW,UAAU,KAAK,mBAAmB,SAAS;AAEhH,kBAAI,CAAC,CAAC,KAAK,4BAA4B,cAAc;AACjD,oBAAI;AACA,uBAAK,4BAA4B,aAAa,KAAK,6BAA6B,EAAE;yBAE7E,OAAO;;;AAKpB,0BAAY;AACZ;YACJ,KAAK;AACD,oBAAM,SAA6B,aAAA,mBAAmB,SAAS,kBAAkB,QAAQ;AACzF,oBAAM,eAA6B,aAAA,gBAAgB,+BAA+B,OAAO,iBAAiB;AAE1G,mBAAK,mBAAmB,mBAAmB,KAAK,mBAAmB,yBAAyB,OAAO,SAAS,OAAO,QAAQ;AAE3H,kBAAI,aAAA,aAAa,aAAa,cAAc;AACxC,sBAAM,eAAmC,aAAA,gBAAgB,0BAA0B,OAAO,iBAAiB;AAC3G,sBAAM,wBAA+C,aAAA,gBAAgB,6BAA6B,OAAO,iBAAiB;AAE1H,sBAAM,KAAK,uBACP,cACA,uBACA,aAAA,gBAAgB,0BAA0B,qBAAqB,CAAC;qBAEjE;AACH,oBAAI,EAAE,KAAK,mBAAmB,iBAAiB,iBAAiB,aAAA,aAAa,WAAW,OAAO,sBAAsB,aAAA,kBAAkB,wBAAwB;AAC3J,sBAAI,KAAK,qBAAqB,WAAW,YAAY,aAAA,wBAAwB,MAAM,aAAA,aAAa,aAAA,aAAa,MAAM,GAAG;AAClH,6BAAS,IAAI,aAAA,gCACT,KAAK,mBAAmB,WACxB,cACA,OAAO,aACP,OAAO,UACP,OAAO,SAAS,KAAK,mBAAmB,wBACxC,OAAO,UACP,OAAO,6BACP,OAAO,WACP,QACA,kBAAkB,UAClB,WAAW;yBACZ;AACH,0BAAM,WAAiC,aAAA,qBAAqB,SAAS,kBAAkB,QAAQ;AAC/F,0BAAM,cAAsB,SAAS,SAAS,KAAK,mBAAmB;AACtE,0BAAM,sBAA8B,SAAS,4BAA4B,WAAW;AAEpF,6BAAS,IAAI,aAAA,gCACT,KAAK,mBAAmB,WACxB,cACA,SAAS,sBAAsB,aAAA,kBAAkB,UAAU,SAAS,MAAM,CAAC,EAAE,UAAU,QACvF,SAAS,UACT,aACA,SAAS,UACT,SAAS,6BACT,OAAO,WACP,QACA,qBACA,WAAW;;AAGnB,wBAAM,QAA4C,IAAI,aAAA,mCAAmC,QAAQ,OAAO,QAAQ,KAAK,mBAAmB,SAAS;AAEjJ,sBAAI,CAAC,CAAC,KAAK,4BAA4B,aAAa;AAChD,wBAAI;AACA,2BAAK,4BAA4B,YAAY,KAAK,6BAA6B,KAAK;6BAE/E,OAAO;;;;;AAO5B,0BAAY;AACZ;YACJ;AACI;;AAER,iBAAO;QACX;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAE1F,cAAI,CAAC,CAAC,KAAK,4BAA4B,UAAU;AAC7C,kBAAM,cAA0D,IAAI,aAAA,2CAChE,oBACA,OACA,WACA,QACA,SAAS;AACb,gBAAI;AACA,mBAAK,4BAA4B,SAAS,KAAK,6BAA6B,WAAW;oBAEnF;YAAA;;QAEhB;;AAlKJ,cAAA,6CAAA;;;;;;;;;;AC9BA,UAAA,eAAA;AAKA,UAAA,eAAA;AAcA,UAAA,eAAA;AAQA,UAAA,wCAAA;AAGA,UAAa,iCAAb,cAAoD,aAAA,8BAA6B;QAI7E,YACI,gBACA,mBACA,aACA,kBACA,aAAkC;AAClC,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,WAAW;AACnF,eAAK,4BAA4B;AACjC,eAAK,6BAA6B,CAAC,eAA2C,KAAK,2BAA2B,UAAU;AACxH,cAAI,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,gDAAgD,MAAM,QAAQ;AAC1H,iBAAK,kBAAkB,oBAAmB;;QAElD;QAEO,MAAM,qBAAqB,MAAwB,SAAe;AACrE,cAAI,CAAC,CAAC,KAAK,mBAAmB,eAAe;AACzC,kBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,kBAAM,KAAK,gBAAgB,YAAY,KAAK,yBAAyB,MAAM,OAAO,CAAC;;QAE3F;QAEO,MAAM,4BAA4B,MAAmB,SAAe;AACvE,cAAI,CAAC,CAAC,KAAK,mBAAmB,eAAe;AACzC,kBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,kBAAM,KAAK,gBAAgB,YAAY,KAAK,gCAAgC,MAAM,OAAO,CAAC;;QAElG;QAEU,4BAA4B,mBAA0C;AAC5E,iBAAO,KAAK,sBAAsB,iBAAiB;QACvD;QAEU,yBAAyB,QAAiC,QAAgB,WAAiB;AACjG,cAAI;AACA,kBAAM,QAAoC,IAAI,aAAA,2BAA2B,QAAQ,QAAQ,SAAS;AAClG,iBAAK,0BAA0B,WAAW,KAAK,2BAA2B,KAAK;AAC/E,gBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,kBAAI;AACA,qBAAK,oBAAoB,MAAM;uBAC1B,GAAG;AACR,oBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,uBAAK,kBAAkB,CAAW;;;AAM1C,mBAAK,sBAAsB;AAC3B,mBAAK,oBAAoB;;mBAGxB,OAAO;;QAIpB;QAEU,0BAA0B,QAAiC,UAAkB,WAAiB;AACpG,cAAI;AACA,kBAAM,KAAK,IAAI,aAAA,2BAA2B,QAAQ,UAAU,SAAS;AACrE,iBAAK,0BAA0B,YAAY,KAAK,2BAA2B,EAAE;mBAExE,OAAO;;QAIpB;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAE1F,cAAI,KAAK,0BAA0B,oBAAmB,GAAI;AACtD,gBAAI,CAAC,CAAC,KAAK,0BAA0B,UAAU;AAC3C,oBAAM,cAAqD,IAAI,aAAA,sCAC3D,oBACA,OACA,WACA,QACA,SAAS;AACb,kBAAI;AACA,qBAAK,0BAA0B,SAAS,KAAK,2BAA2B,WAAW;sBAE/E;cAAA;;iBAET;AACH,gBAAI,CAAC,CAAC,KAAK,0BAA0B,UAAU;AAC3C,oBAAM,cAA0D,IAAI,aAAA,2CAChE,oBACA,OACA,WACA,QACA,SAAS;AACb,kBAAI;AACA,qBAAK,0BAA0B,SAAS,KAAK,2BAA2B,WAAW;sBAE/E;cAAA;;;AAIhB,cAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,kBAAM,SAAkC,IAAI,aAAA;cACxC;cACA,aAAA,aAAa;cACb;;cACA;;cACA;;cACA;;cACA;;cACA;;cACA;cACA;;cACA;YAAU;AACd,gBAAI;AACA,mBAAK,oBAAoB,MAAM;AAC/B,mBAAK,sBAAsB;oBAEvB;YAAA;;QAEhB;;QAGU,MAAM,2BAA2B,YAAuB;AAC9D,gBAAM,KAAK,kBAAkB,YAAY,IAAI;AAC7C,cAAI,KAAK,0BAA0B,oBAAmB,GAAI;AACtD,kBAAM,OAAoB,KAAK,0BAA0B,eAAc;AACvE,kBAAM,UAAiC,KAAK,gCAAgC,MAAM,OAAO;AACzF,kBAAM,KAAK,gBAAgB,YAAY,OAAO;iBAC3C;AACH,kBAAM,OAAyB,KAAK,0BAA0B,oBAAmB;AACjF,kBAAM,UAAiC,KAAK,yBAAyB,MAAM,OAAO;AAClF,kBAAM,KAAK,gBAAgB,YAAY,OAAO;;AAElD,gBAAM,KAAK,eAAe,UAAU;AACpC;QACJ;QAEU,gBAAgB,YAAyB,SAA8B;AAC7E,gBAAM,kBAAkB,KAAK,UAAU,OAAO;AAE9C,cAAI,iBAAiB;AACjB,mBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,gBACA,KAAK,mBAAmB,WACxB,oBACA,eAAe,CAAC;;AAExB;QACJ;QAEQ,yBAAyB,MAAwB,SAAe;AACpE,gBAAM,YAA2E,EAAE,IAAI,WAAW,MAAM,SAAS,SAAS,KAAK,uBAAsB;AACrJ,oBAAU,QAAQ,KAAK,KAAK;AAC5B,oBAAU,QAAQ,YAAY,KAAK;AACnC,iBAAO;QACX;QAEQ,gCAAgC,MAAmB,SAAe;AACtE,gBAAM,YAAsE,EAAE,IAAI,WAAW,MAAM,SAAS,SAAS,KAAK,kBAAiB;AAC3I,oBAAU,QAAQ,KAAK,KAAK;AAC5B,oBAAU,QAAQ,YAAY,KAAK;AACnC,iBAAO;QACX;;AA9KJ,cAAA,iCAAA;;;;;;;;;;AC9BA,UAAA,eAAA;AA8BA,UAAa,uBAAb,MAAa,sBAAoB;QAG7B,YAAoB,MAAY;AAC5B,eAAK,2BAA2B,KAAK,MAAM,IAAI;AAC/C,eAAK,yBAAyB,oBAAoB,aAAA,kBAAkB,KAAK,yBAAyB,iBAA8D;QACpK;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,sBAAqB,IAAI;QACxC;QAEO,4BAA4B,YAAkB;AACjD,cAAI,CAAC,CAAC,KAAK,yBAAyB,OAAO;AACvC,gBAAI;AACJ,uBAAW,UAAU,KAAK,yBAAyB,OAAO;AACtD,kBAAI,CAAC,CAAC,OAAO,SAAS,CAAC,CAAC,OAAO,MAAM,CAAC,GAAG;AACrC,kCAAkB,OAAO,MAAM,CAAC,EAAE;AAClC;;;AAGR,gBAAI,CAAC,CAAC,mBAAmB,kBAAkB,YAAY;AACnD,oBAAM,SAAiB,aAAa;AACpC,yBAAW,WAAW,KAAK,yBAAyB,OAAO;AACvD,oBAAI,CAAC,CAAC,QAAQ,OAAO;AACjB,6BAAW,QAAQ,QAAQ,OAAO;AAC9B,yBAAK,UAAU;;;AAGvB,oBAAI,CAAC,CAAC,QAAQ,cAAc;AACxB,6BAAW,QAAQ,QAAQ,cAAc;AACrC,yBAAK,UAAU;;;;;;AAMnC,iBAAO,KAAK,UAAU,KAAK,wBAAwB;QACvD;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK,yBAAyB;QACzC;QACA,IAAW,QAAK;AACZ,iBAAO,KAAK,yBAAyB;QACzC;QACA,IAAW,WAAQ;AACf,iBAAO,KAAK,yBAAyB;QACzC;QACA,IAAW,SAAM;AACb,iBAAO,KAAK,yBAAyB;QACzC;QACA,IAAW,WAAQ;AACf,iBAAO,KAAK,yBAAyB,oBAAoB,SAAY,SAAY,KAAK,yBAAyB,gBAAgB;QACnI;QACA,IAAW,8BAA2B;AAClC,iBAAO,KAAK,yBAAyB,oBAAoB,SAAY,SAAY,KAAK,yBAAyB,gBAAgB;QACnI;QACA,IAAW,OAAI;AACX,cAAI,CAAC,CAAC,KAAK,yBAAyB,SAAS,KAAK,yBAAyB,MAAM,CAAC,GAAG;AACjF,mBAAO,KAAK,yBAAyB,MAAM,CAAC,EAAE,WAAW,KAAK,yBAAyB,MAAM,CAAC,EAAE;;AAEpG,iBAAO,KAAK,yBAAyB;QACzC;QACA,IAAW,YAAS;AAChB,iBAAO,KAAK,yBAAyB;QACzC;;AAlEJ,cAAA,uBAAA;;;;;;;;;;AC9BA,UAAA,eAAA;AAiBA,UAAa,qBAAb,MAAa,oBAAkB;QAG3B,YAAoB,MAAY;AAC5B,eAAK,yBAAyB,KAAK,MAAM,IAAI;AAC7C,eAAK,uBAAuB,oBAAoB,aAAA,kBAAkB,KAAK,uBAAuB,iBAA8D;QAChK;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,oBAAmB,IAAI;QACtC;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK,uBAAuB;QACvC;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK,uBAAuB;QACvC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,uBAAuB;QACvC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,uBAAuB;QACvC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,uBAAuB,oBAAoB,SAAY,SAAY,KAAK,uBAAuB,gBAAgB;QAC/H;QAEA,IAAW,8BAA2B;AAClC,iBAAO,KAAK,uBAAuB,oBAAoB,SAAY,SAAY,KAAK,uBAAuB,gBAAgB;QAC/H;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK,uBAAuB;QACvC;;AAtCJ,cAAA,qBAAA;;;;;;;;;;ACXA,UAAa,gBAAb,MAA0B;;;;;;;QAUtB,YAAmB,WAA2C,YAAkB;AAC5E,eAAK,YAAY;AACjB,eAAK,aAAa;QACtB;;AAbJ,cAAA,gBAAA;;;;;;;;;;ACNA,UAAA,eAAA;AAKA,UAAA,eAAA;AAWA,UAAA,eAAA;AAeA,UAAa,0BAAb,cAA6C,aAAA,sBAAqB;QAO9D,YACI,gBACA,mBACA,aACA,kBACA,YAA4B;AAC5B,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,UAAU;AAClF,eAAK,uBAAuB;AAC5B,eAAK,qBAAqB;QAC9B;QAEO,WAAW,cAA+C,gBAA6B;AAC1F,eAAK,qBAAqB;AAC1B,eAAK,qBAAqB;AAC1B,eAAK,qBAAqB;QAC9B;QAEU,4BAA4B,mBAA0C;AAE5E,cAAI;AACJ,cAAI;AACJ,cAAI,YAAqB;AAEzB,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,cAAI,kBAAkB,gBAAgB,aAAA,YAAY,MAAM;AACpD,wBAAY,YAAY,aAAA,WAAW,kCAAkC,kBAAkB,QAAQ;;AAGnG,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAC1C,KAAK;AACD,oBAAM,mBAAqC,aAAA,iBAAiB,SAAS,kBAAkB,QAAQ;AAE/F,uBAAS,IAAI,aAAA,wBACT,QACA,KAAK,mBAAmB,WACxB,aAAA,aAAa,mBACb,iBAAiB,MACjB,iBAAiB,UACjB,iBAAiB,SAAS,KAAK,mBAAmB,wBAClD,iBAAiB,UACjB,iBAAiB,6BACjB,QACA,kBAAkB,UAClB,WAAW;AAEf,mBAAK,mBAAmB,aAAa,OAAO,MAAM;AAElD,mBAAK,IAAI,aAAA,2BAA2B,QAAQ,iBAAiB,SAAS,KAAK,mBAAmB,wBAAwB,KAAK,mBAAmB,SAAS;AAEvJ,kBAAI,CAAC,CAAC,KAAK,qBAAqB,aAAa;AACzC,oBAAI;AACA,uBAAK,qBAAqB,YAAY,KAAK,sBAAsB,EAAE;yBAE9D,OAAO;;;AAKpB,0BAAY;AACZ;YACJ,KAAK;AACD,oBAAM,SAA6B,aAAA,mBAAmB,SAAS,kBAAkB,QAAQ;AACzF,uBAAS,IAAI,aAAA,wBACT,QACA,KAAK,mBAAmB,WACxB,aAAA,gBAAgB,+BAA+B,OAAO,iBAAiB,GACvE,OAAO,aACP,OAAO,UACP,OAAO,SAAS,KAAK,mBAAmB,wBACxC,OAAO,UACP,OAAO,6BACP,QACA,kBAAkB,UAClB,WAAW;AAEf,mBAAK,IAAI,aAAA,2BAA2B,QAAQ,OAAO,QAAQ,KAAK,mBAAmB,SAAS;AAE5F,oBAAM,YAAwB,MAAW;AACrC,oBAAI,CAAC,CAAC,KAAK,qBAAqB,YAAY;AACxC,sBAAI;AACA,yBAAK,qBAAqB,WAAW,KAAK,sBAAsB,EAAE;2BAE7D,OAAO;;;AAOpB,oBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,sBAAI;AACA,yBAAK,oBAAoB,MAAM;2BAC1B,GAAG;AACR,wBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,2BAAK,kBAAkB,CAAW;;;AAM1C,uBAAK,sBAAsB;AAC3B,uBAAK,oBAAoB;;cAEjC;AAIA,kBAAI,UAAU,KAAK,sBAAsB,aAAA,aAAa,YAAY,GAAG,OAAO,QAAQ;AAEhF,qBAAK,mBAAmB,mBAAmB,GAAG,SAAS,GAAG,OAAO,QAAQ;AACzE,0BAAS;qBACN;AAGH,qBAAK,wBAAwB;;AAEjC,0BAAY;AACZ;YACJ,KAAK;AAED,mBAAK,KAAK;AACV,mBAAK,wBAAwB;AAE7B,kBAAI,WAAc,IAAI;AAClB,oBAAI,OAAO,kBAAkB,UAAU;AAGnC;;AAIJ,qBAAK,IAAI,aAAA,2BAA2B,IAAI,aAAA,wBAAuB,GAAI,GAAG,KAAK,mBAAmB,SAAS;;AAG3G,oBAAM,iBAAiC,aAAA,eAAe,SAAS,kBAAkB,QAAQ;AAMzF,kBAAI,SAAS,kBAAkB,CAAC,CAAC,eAAe,oBAAoB,CAAC,CAAC,eAAe,iBAAiB,QAAQ;AAC1G,oBAAI,cAA6B,KAAK,mBAAmB,eAAe,iBAAiB,MAAM;AAE/F,oBAAI,KAAK,uBAAuB,QAAW;AACvC,gCAAc,KAAK;;AAGvB,oBAAI,CAAC,CAAC,aAAa;AACf,wBAAM,WAAW,gBAAgB,UAAa,YAAY,eAAe,SAAY,eAAe,iBAAiB,SAAS,YAAY;AAC1I,sBAAI,SAAS,GAAG,OAAO;AAEvB,sBAAI,WAAc,UAAU;AACxB,6BAAS,aAAA,aAAa;;AAI1B,wBAAM,aAAc,WAAc,GAAG,OAAO,aACxC,GAAG,OAAO,aAAa,IAAI,aAAA,mBAAkB;AAEjD,6BAAW,YAAY,aAAA,WAAW,iDAAiD,kBAAkB,QAAQ;AAE7G,uBAAK,IAAI,aAAA,2BACL,IAAI,aAAA,wBACA,UACA,GAAG,OAAO,UACV,QACA,GAAG,OAAO,MACV,GAAG,OAAO,UACV,GAAG,OAAO,QACV,QACA,QACA,GAAG,OAAO,cACV,GAAG,OAAO,MACV,UAAU,GACd,GAAG,QACH,GAAG,SAAS;;;AAIxB,mBAAK,mBAAmB,mBAAmB,GAAG,SAAS,GAAG,OAAO,QAAQ;AAEzE,kBAAI,CAAC,CAAC,KAAK,qBAAqB,YAAY;AACxC,oBAAI;AACA,uBAAK,qBAAqB,WAAW,KAAK,sBAAsB,EAAE;yBAE7D,OAAO;;;AAOpB,kBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,oBAAI;AACA,uBAAK,oBAAoB,GAAG,MAAM;yBAC7B,GAAG;AACR,sBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,yBAAK,kBAAkB,CAAW;;;AAM1C,qBAAK,sBAAsB;AAC3B,qBAAK,oBAAoB;;AAE7B,0BAAY;AACZ;YACJ;AACI;;AAER,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAC7B,mBAAS,QAAQ,SAAS;AAC1B,iBAAO,SAAS;QACpB;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAE1F,cAAI,CAAC,CAAC,KAAK,qBAAqB,UAAU;AAEtC,kBAAM,cAAkD,IAAI,aAAA,mCACxD,oBACA,OACA,WACA,QACA,QACA,SAAS;AACb,gBAAI;AACA,mBAAK,qBAAqB,SAAS,KAAK,sBAAsB,WAAW;oBAErE;YAAA;;AAGZ,cAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,kBAAM,SAAkC,IAAI,aAAA;cACxC;;cACA;cACA,aAAA,aAAa;cACb;;cACA;;cACA;;cACA;;cACA;;cACA;cACA;;cACA;YAAU;AACd,gBAAI;AACA,mBAAK,oBAAoB,MAAM;AAC/B,mBAAK,sBAAsB;oBAEvB;YAAA;;QAEhB;;AA5QJ,cAAA,0BAAA;;;;;;;;;;ACXA,UAAa,iBAAb,MAAa,gBAAc;QAGvB,YAAoB,MAAY;AAC5B,cAAI,SAAS,IAAI;AACb,iBAAK,qBAAqB,CAAA;iBACvB;AACH,iBAAK,qBAAqB,KAAK,MAAM,IAAI;;QAEjD;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,gBAAe,IAAI;QAClC;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,mBAAmB;QACnC;;AAzBJ,cAAA,iBAAA;;;;;;;;;;;;;;;;;;AClBA,UAAA,eAAA;AAcA,UAAA,yBAAA;AAiBA,UAAa,2BAAb,MAAqC;QAoBjC,YAAmB,WAAmB,eAAuB,aAAmB;AAnBxE,eAAA,iBAA0B;AAM1B,eAAA,6BAAsC;AACtC,eAAA,gBAAyB;AACzB,eAAA,gCAAyC;AAY7C,eAAK,gBAAgB;AACrB,eAAK,oBAAoB;AACzB,eAAK,kBAAkB;AAEvB,eAAK,uBAAuB,CAAA;AAC5B,eAAK,sBAAsB,CAAA;AAC3B,eAAK,0BAA0B,CAAA;QACnC;QAEO,eAAe,mBAAyB;AAC3C,cAAI,oBAAoB,GAAG;AACvB,iBAAK,oBAAoB,KAAK,KAAK,IAAG,IAAK,iBAAiB;;QAEpE;QAEO,mBAAmB,mBAAyB;AAC/C,cAAI,oBAAoB,GAAG;AACvB,iBAAK,wBAAwB,KAAK,KAAK,IAAG,IAAK,iBAAiB;;QAExE;QAEO,QAAQ,GAAgB;AAC3B,cAAI,KAAK,gBAAgB;AACrB;;AAGJ,cAAI,aAAa,uBAAA,6BAA6B,EAAE,cAAc,KAAK,eAAe;AAC9E,iBAAK,6BAA6B;cAC9B,KAAK,EAAE;cACP,MAAM;cACN,OAAO,EAAE;;;AAIjB,cAAI,aAAa,aAAA,iCAAiC,EAAE,kBAAkB,KAAK,qBAAqB,EAAE,gBAAgB,KAAK,iBAAiB;AACpI,iBAAK,mBAAmB,EAAE;;AAG9B,cAAI,aAAa,aAAA,gCAAgC,EAAE,kBAAkB,KAAK,qBAAqB,EAAE,gBAAgB,KAAK,iBAAiB;AACnI,iBAAK,mBAAmB,EAAE;;AAG9B,cAAI,aAAa,aAAA,yBAAyB,EAAE,kBAAkB,KAAK,mBAAmB;AAClF,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,gBAAgB;gBACjB,KAAK,EAAE;gBACP,OAAO,EAAE;gBACT,MAAM;gBACN,OAAO,KAAK;;;;AAKxB,cAAI,aAAa,aAAA,6BAA6B,EAAE,kBAAkB,KAAK,qBAAqB,EAAE,gBAAgB,KAAK,iBAAiB;AAChI,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,gBAAgB;gBACjB,KAAK,EAAE;gBACP,OAAO,EAAE;gBACT,MAAM;gBACN,OAAO,KAAK;;;;AAKxB,cAAI,aAAa,aAAA,gCAAgC,EAAE,kBAAkB,KAAK,qBAAqB,EAAE,gBAAgB,KAAK,iBAAiB;AACnI,gBAAI,CAAC,KAAK,eAAe;AACrB,mBAAK,gBAAgB;gBACjB,KAAK,EAAE;gBACP,MAAM;gBACN,OAAO,KAAK;;;;AAKxB,cAAI,aAAa,uBAAA,4BAA4B,EAAE,cAAc,KAAK,eAAe;AAC7E,iBAAK,mBAAmB,EAAE;;AAG9B,cAAI,aAAa,aAAA,wBAAwB,EAAE,iBAAiB,KAAK,kBAAkB;AAC/E,iBAAK,0BAA0B,EAAE;;AAGrC,cAAI,aAAa,aAAA,8BAA8B,EAAE,iBAAiB,KAAK,kBAAkB;AACrF,gBAAI,CAAC,KAAK,+BAA+B;AACrC,mBAAK,gCAAgC;gBACjC,KAAK,EAAE;gBACP,IAAI,KAAK;gBACT,MAAM;gBACN,OAAO,KAAK;;;;AAKxB,cAAI,aAAa,aAAA,iCAAiC,EAAE,iBAAiB,KAAK,kBAAkB;AACxF,gBAAI,CAAC,KAAK,+BAA+B;AACrC,mBAAK,gCAAgC;gBACjC,KAAK,EAAE;gBACP,OAAO,KAAK,mBAAmB,EAAE,UAAU;gBAC3C,IAAI,KAAK;gBACT,MAAM;gBACN,OAAO,KAAK;;;;AAKxB,cAAI,aAAa,aAAA,kCAAkC,EAAE,iBAAiB,KAAK,kBAAkB;AACzF,gBAAI,EAAE,WAAW,EAAE,QAAQ,WAAW,EAAE,QAAQ,QAAQ,MAAM;AAC1D,kBAAI,CAAC,KAAK,qBAAqB,EAAE,QAAQ,QAAQ,IAAI,GAAG;AACpD,qBAAK,qBAAqB,EAAE,QAAQ,QAAQ,IAAI,IAAI,IAAI,MAAK;;AAEjE,oBAAM,oBAAoB;AAC1B,kBAAI,KAAK,qBAAqB,EAAE,QAAQ,QAAQ,IAAI,EAAE,SAAS,mBAAmB;AAC9E,qBAAK,qBAAqB,EAAE,QAAQ,QAAQ,IAAI,EAAE,KAAK,EAAE,mBAAmB;;;;QAI5F;QAEO,eAAY;AACf,gBAAM,UAAU,IAAI,MAAK;AAEzB,cAAI,KAAK,4BAA4B;AACjC,oBAAQ,KAAK,KAAK,0BAA0B;;AAGhD,cAAI,KAAK,eAAe;AACpB,oBAAQ,KAAK,KAAK,aAAa;;AAGnC,cAAI,KAAK,+BAA+B;AACpC,oBAAQ,KAAK,KAAK,6BAA6B;;AAGnD,cAAI,KAAK,oBAAoB,SAAS,GAAG;AACrC,oBAAQ,KAAK;cACT,iBAAiB,KAAK;aACzB;;AAGL,cAAI,KAAK,wBAAwB,SAAS,GAAG;AACzC,oBAAQ,KAAK;cACT,0BAA0B,KAAK;aAClC;;AAGL,gBAAM,YAAwB;YAC1B,SAAS;YACT,kBAAkB,KAAK;;AAG3B,gBAAM,OAAO,KAAK,UAAU,SAAS;AAGrC,eAAK,uBAAuB,CAAA;AAC5B,eAAK,6BAA6B;AAClC,eAAK,gBAAgB;AACrB,eAAK,gCAAgC;AACrC,eAAK,sBAAsB,CAAA;AAC3B,eAAK,0BAA0B,CAAA;AAC/B,iBAAO;QACX;;QAGA,IAAW,eAAY;AACnB,iBAAQ,OAAO,KAAK,KAAK,oBAAoB,EAAE,WAAW,KACtD,KAAK,+BAA+B,QACpC,KAAK,kBAAkB,QACvB,KAAK,kCAAkC,QACvC,KAAK,oBAAoB,WAAW,KACpC,KAAK,wBAAwB,WAAW;QAChD;QAEO,UAAO;AACV,eAAK,iBAAiB;QAC1B;QAEQ,mBAAmB,YAAkB;AAezC,kBAAQ,YAAY;YAChB,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;AAAM,qBAAO;YAClB,KAAK;AAAK,qBAAO;YACjB,KAAK;AAAK,qBAAO;YACjB,KAAK;YACL,KAAK;AAAM,qBAAO;YAClB,KAAK;YACL,KAAK;AAAM,qBAAO;YAClB,KAAK;YACL,KAAK;AAAK,qBAAO;YACjB;AAAS,qBAAO,gBAAgB,WAAW,SAAQ;;QAE3D;;AAtOJ,cAAA,2BAAA;;;;;;;;;;AChCA,UAAA,eAAA;AAQA,UAAA,yBAAA;AAOA,UAAA,yCAAA;AAEA,UAAa,iBAAb,MAA2B;QAuBvB,YAAmB,eAAqB;AAtBhC,eAAA,iBAA0B;AAE1B,eAAA,kBAAiC,IAAI,MAAK;AAM1C,eAAA,0BAAmC;AACnC,eAAA,oBAA6B;AAC7B,eAAA,oBAA6B;AAC7B,eAAA,2BAAmC;AACnC,eAAA,qBAA6B;AAC7B,eAAA,yBAAkC;AAClC,eAAA,gBAAwB;AACxB,eAAA,2BAAmC;AACnC,eAAA,kBAA0B;AAG1B,eAAA,aAAsB;AACtB,eAAA,yBAAiC;AAGrC,eAAK,oBAAoB;AACzB,eAAK,gBAAgB,aAAA,iBAAgB;AACrC,eAAK,kBAAkB,aAAA,iBAAgB;AACvC,eAAK,mBAAmB,IAAI,aAAA,SAAQ;AAGpC,eAAK,iBAAiB,QAAO;QACjC;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,wBAAqB;AAC5B,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,yBAAsB;AAC7B,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,wBAAqB;AAC5B,iBAAO,KAAK;QAChB;;;QAIA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;;QAIA,IAAW,uBAAoB;AAC3B,iBAAO,KAAK;QAChB;QAEO,0BAA0B,aAAwC;AACrE,cAAI,CAAC,CAAC,KAAK,8BAA8B;AACrC,iBAAK,gBAAgB,KAAK,YAAY,eAAe,KAAK,4BAA4B,CAAC;;QAE/F;QAEO,sBAAmB;AACtB,eAAK,2BAA2B;AAChC,eAAK,oBAAoB;AACzB,eAAK,oBAAoB;AACzB,eAAK,2BAA2B;AAChC,eAAK,qBAAqB;AAC1B,eAAK;AACL,eAAK,+BAA+B,IAAI,uCAAA,yBAAyB,KAAK,eAAe,KAAK,mBAAmB,KAAK,eAAe;AACjI,eAAK,QAAQ,IAAI,uBAAA,0BAA0B,KAAK,WAAW,KAAK,eAAe,KAAK,mBAAmB,KAAK,eAAe,CAAC;QAChI;QAEO,MAAM,6BAA6B,WAAgC,SAAgB;AACtF,eAAK,gBAAgB;AACrB,eAAK,0BAA0B;AAE/B,cAAI,SAAS;AACT,kBAAM,KAAK,WAAU;iBAClB;AACH,iBAAK,QAAQ,IAAI,uBAAA,sBAAsB,KAAK,eAAe,KAAK,eAAe,KAAK,mBAAmB,KAAK,eAAe,CAAC;;QAEpI;QAEO,qBAAqB,kBAA0B,cAAoB;AACtE,eAAK,uBAAuB;AAC5B,eAAK,gBAAgB;AACrB,eAAK,QAAQ,IAAI,uBAAA,yBAAyB,KAAK,eAAe,KAAK,sBAAsB,KAAK,aAAa,CAAC;QAChH;QAEO,MAAM,gBAAgB,SAAgB;AACzC,cAAI,SAAS;AACT,kBAAM,KAAK,WAAU;;QAE7B;;QAGO,MAAM,+BAA+B,YAAoB,QAAe;AAC3E,cAAI,eAAe,KAAK;AACpB,iBAAK,QAAQ,IAAI,uBAAA,wBAAwB,KAAK,WAAW,KAAK,mBAAmB,KAAK,iBAAiB,KAAK,sBAAsB,KAAK,aAAa,CAAC;AACrJ,gBAAI,CAAC,CAAC,KAAK,eAAe;AACtB,mBAAK,cAAc,OAAM;;AAE7B,iBAAK,2BAA2B,KAAK;AACrC,iBAAK,gBAAgB;AACrB;qBACO,eAAe,KAAK;AAC3B,kBAAM,KAAK,WAAU;;QAE7B;QAEO,MAAM,yBAAyB,uBAA8B;AAChE,eAAK,iBAAiB,QAAO;AAE7B,cAAI,CAAC,yBAAyB,KAAK,eAAe;AAC9C,kBAAM,KAAK,WAAU;AACrB,iBAAK,aAAa;iBACf;AAEH,iBAAK,2BAA2B,KAAK;AACrC,iBAAK,cAAc,OAAM;;QAEjC;QAEO,kBAAe;AAClB,eAAK,gBAAgB,aAAA,iBAAgB;QACzC;QAEO,6BAA0B;AAC7B,cAAI,CAAC,CAAC,KAAK,oBAAoB,CAAC,CAAC,KAAK,YAAY;AAE9C,iBAAK,iBAAiB,OAAO,gDAAgD;AAG7E,iBAAK,iBAAiB,QAAQ,KAAI,EAAG,MAAM,MAAW;YAAG,CAAC;;AAE9D,eAAK,aAAa;AAClB,eAAK,mBAAmB,IAAI,aAAA,SAAQ;QACxC;QAEO,aAAa,QAAc;AAC9B,cAAI,CAAC,KAAK,wBAAwB;AAC9B,iBAAK,yBAAyB;AAC9B,iBAAK,6BAA6B,mBAAmB,KAAK,cAAc,iBAAiB,MAAM,CAAC;;QAExG;QAEO,mBAAmB,QAAc;AACpC,eAAK,6BAA6B,eAAe,KAAK,cAAc,iBAAiB,MAAM,CAAC;AAC5F,eAAK,oBAAoB,MAAM;QACnC;QAEO,oBAAoB,QAAc;AACrC,eAAK,qBAAqB;AAC1B,eAAK,yBAAyB;AAC9B,eAAK,cAAc,cAAc,MAAM;AACvC,eAAK,yBAAyB;QAClC;QAEO,YAAY,WAAiB;AAChC,eAAK,iBAAiB;AACtB,eAAK,4BAA4B;QACrC;QAEO,oBAAiB;AACpB,eAAK;QACT;QAEO,MAAM,UAAO;AAChB,cAAI,CAAC,KAAK,gBAAgB;AAEtB,iBAAK,iBAAiB;AACtB,uBAAW,cAAc,KAAK,iBAAiB;AAC3C,oBAAM,WAAW,OAAM;;AAG3B,gBAAI,CAAC,CAAC,KAAK,8BAA8B;AACrC,mBAAK,6BAA6B,QAAO;;AAE7C,iBAAK,oBAAoB;;QAEjC;QAEO,eAAY;AACf,cAAI,KAAK,6BAA6B,cAAc;AAChD,mBAAO,KAAK,6BAA6B,aAAY;iBAClD;AACH,mBAAO;;QAEf;QAEO,MAAM,oBAAiB;AAC1B,gBAAM,KAAK,WAAU;QACzB;;QAGO,gBAAa;AAChB,eAAK,oBAAoB;QAC7B;QAEU,QAAQ,OAA6B;AAC3C,cAAI,CAAC,CAAC,KAAK,8BAA8B;AACrC,iBAAK,6BAA6B,QAAQ,KAAK;;AAEnD,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;QAEQ,MAAM,aAAU;AACpB,cAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,iBAAK,oBAAoB;AACzB,kBAAM,KAAK,gBAAe;;QAElC;QAEQ,MAAM,kBAAe;AACzB,cAAI,CAAC,KAAK,yBAAyB;AAC/B,iBAAK,0BAA0B;AAC/B,gBAAI,KAAK,eAAe;AACpB,oBAAM,KAAK,cAAc,OAAM;;;QAG3C;;AAtPJ,cAAA,iBAAA;;;;;;;;;;ACoBA,UAAa,gBAAb,MAA0B;QAItB,YAAmB,gBAAqC;AAHhD,eAAA,cAA6B,CAAA;AAIjC,eAAK,qBAAqB;QAC9B;;;;;;QAOO,WAAW,aAAmB;AACjC,iBAAQ,KAAK,YAAY,WAAW,KAAK,CAAA;QAC7C;;;;;;QAOO,WAAW,aAAqB,OAAuB;AAC1D,eAAK,YAAY,WAAW,IAAI;QACpC;;;;;;QAOO,iCAAiC,QACpC,wBACA,8BAAuC,OAAK;AAC5C,cAAI,KAAK,YAAY,oBAAoB,QAAW;AAChD,iBAAK,YAAY,kBAAkB;cAC/B,YAAY;gBACR,yBAAyB,CAAA;;;;AAIrC,cAAI,KAAK,YAAY,gBAAgB,eAAe,QAAW;AAC3D,iBAAK,YAAY,gBAAgB,aAAa;cAC1C,yBAAyB,CAAA;;;AAGjC,eAAK,YAAY,gBAAgB,WAAW,0BAA0B,KAAK,MAAM,MAAM;AACvF,cAAI,6BAA6B;AAC7B,iBAAK,YAAY,gBAAgB,OAAO;;AAE5C,eAAK,oBAAmB;AACxB,eAAK,YAAY,aAAa,SAAS,QAAQ,KAAK,yBAAyB;AAC7E,cAAI,KAAK,YAAY,aAAa,SAAS,QAAQ,QAAQ,KAAK,MAAM,IAAI;AACtE,iBAAK,YAAY,aAAa,SAAS,QAAQ,KAAK,KAAK;;AAE7D,cAAI,CAAC,CAAC,wBAAwB;AAC1B,iBAAK,YAAY,gBAAgB,WAAW,oBAAoB;cAC5D,OAAO;;AAEX,iBAAK,YAAY,aAAa,SAAS,QAAQ,KAAK,mBAAmB;;QAE/E;QAEO,0BAAuB;AAC1B,cAAI,KAAK,YAAY,iBAAiB,QAAW;AAC7C,iBAAK,YAAY,eAAe;cAC5B,UAAU;gBACN,SAAS,CAAA;;cAEb,QAAQ,CAAA;;;AAGhB,cAAI,KAAK,YAAY,aAAa,aAAa,QAAW;AACtD,iBAAK,YAAY,aAAa,WAAW;cACrC,SAAS,CAAA;;;AAGjB,eAAK,YAAY,aAAa,SAAS;QAC3C;QAEO,sBAAmB;AACtB,cAAI,KAAK,YAAY,iBAAiB,QAAW;AAC7C,iBAAK,YAAY,eAAe;cAC5B,UAAU;gBACN,SAAS,CAAA;;cAEb,QAAQ,CAAA;;;AAGhB,cAAI,KAAK,YAAY,aAAa,aAAa,QAAW;AACtD,iBAAK,YAAY,aAAa,WAAW;cACrC,SAAS,CAAA;;;AAGjB,eAAK,YAAY,aAAa,SAAS;AACvC,cAAI,KAAK,YAAY,aAAa,SAAS,QAAQ,QAAQ,aAAa,MAAM,IAAI;AAC9E,iBAAK,YAAY,aAAa,SAAS,QAAQ,KAAK,aAAa;;QAEzE;QAEO,mCAAmC,eAAqB;AAC3D,eAAK,YAAY,gBAAgB,mBAAmB,gBAAgB;QACxE;QAEO,SAAM;AAET,gBAAM,MAAuB,KAAK,mBAAmB,sBAAqB;AAC1E,eAAK,WAAW,OAAO,GAAG;AAE1B,gBAAM,MAAc,KAAK,UAAU,KAAK,WAAW;AACnD,iBAAO;QACX;;AA/GJ,cAAA,gBAAA;;;;;;;;;;AC7BA,UAAa,wBAAb,MAAkC;;;QAOvB,UAAU,QAAyB;AACtC,cAAI,CAAC,KAAK,aAAa;AACnB,iBAAK,cAAc,CAAA;;AAGvB,cAAI,kBAAkB,OAAO;AACzB,iBAAK,cAAc,KAAK,YAAY,OAAO,MAAM;iBAC9C;AACH,iBAAK,YAAY,KAAK,MAAM;;QAEpC;;QAGO,eAAY;AACf,eAAK,cAAc;QACvB;;QAGO,oBAAoB,SAA0B;AACjD,cAAI,CAAC,KAAK,cAAc;AACpB,iBAAK,eAAe,CAAA;;AAGxB,cAAI,mBAAmB,OAAO;AAC1B,iBAAK,eAAe,KAAK,aAAa,OAAO,OAAO;iBACjD;AACH,iBAAK,aAAa,KAAK,OAAO;;QAEtC;;QAGO,gBAAa;AAChB,eAAK,eAAe;QACxB;;;;QAKO,wBAAqB;AACxB,cAAI,KAAK,iBAAiB,UAAa,KAAK,gBAAgB,QAAW;AACnE,mBAAO;;AAGX,gBAAM,SAA0B,CAAA;AAChC,iBAAO,oBAAoB,KAAK;AAEhC,cAAI,WAAc,KAAK,eAAe,MAAM,KAAK,YAAY,QAAQ;AACjE,kBAAM,aAAuC,CAAA;AAE7C,iBAAK,YAAY,QAAQ,CAAC,UAAuB;AAC7C,yBAAW,KAAK;gBACZ,MAAM;eACT;YACL,CAAC;AAED,mBAAO,SAAS,CAAC,EAAE,MAAM,WAAW,OAAO,WAAU,CAAE;;AAG3D,iBAAO;QACX;;AAlEJ,cAAA,wBAAA;;;;;;;;;;;;;;;;;;ACDA,UAAa,0BAAb,MAAa,yBAAuB;QAGhC,YAAoB,MAAY;AAC5B,eAAK,uBAAuB,KAAK,MAAM,IAAI;QAC/C;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,yBAAwB,IAAI;QAC3C;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK,qBAAqB;QACrC;QAEA,IAAW,wBAAqB;AAC5B,iBAAO,KAAK,qBAAqB;QACrC;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK,qBAAqB;QACrC;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK,qBAAqB;QACrC;;AAzBJ,cAAA,0BAAA;AA4BA,UAAY;AAAZ,OAAA,SAAYC,wBAAqB;AAC7B,QAAAA,uBAAAA,uBAAA,MAAA,IAAA,CAAA,IAAA;AACA,QAAAA,uBAAAA,uBAAA,mBAAA,IAAA,CAAA,IAAA;MACJ,GAHY,wBAAA,QAAA,0BAAA,QAAA,wBAAqB,CAAA,EAAA;;;;;;;;;;ACpCjC,UAAA,yBAAA;AACA,UAAA,yBAAA;AAEA,UAAA,+BAAA;AAEA,UAAa,yBAAb,MAAmC;QAO/B,YAAmB,SAAwC,WAAiB;AACxE,eAAK,gBAAgB;AACrB,eAAK,kBAAkB;AACvB,eAAK,kBAAkB;AACvB,eAAK,kBAAkB;AACvB,eAAK,oBAAmB;QAC5B;QAEA,IAAW,cAAW;AAElB,eAAK,oBAAmB;AACxB,iBAAO,KAAK;QAChB;QAEO,uBAAuB,SAAkC,aAAmC;AAC/F,cAAI,QAAQ,0BAA0B,6BAAA,sBAAsB,mBAAmB;AAC3E,iBAAK,kBAAkB,uBAAA,kBAAkB,iBAAgB;AACzD,iBAAK,gBAAgB,SAAU,gBAAgB,SAAa,cAAc,uBAAA,sBAAsB,uBAAsB;;AAE1H,iBAAO,KAAK;QAChB;QAEO,iBAAc;AACjB,cAAI,KAAK,oBAAoB,QAAQ,CAAC,KAAK,gBAAgB,UAAU;AACjE,iBAAK,gBAAgB,MAAK;;QAElC;QAEO,WAAQ;AACX,cAAI,KAAK,qBAAqB,QAAW;AAErC,yBAAa,KAAK,gBAAgB;;AAEtC,eAAK,eAAc;QACvB;QAEQ,sBAAmB;AACvB,cAAI,KAAK,qBAAqB,QAAW;AAErC,yBAAa,KAAK,gBAAgB;;AAEtC,eAAK,mBAAmB,WAAW,MAAW;AAC1C,iBAAK,gBAAgB,aAAa,KAAK,aAAa;AACpD;UACJ,GAAG,GAAI;QACX;;AApDJ,cAAA,yBAAA;;;;;;;;;;ACLA,UAAA,aAAA;AACA,UAAA,8BAAA;AAEA,UAAa,gCAAb,MAA0C;QAGtC,cAAA;AACI,eAAK,cAAc,oBAAI,IAAG;AAC1B;QACJ;QAEO,UAAU,IAAU;AACvB,cAAI,KAAK,YAAY,IAAI,EAAE,GAAG;AAC1B,kBAAM,IAAI,WAAA,sBAAsB,oDAAoD,EAAE;;AAE1F,gBAAM,YAAoC,IAAI,4BAAA,uBAAuB,MAAM,EAAE;AAC7E,eAAK,YAAY,IAAI,IAAI,SAAS;AAClC,iBAAO,KAAK,YAAY,IAAI,EAAE;QAClC;QAEO,QAAQ,IAAU;AACrB,iBAAO,KAAK,YAAY,IAAI,EAAE;QAClC;QAEO,aAAa,IAAU;AAC1B,cAAI,CAAC,KAAK,YAAY,IAAI,EAAE,GAAG;AAC3B,kBAAM,IAAI,WAAA,sBAAsB,6DAA6D,EAAE;;AAEnG,gBAAM,YAAY,KAAK,YAAY,IAAI,EAAE;AACzC,oBAAU,SAAQ;AAClB,eAAK,YAAY,OAAO,EAAE;AAC1B,iBAAO;QACX;;AA7BJ,cAAA,gCAAA;;;;;;;;;;ACHA,UAAA,eAAA;AAGA,UAAA,oBAAA;AACA,UAAA,eAAA;AAgBA,UAAA,yBAAA;AAGA,UAAA,eAAA;AAgBA,UAAA,qCAAA;AACA,UAAA,eAAA;AAcA,UAAA,+BAAA;AACA,UAAA,wCAAA;AAEA,UAAa,uBAAb,cAA0C,aAAA,sBAAqB;QAgB3D,YACI,gBACA,mBACA,aACA,kBACA,wBAA8C;AAE9C,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,sBAAsB;AAE9F,eAAK,aAAa,IAAI,aAAA,YAAW;AACjC,eAAK,6BAA6B;AAClC,eAAK,yBAAyB,MAAqB,KAAK,6BAA4B;AACpF,eAAK,uBAAuB,IAAI,mCAAA,8BAA6B;AAC7D,eAAK,oBACD,CAAC,UAA2B,iBAAuD,kBACnF,KAAK,WAAW,UAAU,iBAAiB,aAAa;AAC5D,eAAK,0BAA0B,CAAC,eAA2D,KAAK,kBAAkB,UAAU;AAC5H,eAAK,2BAA2B,CAAC,eAAkD,KAAK,iBAAiB,UAAU;AACnH,eAAK,qBAAqB,MAAqB,KAAK,eAAc;AAClE,eAAK,wBAAwB;AAE7B,eAAK,kBAAkB;AACvB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB,OAAO,CAAC,oBAA0C;AACpE,gBAAI,gBAAgB,SAAS,yBAAyB;AAClD,mBAAK,uBAAuB;;UAEpC,CAAC;QACL;QAEO,MAAM,YAAY,SAAe;AACpC,gBAAM,kBAA0B,aAAA,WAAU;AAC1C,gBAAM,YAAoB,aAAA,iBAAgB;AAE1C,gBAAM,eAAoB;YACtB,SAAS;cACL,eAAe;;;YAGnB,gBAAgB,KAAK,MAAM,OAAO;YAClC,SAAS;;AAGb,gBAAM,mBAAmB,KAAK,UAAU,YAAY;AACpD,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,gBAAM,WAAW,KAAK,IAAI,sCAAA,wBACtB,aAAA,YAAY,MACZ,SACA,WACA,oBACA,gBAAgB,CAAC;QAEzB;QAEU,MAAM,iBAAc;AAC1B,gBAAM,KAAK,kBAAkB,KAAK,mBAAmB,WACjD,KAAK,mBAAmB,WACxB,aAAA,mBAAmB,OACnB,aAAA,sBAAsB,SACtB,eAAe;AAEnB,eAAK,uBAAuB;AAC5B,eAAK,kBAAkB;AACvB;QACJ;QAEU,4BAA4B,mBAA0C;AAE5E,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,cAAI,kBAAkB,gBAAgB,aAAA,YAAY,MAAM;AACpD,wBAAY,YAAY,aAAA,WAAW,kCAAkC,kBAAkB,QAAQ;;AAGnG,cAAI;AACJ,cAAI;AAEJ,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAC1C,KAAK;AACD,oBAAM,eAAmC,aAAA,mBAAmB,SAAS,kBAAkB,QAAQ;AAE/F,mBAAK,mBAAmB,mBAAmB,KAAK,mBAAmB,yBAAyB,aAAa,SAAS,aAAa,QAAQ;AAEvI,kBAAI,aAAa,sBAAsB,aAAA,kBAAkB,mBAAmB,aAAa,sBAAsB,aAAA,kBAAkB,OAAO;AACpI,sBAAM,OAAmC,KAAK,mBAAmB,cAAc,WAAW;AAC1F,qBAAK,iBAAiB,KAAK;AAE3B,oBAAI,CAAC,CAAC,KAAK,2BAA2B,YAAY;AAC9C,sBAAI;AACA,yBAAK,2BAA2B,WAAW,KAAK,4BAA4B,IAAI;2BAE3E,OAAO;;;;AAMxB,0BAAY;AACZ;YACJ,KAAK;AACD,oBAAM,aAA+B,aAAA,iBAAiB,SAAS,kBAAkB,QAAQ;AACzF,oBAAM,SAAiB,WAAW,SAAS,KAAK,mBAAmB;AAEnE,uBAAS,IAAI,aAAA,wBACT,KAAK,mBAAmB,WACxB,aAAA,aAAa,mBACb,WAAW,MACX,WAAW,UACX,QACA,WAAW,UACX,WAAW,6BACX,QACA,QACA,kBAAkB,UAClB,WAAW;AAEf,mBAAK,mBAAmB,aAAa,MAAM;AAE3C,oBAAM,KAAK,IAAI,aAAA,2BAA2B,QAAQ,WAAW,UAAU,KAAK,mBAAmB,SAAS;AAExG,kBAAI,CAAC,CAAC,KAAK,2BAA2B,aAAa;AAC/C,oBAAI;AACA,uBAAK,2BAA2B,YAAY,KAAK,4BAA4B,EAAE;yBAE1E,OAAO;;;AAKpB,0BAAY;AACZ;YACJ,KAAK;AACD,oBAAM,UAAyB,aAAA,cAAc,SAAS,kBAAkB,QAAQ;AAEhF,uBAAS,IAAI,aAAA,wBACT,KAAK,mBAAmB,WACxB,QAAQ,WAAW,aAAa,aAAA,aAAa,oBAAoB,aAAA,aAAa,SAC9E,QAAQ,MACR,QAAQ,UACR,QAAQ,QACR,QACA,QACA,QACA,QACA,kBAAkB,UAClB,WAAW;AAEf,kBAAI,QAAQ,WAAW,YAAY;AAC/B,qBAAK,iBAAiB;;AAG1B,oBAAM,QAAQ,IAAI,aAAA,2BAA2B,QAAQ,OAAO,UAAU,OAAO,QAAQ;AAErF,kBAAI,CAAC,CAAC,KAAK,2BAA2B,YAAY;AAC9C,oBAAI;AACA,uBAAK,2BAA2B,WAAW,KAAK,4BAA4B,KAAK;yBAE5E,OAAO;;;AAKpB,0BAAY;AACZ;YACJ,KAAK;AACD;AACI,sBAAM,iBAAiB,kBAAkB,UAAU,YAAW;AAC9D,sBAAM,OAAO,KAAK,qBAAqB,QAAQ,cAAc;AAC7D,oBAAI;AAEA,sBAAI,CAAC,kBAAkB,YAAY;AAC/B,yBAAK,eAAc;yBAChB;AACH,yBAAK,YAAY,MAAM,kBAAkB,UAAU;;yBAElD,OAAO;;;AAKpB,0BAAY;AACZ;YAEJ,KAAK;AACD;AACI,qBAAK,sBAAsB,iBAAiB;;AAGhD,0BAAY;AACZ;YAEJ;AACI;;AAER,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAC7B,mBAAS,QAAQ,SAAS;AAC1B,iBAAO,SAAS;QACpB;;QAGU,MAAM,kBACZ,WACA,WACA,oBACA,WACA,OAAa;AAEb,eAAK,uBAAuB;AAE5B,cAAI,CAAC,CAAC,KAAK,mBAAmB,eAAe;AACzC,kBAAM,KAAK,mBAAmB,kBAAiB;;AAGnD,cAAI,CAAC,CAAC,KAAK,2BAA2B,UAAU;AAC5C,kBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,uBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAE1F,kBAAM,cAAkD,IAAI,aAAA,mCACxD,oBACA,OACA,WACA,QACA,SAAS;AAEb,gBAAI;AACA,mBAAK,2BAA2B,SAAS,KAAK,4BAA4B,WAAW;oBAEjF;YAAA;AAER,gBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,oBAAM,SAAkC,IAAI,aAAA;gBACxC;;gBACA,aAAA,aAAa;gBACb;;gBACA;;gBACA;;gBACA;;gBACA;;gBACA;;gBACA;gBACA;;gBACA;cAAU;AACd,kBAAI;AACA,qBAAK,oBAAoB,MAAM;AAC/B,qBAAK,sBAAsB;sBAEvB;cAAA;;;QAGpB;QAEU,MAAM,WACZ,UACA,iBACA,eAAkC;AAElC,eAAK,qBAAqB,kBAAkB;AAE5C,eAAK,sBAAsB;AAC3B,eAAK,oBAAoB;AAEzB,eAAK,mBAAmB,oBAAmB;AAC3C,eAAK,mBAAmB,0BAA0B,KAAK,sBAAsB,MAAM;AAEnF,eAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,kBAAkB,KAAK,mBAAmB,SAAS;AAG/G,gBAAM,aAAmC,KAAK,YAAW;AAEzD,gBAAM,kBAAiC,KAAK,qBAAoB;AAEhE,gBAAM,OAAyB,MAAM,KAAK,sBAAsB,OAAO,KAAK,mBAAmB,WAAW;AAC1G,gBAAMC,UAAgC,MAAM,KAAK,sBAAsB;AACvE,gBAAM,aAAuC,MAAM,KAAK,sBAAsB;AAE9E,gBAAM,YAAY,IAAI,aAAA,oBAAoB,MAAMA,QAAO,cAAc;AACrE,gBAAM,KAAK,mBAAmB,6BAA6B,WAAW,KAAK;AAE3E,eAAK,qBAAqB,oBAAoB,QAAQ,QAAQ,EAAE,QAAQ,WAAU;AAElF,cAAI;AACA,kBAAM;AACN,kBAAM;mBACD,OAAO;AACZ,kBAAM,KAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,WAAW,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,mBAAmB,KAAe;AACrL,mBAAO,QAAQ,QAAO;;AAG1B,gBAAM,wBAA0C,IAAI,aAAA,iBAAiB,KAAK,mBAAmB,SAAS;AAEtG,cAAI,CAAC,CAAC,KAAK,eAAe,gBAAgB;AACtC,iBAAK,eAAe,eAAe,KAAK,gBAAgB,qBAAqB;;AAGjF,gBAAM,mBAAmB,KAAK,UAAU,SAAS;AAGjD,2BAAiB,KAAK,MAAW;UAA0B,GAAG,OAAO,UAAgC;AACjG,kBAAM,KAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,WAAW,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,cAAc,KAAK;UAC1K,CAAC;QACL;;QAGQ,kBAAkB,YAAgC;AACtD,eAAK,qBAAqB,KAAK,iBAAgB;AAC/C,iBAAO;QACX;QAEQ,+BAA4B;AAGhC,gBAAM,yBAAyC,IAAI,aAAA,SAAQ;AAE3D,gBAAM,OAAO,YAA0B;AACnC,gBAAI;AACA,oBAAM,aAAsB,KAAK,WAAU;AAC3C,oBAAM,uBAAwB,CAAC,KAAK,WAAU,KAAM,KAAK;AACzD,kBAAI,cAAc,sBAAsB;AAEpC,uCAAuB,QAAQ,MAAS;AACxC;;AAGJ,oBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,oBAAM,UAA6B,MAAM,WAAW,KAAI;AAExD,kBAAI,CAAC,SAAS;AACV,uBAAO,KAAI;;AAGf,oBAAM,oBAAoB,sCAAA,wBAAwB,sBAAsB,OAAO;AAE/E,sBAAQ,kBAAkB,KAAK,YAAW,GAAI;gBAC1C,KAAK;AACD;AACI,0BAAM,gBAAgB,kBAAkB,UAAU,YAAW;AAC7D,0BAAM,oBAAoB,KAAK,mBAAmB,UAAU,YAAW;AAGvE,wBAAI,kBAAkB,mBAAmB;AACrC,2BAAK,qBAAqB,UAAU,aAAa;2BAC9C;AACH,2BAAK,mBAAmB,2BAA0B;;;AAG1D;gBAEJ,KAAK;AACD,wBAAM,sBAAsC,aAAA,eAAe,SAAS,kBAAkB,QAAQ;AAE9F,wBAAM,uBAAuB,IAAI,aAAA,qBAAqB,oBAAoB,QAAQ,KAAK,mBAAmB,SAAS;AAEnH,sBAAI,CAAC,CAAC,KAAK,eAAe,qBAAqB;AAC3C,yBAAK,eAAe,oBAAoB,KAAK,gBAAgB,oBAAoB;;AAGrF;gBAEJ,KAAK;AAED,sBAAI;AAEJ,sBAAI,kBAAkB,SAAS,SAAS,GAAG;AACvC,2BAAO,kBAAkB;yBACtB;AAEH,2BAAO;;AAGX,wBAAM,qBAAqC,aAAA,eAAe,SAAS,IAAI;AAEvE,uBAAK,mBAAmB,oBAAoB,mBAAmB,SAAS,KAAK,mBAAmB,sBAAsB;AAEtH,wBAAM,sBAAsB,IAAI,aAAA,qBAAqB,mBAAmB,SAAS,KAAK,mBAAmB,wBAAwB,KAAK,mBAAmB,SAAS;AAElK,sBAAI,CAAC,CAAC,KAAK,eAAe,mBAAmB;AACzC,yBAAK,eAAe,kBAAkB,KAAK,gBAAgB,mBAAmB;;AAElF;gBAEJ,KAAK;AACD;AACI,0BAAM,mBAAmB,kBAAkB,UAAU,YAAW;AAEhE,0BAAM,oBAAoB,KAAK,mBAAmB,UAAU,YAAW;AAGvE,wBAAI,qBAAqB,mBAAmB;AACxC,2BAAK,qBAAqB,aAAa,gBAAgB;2BACpD;AAGH,4BAAM,uBAAyC,IAAI,aAAA,iBAAiB,KAAK,mBAAmB,SAAS;AACrG,4BAAM,KAAK,mBAAmB,yBAAyB,KAAK;AAE5D,0BAAI,CAAC,KAAK,qBAAqB,2BAA2B,KAAK,mBAAmB,iBAAiB,CAAC,KAAK,mBAAmB,eAAe;AACvI,4BAAI,CAAC,CAAC,KAAK,eAAe,gBAAgB;AACtC,+BAAK,eAAe,eAAe,KAAK,gBAAgB,oBAAoB;;;AAKpF,0BAAI,CAAC,CAAC,KAAK,uBAAuB,KAAK,gBAAgB;AACnD,4BAAI;AACA,+BAAK,oBAAoB,KAAK,cAAc;AAC5C,+BAAK,iBAAiB;iCACjB,GAAG;AACR,8BAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,iCAAK,kBAAkB,CAAW;;;AAM1C,6BAAK,sBAAsB;AAC3B,6BAAK,oBAAoB;;;;AAIrC;gBAEJ;AACI,sBAAI;AACA,0BAAM,YAAY,MAAM,KAAK,4BAA4B,iBAAiB;AAC1E,wBAAI,CAAC,WAAW;AACZ,0BAAI,CAAC,CAAC,KAAK,eAAe;AACtB,6BAAK,cAAc,QAAQ,IAAI,aAAA,aAAa,kBAAkB,KAAK,YAAW,GAAI,kBAAkB,QAAQ,CAAC;;;2BAGhH,GAAG;;;AAIpB,oBAAM,MAAqB,KAAI;AAE/B,qBAAO;qBACF,OAAO;AACZ,mBAAK,uBAAuB;AAC5B,qCAAuB,QAAO;;UAEtC;AAEA,eAAI,EAAG,MAAM,CAAC,WAAwB;AAClC,yBAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;UACvD,CAAC;AAED,iBAAO,uBAAuB;QAClC;QAEQ,MAAM,mBAAgB;AAE1B,eAAK,uBAAuB;AAE5B,cAAI;AACA,kBAAM,KAAK,6BAA4B;mBAClC,OAAO;AACZ,kBAAM,KAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,WAAW,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,cAAc,KAAe;;AAGpL,iBAAO,QAAQ,QAAO;QAC1B;;QAGQ,MAAM,iBAAiB,YAAuB;AAClD,cAAI,KAAK,sBAAsB;AAC3B,iBAAK,uBAAuB;AAC5B,mBAAO,QAAQ,OAAO,mCAAmC;;AAG7D,gBAAM,KAAK,wBAAwB,YAAY,KAAK,oBAAoB,KAAK,qBAAqB,oBAAoB,UAAS,CAAE;AACjI,gBAAM,KAAK,gBAAgB,UAAU;AACrC,iBAAO;QACX;QAEQ,MAAM,uBAAoB;AAC9B,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,eAAK,sBAAqB;AAC1B,gBAAM,KAAK,kBAAkB,YAAY,IAAI;AAC7C,gBAAM,KAAK,iBAAiB,UAAU;AACtC,gBAAM,KAAK,eAAe,UAAU;QACxC;QAEQ,gBAAgB,YAAuB;AAC3C,cAAI,KAAK,eAAe,CAAC,KAAK,iBAAiB;AAE3C,gBAAI,KAAK,qBACJ,WACA,YAAY,aAAA,WAAW,uBAAuB,MAAM,aAAA,oBAAoB,YAAY,gBAAgB;AACrG,oBAAM,SAAS,KAAK,YAAY,IAAG;AACnC,qBAAO,QAAQ,kBAAkB,KAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,sCAAsC,OAAO;AAC1I,mBAAK,YAAY,IAAI,MAAM;;AAE/B,iBAAK,QAAQ,IAAI,kBAAA,gCAAgC,KAAK,WAAW,CAAC;AAElE,kBAAM,kBAAkB,KAAK,YAAY,aAAY;AAGrD,iBAAK,kBAAkB;AAEvB,mBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,gBACA,KAAK,mBAAmB,WACxB,oBACA,eAAe,CAAC;;AAGxB;QACJ;QAEQ,iBAAiB,YAAuB;AAC5C,gBAAM,OAAe,aAAA,WAAU;AAE/B,gBAAM,yBAAyB,KAAK,2BAA2B,WAAW,YAAY,aAAA,WAAW,qCAAqC;AAEtI,gBAAM,eAAoB;YACtB,aAAa;YACb,SAAS;cACL,eAAe;;YAEnB,gBAAgB,OAAO,2BAA2B,SAAY,SAAY;YAC1E,SAAS;;AAGb,gBAAM,mBAAmB,KAAK,UAAU,YAAY;AAEpD,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,wBACA,KAAK,mBAAmB,WACxB,oBACA,gBAAgB,CAAC;QACzB;QAEQ,mBAAmB,eAAmC,YAA8B;AACxF,gBAAM,eAA6B,aAAA,gBAAgB,+BAA+B,cAAc,iBAAiB;AAEjH,gBAAM,SAAiB,cAAc,SAAS,KAAK,mBAAmB;AAEtE,gBAAM,SAAS,IAAI,aAAA,wBACf,KAAK,mBAAmB,WACxB,cACA,cAAc,aACd,cAAc,UACd,QACA,cAAc,UACd,cAAc,6BACd,QACA,QACA,KAAK,UAAU,aAAa,GAC5B,UAAU;AAEd,gBAAM,KAAK,IAAI,aAAA,2BAA2B,QAAQ,QAAQ,KAAK,mBAAmB,SAAS;AAC3F,iBAAO;QACX;QAEQ,sBAAsB,iBAAwC;AAGlE,gBAAM,kBAA2C,KAAK,MAAM,gBAAgB,QAAQ;AACpF,kBAAQ,gBAAgB,YAAY,YAAW,GAAI;YAC/C,KAAK;AACD,oBAAM,oBAAoB,gBAAgB,UAAU,YAAW;AAC/D,oBAAM,kBAA2C,6BAAA,wBAAwB,SAAS,gBAAgB,QAAQ;AAC1G,oBAAM,OAAO,KAAK,qBAAqB,QAAQ,iBAAiB;AAGhE,kBAAI,gBAAgB,gBAAgB;AAChC,sBAAM,oBAAoB,KAAK,YAAY,IAAG;AAC9C,kCAAkB,QAAQ,iBAAiB,gBAAgB;AAC3D,qBAAK,YAAY,IAAI,iBAAiB;;AAG1C,oBAAM,wBAAmD,KAAK,uBAC1D,iBACA,uBAAA,sBAAsB,sCAAsC,KAAK,2BAA2B,WAAW,YAAY,aAAA,WAAW,2CAA2C,MAAS,CAAC,CAAC;AACxL,oBAAM,WAAW,IAAI,aAAA,0BAA0B,gBAAgB,gBAAgB,qBAAqB;AACpG,kBAAI,CAAC,CAAC,KAAK,2BAA2B,kBAAkB;AACpD,oBAAI;AACA,uBAAK,2BAA2B,iBAAiB,KAAK,4BAA4B,QAAQ;yBAErF,OAAO;;;AAKpB;YAEJ,KAAK;AACD,kBAAI,CAAC,CAAC,KAAK,2BAA2B,oBAAoB;AACtD,oBAAI;AACA,uBAAK,2BAA2B,mBAC5B,KAAK,4BACL,IAAI,aAAA,4BAA4B,gBAAgB,QAAQ,CAAC;yBAExD,OAAO;;;AAKpB;YAEJ;AACI,2BAAA,OAAO,SAAS,QACZ,IAAI,aAAA,gBAAgB,+BAA+B,gBAAgB,WAAW,aAAa,CAAC;AAChG;;QAEZ;QAEQ,QAAQ,OAAkB;AAC9B,eAAK,WAAW,QAAQ,KAAK;AAC7B,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;QAEQ,wBAAqB;AACzB,gBAAM,uBAA+B,KAAK,qBAAqB,WAAW,YAAY,yBAAyB;AAC/G,cAAI,yBAAyB,QAAW;AACpC;;AAGJ,gBAAM,6BAAqC,KAAK,qBAAqB,WAChE,YAAY,iCAAiC;AAClD,gBAAM,+BAAuC,KAAK,qBAAqB,WAClE,YAAY,mCAAmC;AAEpD,gBAAM,WAAW,qBAAqB,MAAM,GAAG;AAC/C,gBAAM,iBAAiB,+BAA+B,SAAY,CAAA,IAAK,2BAA2B,MAAM,GAAG;AAC3G,gBAAM,mBAAmB,iCAAiC,SAAY,CAAA,IAAK,6BAA6B,MAAM,GAAG;AAEjH,gBAAM,yBAAyB,CAAA;AAC/B,mBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,kBAAM,aAAyC,CAAA;AAC/C,uBAAW,OAAO,SAAS,CAAC;AAC5B,gBAAI,IAAI,eAAe,QAAQ;AAC3B,yBAAW,SAAS,OAAO,eAAe,CAAC,CAAC;;AAEhD,gBAAI,IAAI,iBAAiB,QAAQ;AAC7B,yBAAW,WAAW,OAAO,iBAAiB,CAAC,CAAC;;AAEpD,mCAAuB,KAAK,UAAU;;AAG1C,eAAK,cAAc,WAAW,oBAAoB,4BAA4B;AAC9E,eAAK,cAAc,WAAW,oBAAoB,CAAC;YAC/C,wBAAwB;YACxB,UAAU,EAAE,QAAQ,YAAW;YAC/B,MAAM;WACT,CAAC;QACN;;AAvpBJ,cAAA,uBAAA;;;;;;;;;;ACtDA,UAAa,cAAb,MAAwB;QAGb,eAAY;AACf,iBAAO,KAAK,UAAU,KAAK,WAAW;QAC1C;QAEO,MAAG;AACN,iBAAO,KAAK;QAChB;;;;;QAMO,IAAI,OAAmB;AAC1B,eAAK,cAAc;QACvB;;AAjBJ,cAAA,cAAA;;;;;;;;;;ACFA,UAAA,sBAAA;AAIA,UAAa,+BAAb,MAAa,sCAAqC,oBAAA,eAAc;QAUrD,WAAW,OAAI;AAClB,iBAAO,8BAA6B;QACxC;QAEO,WAAW,aAAU;AACxB,iBAAO,8BAA6B;QACxC;QAEO,WAAW,cAAW;AACzB,iBAAO,8BAA6B;QACxC;QAEO,WAAW,sBAAmB;AACjC,iBAAO,8BAA6B;QACxC;QAEO,WAAW,WAAQ;AACtB,iBAAO,8BAA6B;QACxC;QAEO,WAAW,gBAAa;AAC3B,iBAAO,8BAA6B;QACxC;QAEO,WAAW,yBAAsB;AACpC,iBAAO,8BAA6B;QACxC;;AApCJ,cAAA,+BAAA;AAE4B,mCAAA,WAAmB;AACnB,mCAAA,eAAuB;AACvB,mCAAA,iBAAyB;AACzB,mCAAA,0BAAkC;AAClC,mCAAA,kBAA0B;AAC1B,mCAAA,oBAA4B;AAC5B,mCAAA,6BAAuC,CAAC,WAAW,UAAU,aAAa,QAAQ,SAAS,8BAA8B,kBAAkB,YAAY,gBAAgB,qBAAqB,WAAW;;;;;;;;;;ACbnO,UAAA,eAAA;AAQA,UAAA,iBAAA;AACA,UAAA,eAAA;AACA,UAAA,oCAAA;AAGA,UAAa,sBAAb,MAAgC;QAS5B,cAAA;AAEI,eAAK,oBAAoB,kCAAA,6BAA6B;AACtD,eAAK,aAAa,kCAAA,6BAA6B;AAC/C,eAAK,WAAW,kCAAA,6BAA6B;AAC7C,eAAK,iBAAiB,kCAAA,6BAA6B;AACnD,eAAK,eAAe,kCAAA,6BAA6B;AACjD,eAAK,kBAAkB,IAAI,aAAA,mBAAmB,CAAA,CAAE;QACpD;;;;;;;;QASO,aAAa,MAA0B,kBAA0B,IAAuB,KAAyB;AAEpH,cAAI;AAEA,2BAAA,UAAU,uBAAuB,MAAM,MAAM;AAE7C,kBAAM,eAAuB,KAAK,YAAY,aAAA,WAAW,sCAAsC,kCAAA,6BAA6B,mBAAmB;AAC/I,kBAAM,WAAmB,KAAK,YAAY,aAAA,WAAW,6BAA6B,mBAAmB;AACrG,kBAAM,eAAuB,KAAK,YAAY,aAAA,WAAW,6BAA6B,KAAK,QAAQ;AACnG,kBAAM,gBAAwB,KAAK,YAAY,aAAA,WAAW,oCAAoC;AAC9F,kBAAM,kBAA0B,KAAK,YAAY,aAAA,WAAW,2BAA2B;AACvF,kBAAM,qBAA6B,KAAK,YAAY,aAAA,WAAW,8BAA8B;AAC7F,kBAAM,YAAoB,KAAK,YAAY,aAAA,WAAW,gCAAgC;AAEtF,2BAAA,UAAU,wBAAwB,cAAc,cAAc;AAC9D,2BAAA,UAAU,wBAAwB,UAAU,UAAU;AACtD,2BAAA,UAAU,wBAAwB,cAAc,cAAc;AAE9D,kBAAM,cAAyC,CAAA;AAC/C,wBAAY,KAAK,kBAAkB,UAAU,IAAI,KAAK;AACtD,wBAAY,KAAK,kBAAkB,YAAY,IAAI;AACnD,wBAAY,KAAK,kBAAkB,QAAQ,IAAI;AAE/C,kBAAM,UAAqC,CAAA;AAC3C,gBAAI,eAAe;AACf,sBAAQ,KAAK,kBAAkB,aAAa,IAAI;;AAEpD,oBAAQ,KAAK,kBAAkB,WAAW,IAAI,kCAAA,6BAA6B;AAE3E,gBAAI,qBAAqB,QAAW;AAChC,0BAAY,KAAK,kBAAkB,MAAM,IAAI;mBAC1C;AACH,6BAAA,UAAU,uBAAuB,oBAAoB,KAAK,WAAW,6BAA6B;AAClG,sBAAQ,KAAK,kBAAkB,kBAAkB,IAAI;AACrD,kBAAI,iBAAiB;AACjB,wBAAQ,KAAK,kBAAkB,eAAe,IAAI;yBAC3C,WAAW;AAClB,wBAAQ,KAAK,kBAAkB,aAAa,IAAI,UAAU,SAAS;qBAChE;AACH,+BAAA,UAAU,uBAAuB,iBAAiB,KAAK,WAAW,0BAA0B;;;AAIpG,kBAAM,SAA0B,CAAA;AAChC,mBAAO,UAAU;AACjB,iBAAK,gBAAgB,UAAU;AAE/B,kBAAM,WAAmB,WAAW,YAAY,GAAG,KAAK,YAAY;AAGpE,iBAAK,gBAAgB,QAAQ,aAAA,gBAAgB,MAAM,UAAU,aAAa,IAAI,EAAE,KAAK,CAAC,aAAiC;AAEnH,oBAAM,YAAoB,aAAA,mBAAmB,mBAAmB,KAAK,kBAAkB,WAAW,SAAS,OAAO;AAElH,kBAAI,CAAC,SAAS,IAAI;AACd,oBAAI,CAAC,CAAC,KAAK;AAEP,sBAAI,eAAuB,KAAK,WAAW,sCAAsC,QAAQ,YAAY,SAAS,OAAO,SAAQ,CAAE;AAC/H,sBAAI;AACJ,sBAAI;AACA,oCAAgB,KAAK,MAAM,SAAS,IAAI;AACxC,oCAAgB,KAAK,cAAc,MAAM,IAAI,KAAK,cAAc,MAAM,OAAO;2BACxE,GAAG;AACR,oCAAgB,KAAK,SAAS,IAAI;;AAEtC,sBAAI,WAAW;AACX,oCAAgB,IAAI,SAAS;;AAGjC,sBAAI,YAAY;;AAEpB;;AAEJ,oBAAM,eAAsC,KAAK,MAAM,SAAS,IAAI;AACpE,kBAAI,cAAc;AACd,6BAAa,YAAY;;AAE7B,kBAAI,CAAC,CAAC,IAAI;AACN,oBAAI;AACA,qBAAG,YAAY;yBACV,GAAG;AACR,sBAAI,CAAC,CAAC,KAAK;AACP,wBAAI,CAAW;;;AAGvB,qBAAK;;YAGb,CAAC,EAAE,MAAO,MAAW;YAAG,CAAC;mBAEpB,OAAO;AACZ,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI,iBAAiB,OAAO;AACxB,sBAAM,aAAoB;AAC1B,oBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;qBAE5C;AACH,oBAAI,KAAe;;;;QAInC;;;;;;;QAQO,MAAM,MAA0B,cAAoB;AACvD,iBAAO,IAAI,QAAc,CAAC,SAAqB,WAA0C;AACrF,gBAAI;AAEA,6BAAA,UAAU,uBAAuB,MAAM,KAAK,WAAW,YAAY,QAAQ,SAAS,QAAQ,CAAC;AAC7F,6BAAA,UAAU,wBAAwB,cAAc,KAAK,WAAW,YAAY,QAAQ,SAAS,OAAO,CAAC;AAErG,oBAAM,eAAuB,KAAK,YAAY,aAAA,WAAW,6BAA6B,KAAK,QAAQ;AACnG,oBAAM,gBAAwB,KAAK,YAAY,aAAA,WAAW,oCAAoC;AAE9F,oBAAM,cAAyC,CAAA;AAC/C,0BAAY,KAAK,kBAAkB,UAAU,IAAI,KAAK;AACtD,0BAAY,KAAK,kBAAkB,YAAY,IAAI;AAEnD,oBAAM,UAAqC,CAAA;AAC3C,kBAAI,eAAe;AACf,wBAAQ,KAAK,kBAAkB,aAAa,IAAI;;AAGpD,oBAAM,SAA0B,CAAA;AAChC,qBAAO,UAAU;AACjB,mBAAK,gBAAgB,UAAU;AAE/B,oBAAM,WAAmB,WAAW,YAAY,GAAG,KAAK,YAAY;AAGpE,mBAAK,gBAAgB,QAAQ,aAAA,gBAAgB,QAAQ,UAAU,aAAa,IAAI,EAAE,KAAK,CAAC,aAAiC;AAErH,oBAAI,CAAC,SAAS,IAAI;;AAIlB,wBAAO;cAEX,CAAC,EAAE,MAAO,MAAW;cAAE,CAAC;qBAEnB,OAAO;AACZ,kBAAI,iBAAiB,OAAO;AACxB,sBAAM,aAAoB;AAC1B,uBAAO,WAAW,OAAO,OAAO,WAAW,OAAO;qBAE/C;AACH,uBAAO,KAAe;;;UAGlC,CAAC;QACL;;AArLJ,cAAA,sBAAA;;;;;;;;;;ACbA,UAAA,eAAA;AAEA,UAAa,gCAAb,cAAmD,aAAA,kBAAiB;QAGhE,YACI,aACA,MACA,SACA,IAAW;AACP,gBAAM,aAAa,MAAM,SAAS,EAAE;AACpC,gBAAM,OAAyB,KAAK,MAAM,KAAK,QAAQ;AACvD,cAAI,KAAK,SAAS,QAAW;AACzB,iBAAK,8BAA8B,KAAK;;QAEpD;QAEA,IAAW,0BAAuB;AAC9B,iBAAO,KAAK;QAChB;;AAjBJ,cAAA,gCAAA;;;;;;;;;;ACFA,UAAA,eAAA;AAOA,UAAA,qCAAA;AAKA,UAAa,wCAAb,MAAkD;;;;QAKvC,oBAAoB,SAA4B;AACnD,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAE7B,cAAI;AACA,gBAAI,QAAQ,gBAAgB,aAAA,YAAY,MAAM;AAC1C,oBAAM,kBAAiD,IAAI,mCAAA,8BAA8B,QAAQ,aAAa,QAAQ,aAAa,CAAA,GAAI,QAAQ,EAAE;AACjJ,uBAAS,QAAQ,eAAe;uBACzB,QAAQ,gBAAgB,aAAA,YAAY,QAAQ;AACnD,uBAAS,QAAQ,IAAI,mCAAA,8BAA8B,QAAQ,aAAa,QAAQ,eAAe,QAAW,QAAQ,EAAE,CAAC;;mBAEpH,GAAG;AACR,qBAAS,OAAO,wCAAwC,CAAW,EAAE;;AAGzE,iBAAO,SAAS;QACpB;;;;QAKO,sBAAsB,SAA0B;AAEnD,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAE7B,cAAI;AACA,gBAAI,QAAQ,gBAAgB,aAAA,YAAY,MAAM;AAC1C,oBAAM,UAAU,GAAG,QAAQ,WAAW,QAAQ,WAAW,EAAE;AAC3D,uBAAS,QAAQ,IAAI,aAAA,oBAAoB,aAAA,YAAY,MAAM,SAAS,QAAQ,EAAE,CAAC;;mBAE9E,GAAG;AACR,qBAAS,OAAO,iCAAiC,CAAW,EAAE;;AAGlE,iBAAO,SAAS;QACpB;;AAvCJ,cAAA,wCAAA;;;;;;;;;;ACZA,UAAA,eAAA;AACA,UAAA,eAAA;AACA,UAAA,iBAAA;AACA,UAAA,eAAA;AACA,UAAA,6BAAA;AAEA,UAAA,oCAAA;AACA,UAAA,6CAAA;AAMA,UAAa,gCAAb,cAAmD,2BAAA,sBAAqB;QAE7D,OAAO,QAA0B,UAAoB,cAAqB;AAE7E,gBAAM,eAAuB,OAAO,WAAW,YAAY,aAAA,WAAW,6BAA6B,kCAAA,6BAA6B,IAAI;AACpI,gBAAM,gBAAwB,OAAO,WAAW,YAAY,aAAA,WAAW,sCAAsC,aAAA,WAAU,CAAE;AAEzH,gBAAM,WAAmB,SAAS,YAAY,GAAG,kCAAA,6BAA6B,aAAa;AAC3F,gBAAM,QAAgB,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,MAAS;AACtG,yBAAA,UAAU,uBAAuB,OAAO,OAAO;AAE/C,gBAAM,cAAyC,CAAA;AAC/C,sBAAY,kCAAA,6BAA6B,aAAa,UAAU,IAAI,kCAAA,6BAA6B;AACjG,sBAAY,kCAAA,6BAA6B,aAAa,KAAK,IAAI;AAC/D,sBAAY,kCAAA,6BAA6B,aAAa,aAAa,IAAI;AACvE,gBAAM,oBAA6B,OAAO,WAAW,YAAY,qCAAqC,OAAO,MAAM;AACnH,iBAAO,IAAI,aAAA,oBAAoB,UAAU,aAAa,CAAA,GAAI,IAAI,2CAAA,sCAAqC,GAAI,aAAA,UAAU,qBAAqB,MAAM,GAAG,mBAAmB,YAAY;QAClL;;AAjBJ,cAAA,gCAAA;;;;;;;;;;ACbA,UAAA,eAAA;AAUA,UAAa,6BAAb,MAAuC;QAOnC,YAAmB,WAAiB;AAN5B,eAAA,iBAA0B;AAC1B,eAAA,kBAAiC,IAAI,MAAK;AAM9C,eAAK,gBAAgB;AACrB,eAAK,gBAAgB,aAAA,iBAAgB;AACrC,eAAK,gCAAgC,IAAI,aAAA,SAAQ;QACrD;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK,8BAA8B;QAC9C;QAEO,qBAAqB,kBAA0B,cAAoB;AACtE,eAAK,gBAAgB;QACzB;QAEO,gBAAgB,SAAgB;AACnC,cAAI,SAAS;AACT,iBAAK,WAAU;;QAEvB;QAEO,+BAA+B,YAAkB;AACpD,cAAI,eAAe,KAAK;AACpB;qBACO,eAAe,KAAK;AAC3B,iBAAK,WAAU;;QAEvB;QAEO,yBAAyB,uBAA8B;AAC1D,cAAI,CAAC,uBAAuB;AACxB,iBAAK,WAAU;iBACZ;AACH,iBAAK,gBAAgB,aAAA,iBAAgB;;QAE7C;QAEO,MAAM,UAAO;AAChB,cAAI,CAAC,KAAK,gBAAgB;AAEtB,iBAAK,iBAAiB;AACtB,uBAAW,cAAc,KAAK,iBAAiB;AAC3C,oBAAM,WAAW,OAAM;;;QAGnC;QAEQ,aAAU;QAElB;;AA/DJ,cAAA,6BAAA;;;;;;;;;;ACVA,UAAA,eAAA;AAGA,UAAa,mBAAb,cAAsC,aAAA,iBAAgB;QAGlD,YAAmB,SAAkB,WAAkB;AACnD,gBAAM,SAAS;AAEf,eAAK,cAAc;QACvB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;AAXJ,cAAA,mBAAA;AAcA,UAAa,oBAAb,cAAuC,aAAA,iBAAgB;QAGnD,YAAmB,UAAmB,WAAkB;AACpD,gBAAM,SAAS;AAEf,eAAK,eAAe;QACxB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;AAXJ,cAAA,oBAAA;AAcA,UAAa,uBAAb,cAA0C,aAAA,iBAAgB;QAGtD,YAAmB,aAAmC,WAAkB;AACpE,gBAAM,SAAS;AACf,eAAK,kBAAkB;QAC3B;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,uBAAA;AAaA,UAAa,gCAAb,cAAmD,aAAA,iBAAgB;QAK/D,YAAmB,eAAuB,KAAa,OAA8C,WAAkB;AACnH,gBAAM,SAAS;AAEf,eAAK,UAAU;AACf,eAAK,YAAY;AACjB,eAAK,oBAAoB;QAC7B;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK;QAChB;QAEA,IAAW,MAAG;AACV,iBAAO,KAAK;QAChB;QACA,IAAW,KAAE;AACT,iBAAO,KAAK;QAChB;;AAtBJ,cAAA,gCAAA;AAyBA,UAAa,4BAAb,cAA+C,aAAA,iBAAgB;QAW3D,YAAmB,gBAAwB,OAAe,aAAuB,iBAC9D,qBAA6B,cAAuB,WAAoB,cAAsC,WAAkB;AAC/I,gBAAM,SAAS;AACf,eAAK,aAAa;AAClB,eAAK,mBAAmB;AACxB,eAAK,kBAAkB;AACvB,eAAK,sBAAsB;AAC3B,eAAK,0BAA0B;AAC/B,eAAK,mBAAmB;AACxB,eAAK,mBAAmB;AACxB,eAAK,mBAAmB;QAC5B;QACA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK;QAChB;QAEA,IAAW,sBAAmB;AAC1B,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK;QAChB;;AArDJ,cAAA,4BAAA;AAwDA,UAAa,2CAAb,MAAqD;QAKjD,YAAmB,SAAiB,SAAyC,WAAkB;AAC3F,eAAK,cAAc;AACnB,eAAK,cAAc;AACnB,eAAK,gBAAgB;QACzB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AArBJ,cAAA,2CAAA;;;;;;;;;;ACzDA,UAAa,uBAAb,MAAiC;QAE7B,YAA0B,eAAuC,CAAA,GAAW,MAAa;AAA/D,eAAA,eAAA;AAAkD,eAAA,OAAA;QAE5E;;;;;QAMO,uBAAuB,OAA2B;AACrD,cAAI,UAAU,QAAW;AACrB;;AAGJ,gBAAM,SAAiB,KAAK,oBAAoB,MAAM,EAAE;AACxD,cAAI,SAAS,IAAI;AACb,iBAAK,aAAa,OAAO,QAAQ,GAAG,KAAK;iBACtC;AACH,iBAAK,aAAa,KAAK,KAAK;;AAIhC,iBAAO,KAAK,eAAe,MAAM,EAAE;QACvC;;;;;QAMO,oBAAoB,IAAU;AACjC,iBAAO,KAAK,aAAa,UAAU,CAAC,MAAqC,EAAE,OAAO,EAAE;QACxF;;;;;QAMO,eAAe,IAAU;AAC5B,iBAAO,KAAK,aAAa,KAAK,CAAC,MAAqC,EAAE,OAAO,EAAE;QACnF;;;;QAKO,kBAAkB,IAAU;AAC/B,eAAK,eAAe,KAAK,aAAa,OAAO,CAAC,MAAqC,EAAE,OAAO,EAAE;QAClG;;;;QAKA,IAAW,OAAI;AACX,iBAAO,KAAK,aAAa,KAAK,CAAC,MAAqC,EAAE,WAAW,IAAI;QACzF;;;;QAKA,IAAW,KAAE;AACT,iBAAO,KAAK,eAAe,KAAK,IAAI;QACxC;;AA7DJ,cAAA,uBAAA;AAqLa,cAAA,qCAAqC;QAC9C,SAAS;QACT,OAAO;QACP,MAAM;QACN,gBAAgB;QAChB,WAAW;QACX,SAAS;QACT,oBAAoB;QACpB,mBAAmB;;AAMV,cAAA,qCAAqC;QAC9C,gBAAgB;QAChB,mBAAmB;QACnB,kBAAkB;QAClB,iBAAiB;QACjB,aAAa;QACb,cAAc;QACd,iBAAiB;QACjB,uBAAuB;QACvB,cAAc;QACd,SAAS;QACT,YAAY;QACZ,uBAAuB;QACvB,yBAAyB;QACzB,WAAW;;;;;;;;;;;ACvQf,UAAM,uBAAuB,CAAC,SAA0C,KAAK,MAAM,IAAI;AAEvF,UAAa,yBAAb,MAAa,wBAAsB;QAG/B,YAAmB,MAAY;AAC3B,eAAK,sBAAsB,qBAAqB,IAAI;QACxD;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,oBAAoB;QACpC;QACA,IAAW,UAAO;AACd,iBAAO,KAAK,oBAAoB;QACpC;QACA,IAAW,KAAE;AACT,iBAAO,KAAK,oBAAoB;QACpC;QACA,IAAW,WAAQ;AACf,iBAAO,KAAK,oBAAoB;QACpC;QACA,IAAW,gBAAa;AACpB,iBAAO,KAAK,oBAAoB;QACpC;QACA,IAAW,SAAM;AACb,iBAAO,KAAK,oBAAoB;QACpC;QACA,IAAW,QAAK;AACZ,iBAAO,KAAK,oBAAoB;QACpC;QACA,IAAW,QAAK;AACZ,iBAAO,KAAK,oBAAoB;QACpC;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,wBAAuB,IAAI;QAC1C;;AAlCJ,cAAA,yBAAA;;;;;;;;;;ACeA,UAAM,oBAAoB,CAAC,SAAmD,KAAK,MAAM,IAAI;AAC7F,UAAM,2BAA2B,CAAC,SAA8C,KAAK,MAAM,IAAI;AAE/F,UAAa,kCAAb,MAAa,iCAA+B;QAGxC,YAAoB,MAAY;AAC5B,eAAK,kCAAkC,kBAAkB,IAAI;QACjE;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,QAAK;AACZ,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,kBAAe;AACtB,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,sBAAmB;AAC1B,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK,gCAAgC;QAChD;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,gCAAgC;QAChD;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,iCAAgC,IAAI;QACnD;;AArDJ,cAAA,kCAAA;AAyDA,UAAa,6BAAb,MAAa,4BAA0B;QAInC,YAAoB,MAAY;AAC5B,eAAK,iCAAiC,yBAAyB,IAAI;QACvE;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,+BAA+B;QAC/C;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,+BAA+B;QAC/C;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,+BAA+B;QAC/C;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK,+BAA+B;QAC/C;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,+BAA+B;QAC/C;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK,+BAA+B;QAC/C;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,+BAA+B;QAC/C;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,4BAA2B,IAAI;QAC9C;;AAtCJ,cAAA,6BAAA;;;;;;;;;;AC9DA,UAAM,sBAAsB,CAAC,SAAyC,KAAK,MAAM,IAAI;AACrF,UAAM,oBAAoB,CAAC,SAAuC,KAAK,MAAM,IAAI;AAEjF,UAAa,wBAAb,MAAa,uBAAqB;QAI9B,YAAoB,MAAY;AAC5B,eAAK,qBAAqB,oBAAoB,IAAI;QACtD;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,mBAAmB;QACnC;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK,mBAAmB,SAAS;QAC5C;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,uBAAsB,IAAI;QACzC;;AAlDJ,cAAA,wBAAA;AAsDA,UAAa,sBAAb,MAAa,qBAAmB;QAI5B,YAAoB,MAAY;AAC5B,eAAK,mBAAmB,kBAAkB,IAAI;QAClD;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,eAAY;AACnB,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,KAAE;AACT,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,SAAM;AACb,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,OAAI;AACX,iBAAO,KAAK,iBAAiB;QACjC;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,qBAAoB,IAAI;QACvC;;AA9CJ,cAAA,sBAAA;;;;;;;;;ACzFA,UAAA,8BAAA;AAAS,aAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,4BAAA;MAAsB,EAAA,CAAA;AAC/B,UAAA,kCAAA;AAAwE,aAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA+B,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,8BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAA0B,EAAA,CAAA;AACnI,UAAA,kCAAA;AAAsC,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAAqB,EAAA,CAAA;AAAE,aAAA,eAAA,SAAA,uBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,gCAAA;MAAmB,EAAA,CAAA;;;;;;;;;;ACChF,UAAA,eAAA;AAQA,UAAA,eAAA;AASA,UAAA,eAAA;AAOA,UAAA,qCAAA;AACA,UAAA,kCAAA;AACA,UAAA,uCAAA;AAQA,UAAA,wCAAA;AAMA,UAAA,eAAA;AAcA,UAAa,6BAAb,cAAgD,aAAA,sBAAqB;QAYjE,YACI,gBACA,mBACA,aACA,kBACA,8BAA8D;AAE9D,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,4BAA4B;AAbhG,eAAA,8BAAoD;AAexD,eAAK,6BAA6B;AAClC,eAAK,mCAAmC;AACxC,eAAK,iCAAiC;AACtC,eAAK,yBAAyB,MAAqB,KAAK,mCAAkC;AAC1F,eAAK,oBAAoB,MAAqB,KAAK,KAAI;AACvD,eAAK,0BAA0B,CAAC,eAA2D,KAAK,wBAAwB,UAAU;AAClI,eAAK,2BAA2B,MAA4B,KAAK,iBAAgB;AACjF,eAAK,qBAAqB,MAAqB,KAAK,eAAc;AAClE,eAAK,iCAAiC,IAAI,gCAAA,2BAA2B,aAAA,iBAAgB,CAAE;AACvF,eAAK,oCAAoC;AACzC,eAAK,6BAA6B;QACtC;QAEO,aAAU;AACb,iBAAO,MAAM,WAAU,KAAM,KAAK;QACtC;QAEO,MAAM,QAAQ,QAAe;AAChC,eAAK,6BAA6B;AAClC,cAAI,KAAK,gCAAgC,QAAW;AAChD,kBAAM,aAA0B,MAAM,KAAK;AAC3C,kBAAM,WAAW,QAAQ,MAAM;;AAEnC,gBAAM,MAAM,QAAQ,MAAM;QAC9B;QAEO,MAAM,YAAY,SAAe;AACpC,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,iBAAO,WAAW,KAAK,IAAI,mCAAA,8BACvB,aAAA,YAAY,MACZ,OAAO,CAAC;QAChB;QAEO,MAAM,iBAAiB,SAAe;AACzC,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAE1D,gBAAM,WAAW,KAAK,IAAI,mCAAA,8BAA8B,aAAA,YAAY,MAAM,OAAO,CAAC;QACtF;QAEU,iBAAc;AACpB,cAAI,KAAK,sBAAsB;AAC3B;;AAEJ,eAAK,kBAAkB,KAAK,+BAA+B,WACvD,KAAK,+BAA+B,WACpC,aAAA,mBAAmB,OACnB,aAAA,sBAAsB,SACtB,eAAe;AAEnB,eAAK,uBAAuB;AAC5B,iBAAO,QAAQ,QAAO;QAC1B;;QAGU,MAAM,8BAA2B;AACvC,iBAAO;QACX;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,eAAK,uBAAuB;AAE5B,gBAAM,cAAwD,IAAI,aAAA,yCAC9D,oBACA,OACA,WACA,QACA,SAAS;AAEb,cAAI;AACA,gBAAI,CAAC,CAAC,KAAK,iCAAiC,UAAU;AAClD,mBAAK,iCAAiC,SAAS,KAAK,kCAAkC,WAAW;;kBAEjG;;QAGZ;;;;QAKU,MAAM,wBAAwB,YAAgC;AACpE,eAAK,qBAAqB,KAAK,iBAAgB;AAC/C,iBAAO;QACX;;;;QAKQ,MAAM,qCAAkC;AAC5C,cAAI,KAAK,WAAU,KAAM,KAAK,sBAAsB;AAChD,mBAAO,QAAQ,QAAO;;AAG1B,gBAAM,yBAAyC,IAAI,aAAA,SAAQ;AAE3D,cAAI;AACA,kBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,kBAAM,UAAyC,MAAM,WAAW,KAAI;AACpE,gBAAI,KAAK,WAAU,KAAM,KAAK,sBAAsB;AAEhD,qCAAuB,QAAO;AAC9B,qBAAO,QAAQ,QAAO;;AAG1B,gBAAI,CAAC,SAAS;AACV,qBAAO,KAAK,mCAAkC;;AAGlD,kBAAM,YAAoB,KAAK,+BAA+B;AAC9D,kBAAM,0BAAkC,QAAQ,wBAAwB,YAAW;AACnF,gBAAI,YAAqB;AAEzB,gBAAI;AACA,sBAAQ,yBAAyB;gBAC7B,KAAK;gBACL,KAAK;gBACL,KAAK;AACD,wBAAM,iBAAyC,aAAA,uBAAuB,SAAS,QAAQ,QAAQ;AAC/F,0BAAQ,eAAe,QAAQ,YAAW,GAAI;oBAO1C,KAAK;AAED,4BAAM,sBAAwD,aAAA,gCAAgC,SAAS,QAAQ,QAAQ;AAEvH,4BAAM,qBAA6C,oBAAoB,aAAa,IAAI,CAAC,MAAwD;AAC7I,8BAAM,cAAoC;0BACtC,QAAQ,EAAE;0BACV,aAAa,EAAE;0BACf,IAAI,EAAE;0BACN,QAAQ,EAAE;0BACV,SAAS,EAAE;0BACX,YAAY,EAAE;0BACd,mBAAmB,EAAE;;AAEzB,+BAAO;sBACX,CAAC;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,0BAA0B;AAClE,6BAAK,iCAAiC,yBAAyB,KAAK,kCAChE,IAAI,qCAAA,0BAA0B,oBAAoB,QAAQ,oBAAoB,OAC1E,oBAAoB,aAAa,oBAAoB,iBACrD,oBAAoB,qBAAqB,oBAAoB,YAC7D,oBAAoB,SAAS,oBAAoB,SAAS,CAAC;;AAEvE;oBAMJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,kCAAkC;AAC1E,6BAAK,iCAAiC,iCAAiC,KAAK,kCACxE,IAAI,qCAAA,8BAA8B,eAAe,eAC7C,sCAAA,mCAAmC,yBACnC,eAAe,OAAO,SAAS,CAAC;;AAG5C;oBAQJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,kCAAkC;AAC1E,6BAAK,iCAAiC,iCAAiC,KAAK,kCACxE,IAAI,qCAAA,8BAA8B,eAAe,eAC7C,sCAAA,mCAAmC,uBACnC,eAAe,OAAO,SAAS,CAAC;;AAG5C;oBAMJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,kCAAkC;AAC1E,6BAAK,iCAAiC,iCAAiC,KAAK,kCACxE,IAAI,qCAAA,8BAA8B,eAAe,eAC7C,sCAAA,mCAAmC,SACnC,eAAe,OAAO,SAAS,CAAC;;AAG5C;oBAKJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,wBAAwB;AAChE,6BAAK,iCAAiC,uBAAuB,KAAK,kCAC9D,IAAI,qCAAA,iBAAiB,eAAe,OAAkB,SAAS,CAAC;;AAGxE;oBAKJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,wBAAwB;AAChE,6BAAK,iCAAiC,uBAAuB,KAAK,kCAC9D,IAAI,aAAA,gCAAgC,eAAe,OAAiB,KAAK,+BAA+B,SAAS,CAAC;;AAG1H;oBAKJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,kCAAkC;AAC1E,6BAAK,iCAAiC,iCAAiC,KAAK,kCACxE,IAAI,qCAAA,8BAA8B,eAAe,eAC7C,sCAAA,mCAAmC,WACnC,eAAe,OAAO,SAAS,CAAC;;AAG5C;oBAKJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,yBAAyB;AACjE,6BAAK,iCAAiC,wBAAwB,KAAK,kCAC/D,IAAI,qCAAA,kBAAkB,eAAe,OAAkB,SAAS,CAAC;;AAGzE;oBAMJ,KAAK;AAED,0BAAI,CAAC,CAAC,KAAK,iCAAiC,kCAAkC;AAC1E,6BAAK,iCAAiC,iCAAiC,KAAK,kCACxE,IAAI,qCAAA,8BAA8B,eAAe,eAC7C,sCAAA,mCAAmC,gBACnC,eAAe,OAAO,SAAS,CAAC;;AAG5C;oBAKJ,KAAK;AAED,4BAAM,yBAAqD,aAAA,2BAA2B,SAAS,QAAQ,QAAQ;AAE/G,4BAAM,qBAA2C;wBAC7C,QAAQ,uBAAuB;wBAC/B,aAAa,uBAAuB;wBACpC,IAAI,uBAAuB;wBAC3B,QAAQ,uBAAuB;wBAC/B,SAAS,uBAAuB;wBAChC,YAAY,uBAAuB;wBACnC,mBAAmB,uBAAuB;;AAG9C,0BAAI,CAAC,CAAC,KAAK,iCAAiC,gCAAgC;AACxE,6BAAK,iCAAiC,+BAA+B,KAAK,kCACtE,IAAI,qCAAA,qBACA,oBACA,SAAS,CAAC;;AAGtB;oBAKJ,KAAK;AAED,4BAAM,qBAA2C;wBAC7C,IAAI,eAAe;;AAGvB,0BAAI,CAAC,CAAC,KAAK,iCAAiC,iCAAiC;AACzE,6BAAK,iCAAiC,gCAAgC,KAAK,kCACvE,IAAI,qCAAA,qBAAqB,oBAAoB,SAAS,CAAC;;AAG/D;oBAMJ,KAAK;AAGD,4BAAM,wBAA8C;wBAChD,IAAI,eAAe;;AAGvB;oBAEJ,KAAK;AACD,4BAAM,QAAQ,IAAI,aAAA,6BACd,MAAsB;AAClB,8BAAM,qBAAqB,eAAe;AAC1C,+BAAO,QAAQ,QAAQ,kBAAkB;sBAC7C,GACA,MAAsB;AAClB,8BAAM,qBAAqB,eAAe;AAC1C,+BAAO,QAAQ,QAAQ,kBAAkB;sBAC7C,CAAC;AACL,2BAAK,iBAAiB;AACtB,2BAAK,iCAAiC,QAAQ,KAAK;AAEnD;oBAKJ;AACI;;AAER;gBAKJ,KAAK;gBAKL,KAAK;AAED,wBAAM,gBAAuC,aAAA,sBAAsB,SAAS,QAAQ,QAAQ;AAC5F,wBAAM,2BAA0C,4BAA4B,UAAW,aAAA,aAAa,8BAA8B,aAAA,aAAa;AAE/I,wBAAM,eAA8C,IAAI,aAAA,8BAA8B,cAAc,eAChG,KAAK,gBAAgB,cAAc,YAAY,GAC/C,cAAc,UACd,cAAc,IACd,0BACA,cAAc,aACd,QACA,QACA,QAAQ,UACR,MAAS;AAEb,sBAAI,cAAc,SAAS;AAEvB,wBAAI,aAAa,SAAS,UAAa,aAAa,KAAK,SAAS,GAAG;AACjE,kCAAY;+BACL,cAAc,OAAO,KAAK,4BAA4B;AAG7D,kCAAY;2BACT;;AAIP,wBAAI,WAAW;AACX,0BAAI,CAAC,CAAC,KAAK,iCAAiC,qBAAqB;AAC7D,6BAAK,iCAAiC,oBAAoB,KAAK,kCAC3D,IAAI,qCAAA,yCAAyC,sCAAA,mCAAmC,OAAO,cAAc,SAAS,CAAC;;;6BAGpH,aAAa,SAAS,QAAW;AACxC,yBAAK,6BAA6B,cAAc;AAChD,wBAAI,CAAC,CAAC,KAAK,iCAAiC,qBAAqB;AAC7D,2BAAK,iCAAiC,oBAAoB,KAAK,kCAC3D,IAAI,qCAAA,yCAAyC,sCAAA,mCAAmC,SAAS,cAAc,SAAS,CAAC;;;AAI7H;gBAKJ,KAAK;AAED,wBAAM,cAAmC,aAAA,oBAAoB,SAAS,QAAQ,QAAQ;AAGtF,wBAAM,aAA4C,IAAI,aAAA,8BAA8B,YAAY,eAC5F,KAAK,gBAAgB,YAAY,YAAY,GAC7C,YAAY,UACZ,QACA,QACA,YAAY,cACZ,QACA,QACA,QACA,QAAQ,UACR,MAAS;AAEb,sBAAI,CAAC,CAAC,KAAK,iCAAiC,qBAAqB;AAC7D,yBAAK,iCAAiC,oBAAoB,KAAK,kCAC3D,IAAI,qCAAA,yCAAyC,sCAAA,mCAAmC,gBAAgB,YAAY,SAAS,CAAC;;AAE9H;gBAEJ;AAEI;;qBAEH,GAAG;;AAGZ,mBAAO,KAAK,mCAAkC;mBACzC,GAAG;AACR,iBAAK,uBAAuB;;AAGhC,iBAAO,uBAAuB;QAClC;QAEQ,MAAM,mBAAgB;AAC1B,cAAI,KAAK,WAAU,GAAI;AACnB,mBAAO,QAAQ,QAAO;;AAE1B,eAAK,uBAAuB;AAE5B,gBAAM,0BAA0B,KAAK,mCAAkC;AAEvE,cAAI;AACA,kBAAM,IAAI,MAAM;AAChB,mBAAO;mBACF,OAAO;AACZ,iBAAK,kBAAkB,KAAK,qBAAqB,KAAK,mBAAmB,YAAY,IAAI,KAAK,qBAAqB,KAAK,mBAAmB,YAAY,IAAI,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,cAAc,KAAe;AACxO,mBAAO;;QAEf;;QAGQ,mBAAgB;AACpB,cAAI,KAAK,WAAU,GAAI;AACnB,mBAAO,QAAQ,QAAqB,MAAS;;AAEjD,cAAI,KAAK,gCAAgC,QAAW;AAChD,mBAAO,KAAK,4BAA4B,KAAK,CAAC,eAAiD;AAC3F,kBAAI,WAAW,MAAK,MAAO,aAAA,gBAAgB,cAAc;AACrD,qBAAK,mBAAmB;AACxB,qBAAK,8BAA8B;AACnC,uBAAO,KAAK,iBAAgB;;AAEhC,qBAAO,KAAK;YAChB,GAAG,MAA2B;AAC1B,mBAAK,mBAAmB;AACxB,mBAAK,8BAA8B;AACnC,qBAAO,KAAK,iBAAgB;YAChC,CAAC;;AAEL,cAAI,KAAK,sBAAsB;AAC3B,mBAAO,QAAQ,QAAqB,MAAS;;AAGjD,eAAK,8BAA8B,KAAK,YAAW,EAAG,KAAK,CAAC,eAAyC,UAAU;AAE/G,iBAAO,KAAK;QAChB;QAEQ,gBAAgB,2BAAwD;AAC5E,cAAI;AAEJ,cAAI,WAAc,2BAA2B;AACzC,2BAAe,IAAI,aAAA,aAAY;AAC/B,uBAAW,eAAe,2BAA2B;AACjD,2BAAa,IAAI,YAAY,MAAM,YAAY,WAAW;;;AAIlE,iBAAO;QACX;;AAtgBJ,cAAA,6BAAA;;;;;;;;;;ACrDA,UAAA,eAAA;AAOA,UAAA,eAAA;AAMA,UAAA,iBAAA;AACA,UAAA,eAAA;AAgBA,UAAA,qCAAA;AACA,UAAA,kCAAA;AAaA,UAAa,gCAAb,MAA0C;QAC/B,OAAO,WAAW,cAA6B,cAAuC,aAAyB;AAClH,iBAAO,IAAI,iCAAiC,cAAc,cAAc,WAAW;QACvF;;AAHJ,cAAA,gCAAA;AAUA,UAAa,mCAAb,cAAsD,aAAA,WAAU;QAU5D,YAAmB,cAA6B,cAAuC,aAAyB;AAC5G,gBAAM,oBAAoB;AAC1B,yBAAA,UAAU,YAAY,mBAAmB,cAAc;AACvD,gBAAM,mBAAmB;AACzB,yBAAA,UAAU,YAAY,kBAAkB,kBAAkB;AAE1D,gBAAM,aAAa,kBAAkB,YAAY,IAAI,mCAAA,8BAA6B,CAAE;AAEpF,eAAK,mBAAmB;AACxB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB,kBAAkB,WAAW,MAAK;AACxD,eAAK,iBAAiB,aAAA,WAAW,eAAe,IAAI;AACpD,gBAAM,oBAA4B,KAAK,eAAe,YAAY,aAAA,WAAW,mBAAmB,IAAI,EAAE,YAAW;AACjH,cAAI,sBAAsB,QAAQ,OAAQ,SAAU,eAAe,OAAQ,WAAY,aAAa;AAChG,iBAAK,iBAAiB,aAAA,QAAQ;AAC9B,iBAAK,mBAAmB,aAAA,QAAQ;iBAC7B;AACH,gBAAI,OAAO,WAAW,aAAa;AAE/B,mBAAK,iBAAiB,OAAO,WAAW,KAAK,MAAM;AAEnD,mBAAK,mBAAmB,OAAO,aAAa,KAAK,MAAM;mBACpD;AACH,mBAAK,iBAAiB;AACtB,mBAAK,mBAAmB;;;QAGpC;QAeA,IAAW,UAAU,IAAoC;AACrD,eAAK,eAAe,YAAY;QACpC;QAEA,IAAW,aAAa,IAAoC;AACxD,eAAK,eAAe,eAAe;QACvC;;;;QAKA,IAAW,4BAAyB;AAChC,iBAAO,KAAK;QAChB;;;;QAKA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEO,aAAU;AACb,iBAAO,KAAK;QAChB;;;;;QAMO,QAAQ,OAAe,IAAiB,KAAyB;AACpE,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,2BAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,iBAAK,SAAS,8BAA8B;AAC5C,iBAAK,yBAAwB;AAC7B,iBAAK,SAAS,aAAa,IAAI,GAAG;mBAC7B,OAAO;AACZ,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI,iBAAiB,OAAO;AACxB,sBAAM,aAAoB;AAC1B,oBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;qBAC5C;AACH,oBAAI,KAAe;;;;QAInC;;;;QAKO,WAAW,IAAiB,KAAyB;AACxD,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,gBAAI,KAAK,qBAAqB,QAAW;AAEtC,mBAAK,iBAAiB,KAAK,gBAAgB;;AAE9C,iBAAK,SAAS,WAAU,EAAG,KAAK,MAAW;AACvC,kBAAI,CAAC,CAAC,IAAI;AACN,mBAAE;;YAEV,GAAG,CAAC,UAAuB;AACvB,kBAAI,CAAC,CAAC,KAAK;AACP,oBAAI,KAAK;;YAEjB,CAAC;mBACI,OAAO;AACZ,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI,iBAAiB,OAAO;AACxB,sBAAM,aAAoB;AAC1B,oBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;qBAC5C;AACH,oBAAI,KAAe;;;AAI3B,iBAAK,QAAQ,IAAI,EAAE,MAAM,CAAC,WAAwB;AAC9C,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;YACvD,CAAC;;QAGT;;;;;;;QAQO,YAAY,SAAiB,IAAiB,KAAyB;AAC1E,cAAI;AACA,2BAAA,UAAU,gBAAgB,KAAK,cAAc;AAC7C,iBAAK,YAAY,SAAS,IAAI,GAAG;mBAC5B,OAAO;AACZ,gBAAI,CAAC,CAAC,KAAK;AACP,kBAAI,iBAAiB,OAAO;AACxB,sBAAM,aAAoB;AAC1B,oBAAI,WAAW,OAAO,OAAO,WAAW,OAAO;qBAC5C;AACH,oBAAI,KAAe;;;AAK3B,iBAAK,QAAQ,IAAI,EAAE,MAAM,CAAC,WAAwB;AAC9C,2BAAA,OAAO,SAAS,QAAQ,IAAI,aAAA,gBAAgB,MAAM,CAAC;YACvD,CAAC;;QAGT;;;;QAKO,QAAQ,OAAsB;AACjC,eAAK,iBAAiB,QAAQ,KAAK;QACvC;;;;QAKO,MAAM,QAAK;AACd,cAAI,CAAC,KAAK,gBAAgB;AACtB,gBAAI,CAAC,CAAC,KAAK,gBAAgB;AACvB,mBAAK,eAAe,gBAAe;AACnC,mBAAK,eAAe,MAAK;;AAE7B,iBAAK,iBAAiB;AACtB,kBAAM,KAAK,QAAQ,IAAI;;QAE/B;;;;;QAMU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,gBAAgB;AACrB;;AAEJ,cAAI,WAAW;AACX,gBAAI,KAAK,qBAAqB,QAAW;AAErC,mBAAK,iBAAiB,KAAK,gBAAgB;;AAE/C,iBAAK,iBAAiB;AACtB,gBAAI,CAAC,CAAC,KAAK,gBAAgB;AACvB,mBAAK,eAAe,gBAAe;AACnC,mBAAK,eAAe,MAAK;AACzB,mBAAK,iBAAiB;;AAE1B,kBAAM,MAAM,QAAQ,SAAS;;QAErC;;;;;QAMU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBAAiB,cAAc,KAAK,cAAc;QACjE;;;;;;;;;QAUU,wBACN,gBACA,mBACA,aACA,kBAAkC;AAElC,gBAAM,cAA+B;AAErC,iBAAO,IAAI,gCAAA,2BAA2B,gBAAgB,mBAAmB,aAAa,kBAAkB,IAAI;QAChH;QAEQ,YAAY,KAAa,IAAe,KAAc;AAC1D,gBAAM,YAAY,KAAK;AACvB,gBAAM,yBAAyB,CAAI,SAAqBC,KAAeC,SAAwB;AAC3F,gBAAI,YAAY,QAAW;AACvB,sBAAQ,KAAK,MAAW;AACpB,oBAAI;AACA,sBAAI,CAAC,CAACD,KAAI;AACN,oBAAAA,IAAE;;yBAED,GAAG;AACR,sBAAI,CAAC,CAACC,MAAK;AACP,oBAAAA,KAAI,yCAAyC,CAAW,GAAG;;;cAGvE,GAAG,CAAC,WAAqB;AACrB,oBAAI;AACA,sBAAI,CAAC,CAACA,MAAK;AACP,oBAAAA,KAAI,MAAM;;yBAGT,OAAO;gBAAA;cACpB,CAAC;mBACE;AACH,kBAAI,CAAC,CAACA,MAAK;AACP,gBAAAA,KAAI,cAAc;;;UAG9B;AAEA,iCAAuB,UAAU,iBAAiB,GAAG,GAAG,IAAI,GAAG;AAC/D,eAAK,yBAAwB;QACjC;QAEQ,2BAAwB;AAC5B,cAAI,KAAK,qBAAqB,QAAW;AAErC,iBAAK,iBAAiB,KAAK,gBAAgB;;AAG/C,eAAK,mBAAmB,KAAK,eAAe,MAAW;AACnD,iBAAK,YAAY,KAAK,iBAAiB,aAAY,CAAE;UACzD,GAAG,GAAK;QACZ;;AAtRJ,cAAA,mCAAA;;;;;;;;;;ACxDA,UAAA,eAAA;AAGA,UAAA,iBAAA;AACA,UAAA,eAAA;AAgBA,UAAA,eAAA;AAWA,UAAa,wBAAb,cAA2C,aAAA,WAAU;;;;;;;QAmBjD,YAAmB,yBAAkD,aAAwB;AACzF,gBAAM,8BAA2D;AACjE,yBAAA,UAAU,YAAY,6BAA6B,yBAAyB;AAE5E,gBAAM,kBAAmC;AACzC,yBAAA,UAAU,YAAY,iBAAiB,iBAAiB;AAExD,yBAAA,UAAU,wBACN,4BAA4B,2BAC5B,aAAA,WAAW,aAAA,WAAW,oCAAoC,CAAC;AAE/D,gBAAM,aAAa,4BAA4B,YAAY,IAAI,aAAA,6BAA4B,CAAE;AAC7F,eAAK,yBAAyB;AAC9B,eAAK,sBAAsB;QAC/B;QAEA,IAAW,4BAAyB;AAChC,yBAAA,UAAU,gBAAgB,KAAK,sBAAsB;AAErD,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,oCAAoC;QACtF;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,qBAAkB;AACzB,iBAAO,KAAK,WAAW,YAAY,aAAA,WAAW,gCAAgC;QAClF;QAEA,IAAW,mBAAmB,OAAa;AACvC,yBAAA,UAAU,wBAAwB,OAAO,OAAO;AAChD,eAAK,WAAW,YAAY,aAAA,WAAW,kCAAkC,KAAK;QAClF;QAEA,IAAW,aAAa,GAAe;AACnC,yBAAA,UAAU,uBAAuB,GAAG,cAAc;AAClD,eAAK,sBAAsB;AAC3B,eAAK,mBAAmB;QAC5B;QAEO,sBAAmB;AACtB,yBAAA,UAAU,uBAAuB,KAAK,kBAAkB,cAAc;AACtE,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,QAAQ,GAAU;AACzB,yBAAA,UAAU,uBAAuB,GAAG,SAAS;AAC7C,eAAK,sBAAsB;AAC3B,eAAK,cAAc;QACvB;QAEO,iBAAc;AACjB,yBAAA,UAAU,uBAAuB,KAAK,aAAa,SAAS;AAC5D,iBAAO,KAAK,YAAY;QAC5B;QAEO,sBAAmB;AACtB,iBAAO,KAAK;QAChB;QAEO,gCAAgC,IAAiB,KAAyB;AAC7E,uBAAA,0BAA0B,KAAK,oCAAoC,aAAA,gBAAgB,YAAY,GAAG,IAAI,GAAG;QAC7G;QAEO,+BAA+B,IAAiB,KAAyB;AAC5E,uBAAA,0BAA0B,KAAK,mCAAkC,GAAI,IAAI,GAAG;QAChF;QAEO,MAAM,QAAK;AACd,cAAI,CAAC,KAAK,wBAAwB;AAC9B,kBAAM,KAAK,QAAQ,IAAI;;QAE/B;;QAGO,MAAM,sBAAsB,kBAAoC,SAAe;AAClF,gBAAM,OAAQ,KAAK;AACnB,yBAAA,UAAU,uBAAuB,MAAM,mBAAmB;AAC1D,gBAAM,KAAK,qBAAqB,kBAAkB,OAAO;QAC7D;;QAGO,MAAM,iBAAiB,aAA0B,SAAe;AACnE,gBAAM,OAAQ,KAAK;AACnB,yBAAA,UAAU,uBAAuB,MAAM,mBAAmB;AAC1D,gBAAM,KAAK,4BAA4B,aAAa,OAAO;QAC/D;QAEO,MAAM,qBAAkB;AAC3B,gBAAM,kBAAkB,KAAK;AAC7B,gBAAMC,UAAgC,MAAM,gBAAgB;AAC5D,gBAAM,WAAWA,QAAO;AACxB,cAAI,aAAa,GAAG;AAChB,gBAAI,KAAK,WAAW,YAAY,wCAAwC,OAAO,EAAE,YAAW,MAAO,QAAQ;AACvG,oBAAM,IAAI,MAAM,gKAAgK;;qBAE7K,aAAa,GAAG;AACvB,kBAAM,IAAI,MAAM,6CAA6C,QAAQ,gBAAgB;;AAEzF;QACJ;QAEO,wBAAwB,aAA+B;AAC1D,eAAK,sBAAsB;AAC3B,eAAK,WAAW,CAAC,GAAQ,MAAkC;AACvD,gBAAI,CAAC,CAAC,YAAY,UAAU;AACxB,0BAAY,SAAS,aAAa,CAAC;;UAE3C;AACA,eAAK,cAAc,CAAC,GAAQ,MAAuC;AAC/D,gBAAI,CAAC,CAAC,YAAY,cAAc;AAC5B,0BAAY,aAAa,aAAa,CAAC;;UAE/C;AACA,eAAK,aAAa,CAAC,GAAQ,MAAuC;AAC9D,gBAAI,CAAC,CAAC,YAAY,aAAa;AAC3B,0BAAY,YAAY,aAAa,CAAC;;UAE9C;AACA,eAAK,iBAAiB,CAAC,GAAQ,MAA6B;AACxD,gBAAI,CAAC,CAAC,YAAY,gBAAgB;AAC9B,0BAAY,eAAe,aAAa,CAAC;;UAEjD;AACA,eAAK,iBAAiB,CAAC,GAAQ,MAA6B;AACxD,gBAAI,CAAC,CAAC,YAAY,gBAAgB;AAC9B,0BAAY,eAAe,aAAa,CAAC;;UAEjD;QACJ;QAEO,sBAAmB;AACtB,eAAK,WAAW;AAChB,eAAK,cAAc;AACnB,eAAK,aAAa;AAClB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;QAC1B;;;;;;;;QASU,MAAM,QAAQ,WAAkB;AACtC,cAAI,KAAK,wBAAwB;AAC7B;;AAGJ,cAAI,WAAW;AACX,iBAAK,yBAAyB;AAC9B,kBAAM,KAAK,mBAAkB;;AAGjC,gBAAM,MAAM,QAAQ,SAAS;QACjC;QAEU,uBAAuB,cAAiC;AAC9D,iBAAO,IAAI,aAAA,iBACP,cACA,KAAK,UAAU;QACvB;QAEU,wBACN,gBACA,mBACA,aACA,kBAAkC;AAClC,gBAAM,aAA8B;AACpC,iBAAO,IAAI,aAAA,+BAA+B,gBAAgB,mBAAmB,YAAY,kBAAkB,IAAI;QACnH;;AAhMJ,cAAA,wBAAA;;;;;;;;;AC9BA,UAAA,2BAAA;AAAS,aAAA,eAAA,SAAA,uBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,yBAAA;MAAmB,EAAA,CAAA;AAC5B,UAAA,oCAAA;AAAS,aAAA,eAAA,SAAA,gCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,kCAAA;MAA4B,EAAA,CAAA;AACrC,UAAA,wCAAA;AAAS,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sCAAA;MAA6B,EAAA,CAAA;AACtC,UAAA,6BAAA;AAAS,aAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,2BAAA;MAAqB,EAAA,CAAA;AAC9B,UAAA,uCAAA;AACI,aAAA,eAAA,SAAA,4CAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAAwC,EAAA,CAAA;AACxC,aAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAAiB,EAAA,CAAA;AACjB,aAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAAgB,EAAA,CAAA;AAChB,aAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAA6B,EAAA,CAAA;AAC7B,aAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAAoB,EAAA,CAAA;AACpB,aAAA,eAAA,SAAA,6BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,qCAAA;MAAyB,EAAA,CAAA;AAC7B,UAAA,wCAAA;AAEI,aAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sCAAA;MAAkC,EAAA,CAAA;AAClC,aAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sCAAA;MAAkC,EAAA,CAAA;AAGlC,aAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,sCAAA;MAAoB,EAAA,CAAA;;;;;;;;;;ACfxB,UAAY;AAAZ,OAAA,SAAYC,eAAY;AACpB,QAAAA,cAAA,cAAA,IAAA;AACA,QAAAA,cAAA,UAAA,IAAA;AACA,QAAAA,cAAA,QAAA,IAAA;AACA,QAAAA,cAAA,kBAAA,IAAA;AACA,QAAAA,cAAA,YAAA,IAAA;AACA,QAAAA,cAAA,cAAA,IAAA;MACJ,GAPY,eAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;AAgCxB,UAAa,yBAAb,MAAa,wBAAsB;QAG/B,YAAoB,MAAY;AAC5B,eAAK,6BAA6B,KAAK,MAAM,IAAI;QACrD;QAEO,OAAO,SAAS,MAAY;AAC/B,iBAAO,IAAI,wBAAuB,IAAI;QAC1C;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK,2BAA2B;QAC3C;;AAbJ,cAAA,yBAAA;;;;;;;;;;AChCA,UAAA,eAAA;AAEA,UAAaC,wBAAb,cAA0C,aAAA,cAAa;QAGnD,YAAmB,WAAmB,WAAmB,YAAuB,aAAA,UAAU,MAAI;AAC1F,gBAAM,WAAW,SAAS;AAE1B,eAAK,gBAAgB;QACzB;QAEA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;;AAXJ,cAAA,uBAAAA;AAcA,UAAa,0BAAb,cAA6CA,sBAAoB;QAI7D,YAAmB,WAAmB,2BAAmC,wBAA8B;AACnG,gBAAM,2BAA2B,SAAS;AAE1C,eAAK,gCAAgC;AACrC,eAAK,6BAA6B;QACtC;QAEA,IAAW,4BAAyB;AAChC,iBAAO,KAAK;QAChB;QAEA,IAAW,yBAAsB;AAC7B,iBAAO,KAAK;QAChB;;AAjBJ,cAAA,0BAAA;AAoBA,UAAa,oCAAb,cAAuDA,sBAAoB;QAGvE,YAAmB,WAAmB,kBAAwB;AAC1D,gBAAM,qCAAqC,SAAS;AACpD,eAAK,uBAAuB;QAChC;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;;AAVJ,cAAA,oCAAA;AAaA,UAAa,wBAAb,cAA2CA,sBAAoB;QAG3D,YAAmB,WAAmB,kBAAwB;AAC1D,gBAAM,yBAAyB,SAAS;AAExC,eAAK,uBAAuB;QAChC;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;;AAXJ,cAAA,wBAAA;;;;;;;;;;ACnDA,UAAA,eAAA;AAOA,UAAA,yBAAA;AACA,UAAA,eAAA;AAMA,UAAA,8BAAA;AACA,UAAA,uBAAA;AAwBA,UAAa,gBAAb,MAAa,eAAa;QAqFtB,cAAA;AAxBQ,eAAA,iBAA0B;AAE1B,eAAA,qBAA8B;AAC9B,eAAA,uBAAgC;AAChC,eAAA,oBAA4B;AAI5B,eAAA,aAAsB;AAKtB,eAAA,iBAAyB;AACzB,eAAA,0BAAkC;AAClC,eAAA,qBAA6B;AAC7B,eAAA,8BAAsC;AAS1C,eAAK,gBAAgB,aAAA,iBAAgB;AACrC,eAAK,mBAAmB,IAAI,aAAA,SAAQ;AAGpC,eAAK,iBAAiB,QAAO;QACjC;QAzFA,IAAW,YAAS;AAChB,iBAAO,KAAK;QAChB;QAEA,IAAW,WAAQ;AACf,iBAAO,KAAK;QAChB;QAEA,IAAW,SAAS,OAAa;AAC7B,eAAK,eAAe;QACxB;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK;QAChB;QAEA,IAAW,kBAAkBC,SAA6B;AACtD,eAAK,wBAAwBA;QACjC;QAEA,IAAW,wBAAqB;AAC5B,iBAAO,KAAK,iBAAiB;QACjC;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;QAEA,IAAW,iBAAc;AACrB,iBAAO,KAAK;QAChB;QAEA,IAAW,oBAAiB;AACxB,iBAAO,KAAK;QAChB;QAEA,IAAW,wBAAqB;AAC5B,iBAAO,KAAK;QAChB;;QAGA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QAEA,IAAW,kBAAe;AACtB,cAAI,CAAC,CAAC,KAAK,eAAe;AACtB,kBAAM,aAAa,IAAI,aAAA,mBAAkB;AACzC,uBAAW,YAAY,aAAA,WAAW,iCAAiC,KAAK,aAAa;AACrF,mBAAO;;AAGX,iBAAO;QACX;QAkCO,MAAM,sBAAmB;AAC5B,cAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,mBAAO,QAAQ,QAAQ,KAAK,iBAAiB;;AAEjD,cAAI,CAAC,KAAK,sBAAsB;AAC5B,mBAAO;;AAEX,gBAAM,KAAK,uBAAsB;AACjC,iBAAO,QAAQ,QAAQ,KAAK,iBAAiB;QACjD;QAEO,MAAM,gCAA6B;AACtC,cAAI,CAAC,CAAC,KAAK,6BAA6B;AACpC,mBAAO,KAAK;;AAEhB,cAAI,CAAC,KAAK,sBAAsB;AAC5B,mBAAO;;AAEX,cAAI,KAAK,kBAAkB,WAAW;AAClC,kBAAM,QAAqB,MAAM,KAAK,oBAAmB;AACzD,iBAAK,8BAA8B,KAAK,kBAAkB,UAAU,KAAK;AACzE,mBAAO,KAAK;iBACT;AACH,mBAAO,KAAK,oBAAmB;;QAEvC;QAEO,kBAAkB,WAAmB,SAAiBC,SAAiB,kBAAoC;AAC9G,eAAK,uBAAuB;AAC5B,eAAK,qBAAqB;AAC1B,eAAK,gBAAgB;AACrB,eAAK,cAAc;AACnB,eAAK,aAAaA;AAClB,eAAK,wBAAwB,IAAI,uBAAA,0BAAyB;AAC1D,eAAK,sBAAsB,SAAS,KAAK;AACzC,eAAK,oBAAoB;AACzB,eAAK,8BAA8B;AACnC,eAAK,oBAAoB;AACzB,eAAK,iBAAiB;AACtB,eAAK,0BAA0B;AAC/B,eAAK,qBAAqB;AAC1B,eAAK,8BAA8B;AACnC,eAAK,6BAA6B;AAClC,eAAK,gBAAgB;AACrB,cAAI,qBAAqB,QAAW;AAChC,iBAAK,2BAA2B;AAChC,iBAAK,yBAAyB,SAAS,KAAK;;AAEhD,eAAK,QAAQ,IAAI,qBAAA,wBAAwB,KAAK,WAAW,QAAW,qBAAqB,SAAY,SAAY,iBAAiB,GAAE,CAAE,CAAC;QAC3I;QAEO,qBAAqB,kBAAwB;AAChD,eAAK,uBAAuB;AAC5B,eAAK,QAAQ,IAAI,qBAAA,kCAAkC,KAAK,eAAe,KAAK,oBAAoB,CAAC;QACrG;QAEO,gBAAgB,SAAgB;AACnC,cAAI,SAAS;AACT,iBAAK,WAAU;;QAEvB;QAEO,+BAA+B,YAAkB;AACpD,cAAI,eAAe,KAAK;AACpB,iBAAK,QAAQ,IAAI,qBAAA,sBAAsB,KAAK,WAAW,KAAK,oBAAoB,CAAC;AACjF,iBAAK,oBAAoB;AACzB;qBACO,eAAe,KAAK;AAC3B,iBAAK,WAAU;;QAEvB;QAEO,yBAAyB,cAAoB;AAChD,gBAAM,WAA+B,KAAK,MAAM,YAAY;AAC5D,eAAK,WAAW,SAAS,MAAM;QACnC;QAEO,2BAAwB;AAC3B,eAAK,aAAa;AAClB,eAAK,iBAAiB,QAAO;AAC7B,eAAK,WAAU;QACnB;QAEO,2BAA2B,cAAoB;AAClD,cAAI,CAAC,CAAC,KAAK,oBAAoB,CAAC,CAAC,KAAK,YAAY;AAE9C,iBAAK,iBAAiB,OAAO,gDAAgD;AAG7E,iBAAK,iBAAiB,QAAQ,KAAI,EAAG,MAAM,MAAW;YAAG,CAAC;;AAE9D,eAAK,aAAa;AAClB,eAAK,mBAAmB,IAAI,aAAA,SAAQ;AACpC,gBAAM,WAA+B,KAAK,MAAM,YAAY;AAC5D,cAAI,CAAC,CAAC,SAAS,QAAQ;AACnB,iBAAK,gBAAgB,SAAS,OAAO;;QAE7C;QAEO,qBAAqB,MAAiB;AACzC,cAAI,KAAK,gBAAgB;AACrB,iBAAK,sBAAsB,MAAM,IAAI;AACrC,iBAAK,qBAAqB,KAAK;AAC/B,gBAAI,KAAK,6BAA6B,QAAW;AAC7C,mBAAK,yBAAyB,MAAM,IAAI;;;QAGpD;QAEO,oBAAoB,UAA4B;AACnD,eAAK,iBAAiB,SAAS,KAAK,KAAK,MAAM,SAAS,IAAI;QAChE;QAEO,yBAAyB,UAA4B;AACxD,cAAI,SAAS,KAAK,mBAAmB,QAAW;AAC5C,iBAAK,8BAA8B,SAAS,KAAK;;QAEzD;QAEO,aAAa,UAA4B;AAC5C,eAAK,oBAAoB,SAAS,KAAK;QAC3C;QAEO,MAAM,2BAAwB;AACjC,gBAAM,cAA2B,MAAM,KAAK,8BAA6B;AACzE,iBAAO,IAAI,aAAA,sBACP,KAAK,WACL,aAAA,aAAa,4BACb,aACA,QACA,KAAK,iBACL,KAAK,aAAa;QAE1B;QAEO,UAAO;AACV,cAAI,CAAC,KAAK,gBAAgB;AAEtB,iBAAK,iBAAiB;;QAE9B;QAEO,qBAAkB;AACrB,eAAK,WAAU;QACnB;;;;;QAMO,6BAA0B;AAC7B,gBAAM,YAAoB,KAAK;AAC/B,eAAK,6BAA6B;AAClC,iBAAO;QACX;QAEU,QAAQ,OAA2B;AACzC,uBAAA,OAAO,SAAS,QAAQ,KAAK;QACjC;;;;;;QAOQ,OAAO,SAAS,MAAY;AAChC,iBAAO,KAAK,UAAU,KAAK,KAAK,CAAC,MAAM,OAAO,KAAK,KAAK,SAAS,CAAC,MAAM;QAC5E;QAEQ,iBAAiB,MAAc,MAAkB;AACrD,cAAI,SAAS,4BAAA,aAAa,cAAc;AACpC,iBAAK,iBAAiB,KAAK,YAAY,QAAQ,MAAM,KAAK,uBAAuB;AACjF,gBAAI,KAAK,kBAAkB,GAAG;AAC1B,mBAAK,0BAA0B,KAAK,iBAAiB,KAAK;AAC1D,kBAAI,KAAK,YAAY;AACjB,oBAAI,KAAK,aAAa,KAAK,cAAc,KAAK,CAAC,eAAc,SAAS,IAAI,GAAG;AACzE,uBAAK,iBAAiB,MAAM,IAAI;;;;iBAIzC;AACH,iBAAK,qBAAqB,KAAK,YAAY,QAAQ,MAAM,KAAK,2BAA2B;AACzF,gBAAI,KAAK,sBAAsB,GAAG;AAC9B,mBAAK,8BAA8B,KAAK,qBAAqB,KAAK;AAClE,kBAAI,KAAK,YAAY;AACjB,oBAAI,KAAK,aAAa,KAAK,kBAAkB,KAAK,CAAC,eAAc,SAAS,IAAI,GAAG;AAC7E,uBAAK,iBAAiB,MAAM,IAAI;;;;;QAKpD;QAEQ,aAAU;AACd,cAAI,KAAK,oBAAoB;AACzB,iBAAK,qBAAqB;AAC1B,iBAAK,uBAAuB;AAC5B,iBAAK,sBAAsB,MAAK;AAChC,iBAAK,aAAa;AAClB,gBAAI,KAAK,6BAA6B,QAAW;AAC7C,mBAAK,yBAAyB,MAAK;AACnC,mBAAK,2BAA2B;;;QAG5C;QAEQ,MAAM,yBAAsB;AAChC,cAAI,KAAK,sBAAsB;AAC3B,iBAAK,oBAAoB,IAAI,YAAY,KAAK,aAAa;AAC3D,gBAAI;AACA,oBAAM,KAAK,sBAAsB,KAAK,KAAK,iBAAiB;qBACvD,GAAG;AACR,mBAAK,oBAAoB,IAAI,YAAY,CAAC;;;QAGtD;;;;;;QAOQ,aAAa,KAAW;AAC5B,iBAAO,KAAK,YAAY,QAAQ,KAAK,MAAM,CAAC,IAAI,KAAK,YAAY,QAAQ,KAAK,MAAM,CAAC;QACzF;;AA7TJ,cAAA,gBAAA;;;;;;;;;;ACvCA,UAAA,eAAA;AAeA,UAAA,eAAA;AAYA,UAAA,eAAA;AAYA,UAAA,wCAAA;AAEA,UAAsB,uBAAtB,MAA0C;QA0EtC,YACI,gBACA,mBACA,mBACA,kBAAmC;AAtD7B,eAAA,gBAA4H;AAc5H,eAAA,yBAAqC;AAErC,eAAA,sBAAyD;AAEzD,eAAA,2BAA8E;AAiBhF,eAAA,qCAA2D;AAqB/D,cAAI,CAAC,gBAAgB;AACjB,kBAAM,IAAI,aAAA,kBAAkB,gBAAgB;;AAGhD,cAAI,CAAC,mBAAmB;AACpB,kBAAM,IAAI,aAAA,kBAAkB,mBAAmB;;AAGnD,cAAI,CAAC,mBAAmB;AACpB,kBAAM,IAAI,aAAA,kBAAkB,mBAAmB;;AAGnD,eAAK,qBAAqB;AAC1B,eAAK,wBAAwB;AAC7B,eAAK,wBAAwB;AAC7B,eAAK,iBAAiB;AACtB,eAAK,8BAA8B;AACnC,eAAK,oBAAoB,IAAI,aAAA,cAAa;AAC1C,eAAK,uBAAuB,IAAI,aAAA,YAAW;AAC3C,eAAK,oBAAoB,IAAI,aAAA,YAAW;AACxC,eAAK,uBAAuB,IAAI,aAAA,iBAAgB;AAChD,eAAK,kBAAkB,IAAI,aAAA,YAAW;AAEtC,eAAK,iBAAiB,OAAO,CAAC,oBAA0C;AACpE,gBAAI,gBAAgB,SAAS,yBAAyB;AAClD,oBAAM,wBAAwB;AAC9B,kBAAI,sBAAsB,eAAe,KAAM;AAC3C,qBAAK,qBAAqB,aAAA,mBAAmB,OACzC,sBAAsB,eAAe,OAAO,aAAA,sBAAsB,uBAAuB,aAAA,sBAAsB,mBAC/G,GAAG,sBAAsB,MAAM,0BAA0B,sBAAsB,UAAU,EAAE;;;UAG3G,CAAC;QACL;QAzGA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;QAEA,IAAW,gBAAa;AACpB,iBAAO,KAAK;QAChB;QASA,IAAW,iBAAiB,gBAAsB;AAC9C,eAAK,uBAAuB;QAChC;QACA,IAAW,mBAAgB;AACvB,iBAAO,KAAK;QAChB;QAQA,IAAW,kBAAkBC,SAA6B;AACtD,eAAK,wBAAwBA;AAC7B,eAAK,kBAAkB,oBAAoBA;AAC3C,cAAI,KAAK,gCAAgC,QAAW;AAChD,iBAAK,4BAA4B,SAASA;;AAE9C,cAAI,KAAK,qBAAqB,QAAW;AACrC,iBAAK,iBAAiB,oBAAoBA;;QAElD;QA8DO,aAAU;AACb,iBAAO,KAAK;QAChB;QAEO,MAAM,QAAQ,QAAe;AAChC,eAAK,iBAAiB;AACtB,cAAI,KAAK,gCAAgC,QAAW;AAChD,iBAAK,4BAA4B,MAAK;;AAE1C,cAAI,KAAK,uCAAuC,QAAW;AACvD,kBAAM,aAA0B,MAAM,KAAK;AAC3C,kBAAM,WAAW,QAAQ,MAAM;;QAEvC;QAEO,MAAM,UAAO;AAChB,gBAAM,KAAK,YAAW;QAC1B;QAEO,MAAM,mBAAmB,MAAc,SAA6B;AACvE,gBAAM,OAAoB,OAAO,YAAY,WAAW,aAAA,YAAY,OAAO,aAAA,YAAY;AACvF,gBAAM,cAAsB,OAAO,YAAY,WAAW,qBAAqB;AAE/E,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBAAwB,MAAM,MAAM,KAAK,kBAAkB,WAAW,aAAa,OAAO,CAAC;QAC1H;QAEO,MAAM,MACT,MACAC,SACA,WACA,iBACA,eACA,kBAAmC;AAGnC,cAAI;AAEJ,cAAIA,SAAQ;AACR,mBAAO;iBACJ;AACH,mBAAO,KAAK,gBAAgB,UAAU,IAAI;;AAG9C,cAAI,KAAK,kBAAkB,QAAW;AAClC,mBAAO,KAAK,cAAc,MAAM,WAAW,iBAAiB,aAAa;;AAG7E,eAAK,sBAAsB;AAC3B,eAAK,oBAAoB;AAEzB,eAAK,kBAAkB,kBAAkB,WAAW,MAAMA,SAAQ,gBAAgB;AAElF,cAAI;AACA,kBAAM,KAAK,YAAW;AACtB,kBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,kBAAM,KAAK,qBAAqB,UAAU;AAC1C,kBAAM,KAAK,gBAAgB,YAAY,MAAM,SAAS;AACtD,iBAAK,mBAAmB,SAAS;AAEjC,iBAAK,KAAK,eAAc;mBACnB,GAAG;AACR,iBAAK,qBAAqB,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,mBAAmB,CAAW;AACxG,mBAAO,QAAQ,OAAO,CAAC;;QAE/B;QAEO,MAAM,eAAY;AACrB,gBAAM,KAAK,YAAW;AACtB,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAE1D,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,qBACA,KAAK,kBAAkB,WACvB,oBACA,KAAK,UAAU;YACX,QAAQ;WACX,CAAC,CACL;QACL;;QAGU,gBACN,WACA,qBACA,WACA,OAAa;AACb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAC1F,gBAAM,SAAgC,IAAI,aAAA,sBACtC,WACA,aAAA,aAAa,UACb,QACA,OACA,UAAU;AAGd,eAAK,qBAAqB,MAAM;AAEhC,cAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,gBAAI;AACA,mBAAK,oBAAoB,MAAM;oBAE3B;YAAA;;QAEhB;;QAGU,qBACN,oBACA,WACA,OAAa;AAEb,cAAI,CAAC,CAAC,KAAK,kBAAkB,gBAAgB;AACzC,iBAAK,kBAAkB,mBAAkB;AAEzC,iBAAK,gBACD,KAAK,kBAAkB,WACvB,oBACA,WACA,KAAK;;QAEjB;;QAGU,4BAA4B,oBAA2C;AAC7E,iBAAO;QACX;QAEU,MAAM,iBAAc;AAC1B,cAAI;AACA,kBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,kBAAM,UAA6B,MAAM,WAAW,KAAI;AAExD,gBAAI,KAAK,2BAA2B,QAAW;AAC3C,qBAAO,KAAK,uBAAsB;;AAEtC,gBAAI,KAAK,gBAAgB;AAErB;;AAIJ,gBAAI,CAAC,SAAS;AACV,kBAAI,CAAC,KAAK,kBAAkB,gBAAgB;AACxC;qBACG;AACH,uBAAO,KAAK,eAAc;;;AAKlC,kBAAM,oBAAoB,sCAAA,wBAAwB,sBAAsB,OAAO;AAE/E,gBAAI,kBAAkB,UAAU,YAAW,MAAO,KAAK,kBAAkB,UAAU,YAAW,GAAI;AAC9F,sBAAQ,kBAAkB,KAAK,YAAW,GAAI;gBAC1C,KAAK;AACD,uBAAK,kBAAkB,2BAA2B,kBAAkB,QAAQ;AAC5E;gBACJ,KAAK;AACD,uBAAK,kBAAkB,yBAAyB,kBAAkB,QAAQ;AAC1E;gBACJ,KAAK;AACD,sBAAI,KAAK,kBAAkB,SAAS,YAAW,MAAO,kBAAkB,SAAS,YAAW,KACrF,CAAC,CAAC,kBAAkB,YAAY;AACnC,yBAAK,kBAAkB,qBAAqB,kBAAkB,UAAU;AACxE,yBAAK,eAAe,kBAAkB,UAAU;AAChD,wBAAI,KAAK,gCAAgC,QAAW;AAChD,2BAAK,4BAA4B,MAAM,kBAAkB,UAAU;;;AAG3E;gBACJ,KAAK;AACD,wBAAM,eAAe,aAAA,uBAAuB,SAAS,kBAAkB,QAAQ,EAAE;AACjF,6BAAW,YAAY,cAAc;AACjC,4BAAQ,SAAS,MAAM;sBACnB,KAAK,aAAA,aAAa;sBAClB,KAAK,aAAA,aAAa;AACd,6BAAK,kBAAkB,oBAAoB,QAAQ;AACnD,8BAAM,wBAA8D,IAAI,aAAA,qCACpE,SAAS,KAAK,QACd,SAAS,KAAK,UACd,SAAS,KAAK,KAAK,MACnB,SAAS,KAAK,KAAK,QACnB,SAAS,SAAS,aAAA,aAAa,eACzB,KAAK,kBAAkB,oBAAoB,KAAK,kBAAkB,uBACxE,SAAS,KAAK,KAAK,YAAY;AACnC,6BAAK,eAAe,qBAAqB;AACzC;sBACJ,KAAK,aAAA,aAAa;AACd,8BAAM,oBAAsD,IAAI,aAAA,iCAC5D,SAAS,KAAK,QACd,SAAS,KAAK,QAAQ;AAC1B,6BAAK,kBAAkB,iBAAiB;AACxC;sBACJ,KAAK,aAAA,aAAa;AACd,6BAAK,kBAAkB,yBAAyB,QAAQ;AACxD,4BAAI,SAAS,KAAK,iBAAiB;AAC/B,gCAAM,kBAAkD,IAAI,aAAA,+BACxD,SAAS,KAAK,QACd,SAAS,KAAK,UACd,KAAK,kBAAkB,2BAA0B,CAAE;AACvD,+BAAK,iBAAiB,eAAe;;AAEzC;sBACJ,KAAK,aAAA,aAAa;AACd,6BAAK,cAAc,QAAQ;AAC3B;sBACJ,KAAK,aAAA,aAAa;AACd,6BAAK,kBAAkB,aAAa,QAAQ;AAC5C;;;AAGZ;gBACJ,KAAK;AACD,uBAAK,kBAAkB,yBAAwB;AAC/C,sBAAI;AACJ,sBAAI;AACA,6BAAS,MAAM,KAAK,kBAAkB,yBAAwB;AAC9D,wBAAI,CAAC,CAAC,KAAK,qBAAqB;AAC5B,2BAAK,oBAAoB,MAAM;;2BAE9B,OAAO;AACZ,wBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,2BAAK,kBAAkB,KAAe;;;AAG9C,uBAAK,qBAAqB,MAAM;AAChC;gBAEJ;AACI,sBAAI,CAAC,KAAK,4BAA4B,iBAAiB,GAAG;AAEtD,wBAAI,CAAC,CAAC,KAAK,mBAAmB;AAC1B,2BAAK,cAAc,QAAQ,IAAI,aAAA,aAAa,kBAAkB,KAAK,YAAW,GAAI,kBAAkB,QAAQ,CAAC;;;;;AAOjI,mBAAO,KAAK,eAAc;mBAErB,GAAG;;QAGhB;QAEU,qBAAqB,YAAuB;AAClD,eAAK,oCAAmC;AACxC,gBAAM,uBAAuB,KAAK,iBAAiB,OAAM;AAEzD,cAAI,sBAAsB;AACtB,mBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,qBACA,KAAK,kBAAkB,WACvB,oBACA,oBAAoB,CAAC;;AAE7B;QACJ;QAIU,kCAA+B;AACrC;QACJ;QAEU,YAAY,iBAA0B,OAAK;AACjD,cAAI,KAAK,yBAAyB,MAAM;AACpC,mBAAO,KAAK,sBAAsB,KAAK,CAAC,eAAiD;AACrF,kBAAI,WAAW,MAAK,MAAO,aAAA,gBAAgB,cAAc;AACrD,qBAAK,mBAAmB;AACxB,qBAAK,wBAAwB;AAC7B,uBAAO,KAAK,YAAW;;AAE3B,qBAAO,KAAK;YAChB,GAAG,MAA2B;AAC1B,mBAAK,mBAAmB;AACxB,mBAAK,wBAAwB;AAC7B,qBAAO,KAAK,YAAW;YAC3B,CAAC;;AAEL,eAAK,uBAAuB,aAAA,iBAAgB;AAC5C,eAAK,mBAAmB,aAAA,iBAAgB;AAExC,eAAK,kBAAkB,qBAAqB,KAAK,oBAAoB;AAErE,gBAAM,cAAc,iBAAiB,KAAK,mBAAmB,cAAc,KAAK,oBAAoB,IAAI,KAAK,mBAAmB,MAAM,KAAK,oBAAoB;AAE/J,eAAK,wBAAwB,YAAY,KAAK,OAAO,WAA0C;AAC3F,iBAAK,kBAAkB,gBAAgB,KAAK;AAE5C,kBAAM,aAA0B,KAAK,sBAAsB,OAAO,KAAK,uBAAuB,QAAQ,KAAK,gBAAgB;AAI3H,uBAAW,OAAO,OAAO,CAAC,UAAgC;AACtD,mBAAK,iBAAiB,QAAQ,KAAK;YACvC,CAAC;AACD,kBAAM,WAAW,MAAM,WAAW,KAAI;AACtC,gBAAI,SAAS,eAAe,KAAK;AAC7B,mBAAK,kBAAkB,+BAA+B,SAAS,UAAU;AACzE,qBAAO,QAAQ,QAAQ,UAAU;uBAC1B,SAAS,eAAe,OAAO,CAAC,gBAAgB;AACvD,qBAAO,KAAK,YAAY,IAAI;mBACzB;AACH,mBAAK,kBAAkB,+BAA+B,SAAS,UAAU;AACzE,qBAAO,QAAQ,OACX,yCAAyC,SAAS,UAAU;sBAC1D,KAAK,sBAAsB,WAAW,YAAY,aAAA,WAAW,2BAA2B,CAAC,YAAY,SAAS,MAAM,EAAE;;UAEpI,GAAG,CAAC,UAAuC;AACvC,iBAAK,kBAAkB,gBAAgB,IAAI;AAC3C,kBAAM,IAAI,MAAM,KAAK;UACzB,CAAC;AAKD,eAAK,sBAAsB,MAAM,MAAW;UAAG,CAAC;AAEhD,iBAAO,KAAK;QAChB;QACU,wBAAwB,YAAyB,yBAA+B;AACtF,cAAI,yBAAyB;AACzB,mBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,iBACA,KAAK,kBAAkB,WACvB,oBACA,uBAAuB,CAAC;;QAEpC;QAEU,gBAAgB,YAAyB,MAAc,WAAiB;AAC9E,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,QACA,WACA,wBACA,IAAI,CAAC;QACb;QAEQ,MAAM,kBAAe;AACzB,cAAI,KAAK,uCAAuC,QAAW;AACvD,mBAAO,KAAK,mCAAmC,KAAK,CAAC,eAAiD;AAClG,kBAAI,WAAW,MAAK,MAAO,aAAA,gBAAgB,cAAc;AACrD,qBAAK,mBAAmB;AACxB,qBAAK,qCAAqC;AAC1C,uBAAO,KAAK,gBAAe;;AAE/B,qBAAO,KAAK;YAChB,GAAG,MAA2B;AAC1B,mBAAK,mBAAmB;AACxB,mBAAK,qCAAqC;AAC1C,qBAAO,KAAK,gBAAe;YAC/B,CAAC;;AAEL,eAAK,qCAAqC,KAAK,oBAAmB;AAClE,iBAAO,MAAM,KAAK;QACtB;;QAGQ,MAAM,sBAAmB;AAC7B,gBAAM,aAA0B,MAAM,KAAK,YAAW;AACtD,cAAI,KAAK,6BAA6B,QAAW;AAC7C,mBAAO,KAAK,yBAAyB,UAAU;;AAEnD,eAAK,gCAA+B;AACpC,gBAAM,KAAK,wBAAwB,YAAY,KAAK,sBAAsB,oBAAoB,UAAS,CAAE;AACzG,iBAAO;QACX;QAEU,cAAc,WAA6B;AACjD;QACJ;QAEU,mBAAmB,YAAkB;AAC3C;QACJ;QAEU,eAAe,QAAmB;AACxC;QACJ;QAEU,qBAAqB,SAA8B;AACzD;QACJ;QAEU,qBAAqB,SAA8B;AACzD;QACJ;QAEU,eAAe,wBAA4D;AACjF;QACJ;QAEU,iBAAiB,kBAAgD;AACvE;QACJ;QAEU,kBAAkB,oBAAoD;AAC5E;QACJ;;AAzgBJ,cAAA,uBAAA;AA6BkB,2BAAA,uBAAgC;;;;;;;;;;ACtElD,UAAA,eAAA;AAOA,UAAA,eAAA;AASA,UAAa,yBAAb,cAA4C,aAAA,qBAAoB;QAI5D,YACI,gBACA,mBACA,mBACA,mBACA,cAA0B;AAG1B,gBAAM,gBAAgB,mBAClB,mBAAmB,MAAS;AAChC,eAAK,wBAAwB;AAC7B,eAAK,kBAAkB;AACvB,eAAK,mBAAmB;QAC5B;QAEU,sCAAmC;AACzC,eAAK,qBAAqB,oBAAoB,MAAS;QAC3D;QAEU,kCAA+B;AACrC,eAAK,sBAAsB,wBAAwB;YAC/C,QAAQ;cACJ,SAAS,KAAK,iBAAiB,aAAa;cAC5C,OAAO,KAAK,iBAAiB,aAAa;cAC1C,MAAM;gBACF,aAAa;kBACT,GAAG,KAAK,iBAAiB,aAAa,WAAW,aAAa;kBAC9D,GAAG,KAAK,iBAAiB,aAAa,WAAW,aAAa;;gBAElE,SAAS;kBACL,GAAG,KAAK,iBAAiB,aAAa,WAAW,SAAS;kBAC1D,GAAG,KAAK,iBAAiB,aAAa,WAAW,SAAS;;;cAGlE,YAAY;gBACR,QAAQ,KAAK,iBAAiB,aAAa;gBAC3C,OAAO,KAAK,iBAAiB,aAAa;;;YAGlD,UAAU;cACN,MAAM;cACN,cAAc;gBACV,mBAAmB,KAAK,KAAK,sBAAsB,WAAW,YAAY,aAAA,WAAW,+BAA+B,CAAC;gBACrH,YAAY,KAAK,sBAAsB;;;YAG/C,eAAe;cACX,YAAY;gBACR,OAAO,KAAK,iBAAiB;;cAEjC,WAAW,KAAK,iBAAiB;cACjC,YAAY,KAAK,iBAAiB;cAClC,OAAO,KAAK,iBAAiB;;;QAGzC;QAGU,cAAc,UAA4B;AAChD,cAAI,CAAC,CAAC,KAAK,sBAAsB,qBAAqB;AAClD,kBAAM,kBAAmC,IAAI,aAAA,gBACzC,SAAS,KAAK,QACd,SAAS,KAAK,IAAI;AACtB,gBAAI;AACA,mBAAK,sBAAsB,oBAAoB,KAAK,uBAAuB,eAAe;qBACrF,OAAO;;;QAKxB;;AA1EJ,cAAA,yBAAA;;;;;;;;;;ACfA,UAAA,eAAA;AAUA,UAAA,eAAA;AAOA,UAAa,yBAAb,cAA4C,aAAA,qBAAoB;QAE5D,YACI,gBACA,mBACA,mBACA,mBACA,kBAAmC;AAC/B,gBAAM,gBAAgB,mBAAmB,mBAAmB,gBAAgB;AAC5E,eAAK,wBAAwB;AAC7B,eAAK,kBAAkB;QAC3B;QAEM,sCAAmC;AACzC,eAAK,qBAAqB,oBAAoB,KAAK,qBAAqB;QAC5E;QAEU,mBAAmB,WAAiB;AAC1C,gBAAM,0BAAoD,IAAI,aAAA,yBAC1D,IAAI,aAAA,sBACA,WACA,aAAA,aAAa,wBAAwB,CACxC;AAGL,cAAI,CAAC,CAAC,KAAK,sBAAsB,kBAAkB;AAC/C,iBAAK,sBAAsB,iBAAiB,KAAK,uBAAuB,uBAAuB;;QAEvG;QAEU,eAAe,OAAkB;AACvC,cAAI,CAAC,CAAC,KAAK,sBAAsB,cAAc;AAC3C,gBAAI;AACA,oBAAM,kBAAkB,KAAK,kBAAkB,kBAAkB,UAAU,KAAK;AAChF,oBAAM,KAA+B,IAAI,aAAA,yBACrC,IAAI,aAAA,sBACA,KAAK,kBAAkB,WACvB,aAAA,aAAa,mBACb,eAAe,CAAC;AACxB,mBAAK,sBAAsB,aAAa,KAAK,uBAAuB,EAAE;qBACjE,OAAO;;;QAKxB;QAEU,qBAAqB,QAA6B;AACxD,cAAI,CAAC,CAAC,KAAK,sBAAsB,mBAAmB;AAChD,kBAAM,cAAwC,IAAI,aAAA,yBAAyB,MAAM;AACjF,gBAAI;AACA,mBAAK,sBAAsB,kBAAkB,KAAK,uBAAuB,WAAW;oBAEhF;YAAA;;QAEhB;QAEU,qBAAqB,QAA6B;AACxD,cAAI,KAAK,sBAAsB,oBAAoB;AAC/C,gBAAI;AACA,mBAAK,sBAAsB,mBACvB,KAAK,uBACL,IAAI,aAAA,yBAAyB,MAAM,CAAC;qBAEnC,GAAG;;;QAKpB;QAEU,eAAe,uBAA2D;AAChF,cAAI,CAAC,CAAC,KAAK,sBAAsB,cAAc;AAC3C,gBAAI;AACA,mBAAK,sBAAsB,aAAa,KAAK,uBAAuB,qBAAqB;qBACpF,OAAO;;;QAKxB;QAEU,iBAAiB,iBAA+C;AACtE,cAAI,CAAC,CAAC,KAAK,sBAAsB,gBAAgB;AAC7C,gBAAI;AACA,mBAAK,sBAAsB,eAAe,KAAK,uBAAuB,eAAe;qBAChF,OAAO;;;QAKxB;QAEU,kBAAkB,mBAAmD;AAC3E,cAAI,CAAC,CAAC,KAAK,sBAAsB,iBAAiB;AAC9C,gBAAI;AACA,mBAAK,sBAAsB,gBAAgB,KAAK,uBAAuB,iBAAiB;qBACnF,OAAO;;;QAKxB;;AAtGJ,cAAA,yBAAA;;;;;;;;;;ACrBA,UAAA,eAAA;AAOA,UAAA,eAAA;AAGA,UAAA,6BAAA;AAEA,UAAA,mBAAA;AAOA,UAAa,uBAAb,MAAiC;QAK7B,YAAmB,QAA2B,gBAA+B;AAEzE,cAAI,WAAW,OAAO,WAAW,YAAY,aAAA,WAAW,kCAAkC,MAAS;AACnG,cAAI,CAAC,UAAU;AACX,kBAAM,SAAiB,OAAO,WAAW,YAAY,aAAA,WAAW,gCAAgC,QAAQ;AACxG,kBAAM,aAAqB,2BAAA,sBAAsB,cAAc,MAAM;AACrE,uBAAW,OAAO,WAAW,YAAY,aAAA,WAAW,8BAA8B,WAAW,MAAM,cAAc,UAAU,EAAE;;AAEjI,eAAK,UAAU,GAAG,QAAQ;AAE1B,gBAAM,UAA2B,aAAA,eAAe;AAChD,eAAK,kBAAkB,IAAI,aAAA,mBAAmB,OAAO;AACrD,eAAK,qBAAqB;QAC9B;;;;;;;;QASO,cAAc,cAAoB;AACrC,eAAK,gBAAgB,WAAW,iBAAA,YAAY,cAAc,YAAY;AACtE,iBAAO,KAAK,mBAAmB,MAAM,YAAY,EAAE,KAAK,CAAC,aAA8C;AACnG,iBAAK,gBAAgB,WAAW,SAAS,YAAY,SAAS,KAAK;AACnE,mBAAO,KAAK,gBAAgB,QAAQ,aAAA,gBAAgB,KAAK,KAAK,OAAO;UACzE,CAAC;QACL;;AAjCJ,cAAA,uBAAA;;;;;;;;;;ACfA,UAAA,eAAA;AAMA,UAAY;AAAZ,OAAA,SAAYC,uBAAoB;AAC5B,QAAAA,sBAAAA,sBAAA,UAAA,IAAA,CAAA,IAAA;AACA,QAAAA,sBAAAA,sBAAA,QAAA,IAAA,CAAA,IAAA;MACJ,GAHY,uBAAA,QAAA,yBAAA,QAAA,uBAAoB,CAAA,EAAA;AAKhC,UAAa,oBAAb,MAA8B;QAM1B,YACI,qBACA,YAA8B;AAP1B,eAAA,2BAAiD,qBAAqB;AAGvE,eAAA,gBAAyB;AAK5B,eAAK,0BAA0B,sBAAsB,sBAAsB,IAAI,aAAA,oBAAoB,IAAI,aAAA,QAAQ,IAAI,CAAC;AACpH,eAAK,iBAAiB;QAC1B;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,uBAAoB;AAC3B,iBAAO,KAAK;QAChB;QAEA,IAAW,qBAAqB,OAA2B;AACvD,eAAK,2BAA2B;QACpC;QAEA,IAAW,sBAAsB,OAA6B;AAC1D,eAAK,wBAAwB,QAAQ,YAAY;YAC7C,OAAO;;QAEf;QAEA,IAAW,sBAAmB;AAC1B,iBAAO,KAAK;QAChB;;AAjCJ,cAAA,oBAAA;;;;;;;;;;ACXA,UAAA,eAAA;AAMA,UAAa,mBAAb,MAA6B;QAA7B,cAAA;AACY,eAAA,cAA0C,CAAA;QAkDtD;;;;;;QA1CW,WAAW,aAAqB,OAAsB;AACzD,eAAK,YAAY,WAAW,IAAI;QACpC;;;;;QAMA,IAAW,kBAAkBC,SAA6B;AACtD,eAAK,wBAAwBA;QACjC;QAEO,SAAM;AACT,iBAAO,KAAK,UAAU,KAAK,WAAW;QAC1C;QAEO,oBAAoB,mBAAoC;AAC3D,gBAAM,mBAAsC,KAAK,sBAAsB,iBAAiB;AACxF,eAAK,WAAW,aAAa,gBAAgB;QACjD;QAEQ,sBAAsB,mBAAoC;AAC9D,iBAAO;YACH,OAAO;cACH,iBAAiB;gBACb,iBAAkB,CAAC,CAAC,mBAAmB;gBACvC,4BAA4B,mBAAmB,WAAW,YACtD,aAAA,WAAW,kDAAmD,CAAC,CAAC,mBAAmB,YAAa;gBACpG,yBAAyB,mBAAmB,WAAW,YACnD,aAAA,WAAW,+CAA+C,KAAK;gBACnE,mBAAmB;gBACnB,eAAgB,CAAC,CAAC,mBAAmB;gBACrC,qBAAqB,mBAAmB,WAAW,YAC/C,aAAA,WAAW,2CAA4C,CAAC,CAAC,mBAAmB,YAAa;;cAEjG,cAAc,KAAK,sBAAsB;;YAE7C,UAAU;cACN,eAAe,mBAAmB;;;QAG9C;;AAlDJ,cAAA,mBAAA;;;;;;;;;;ACNA,UAAA,eAAA;AAEA,UAAa,2BAAb,MAAqC;QAIjC,YACI,SACA,YAA8B;AAC9B,eAAK,cAAc,UAAU,UAAU,IAAI,aAAA,QAAQ,IAAI;AACvD,eAAK,iBAAiB;QAC1B;QAEA,IAAW,aAAU;AACjB,iBAAO,KAAK;QAChB;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;;AAjBJ,cAAA,2BAAA;;;;;;;;;;ACHA,UAAA,eAAA;AACA,UAAA,eAAA;AASA,UAAA,eAAA;AAUA,UAAA,eAAA;AASA,UAAA,wCAAA;AAYA,UAAa,2BAAb,cAA8C,aAAA,sBAAqB;QAM/D,YACI,gBACA,mBACA,aACA,kBACA,YAA6B;AAC7B,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,UAAU;AAClF,eAAK,wBAAwB;AAC7B,eAAK,yBAAyB;AAC9B,eAAK,mBAAmB,CAAC,UAAsE,KAAK,qBAAqB,KAAK;AAC9H,eAAK,6BAA6B,MAAqB,KAAK,KAAI;QACpE;QAEU,4BAA4B,mBAA0C;AAE5E,cAAI,YAAqB;AAEzB,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,cAAI,kBAAkB,gBAAgB,aAAA,YAAY,MAAM;AACpD,wBAAY,YAAY,aAAA,WAAW,kCAAkC,kBAAkB,QAAQ;;AAGnG,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAC1C,KAAK;AACD,oBAAM,WAA4B,KAAK,MAAM,kBAAkB,QAAQ;AACvE,kBAAI;AACJ,kBAAI,SAAS,OAAO,WAAW,YAAW,MAAO,WAAW;AACxD,yBAAS,IAAI,aAAA,yBACT,UACA,aAAA,aAAa,UACb,aAAA,sBAAsB,cACtB,SAAS,OAAO,MAAM;qBAEvB;AACH,yBAAS,IAAI,aAAA,yBACT,UACA,aAAA,aAAa,iBAAiB;;AAGtC,kBAAI,CAAC,CAAC,KAAK,oBAAoB;AAC3B,qBAAK,mBAAmB,QAAQ,MAAM;;AAE1C,0BAAY;AACZ;YACJ;AACI;;AAER,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAC7B,mBAAS,QAAQ,SAAS;AAC1B,iBAAO,SAAS;QACpB;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAC7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAE1F,cAAI,CAAC,CAAC,KAAK,oBAAoB;AAC3B,kBAAM,SAAmC,IAAI,aAAA,yBACzC;cACI,UAAU,KAAK,iBAAiB;cAChC,QAAQ,EAAE,YAAY,OAAO,QAAQ,MAAK;eAE9C,aAAA,aAAa,UACb,WACA,KAAK;AAET,gBAAI;AACA,mBAAK,mBAAmB,QAAQ,MAAM;qBACjCC,QAAO;AACZ,mBAAK,mBAAmB,OAAOA,MAAe;;;QAG1D;QAEO,MAAM,qBAAqB,OAA8B;AAC5D,eAAK,mBAAmB;AACxB,eAAK,mBAAmB,MAAM;AAC9B,cAAI,CAAC,KAAK,oBAAoB;AAC1B,iBAAK,qBAAqB,IAAI,aAAA,SAAQ;;AAE1C,eAAK,mBAAmB,oBAAmB;AAC3C,eAAK,mBAAmB,0BAA0B,KAAK,uBAAuB,MAAM;AAEpF,eAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,kBAAkB,KAAK,mBAAmB,SAAS;AAG/G,gBAAM,aAAmC,KAAK,YAAW;AAEzD,gBAAM,kBAAiC,KAAK,qBAAqB,KAAK,sBAAsB,KAAK,CAAC;AAElG,gBAAM,OAAyB,MAAM,KAAK,uBAAuB,OAAO,KAAK,mBAAmB,WAAW;AAC3G,gBAAMC,UAAgC,MAAM,KAAK,uBAAuB;AACxE,gBAAM,aAAuC,MAAM,KAAK,uBAAuB;AAE/E,gBAAM,YAAY,IAAI,aAAA,oBAAoB,MAAMA,QAAO,cAAc;AACrE,gBAAM,KAAK,mBAAmB,6BAA6B,WAAW,KAAK;AAE3E,eAAK,qBAAqB,oBAAoB,QAAQ,QAAQ,EAAE,QAAQ,WAAU;AAElF,cAAI;AACA,kBAAM;AACN,kBAAM;mBACD,KAAK;AACV,iBAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,WAAW,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,mBAAmB,GAAa;;AAGjL,gBAAM,wBAA0C,IAAI,aAAA,iBAAiB,KAAK,mBAAmB,SAAS;AAEtG,cAAI,CAAC,CAAC,KAAK,eAAe,gBAAgB;AACtC,iBAAK,eAAe,eAAe,KAAK,gBAAgB,qBAAqB;;AAGjF,eAAK,KAAK,eAAc;AACxB,gBAAM,mBAAmB,KAAK,UAAU,SAAS;AAGjD,2BAAiB,KAAK,MAAW;UAA0B,GAAG,CAAC,UAAuB;AAClF,iBAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,WAAW,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,cAAc,KAAK;UACpK,CAAC;AAED,iBAAO,KAAK,mBAAmB;QACnC;QAEQ,MAAM,qBAAqB,SAAuB;AACtD,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,gBAAM,KAAK,uBAAuB,YAAY,OAAO;QAEzD;QAEQ,MAAM,uBAAuB,YAAyB,SAAuB;AACjF,gBAAM,qBAAqB,KAAK,UAAU,OAAO;AACjD,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,mBACA,KAAK,mBAAmB,WACxB,mCACA,kBAAkB,CAAC;QAC3B;QAEQ,sBAAsB,OAA8B;AACxD,iBAAO;YACH,UAAU;cACN,eAAe;cACf,sBAAsB;;YAE1B,YAAY,MAAM;YAClB,UAAU,MAAM;;QAExB;;AAjKJ,cAAA,2BAAA;;;;;;;;;;ACzCA,UAAA,eAAA;AACA,UAAA,eAAA;AAUA,UAAA,eAAA;AAcA,UAAA,eAAA;AAYA,UAAA,wCAAA;AAuBA,UAAa,yBAAb,cAA4C,aAAA,sBAAqB;QAK7D,YACI,gBACA,mBACA,aACA,kBACA,YAA8B;AAC9B,gBAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,UAAU;AAT9E,eAAA,kBAA+B,IAAI,aAAA,YAAW;AAUlD,eAAK,yBAAyB;AAC9B,eAAK,6BAA6B,MAAqB,KAAK,KAAI;QACpE;QAEA,IAAW,mBAAmB,aAAyB;AACnD,eAAK,yBAAyB;QAClC;QAEU,4BAA4B,mBAA0C;AAE5E,cAAI,YAAqB;AAEzB,gBAAM,cAAkC,IAAI,aAAA,mBAAkB;AAC9D,cAAI,kBAAkB,gBAAgB,aAAA,YAAY,MAAM;AACpD,wBAAY,YAAY,aAAA,WAAW,kCAAkC,kBAAkB,QAAQ;;AAGnG,kBAAQ,kBAAkB,KAAK,YAAW,GAAI;YAE1C,KAAK;AACD,oBAAM,WAA4B,KAAK,MAAM,kBAAkB,QAAQ;AACvE,sBAAQ,SAAS,UAAU,YAAW,GAAI;gBACtC,KAAK;AACD,uBAAK,qBAAqB,UAAU,kBAAkB,SAAS;AAC/D;gBAEJ,KAAK;gBACL,KAAK;AACD,uBAAK,qBAAqB,UAAU,kBAAkB,SAAS;AAC/D;gBAEJ,KAAK;AACD,wBAAMC,sBAAyC,KAAK,MAAM,kBAAkB,QAAQ;AACpF,uBAAK,oBAAoBA,qBAAoB,kBAAkB,SAAS;AACxE;gBAEJ;AACI;;AAER,0BAAY;AACZ;YAEJ,KAAK;AACD,oBAAM,iBAAwC,KAAK,MAAM,kBAAkB,QAAQ;AACnF,mBAAK,sBAAsB,gBAAgB,kBAAkB,SAAS;AACtE,0BAAY;AACZ;YAEJ,KAAK;AACD,oBAAM,qBAAyC,KAAK,MAAM,kBAAkB,QAAQ;AACpF,oBAAM,SAAuC,IAAI,aAAA,6BAC7C,KAAK,qBAAqB,CAAC,CAAC,mBAAmB,aAAa,mBAAmB,WAAW,mBAAmB,mBAAmB,OAAO,UAAU,GACjJ,CAAC,CAAC,mBAAmB,aAAa,KAAK,UAAU,mBAAmB,UAAU,IAAI,QAClF,mBAAmB,OAAO,MAAM;AAEpC,kBAAI,CAAC,CAAC,KAAK,gBAAgB,MAAM,kBAAkB,SAAS,GAAG;AAC3D,qBAAK,gBAAgB,SAAuC,kBAAkB,WAAW,MAAM;;AAEnG,mBAAK,mBAAmB,cAAa;AACrC,0BAAY;AACZ;YACJ;AACI;;AAER,gBAAM,WAAW,IAAI,aAAA,SAAQ;AAC7B,mBAAS,QAAQ,SAAS;AAC1B,iBAAO,SAAS;QACpB;;QAGU,kBACN,WACA,WACA,oBACA,WACA,OAAa;AAEb,gBAAM,aAAiC,IAAI,aAAA,mBAAkB;AAE7D,qBAAW,YAAY,aAAA,mCAAmC,aAAA,sBAAsB,SAAS,CAAC;AAEtF,gBAAM,SAAuC,IAAI,aAAA,6BAC7C,aAAA,aAAa,UACb,OACA,KAAK;AAET,cAAI,CAAC,CAAC,KAAK,gBAAgB,MAAM,SAAS,GAAG;AACzC,iBAAK,gBAAgB,SAAuC,WAAW,MAAM;;QAEzF;QAEO,MAAM,cAAc,aAA+B,QAAc;AAEpE,eAAK,mBAAmB,YAAY,SAAQ;AAC5C,gBAAM,aAAmC,KAAK,YAAW;AACzD,cAAI;AACA,kBAAM,wBAAwB,IAAI,aAAA,SAAQ;AAC1C,kBAAM;AACN,kBAAM,KAAK,kBAAkB,uBAAuB,aAAa,MAAM;AACvE,iBAAK,KAAK,eAAc;AACxB,mBAAO,sBAAsB;mBACxB,KAAK;AACV,kBAAM;;QAEd;QAEO,MAAM,aAAa,SAAqB;AAC3C,eAAK,mBAAmB,QAAQ,YAAY,SAAQ;AACpD,iBAAO,KAAK,kBAAsC,SAAS,QAAQ,aAAa,OAAO;QAC3F;QAEO,MAAM,cAAc,SAAqB;AAC5C,eAAK,mBAAmB,QAAQ,YAAY,SAAQ;AACpD,iBAAO,KAAK,kBAAsC,UAAU,QAAQ,aAAa,OAAO;QAC5F;QAEO,MAAM,yBAAyB,SAAqB;AACvD,eAAK,mBAAmB,QAAQ,YAAY,SAAQ;AACpD,eAAK,wBAAwB,QAAQ;AACrC,iBAAO,KAAK,kBAAgD,SAAS,QAAQ,aAAa,OAAO;QACrG;QAEO,MAAM,eAAe,aAA6B;AACrD,eAAK,mBAAmB,YAAY,SAAQ;AAC5C,iBAAO,KAAK,kBAAkD,SAAS,WAAW;QACtF;QAEO,MAAM,qBAAqB,aAA+B,MAAY;AACzE,eAAK,mBAAmB,YAAY,SAAQ;AAE5C,gBAAM,aAAmC,KAAK,YAAW;AACzD,cAAI;AACA,kBAAM,qBAAqB,IAAI,aAAA,SAAQ;AACvC,kBAAM;AACN,kBAAM,KAAK,mBAAmB,oBAAoB,aAAa,IAAI;AACnE,iBAAK,KAAK,eAAc;AACxB,mBAAO,mBAAmB;mBACrB,KAAK;AACV,kBAAM;;QAEd;QAEO,MAAM,cAAc,SAAqB;AAC5C,eAAK,mBAAmB,QAAQ,YAAY,SAAQ;AACpD,gBAAM,qBAAqB,IAAI,aAAA,SAAQ;AACvC,eAAK,mBAAmB,oBAAmB;AAC3C,eAAK,mBAAmB,0BAA0B,KAAK,uBAAuB,MAAM;AAEpF,eAAK,qBAAqB,WAAW,YAAY,aAAA,WAAW,kBAAkB,KAAK,mBAAmB,SAAS;AAG/G,gBAAM,aAAmC,KAAK,YAAW;AAEzD,gBAAM,kBAAiC,KAAK,qBAAqB,SAAS,kBAAkB;AAE5F,gBAAM,OAAyB,MAAM,KAAK,uBAAuB,OAAO,KAAK,mBAAmB,WAAW;AAC3G,gBAAMC,UAAgC,MAAM,KAAK,uBAAuB;AACxE,gBAAM,aAAuC,MAAM,KAAK,uBAAuB;AAE/E,gBAAM,YAAY,IAAI,aAAA,oBAAoB,MAAMA,QAAO,cAAc;AACrE,gBAAM,KAAK,mBAAmB,6BAA6B,WAAW,KAAK;AAE3E,eAAK,qBAAqB,oBAAoB,QAAQ,QAAQ,EAAE,QAAQ,WAAU;AAElF,cAAI;AACA,kBAAM;AACN,kBAAM;mBACD,KAAK;AACV,iBAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,WAAW,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,mBAAmB,GAAa;;AAGjL,gBAAM,wBAA0C,IAAI,aAAA,iBAAiB,KAAK,mBAAmB,SAAS;AAEtG,cAAI,CAAC,CAAC,KAAK,eAAe,gBAAgB;AACtC,iBAAK,eAAe,eAAe,KAAK,gBAAgB,qBAAqB;;AAGjF,eAAK,KAAK,eAAc;AACxB,gBAAM,mBAAmB,KAAK,UAAU,SAAS;AAGjD,2BAAiB,KAAK,MAAW;UAA0B,GAAG,CAAC,UAAuB;AAClF,iBAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,WAAW,aAAA,mBAAmB,OAAO,aAAA,sBAAsB,cAAc,KAAK;UACpK,CAAC;AAED,iBAAO,mBAAmB;QAC9B;QAEQ,MAAM,qBAAqB,SAAuB,oBAA0D;AAChH,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,eAAK,mBAAmB,gBAAe;AACvC,eAAK,gBAAgB,IAAkC,KAAK,mBAAmB,WAAW,kBAAkB;AAC5G,gBAAM,KAAK,gBAAgB,YAAY,UAAU,KAAK,aAAa,QAAQ,WAAW,GAAG,OAAO;QACpG;QAEQ,MAAM,mBAAmB,oBAAwD,aAA+B,QAAc;AAClI,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,eAAK,mBAAmB,gBAAe;AACvC,eAAK,gBAAgB,IAA8B,KAAK,mBAAmB,WAAW,kBAAkB;AACxG,gBAAM,WAAW,KAAK,aAAa,WAAW;AAE9C,gBAAM,uBAAsC;YACxC;YACA;;AAEJ,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,2BACA,KAAK,mBAAmB,WACxB,mCACA,KAAK,UAAU,oBAAoB,CAAC,CAAC;QAC7C;QAEQ,MAAM,kBAAkB,uBAA2C,aAA+B,QAAc;AAEpH,gBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,eAAK,mBAAmB,gBAAe;AACvC,eAAK,gBAAgB,IAAc,KAAK,mBAAmB,WAAW,qBAAqB;AAC3F,gBAAM,WAAW,gBAAgB,aAAA,iBAAiB,gCAAgC,kCAC9E,gBAAgB,aAAA,iBAAiB,8BAA8B,gCAAgC;AAEnG,gBAAM,uBAAsC;YACxC;YACA,QAAQ;YACR;;AAEJ,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,0BACA,KAAK,mBAAmB,WACxB,mCACA,KAAK,UAAU,oBAAoB,CAAC,CAAC;QAC7C;QAEQ,MAAM,kBAAqB,WAAmB,aAA+B,UAAwB,QAAS;AAElH,gBAAM,aAAmC,KAAK,YAAW;AACzD,cAAI;AACA,kBAAM,WAAW,IAAI,aAAA,SAAQ;AAC7B,iBAAK,mBAAmB,gBAAe;AACvC,kBAAM;AACN,kBAAM,aAA0B,MAAM,KAAK,gBAAe;AAC1D,iBAAK,gBAAgB,IAAO,KAAK,mBAAmB,WAAW,QAAQ;AACvE,kBAAM,KAAK,gBAAgB,YAAY,WAAW,KAAK,aAAa,WAAW,GAAG,OAAO;AACzF,iBAAK,KAAK,eAAc;AACxB,mBAAO,SAAS;mBACX,KAAK;AACV,kBAAM;;QAEd;QAEQ,MAAM,gBAAgB,YAAyB,WAAmB,UAAkB,SAAqB;AAC7G,gBAAM,iBAAoF;YACtF;;AAEJ,cAAI,CAAC,CAAC,SAAS;AACX,2BAAe,aAAa,CAAE,QAAQ,SAAS;iBAC5C;AACH,2BAAe,cAAc;;AAEjC,iBAAO,WAAW,KAAK,IAAI,sCAAA,wBACvB,aAAA,YAAY,MACZ,mBAAmB,SAAS,IAC5B,KAAK,mBAAmB,WACxB,mCACA,KAAK,UAAU,cAAc,CAAC,CAAC;QACvC;QAEQ,sBAAsB,OAA8B;AACxD,iBAAO;YACH,UAAU;cACN,eAAe;cACf,sBAAsB;;YAE1B,YAAY,MAAM;YAClB,UAAU,MAAM;;QAExB;QAEQ,sBAAsB,UAAiC,WAAiB;AAC5E,cAAI,CAAC,CAAC,KAAK,gBAAgB,MAAM,SAAS,GAAG;AACzC,gBAAI,SAAS,OAAO,WAAW,YAAW,MAAO,WAAW;AACxD,oBAAM,SAAuB,aAAA,aAAa;AAC1C,oBAAM,SAAS,IAAI,aAAA,yBAAyB,QAAQ,SAAS,OAAO,YAAY,SAAS,gBAAgB,CAAA,CAAE;AAC3G,mBAAK,gBAAgB,SAAmC,WAAW,MAAM;uBAClE,CAAC,CAAC,SAAS,WAAW,SAAS,QAAQ,SAAS,GAAG;AAC1D,oBAAM,SAAuB,aAAA,aAAa;AAC1C,oBAAM,SAAS,IAAI,aAAA,yBAAyB,QAAQ,SAAS,OAAO,YAAY,SAAS,gBAAgB,SAAS,OAAO;AACzH,mBAAK,gBAAgB,SAAmC,WAAW,MAAM;mBACtE;AACH,oBAAM,IAAI,MAAM,kEAAkE;;iBAEnF;AACH,kBAAM,IAAI,MAAM,8DAA8D,SAAS,YAAY;;QAE3G;QAEQ,qBAAqB,UAA2B,WAAiB;AACrE,cAAI,CAAC,CAAC,SAAS,YAAY,SAAS,SAAS,SAAS,GAAG;AACrD,gBAAI,CAAC,CAAC,KAAK,gBAAgB,MAAM,SAAS,GAAG;AACzC,oBAAM,aAAuB,SAAS,SAAS,IAAI,CAAC,YAA8B,QAAQ,SAAS;AACnG,mBAAK,gBAAgB,SAAmB,WAAW,UAAU;mBAC1D;AACH,oBAAM,IAAI,MAAM,8CAA8C,SAAS,YAAY;;iBAEpF;AACH,kBAAM,IAAI,MAAM,qDAAqD;;QAE7E;QAEQ,qBAAqB,UAA2B,WAAiB;AACrE,cAAI,CAAC,CAAC,KAAK,gBAAgB,MAAM,SAAS,GAAG;AACzC,kBAAM,gBAA8B,SAAS,UAAU,YAAW,MAAO,WAAW,aAAA,aAAa,sBAAsB,aAAA,aAAa;AACpI,kBAAM,SAAuB,SAAS,OAAO,WAAW,YAAW,MAAO,YAAY,gBAAgB,aAAA,aAAa;AACnH,kBAAM,SAAS,IAAI,aAAA,mBAAmB,QAAQ,eAAe,SAAS,OAAO,UAAU,mBAAmB,SAAS,OAAO,MAAM,EAAE;AAClI,iBAAK,gBAAgB,SAA6B,WAAW,MAAM;iBAChE;AACH,kBAAM,IAAI,MAAM,8CAA8C,SAAS,YAAY;;QAE3F;QAEQ,oBAAoB,oBAAwC,WAAiB;AACjF,cAAI,CAAC,CAAC,KAAK,gBAAgB,MAAM,SAAS,KAAK,CAAC,CAAC,mBAAmB,SAAS,CAAC,GAAG;AAC7E,gBAAI,CAAC,CAAC,KAAK,yBAAyB,mBAAmB,SAAS,WAAW,KAAK,mBAAmB,SAAS,CAAC,EAAE,cAAc,KAAK,uBAAuB;AACrJ,mBAAK,wBAAwB;AAC7B,oBAAM,cAAwB,mBAAmB,SAAS,CAAC;AAC3D,oBAAM,SAAuC,IAAI,aAAA,6BAC7C,KAAK,qBAAqB,YAAY,gBAAgB,GACtD,KAAK,UAAU,WAAW,GAC1B,mBAAmB,OAAO,MAAM;AAEpC,mBAAK,gBAAgB,SAAuC,WAAW,MAAM;uBACtE,mBAAmB,SAAS,SAAS,GAAG;AAC/C,oBAAM,YAAwB,mBAAmB;AACjD,oBAAM,iBAAiD,CAAA;AACvD,yBAAW,WAAW,WAAW;AAC7B,+BAAe,KAAM,IAAI,aAAA,6BACrB,KAAK,qBAAqB,QAAQ,gBAAgB,GAClD,KAAK,UAAU,OAAO,GACtB,mBAAmB,OAAO,MAAM,CACnC;;AAEL,mBAAK,gBAAgB,SAAyC,WAAW,cAAc;;iBAExF;AACH,kBAAM,IAAI,MAAM,6CAA6C,SAAS,YAAY;;QAE1F;QAEQ,qBAAqB,YAAkB;AAC3C,kBAAQ,WAAW,YAAW,GAAI;YAC9B,KAAK;AACD,qBAAO,aAAA,aAAa;YACxB,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;AACD,qBAAO,aAAA,aAAa;YACxB;AACI,qBAAO,aAAA,aAAa;;QAEhC;QAEQ,aAAa,aAA6B;AAC9C,iBAAO,gBAAgB,aAAA,iBAAiB,gCAAgC,kCACpE,gBAAgB,aAAA,iBAAiB,8BAA8B,gCAAgC;QACvG;;AAnYJ,cAAA,yBAAA;;;;;;;;;;ACzDA,UAAa,sBAAb,MAAgC;QAI5B,YAAmB,SAAgB;AAC/B,eAAK,UAAU;QACnB;QAEO,YAAS;AACZ,iBAAO,KAAK,UAAU,MAAM,CAAC,KAAU,UAAoC;AACvE,gBAAI,SAAS,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC7D,oBAAM,cAAqC,CAAA;AAC3C,yBAAW,KAAK,OAAO;AACnB,oBAAI,OAAO,eAAe,KAAK,OAAO,CAAC,GAAG;AAEtC,8BAAY,KAAK,EAAE,OAAO,CAAC,EAAE,YAAW,IAAK,EAAE,UAAU,CAAC,CAAC,IAAI,MAAM,CAAC;;;AAG9E,qBAAO;;AAEX,mBAAO;UACX,CAAC;QACL;QAEA,IAAW,UAAO;AACd,iBAAO,KAAK;QAChB;QAEA,IAAW,cAAW;AAClB,iBAAO,KAAK;QAChB;QAEA,IAAW,YAAY,OAAa;AAChC,eAAK,cAAc,MAAM,YAAW;QACxC;;AAlCJ,cAAA,sBAAA;AAqCA,UAAa,UAAb,MAAoB;QAQhB,YAAmB,IAAM;AACrB,eAAK,SAAS,IAAI,OAAM;AACxB,eAAK,KAAK;QACd;;AAXJ,cAAA,UAAA;AAcA,UAAa,SAAb,MAAmB;QAMf,cAAA;AAEI,gBAAM,8BAA8B;AAEpC,eAAK,OAAO;AACZ,eAAK,UAAU;AACf,eAAK,QAAQ;AACb,eAAK,OAAO;QAChB;;AAdJ,cAAA,SAAA;AAiBA,UAAa,KAAb,MAAe;QAKX,YAAmB,UAAkB,MAAc,SAAe;AAC9D,eAAK,WAAW;AAChB,eAAK,OAAO;AACZ,eAAK,UAAU;QACnB;;AATJ,cAAA,KAAA;AAYA,UAAa,SAAb,MAAmB;QAKf,YAAmB,cAAsB,OAAe,SAAe;AACnE,eAAK,eAAe;AACpB,eAAK,QAAQ;AACb,eAAK,UAAU;QACnB;;AATJ,cAAA,SAAA;AA2BA,UAAY;AAAZ,OAAA,SAAYC,eAAY;AACpB,QAAAA,cAAA,WAAA,IAAA;AACA,QAAAA,cAAA,OAAA,IAAA;AACA,QAAAA,cAAA,MAAA,IAAA;AACA,QAAAA,cAAA,UAAA,IAAA;AACA,QAAAA,cAAA,SAAA,IAAA;AACA,QAAAA,cAAA,SAAA,IAAA;MACJ,GAPY,eAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;AASxB,UAAY;AAAZ,OAAA,SAAYC,OAAI;AACZ,QAAAA,MAAA,OAAA,IAAA;AACA,QAAAA,MAAA,SAAA,IAAA;AACA,QAAAA,MAAA,KAAA,IAAA;AACA,QAAAA,MAAA,SAAA,IAAA;AACA,QAAAA,MAAA,YAAA,IAAA;AACA,QAAAA,MAAA,aAAA,IAAA;AACA,QAAAA,MAAA,WAAA,IAAA;AACA,QAAAA,MAAA,eAAA,IAAA;AACA,QAAAA,MAAA,SAAA,IAAA;AACA,QAAAA,MAAA,MAAA,IAAA;AACA,QAAAA,MAAA,QAAA,IAAA;MACJ,GAZY,OAAA,QAAA,SAAA,QAAA,OAAI,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrHhB,mBAAA,kDAAA,OAAA;AACA,mBAAA,wCAAA,OAAA;AACA,mBAAA,2BAAA,OAAA;AACA,mBAAA,8BAAA,OAAA;AACA,mBAAA,uCAAA,OAAA;AACA,mBAAA,mCAAA,OAAA;AACA,mBAAA,+CAAA,OAAA;AACA,mBAAA,6BAAA,OAAA;AACA,mBAAA,iCAAA,OAAA;AACA,mBAAA,yCAAA,OAAA;AACA,mBAAA,4BAAA,OAAA;AACA,mBAAA,mCAAA,OAAA;AACA,mBAAA,qCAAA,OAAA;AACA,mBAAA,mCAAA,OAAA;AACA,mBAAA,oDAAA,OAAA;AACA,mBAAA,wCAAA,OAAA;AACA,mBAAA,wCAAA,OAAA;AACA,mBAAA,4CAAA,OAAA;AACA,mBAAA,2BAAA,OAAA;AACA,mBAAA,iBAAA,OAAA;AACA,mBAAA,mCAAA,OAAA;AACA,mBAAA,iCAAA,OAAA;AACA,mBAAA,6BAAA,OAAA;AACA,mBAAA,wCAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;AACA,mBAAA,4BAAA,OAAA;AACA,mBAAA,yBAAA,OAAA;AACA,mBAAA,mCAAA,OAAA;AACA,mBAAA,sDAAA,OAAA;AACA,mBAAA,0CAAA,OAAA;AACA,mBAAA,gCAAA,OAAA;AACA,mBAAA,8BAAA,OAAA;AACA,mBAAA,yBAAA,OAAA;AACA,mBAAA,mCAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;AACA,mBAAA,2BAAA,OAAA;AACA,mBAAA,0BAAA,OAAA;AACA,mBAAA,yBAAA,OAAA;AACA,mBAAA,iCAAA,OAAA;AACA,mBAAA,oCAAA,OAAA;AACA,mBAAA,gCAAA,OAAA;AACA,mBAAA,uBAAA,OAAA;AACA,mBAAA,oBAAA,OAAA;AACA,mBAAA,kCAAA,OAAA;AACA,mBAAA,yBAAA,OAAA;AACA,mBAAA,gCAAA,OAAA;AACA,UAAA,8BAAA;AAAS,aAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,4BAAA;MAAsB,EAAA,CAAA;AAC/B,UAAA,8BAAA;AAAS,aAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,eAAA,4BAAA;MAAsB,EAAA,CAAA;AAC/B,mBAAA,gCAAA,OAAA;AACA,mBAAA,6BAAA,OAAA;AACA,mBAAA,4BAAA,OAAA;AACA,mBAAA,oCAAA,OAAA;AACA,mBAAA,oCAAA,OAAA;AACA,mBAAA,kCAAA,OAAA;AACA,mBAAA,+BAAA,OAAA;AAEa,cAAA,2BAAmC;AACnC,cAAA,oCAA4C;AAC5C,cAAA,gCAAwC;AACxC,cAAA,6BAAqC;AACrC,cAAA,+CAAuD;;;;;;;;;;;;;;;;;;;;;;;;;AC9DpE,UAAA,eAAA;AAIA,WAAK,IAAI,aAAA,YAAW;AAGpB,mBAAA,oBAAA,OAAA;;;;;ACJA,sDAA2B;;;ACe3B,MAAI;AAAA;AAAA,IAEF,WAAC,sVAA4T,GAAC;AAAA;AA0BhU,MAAI;AAIJ,WAAS,gBAAgB,SAAS;AAChC,WAAO;AAAA,MACL,MAAM,SAAS,QAAQ,OAAO;AAAA,MAC9B,SAAS,SAAS;AAAA,MAClB,YAAY,SAAS,cAAc,OAAO;AAAA,MAC1C,gBAAgB,SAAS,kBAAkB,OAAO;AAAA,IACpD;AAAA,EACF;AAMA,MAAI;AAKJ,WAAS,iBAAiB,MAAM;AAC9B,WAAO,QAAQ,IAAI,IAAI;AAAA,EACzB;AAMA,MAAI;AAKJ,WAAS,iBAAiB,MAAM;AAC9B,WAAO,QAAQ,IAAI,IAAI;AAAA,EACzB;AAMA,MAAI;AAMJ,WAAS,mBAAmB,WAAW,MAAM;AAC3C,WAAO,QAAQ,IAAI,SAAS,GAAG,IAAI,IAAI;AAAA,EACzC;AAMA,WAAS,WAAW,OAAO;AACzB,UAAM,OAAO,OAAO;AACpB,QAAI,SAAS,UAAU;AACrB,aAAO,IAAI,KAAK;AAAA,IAClB;AACA,QAAI,SAAS,YAAY,SAAS,YAAY,SAAS,WAAW;AAChE,aAAO,GAAG,KAAK;AAAA,IACjB;AACA,QAAI,SAAS,YAAY,SAAS,YAAY;AAC5C,cAAQ,SAAS,OAAO,eAAe,KAAK,GAAG,aAAa,SAAS;AAAA,IACvE;AACA,WAAO;AAAA,EACT;AAGA,WAAS,UAAU,SAAS,OAAO,SAAS,SAAS,OAAO;AAC1D,UAAM,QAAQ,SAAS,WAAW,QAAQ,MAAM,QAAQ,QAAQ;AAChE,UAAM,WAAW,OAAO,YAAY,QAAQ,WAAW;AACvD,UAAM,WAAW,OAAO,YAAY,WAAW,KAAK;AACpD,UAAM,QAAQ;AAAA,MACZ,MAAM,QAAQ;AAAA,MACd,MAAM,QAAQ;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,WAAW,KAAK,KAAK,WAAW,YAAY,QAAQ,WAAW,GAAG,WAAW,QAAQ;AAAA,MAC9F,aAAa,QAAQ;AAAA,MACrB,MAAM,OAAO;AAAA,MACb,QAAQ,OAAO;AAAA,MACf,MAAM,QAAQ;AAAA,MACd,YAAY,QAAQ;AAAA,MACpB,gBAAgB,QAAQ;AAAA,IAC1B;AACA,UAAM,WAAW,QAAQ,SAAS;AAClC,UAAM,UAAU,OAAO,WAAW,QAAQ,WAAW,mBAAmB,QAAQ,WAAW,MAAM,IAAI,MAAM,WAAW,iBAAiB,MAAM,IAAI,IAAI,SAAS,QAAQ,WAAW,iBAAiB,MAAM,IAAI;AAC5M,QAAI,SAAS;AACX,YAAM,UAAU,OAAO,YAAY;AAAA;AAAA,QAEjC,QAAQ,KAAK;AAAA,UACX;AAAA,IACN;AACA,QAAI,UAAU;AACZ,cAAQ,QAAQ;AAAA,IAClB;AACA,QAAI,QAAQ,QAAQ;AAClB,cAAQ,OAAO,KAAK,KAAK;AAAA,IAC3B,OAAO;AACL,cAAQ,SAAS,CAAC,KAAK;AAAA,IACzB;AAAA,EACF;AAuBA,WAAS,aAAa,QAAQ,WAAW;AACvC,UAAM,OAAO,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC;AAChC,QAAI,KAAK,SAAS,GAAG;AACnB,aAAO,IAAI,KAAK,KAAK,IAAI,SAAS,GAAG,CAAC;AAAA,IACxC;AACA,WAAO,KAAK,CAAC,KAAK;AAAA,EACpB;AA+CA,MAAI,YAAY,cAAc,MAAM;AAAA;AAAA;AAAA;AAAA,IAIlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,YAAY,QAAQ;AAClB,YAAM,OAAO,CAAC,EAAE,OAAO;AACvB,WAAK,OAAO;AACZ,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAi4BA,WAAS,SAAS,aAAa,SAAS;AACtC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO;AAAA,MACP,SAAS,KAAK,uBAAuB,OAAO,YAAY,OAAO,IAAI,WAAW,WAAW,CAAC;AAAA,MAC1F;AAAA,MACA;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,QAAQ,SAAS,QAAQ,QAAQ,KAAK,aAAa;AACrD,oBAAU,MAAM,SAAS,SAAS,SAAS;AAAA,YACzC,UAAU,QAAQ,iBAAiB,OAAO,QAAQ,MAAM,OAAO,IAAI,WAAW,QAAQ,KAAK;AAAA,UAC7F,CAAC;AAAA,QACH;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAuGA,WAAS,SAAS,aAAa,SAAS;AACtC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO;AAAA,MACP,SAAS,KAAK,uBAAuB,OAAO,YAAY,OAAO,IAAI,WAAW,WAAW,CAAC;AAAA,MAC1F;AAAA,MACA;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,QAAQ,SAAS,QAAQ,QAAQ,KAAK,aAAa;AACrD,oBAAU,MAAM,SAAS,SAAS,SAAS;AAAA,YACzC,UAAU,QAAQ,iBAAiB,OAAO,QAAQ,MAAM,OAAO,IAAI,WAAW,QAAQ,KAAK;AAAA,UAC7F,CAAC;AAAA,QACH;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AA0UA,WAAS,WAAW;AAClB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO;AAAA,MACP,KAAK,SAAS;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAyMA,WAAS,UAAU,WAAW;AAC5B,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO;AAAA,MACP;AAAA,MACA,KAAK,SAAS;AACZ,gBAAQ,QAAQ,KAAK,UAAU,QAAQ,KAAK;AAC5C,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAgTA,WAAS,WAAW,QAAQ,SAAS,SAAS;AAC5C,WAAO,OAAO,OAAO,YAAY;AAAA;AAAA,MAE/B,OAAO,QAAQ,SAAS,OAAO;AAAA;AAAA;AAAA,MAG/B,OAAO;AAAA;AAAA,EAEX;AAyFA,WAAS,MAAM,MAAM,SAAS;AAC5B,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,cAAM,QAAQ,QAAQ;AACtB,YAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,kBAAQ,QAAQ;AAChB,kBAAQ,QAAQ,CAAC;AACjB,mBAAS,MAAM,GAAG,MAAM,MAAM,QAAQ,OAAO;AAC3C,kBAAM,SAAS,MAAM,GAAG;AACxB,kBAAM,cAAc,KAAK,KAAK,KAAK,EAAE,OAAO,OAAO,OAAO,OAAO,GAAG,OAAO;AAC3E,gBAAI,YAAY,QAAQ;AACtB,oBAAM,WAAW;AAAA,gBACf,MAAM;AAAA,gBACN,QAAQ;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA,OAAO;AAAA,cACT;AACA,yBAAW,SAAS,YAAY,QAAQ;AACtC,oBAAI,MAAM,MAAM;AACd,wBAAM,KAAK,QAAQ,QAAQ;AAAA,gBAC7B,OAAO;AACL,wBAAM,OAAO,CAAC,QAAQ;AAAA,gBACxB;AACA,wBAAQ,QAAQ,KAAK,KAAK;AAAA,cAC5B;AACA,kBAAI,CAAC,QAAQ,QAAQ;AACnB,wBAAQ,SAAS,YAAY;AAAA,cAC/B;AACA,kBAAI,QAAQ,YAAY;AACtB,wBAAQ,QAAQ;AAChB;AAAA,cACF;AAAA,YACF;AACA,gBAAI,CAAC,YAAY,OAAO;AACtB,sBAAQ,QAAQ;AAAA,YAClB;AACA,oBAAQ,MAAM,KAAK,YAAY,KAAK;AAAA,UACtC;AAAA,QACF,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAoGA,WAAS,QAAQ,SAAS;AACxB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,OAAO,QAAQ,UAAU,WAAW;AACtC,kBAAQ,QAAQ;AAAA,QAClB,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAuEA,WAAS,MAAM,QAAQ,SAAS;AAC9B,UAAM,UAAU,OAAO,QAAQ,MAAM,EAAE,OAAO,CAAC,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,MAAM,MAAM,MAAM;AAChG,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS,aAAa,QAAQ,IAAI,UAAU,GAAG,GAAG;AAAA,MAClD,OAAO;AAAA,MACP,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,KAAK,QAAQ,SAAS,QAAQ,KAAK,GAAG;AACxC,kBAAQ,QAAQ;AAAA,QAClB,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAuBA,WAAS,UAAU,SAAS;AAC1B,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,OAAO,QAAQ,UAAU,YAAY;AACvC,kBAAQ,QAAQ;AAAA,QAClB,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAwBA,WAAS,OAAO,QAAQ,QAAQ;AAC9B,QAAI,OAAO,WAAW,OAAO,QAAQ;AACnC,UAAI,WAAW,UAAU,kBAAkB,QAAQ,kBAAkB,QAAQ,CAAC,WAAW,CAAC,QAAQ;AAChG,eAAO,EAAE,OAAO,OAAO;AAAA,MACzB;AACA,UAAI,UAAU,UAAU,OAAO,gBAAgB,UAAU,OAAO,gBAAgB,QAAQ;AACtF,mBAAW,OAAO,QAAQ;AACxB,cAAI,OAAO,QAAQ;AACjB,kBAAM,UAAU,OAAO,OAAO,GAAG,GAAG,OAAO,GAAG,CAAC;AAC/C,gBAAI,QAAQ,OAAO;AACjB,qBAAO;AAAA,YACT;AACA,mBAAO,GAAG,IAAI,QAAQ;AAAA,UACxB,OAAO;AACL,mBAAO,GAAG,IAAI,OAAO,GAAG;AAAA,UAC1B;AAAA,QACF;AACA,eAAO,EAAE,OAAO,OAAO;AAAA,MACzB;AACA,UAAI,MAAM,QAAQ,MAAM,KAAK,MAAM,QAAQ,MAAM,GAAG;AAClD,YAAI,OAAO,WAAW,OAAO,QAAQ;AACnC,mBAAS,QAAQ,GAAG,QAAQ,OAAO,QAAQ,SAAS;AAClD,kBAAM,UAAU,OAAO,OAAO,KAAK,GAAG,OAAO,KAAK,CAAC;AACnD,gBAAI,QAAQ,OAAO;AACjB,qBAAO;AAAA,YACT;AACA,mBAAO,KAAK,IAAI,QAAQ;AAAA,UAC1B;AACA,iBAAO,EAAE,OAAO,OAAO;AAAA,QACzB;AAAA,MACF;AAAA,IACF;AACA,WAAO,EAAE,OAAO,KAAK;AAAA,EACvB;AAGA,WAAS,UAAU,SAAS,SAAS;AACnC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,QACP,QAAQ,IAAI,CAAC,WAAW,OAAO,OAAO;AAAA,QACtC;AAAA,MACF;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,KAAK,QAAQ,QAAQ;AACvB,gBAAM,QAAQ,QAAQ;AACtB,cAAI;AACJ,kBAAQ,QAAQ;AAChB,qBAAW,UAAU,KAAK,SAAS;AACjC,kBAAM,gBAAgB,OAAO;AAAA,cAC3B,EAAE,OAAO,OAAO,OAAO,MAAM;AAAA,cAC7B;AAAA,YACF;AACA,gBAAI,cAAc,QAAQ;AACxB,kBAAI,QAAQ,QAAQ;AAClB,wBAAQ,OAAO,KAAK,GAAG,cAAc,MAAM;AAAA,cAC7C,OAAO;AACL,wBAAQ,SAAS,cAAc;AAAA,cACjC;AACA,kBAAI,QAAQ,YAAY;AACtB,wBAAQ,QAAQ;AAChB;AAAA,cACF;AAAA,YACF;AACA,gBAAI,CAAC,cAAc,OAAO;AACxB,sBAAQ,QAAQ;AAAA,YAClB;AACA,gBAAI,QAAQ,OAAO;AACjB,kBAAI,SAAS;AACX,wBAAQ,KAAK,cAAc,KAAK;AAAA,cAClC,OAAO;AACL,0BAAU,CAAC,cAAc,KAAK;AAAA,cAChC;AAAA,YACF;AAAA,UACF;AACA,cAAI,QAAQ,OAAO;AACjB,oBAAQ,QAAQ,QAAQ,CAAC;AACzB,qBAAS,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,SAAS;AACnD,oBAAM,eAAe,OAAO,QAAQ,OAAO,QAAQ,KAAK,CAAC;AACzD,kBAAI,aAAa,OAAO;AACtB,0BAAU,MAAM,QAAQ,SAAS,SAAS;AAAA,kBACxC,UAAU;AAAA,gBACZ,CAAC;AACD;AAAA,cACF;AACA,sBAAQ,QAAQ,aAAa;AAAA,YAC/B;AAAA,UACF;AAAA,QACF,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AA02BA,WAAS,OAAO,SAAS;AACvB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,OAAO,QAAQ,UAAU,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC9D,kBAAQ,QAAQ;AAAA,QAClB,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAGA,WAAS,OAAO,SAAS,SAAS;AAChC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,cAAM,QAAQ,QAAQ;AACtB,YAAI,SAAS,OAAO,UAAU,UAAU;AACtC,kBAAQ,QAAQ;AAChB,kBAAQ,QAAQ,CAAC;AACjB,qBAAW,OAAO,KAAK,SAAS;AAC9B,kBAAM,SAAS,MAAM,GAAG;AACxB,kBAAM,eAAe,KAAK,QAAQ,GAAG,EAAE;AAAA,cACrC,EAAE,OAAO,OAAO,OAAO,OAAO;AAAA,cAC9B;AAAA,YACF;AACA,gBAAI,aAAa,QAAQ;AACvB,oBAAM,WAAW;AAAA,gBACf,MAAM;AAAA,gBACN,QAAQ;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA,OAAO;AAAA,cACT;AACA,yBAAW,SAAS,aAAa,QAAQ;AACvC,oBAAI,MAAM,MAAM;AACd,wBAAM,KAAK,QAAQ,QAAQ;AAAA,gBAC7B,OAAO;AACL,wBAAM,OAAO,CAAC,QAAQ;AAAA,gBACxB;AACA,wBAAQ,QAAQ,KAAK,KAAK;AAAA,cAC5B;AACA,kBAAI,CAAC,QAAQ,QAAQ;AACnB,wBAAQ,SAAS,aAAa;AAAA,cAChC;AACA,kBAAI,QAAQ,YAAY;AACtB,wBAAQ,QAAQ;AAChB;AAAA,cACF;AAAA,YACF;AACA,gBAAI,CAAC,aAAa,OAAO;AACvB,sBAAQ,QAAQ;AAAA,YAClB;AACA,gBAAI,aAAa,UAAU,UAAU,OAAO,OAAO;AACjD,sBAAQ,MAAM,GAAG,IAAI,aAAa;AAAA,YACpC;AAAA,UACF;AAAA,QACF,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AA6RA,WAAS,SAAS,YAAY,MAAM;AAClC,UAAM,SAAS;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS,IAAI,QAAQ,OAAO;AAAA,MAC5B,OAAO;AAAA,MACP;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,QAAQ,UAAU,QAAQ;AAC5B,cAAI,aAAa,MAAM;AACrB,oBAAQ,QAAQ;AAAA,cACd;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AACA,cAAI,QAAQ,UAAU,QAAQ;AAC5B,oBAAQ,QAAQ;AAChB,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO,KAAK,QAAQ,KAAK,SAAS,OAAO;AAAA,MAC3C;AAAA,IACF;AACA,QAAI,KAAK,MAAM;AACb,aAAO,UAAU,KAAK,CAAC;AAAA,IACzB;AACA,WAAO;AAAA,EACT;AAurBA,WAAS,OAAO,SAAS;AACvB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,OAAO,QAAQ,UAAU,UAAU;AACrC,kBAAQ,QAAQ;AAAA,QAClB,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AA0VA,WAAS,WAAW,SAAS;AAC3B,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI,QAAQ,UAAU,QAAQ;AAC5B,kBAAQ,QAAQ;AAAA,QAClB,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAmEA,WAAS,WAAW,UAAU;AAC5B,QAAI;AACJ,QAAI,UAAU;AACZ,iBAAW,WAAW,UAAU;AAC9B,YAAI,QAAQ;AACV,iBAAO,KAAK,GAAG,QAAQ,MAAM;AAAA,QAC/B,OAAO;AACL,mBAAS,QAAQ;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAGA,WAAS,MAAM,SAAS,SAAS;AAC/B,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,QACP,QAAQ,IAAI,CAAC,WAAW,OAAO,OAAO;AAAA,QACtC;AAAA,MACF;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA,KAAK,SAAS,SAAS;AACrB,YAAI;AACJ,YAAI;AACJ,YAAI;AACJ,mBAAW,UAAU,KAAK,SAAS;AACjC,gBAAM,gBAAgB,OAAO;AAAA,YAC3B,EAAE,OAAO,OAAO,OAAO,QAAQ,MAAM;AAAA,YACrC;AAAA,UACF;AACA,cAAI,cAAc,OAAO;AACvB,gBAAI,cAAc,QAAQ;AACxB,kBAAI,eAAe;AACjB,8BAAc,KAAK,aAAa;AAAA,cAClC,OAAO;AACL,gCAAgB,CAAC,aAAa;AAAA,cAChC;AAAA,YACF,OAAO;AACL,6BAAe;AACf;AAAA,YACF;AAAA,UACF,OAAO;AACL,gBAAI,iBAAiB;AACnB,8BAAgB,KAAK,aAAa;AAAA,YACpC,OAAO;AACL,gCAAkB,CAAC,aAAa;AAAA,YAClC;AAAA,UACF;AAAA,QACF;AACA,YAAI,cAAc;AAChB,iBAAO;AAAA,QACT;AACA,YAAI,eAAe;AACjB,cAAI,cAAc,WAAW,GAAG;AAC9B,mBAAO,cAAc,CAAC;AAAA,UACxB;AACA,oBAAU,MAAM,QAAQ,SAAS,SAAS;AAAA,YACxC,QAAQ,WAAW,aAAa;AAAA,UAClC,CAAC;AACD,kBAAQ,QAAQ;AAAA,QAClB,WAAW,iBAAiB,WAAW,GAAG;AACxC,iBAAO,gBAAgB,CAAC;AAAA,QAC1B,OAAO;AACL,oBAAU,MAAM,QAAQ,SAAS,SAAS;AAAA,YACxC,QAAQ,WAAW,eAAe;AAAA,UACpC,CAAC;AAAA,QACH;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAsSA,WAAS,MAAM,QAAQ,OAAO,SAAS;AACrC,UAAM,UAAU,OAAO;AAAA,MACrB,EAAE,OAAO,OAAO,OAAO,MAAM;AAAA,MAC7B,gBAAgB,OAAO;AAAA,IACzB;AACA,QAAI,QAAQ,QAAQ;AAClB,YAAM,IAAI,UAAU,QAAQ,MAAM;AAAA,IACpC;AACA,WAAO,QAAQ;AAAA,EACjB;AA0DA,WAAS,QAAQ,OAAO;AACtB,WAAO;AAAA,MACL,GAAG,MAAM,CAAC;AAAA,MACV,MAAM;AAAA,MACN,KAAK,SAAS,SAAS;AACrB,mBAAW,QAAQ,OAAO;AACxB,cAAI,KAAK,SAAS,YAAY;AAC5B,gBAAI,QAAQ,WAAW,KAAK,SAAS,YAAY,KAAK,SAAS,mBAAmB;AAChF,sBAAQ,QAAQ;AAChB;AAAA,YACF;AACA,gBAAI,CAAC,QAAQ,UAAU,CAAC,QAAQ,cAAc,CAAC,QAAQ,gBAAgB;AACrE,wBAAU,KAAK,KAAK,SAAS,OAAO;AAAA,YACtC;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;;;ACl5KA,WAAS,WAAW,OAAwC;AAC1D,WAAO,OAAO,UAAU;AAAA,EAC1B;AAEe,WAAR,6BACL,WACgB;AAChB,WAAO,WAAW,SAAS,IAAI,UAAU,IAAI;AAAA,EAC/C;;;ACNA,kDAMO;AAEP,MAAO,oBAAQ;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;;;ACdA,MAAM,oBAAoB;AAAA,IACxB,UAAU;AAAA,MACR;AAAA,QACE;AAAA,UACE,OAAO;AAAA,YACL,oBAAoB,OAAO;AAAA,YAC3B,iBAAiB,SAAS,WAAW,mEAAmE,CAAC;AAAA,UAC3G,CAAC;AAAA,UACD,OAAO;AAAA,YACL,oBAAoB,SAAS,WAAW,mEAAmE,CAAC;AAAA,YAC5G,iBAAiB,OAAO;AAAA,UAC1B,CAAC;AAAA,QACH;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,UACE,OAAO;AAAA,YACL,qBAAqB,SAAS,WAAW,2DAA2D,CAAC;AAAA,YACrG,QAAQ,OAAO;AAAA,YACf,2BAA2B;AAAA,cACzB,WAAW,iEAAiE;AAAA,YAC9E;AAAA,YACA,yBAAyB,SAAS,WAAW,+DAA+D,CAAC;AAAA,UAC/G,CAAC;AAAA,UACD,OAAO;AAAA,YACL,qBAAqB,SAAS,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC;AAAA,YAC7D,QAAQ,SAAS,WAAW,iDAAiD,CAAC;AAAA,YAC9E,2BAA2B,OAAO;AAAA,YAClC,yBAAyB,OAAO;AAAA,UAClC,CAAC;AAAA,QACH;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,IACD,SAAS;AAAA,EACX;AAEA,MAAO,4BAAQ;;;ACtCf,MAAM,wBAAwB,SAAS,QAAQ,CAAC;AAIhD,MAAO,gCAAQ;;;ACHf,MAAM,8BAA8B,SAAS,KAAK,OAAO,GAAG,SAAS,CAAC,GAAG,SAAS,GAAM,CAAC,CAAC;AAI1F,MAAO,sCAAQ;;;ACLf,MAAM,oBAAoB,SAAS,QAAQ,GAAG,KAAK;AAInD,MAAO,4BAAQ;;;ACJf,MAAM,0BAA0B;AAAA,IAC9B,SAAS,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,IAI5B,UAAuC,WAAU,OAAO,SAAS,KAAK,IAAI,QAAQ,OAAO,OAAO,CAAC,GAAG,KAAK,CAAC,CAAE;AAAA,EAC9G;AAIA,MAAO,kCAAQ;;;ACVf,MAAM,oCAAoC,SAAS,OAAO,CAAC;AAI3D,MAAO,4CAAQ;;;ACJf,MAAM,0BAA0B;AAAA,IAC9B,MAAM;AAAA,MACJ,SAAS;AAAA,MACT,KAAK;AAAA,MACL,SAAS;AAAA,MACT,WAAW;AAAA,IACb,CAAC;AAAA,IACD;AAAA,EACF;AAIA,MAAO,kCAAQ;;;ACGf,MAAM,EAAE,aAAAC,aAAY,IAAI;AAExB,MAAI,8BAA8B;AAyBnB,WAAR,aAA8B,MAAwC;AAC3E,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AAEJ,QAAI,EAAE,YAAY,IAAI;AAEtB,QAAI,OAAO,eAAe,aAAa;AACrC,cAAQ,KAAK,0FAA0F;AAEvG,oBAAc;AAAA,IAChB;AAEA,WAAO,OAAO,OAAO;AAAA,MACnB,aAAa,eAAeA,aAAY,2BAA2B;AAAA;AAAA;AAAA,MAGnE,iBAAiB,MAAM,+BAAuB,eAAe;AAAA,MAC7D,kBAAkB,YAAY;AAC5B,cAAM,oBAAoB,MAAM,2BAAmB,MAAM,6BAA0C,WAAW,CAAC;AAE/G,YAAI,+BAA+B,kBAAkB,iBAAiB;AACpE,kBAAQ;AAAA,YACN;AAAA,UACF;AAEA,wCAA8B;AAAA,QAChC;AAEA,eAAO;AAAA,MACT;AAAA,MACA,uBAAuB,MAAM,qCAA6B,qBAAqB;AAAA,MAC/E,aAAa,MAAM,2BAAmB,WAAW;AAAA,MACjD,mBAAmB,MAAM,iCAAyB,iBAAiB;AAAA,MACnE,6BAA6B,MAAM,2CAAmC,2BAA2B;AAAA,MACjG,mBAAmB,MAAM,iCAAyB,iBAAiB;AAAA,IACrE,CAAC;AAAA,EACH;;;ACxFe,WAAR,SAA0B;AAChC,UAAM,WAAW,CAAC;AAElB,aAAS,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AACnD,eAAS,UAAU;AACnB,eAAS,SAAS;AAAA,IACnB,CAAC;AAED,WAAO;AAAA,EACR;;;ACPe,WAAR,6BAAoB;AACzB,QAAI;AACJ,UAAM,QAAQ,CAAC;AAEf,UAAM,OAAO,WAAS;AACpB,UAAI,eAAe;AACjB,cAAM,EAAE,QAAQ,IAAI;AAEpB,wBAAgB;AAChB,gBAAQ,KAAK;AAAA,MACf,OAAO;AACL,cAAM,KAAK,KAAK;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,QAAQ,MAAM;AAClB,UAAI,MAAM,QAAQ;AAChB,eAAO,QAAQ,QAAQ,MAAM,MAAM,CAAC;AAAA,MACtC;AAEA,cAAQ,kBAAkB,gBAAgB,OAAe,IAAI;AAAA,IAC/D;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;;;ACxBA,MAAqB,+BAArB,MAAkD;AAAA,IAChD,YAAY,EAAE,YAAY,WAAW,GAAqC;AACxE,WAAK,cAAc;AACnB,WAAK,cAAc;AAAA,IACrB;AAAA,IAEA;AAAA,IACA;AAAA,IAEA,IAAI,aAAa;AACf,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,aAAa;AACf,aAAO,KAAK;AAAA,IACd;AAAA,EACF;;;AChBA,MAAqB,YAArB,MAAmE;AAAA,IACjE,YAAYC,QAAqB;AAC/B,UAAI,CAACA,QAAO;AACV,cAAM,IAAI,MAAM,oBAAoB;AAAA,MACtC;AAEA,WAAK,SAASA;AAEd,iBAAW,OAAOA,QAAO;AACvB,eAAO,eAAe,MAAM,KAAK;AAAA,UAC/B,YAAY;AAAA,UACZ,MAAM;AACJ,mBAAOA,OAAM,GAAG;AAAA,UAClB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IAEA;AAAA,IAEA,CAAC,OAAO,QAAQ,IAAI;AAClB,aAAO,KAAK,OAAO,OAAO,QAAQ,EAAE;AAAA,IACtC;AAAA,IAEA,IAAI,SAAiB;AACnB,aAAO,KAAK,OAAO;AAAA,IACrB;AAAA,EACF;;;ACzBA,MAAqB,0BAArB,cAAqD,UAAwC;AAAA,IAC3F,YAAY,MAAmC;AAC7C,YAAM,KAAK,OAAO;AAElB,WAAK,WAAW,KAAK;AAAA,IACvB;AAAA,IAEA;AAAA,IAEA,IAAI,UAAmB;AACrB,aAAO,KAAK;AAAA,IACd;AAAA,EACF;;;ACbA,MAAM;AAAA,IACJ,cAAc,EAAE,mBAAmB,iBAAiB;AAAA,EACtD,IAAI;AAEW,WAAR,gEACL,QACA,MAMyB;AACzB,UAAM,EAAE,kBAAkB,UAAU,oBAAoB,UAAU,IAAI,QAAQ,CAAC;AAC/E,UAAM,OAQF,OAAO,OAAO,SAAS,WAAW,KAAK,MAAM,OAAO,IAAI,IAAI,OAAO;AAEvE,QAAI,OAAO,WAAW,qBAAsB,OAAO,WAAW,oBAAoB,CAAC,KAAK,OAAQ;AAC9F,aAAO,IAAI,wBAAwB;AAAA,QACjC,SAAS,OAAO,WAAW;AAAA,QAC3B,SAAS;AAAA,UACP,IAAI,6BAA6B;AAAA,YAC/B,YAAY;AAAA,YACZ,YAAY,OAAO;AAAA,UACrB,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH,WAAW,OAAO,WAAW,kBAAkB;AAC7C,aAAO,IAAI,wBAAwB;AAAA,QACjC,SAAS;AAAA,QACT,UAAU,KAAK,SAAS,CAAC,GAAG,MAAM,GAAG,eAAe,EAAE;AAAA,UACpD,CAAC,EAAE,YAAY,YAAY,SAAS,SAAS,KAAK,KAAK,SAAS,SAAS,WAAW,UAAU,MAC5F,IAAI,6BAA6B;AAAA,YAC/B;AAAA,YACA,YACE,sBAAsB,QAClB,MACA,sBAAsB,YACpB,UACA,sBAAsB,cACpB,YACA;AAAA,UACZ,CAAC;AAAA,QACL;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,wBAAwB,EAAE,SAAS,OAAO,SAAS,CAAC,EAAE,CAAC;AAAA,EACpE;;;ACae,WAAR,gCAGL,IAAO,UAA+B,QAAmD;AACzF,WAAO,IAAI;AAAA;AAAA,MAET,IAAI,QAAW,CAAC,SAAS,WAAW,GAAG,MAAM,SAAS,CAAC,GAAG,MAAM,SAAS,MAAM,CAA6B,CAAC;AAAA;AAAA,EACjH;;;AC/EA,MAAqB,mBAArB,MAAmG;AAAA,IACjG,YAAY,aAA0B;AACpC,WAAK,eAAe;AACpB,WAAK,eAAe,CAAC;AAAA,IACvB;AAAA,IAEA;AAAA,IACA;AAAA,IAEA,YAAyB,MAAqD;AAC5E,aAAO,KAAK,aAAa,IAAI;AAAA,IAC/B;AAAA,IAEA,YAAyB,MAAS,OAAmD;AACnF,YAAM,WAAW,KAAK,aAAa,IAAI;AAEvC,kBAAY,KAAK,aAAa,oBAAoB,MAAM,QAAgC;AAExF,UAAI,OAAO;AACT,aAAK,aAAa,iBAAiB,MAAM,KAA6B;AAAA,MACxE;AAEA,WAAK,aAAa,IAAI,IAAI;AAAA,IAC5B;AAAA,EACF;;;AC1BA,iCAAiC;;;ACAlB,WAAR,iBAAkC,aAAkC;AACzE,UAAMC,SAAQ,MAAM,KAAK,IAAI,WAAW,WAAW,CAAC;AAEpD,WAAOA,OAAM,OAAO,CAACC,mBAAkB,cAAcA,oBAAmB,KAAK,IAAI,SAAS,GAAG,CAAC,IAAID,OAAM;AAAA,EAC1G;;;ADGe,WAAR,mBAAoC,aAA0B;AAGnE,UAAM,kBAAkB;AACxB,UAAM,iBAAiB,gBAAgB;AACvC,UAAM,sBAAsB,gBAAgB,OAAO,KAAK,eAAe;AACvE,QAAI,aAAa;AACjB,QAAI,QAAQ;AAIZ,oBAAgB,SAAS,YAAY;AACnC,YAAM,SAAS,MAAM,oBAAoB,EAAE;AAE3C,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM,YAAY;AAChB,gBAAM,QAAQ,MAAM,OAAO,KAAK;AAOhC,cAAI,CAAC,cAAc,iBAAiB,MAAM,MAAM,IAAI,KAAK;AACvD,4BAAgB,OAAO,QAAQ,IAAI,0CAAiB,qBAAqB,EAAE,CAAC;AAC5E,yBAAa;AAAA,UACf;AAEA,cAAI,OAAO;AACT,mBAAO,EAAE,QAAQ,IAAI,YAAY,CAAC,GAAG,OAAO,MAAM,cAAc,KAAK,IAAI,EAAE;AAAA,UAC7E;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA,OAAO,MAAM;AACX,gBAAQ;AAAA,MACV;AAAA,MACA,WAAW,MAAM;AACf,wBAAgB,SAAS;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;;;AEzCe,WAAR,2BAA4C;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAyD;AACvD,WAAO,OAAO,OAAO;AAAA,MACnB;AAAA,MACA;AAAA,MACA,MAAM,QAAQ,KAAK,MAAM,IAAI;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;;;AClBA,MAAqB,oBAArB,MAAuE;AAAA,IACrE,cAAc;AACZ,WAAK,WAAW,CAAC;AAAA,IACnB;AAAA,IAEA,gBAAgB;AACd,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACzC;AAAA,IAEA,aAAa;AACX,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACzC;AAAA,IAEA,OAAyB;AACvB,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACzC;AAAA,IAEA,IAAI,SAAiB;AACnB,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACzC;AAAA,IAIA;AAAA,IAEA,IAAI,UAA6B;AAC/B,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,QAAQ,OAA0B;AACpC,UAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,aAAK,WAAW,OAAO,OAAO,CAAC,GAAG,KAAK,CAAC;AAAA,MAC1C,WAAW,OAAO,UAAU,UAAU;AACpC,aAAK,WAAW,OAAO,OAAO,CAAC,KAAK,CAAC;AAAA,MACvC,OAAO;AACL,cAAM,IAAI,MAAM,wDAAwD;AAAA,MAC1E;AAAA,IACF;AAAA,EACF;;;ACrCA,MAAqB,8BAArB,cAAyD,MAAM;AAAA,IAC7D,YAAY,MAAe,EAAE,OAAO,QAAQ,GAAoC;AAC9E,YAAM,IAAI;AAEV,WAAK,SAAS;AACd,WAAK,WAAW;AAAA,IAClB;AAAA,IAEA;AAAA,IACA;AAAA,IAEA,IAAI,QAAoC;AACtC,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,UAA8B;AAChC,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAa,OAAgB;AAC3B,aAAO;AAAA,IACT;AAAA,EACF;;;ACnCA,MAAqB,8BAArB,cAAyD,UAAmC;AAAA,IAC1F,YAAY,QAA4C;AACtD,YAAM,MAAM;AAAA,IACd;AAAA,EACF;;;ACCA,MAAqB,yBAArB,cAYU,MAAM;AAAA,IAYd,YAAY,MAAS,EAAE,MAAM,aAAa,QAAQ,IAAgC,CAAC,GAAG;AACpF,YAAM,IAAI;AAEV,WAAK,QAAQ;AACb,WAAK,eAAe;AACpB,WAAK,WAAW,WAAW,IAAI,4BAA4B,CAAC,CAAC;AAAA,IAC/D;AAAA,IAEA;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,IAEA,IAAI,OAAgB;AAClB,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,cAAkC;AACpC,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,UAAuC;AACzC,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAa,OAAU;AACrB,aAAO,MAAM;AAAA,IACf;AAAA,EACF;;;ACPA,MAAM,EAAE,cAAAE,eAAc,kBAAAC,kBAAiB,IAAI;AAU3C,MAAMC,yBAAwB,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC;AAE9C,WAAR,8CAA+D;AAAA,IACpE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAsD;AACpD,uBAAmB,MAAM,UAAU,GAAG,gBAAgB;AACtD,sBAAkB,MAAMA,wBAAuB,eAAe;AAC9D,kBAAc,MAAM,QAAQ,GAAG,WAAW;AAC1C,wBAAoB,MAAM,iCAAyB,iBAAiB;AACpE,wBAAoB,MAAM,iCAAyB,iBAAiB;AAGpE,WAAO,oBAAoB,eAAeD,kBAAiB,gBAAgB,eAAe;AAAA,IAE1F,MAAM,0BAA0B,YAAY;AAAA,MAC1C,cAAc;AAAA,MACd,oBAAuD,IAAI,iBAAiB,IAAI;AAAA,MAChF,YAA+B,IAAI,kBAAkB;AAAA,MACrD,kBAAkB;AAAA,MAClB,QACE,OAAO,WAAW,cACd,OAAO,SAAS,gBAAgB,aAAa,MAAM,KAAK,OAAO,UAAU,WACzE;AAAA;AAAA,MAEN,mBAA2B;AAAA,MAE3B,sBAAkD,MAAc,OAAU;AACxE,aAAK;AAAA,UACH,IAAI,uBAAuB,qBAAqB;AAAA,YAC9C,MAAM;AAAA,cACJ,GAAG;AAAA,cACH;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MAEA,IAAI,aAAsB;AACxB,eAAO,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,WAAW,OAAgB;AAC7B,aAAK,cAAc;AAAA,MACrB;AAAA,MAEA,IAAI,WAA8B;AAChC,eAAO,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,SAAS,OAA0B;AACrC,YAAI,iBAAiB,mBAAmB;AACtC,eAAK,YAAY;AAAA,QACnB,OAAO;AACL,gBAAM,IAAI,MAAM,uDAAuD;AAAA,QACzE;AAAA,MACF;AAAA,MAEA,IAAI,iBAAiB;AACnB,eAAO,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,eAAe,OAAO;AACxB,aAAK,kBAAkB;AAAA,MACzB;AAAA,MAEA,IAAI,kBAAkB;AACpB,eAAO,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,gBAAgB,OAAO;AACzB,aAAK,mBAAmB;AAAA,MAC1B;AAAA,MAEA,IAAI,OAAO;AACT,eAAO,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,KAAK,OAAO;AACd,aAAK,QAAQ;AAAA,MACf;AAAA,MAEA,IAAI,aAAgF;AAClF,eAAO,KAAK,kBAAkB,YAAY,UAAU;AAAA,MACtD;AAAA,MAEA,IAAI,WAAW,OAA0E;AACvF,aAAK,kBAAkB,YAAY,YAAY,KAAK;AAAA,MACtD;AAAA;AAAA,MAGA,IAAI,eAAe;AACjB,eAAO,KAAK,kBAAkB,YAAY,YAAY;AAAA,MACxD;AAAA,MAEA,IAAI,aAEF,OACA;AACA,aAAK,kBAAkB,YAAY,cAAc,KAAK;AAAA,MACxD;AAAA;AAAA,MAGA,IAAI,sBAAsB;AACxB,eAAO,KAAK,kBAAkB,YAAY,mBAAmB;AAAA,MAC/D;AAAA,MAEA,IAAI,oBAEF,OACA;AACA,aAAK,kBAAkB,YAAY,qBAAqB,KAAK;AAAA,MAC/D;AAAA;AAAA,MAGA,IAAI,QAAQ;AACV,eAAO,KAAK,kBAAkB,YAAY,KAAK;AAAA,MACjD;AAAA,MAEA,IAAI,MAEF,OACA;AACA,aAAK,kBAAkB,YAAY,OAAO,KAAK;AAAA,MACjD;AAAA;AAAA,MAGA,IAAI,UAAU;AACZ,eAAO,KAAK,kBAAkB,YAAY,OAAO;AAAA,MACnD;AAAA,MAEA,IAAI,QAEF,OACA;AACA,aAAK,kBAAkB,YAAY,SAAS,KAAK;AAAA,MACnD;AAAA;AAAA,MAGA,IAAI,WAAW;AACb,eAAO,KAAK,kBAAkB,YAAY,QAAQ;AAAA,MACpD;AAAA,MAEA,IAAI,SAEF,OACA;AACA,aAAK,kBAAkB,YAAY,UAAU,KAAK;AAAA,MACpD;AAAA;AAAA,MAGA,IAAI,aAAa;AACf,eAAO,KAAK,kBAAkB,YAAY,UAAU;AAAA,MACtD;AAAA,MAEA,IAAI,WAEF,OACA;AACA,aAAK,kBAAkB,YAAY,YAAY,KAAK;AAAA,MACtD;AAAA;AAAA,MAGA,IAAI,eAAe;AACjB,eAAO,KAAK,kBAAkB,YAAY,YAAY;AAAA,MACxD;AAAA,MAEA,IAAI,aAEF,OACA;AACA,aAAK,kBAAkB,YAAY,cAAc,KAAK;AAAA,MACxD;AAAA;AAAA,MAGA,IAAI,cAAc;AAChB,eAAO,KAAK,kBAAkB,YAAY,WAAW;AAAA,MACvD;AAAA,MAEA,IAAI,YAEF,OACA;AACA,aAAK,kBAAkB,YAAY,aAAa,KAAK;AAAA,MACvD;AAAA;AAAA,MAGA,IAAI,gBAAgB;AAClB,eAAO,KAAK,kBAAkB,YAAY,aAAa;AAAA,MACzD;AAAA,MAEA,IAAI,cAEF,OACA;AACA,aAAK,kBAAkB,YAAY,eAAe,KAAK;AAAA,MACzD;AAAA;AAAA,MAGA,IAAI,UAAU;AACZ,eAAO,KAAK,kBAAkB,YAAY,OAAO;AAAA,MACnD;AAAA,MAEA,IAAI,QAEF,OACA;AACA,aAAK,kBAAkB,YAAY,SAAS,KAAK;AAAA,MACnD;AAAA,MAEA;AAAA,MACA;AAAA,MAEA,QAAQ;AACN,aAAK,WAAW,EAAE,MAAM,SAAO;AAC7B,eAAK;AAAA,YACH,IAAI,4BAA4B,SAAS,EAAE,OAAO,KAAK,SAAS,QAAQ,IAAI,SAAS,IAAI,SAAS,CAAC;AAAA,UACrG;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MAEA,MAAM,aAAa;AAEjB,cAAM,aAAa,MAAM,iBAAiB,KAAK,IAAI;AAEnD,cAAM,EAAE,OAAO,UAAU,IAAI,mBAAmB,WAAW,aAAa,CAAC;AAEzE,YAAI;AACF,gBAAM,QAAQ,2BAAmB;AACjC,cAAI;AACJ,cAAI;AACJ,cAAI;AAEJ,gBAAM,EAAE,QAAQ,uBAAuB,IAAK,WAAW,aAAa,EAAsB,OAAO;AAAA,YAC/F,WAAS;AACP,oBAAM,EAAE,KAAK,IAAI;AAEjB,kBAAI,SAAS,yBAAyB;AACpC,sBAAM,KAAK,EAAE,kBAAkB,CAAC,EAAE,CAAC;AAAA,cACrC,WAAW,SAAS,uBAAuB;AACzC,sBAAM,KAAK,EAAE,gBAAgB,CAAC,EAAE,CAAC;AAAA,cACnC,WAAW,SAAS,qBAAqB;AACvC,sBAAM,KAAK,EAAE,mBAAmB,CAAC,EAAE,CAAC;AAAA,cACtC;AAAA,YACF;AAAA,UACF;AAEA,qBAAW,WAAW,CAAC,GAAG,EAAE,cAAc,QAAQ,QAAQ,UAAU,MAA6B;AAC/F,kBAAM,KAAK;AAAA,cACT,UAAU;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AAEA,qBAAW,aAAa,CAAC,GAAG,EAAE,QAAQ,QAAQ,UAAU,MAAkC;AACxF,kBAAM,KAAK;AAAA,cACT,YAAY;AAAA,gBACV;AAAA,gBACA,QAAQ,2BAA2B,MAAM;AAAA,gBACzC;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AAEA,qBAAW,cAAc,CAAC,GAAG,EAAE,QAAQ,QAAQ,UAAU,MAAkC;AACzF,kBAAM,KAAK;AAAA,cACT,aAAa;AAAA,gBACX;AAAA,gBACA,QAAQ,2BAA2B,MAAM;AAAA,gBACzC;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AAEA,qBAAW,iBAAiB,CAAC,GAAG,EAAE,UAAU,MAAwB;AAClE,kBAAM,KAAK,EAAE,gBAAgB,EAAE,UAAU,EAAE,CAAC;AAAA,UAC9C;AAEA,qBAAW,iBAAiB,CAAC,GAAG,EAAE,UAAU,MAAwB;AAElE,kBAAM,KAAK,EAAE,gBAAgB,EAAE,UAAU,EAAE,CAAC;AAAA,UAC9C;AAEA,qBAAW,sBAAsB,CAAC,GAAG,EAAE,QAAQ,UAAU,MAA4B;AACnF,kBAAM,KAAK,EAAE,qBAAqB,EAAE,QAAQ,UAAU,EAAE,CAAC;AAAA,UAC3D;AAEA,qBAAW,oBAAoB,CAAC,GAAG,EAAE,UAAU,MAA4B;AAGzE,kBAAM,KAAK,EAAE,mBAAmB,EAAE,UAAU,EAAE,CAAC;AAAA,UACjD;AAEA,gBAAM,EAAE,QAAQ,IAAI,KAAK;AAGzB,gBAAM,EAAE,eAAe,IAAI,WAAW,UAAU;AAEhD,+BAAqB,kBAAkB,UAAU,eAAe,oBAAoB,CAAC,GAAG,iBAAiB,CAAC;AAC1G,qBAAW,QAAQ,UAAU,eAAe,UAAU,CAAC,GAAG,OAAO,CAAC;AAElE,gBAAM,gCAAsC,WAAW,iCAAiC,UAAU,EAAE;AAEpG,cAAI,OAAO,WAAW,mCAAmC,YAAY;AACnE,iBAAK,QAAQ,MAAM,MAAM,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;AAC3C,iBAAK,OAAO,MAAM,MAAM,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC;AAAA,UAC3C,OAAO;AACL,iBAAK,QAAQ,KAAK,OAAO;AAAA,UAC3B;AAEA,cAAI;AACJ,cAAI,aAAyF;AAC7F,cAAI,mBAAuD,CAAC;AAE5D,mBAAS,OAAO,GAAG,CAAC,YAAY,cAAc,QAAQ;AACpD,kBAAM,QAAQ,MAAM,MAAM,MAAM;AAChC,kBAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF,IAAI;AAGJ,mBAAO,KAAK,KAAK,EAAE,QAAQ,UAAQ,KAAK,sBAAsB,MAAM,MAAM,IAAI,CAAC,CAAC;AAEhF,kBAAM,eAAe,YAAY,SAAS;AAE1C,gBAAI,sBAAsB,KAAK,gBAAgB,EAAE,GAAG;AAGlD,2BAAa,IAAI,4BAA4B,SAAS,EAAE,OAAO,cAAc,CAAC;AAE9E;AAAA,YACF;AAEA,gBAAI,CAAC,MAAM;AACT,mBAAK,cAAc,IAAI,uBAAuB,OAAO,CAAC;AAAA,YACxD;AAEA,gBAAI,cAAc;AAChB,kBAAI,QAAQ,KAAK,YAAY,GAAG;AAC9B,oBAAI,CAAC,cAAc;AACjB,uBAAK,cAAc,IAAI,uBAAuB,YAAY,CAAC;AAC3D,uBAAK,cAAc,IAAI,uBAAuB,UAAU,CAAC;AAAA,gBAC3D;AAEA,6BAAa,IAAI,4BAA4B,SAAS,EAAE,OAAO,UAAU,CAAC;AAAA,cAC5E,OAAO;AACL,6BAAa,IAAI,4BAA4B,SAAS,EAAE,OAAO,UAAU,CAAC;AAAA,cAC5E;AAEA;AAAA,YACF,WAAW,SAAS,MAAM;AACxB,kBAAI,OAAO;AACT,6BAAa,IAAI,4BAA4B,SAAS,EAAE,OAAO,UAAU,CAAC;AAG1E,2BAAW;AAAA,cACb,OAAO;AAEL,sBAAM;AACN,2BAAW;AAAA,cACb;AAIA,kBAAI,SAAS,WAAW,gCAAgC;AACtD,sBAAM,gCAAsC,WAAW,gCAAgC,UAAU,EAAE;AAAA,cACrG;AAAA,YACF,WAAW,kBAAkB;AAC3B,mBAAK,cAAc,IAAI,uBAAuB,YAAY,CAAC;AAE3D,6BAAe;AAAA,YACjB,WAAW,mBAAmB;AAC5B,mBAAK,cAAc,IAAI,uBAAuB,YAAY,CAAC;AAE3D,6BAAe;AAAA,YACjB,WAAW,gBAAgB;AAKzB,+BAAiB,KAAK,cAAc,IAAI,uBAAuB,WAAW,CAAC;AAC3E,8BAAgB,KAAK,cAAc,IAAI,uBAAuB,UAAU,CAAC;AACzE,8BAAgB,KAAK,cAAc,IAAI,uBAAuB,UAAU,CAAC;AAEzE,6BAAe,eAAe,gBAAgB;AAE9C;AAAA,YACF,WAAW,aAAa,SAAS;AAC/B,kBAAI,cAAc,WAAW,UAAU,WAAW,OAAO,WAAWD,cAAa,SAAS;AAKxF,oBAAI,CAAC,KAAK,cAAc,aAAa,QAAQ;AAE3C,+BAAa,IAAI,uBAAuB,UAAU;AAAA,oBAChD,SAAS,IAAI,4BAA4B,gBAAgB;AAAA,kBAC3D,CAAC;AAID,6BAAW,kCACR,MAAM;AAAA,oBACL,WAAW;AAAA,oBACX;AAAA,kBACF,EAAE;AAKJ;AAAA,gBACF;AAAA,cACF,WAAW,cAAc,aAAa;AACpC,oBAAI,CAAC,cAAc;AAEjB,uBAAK,cAAc,IAAI,uBAAuB,YAAY,CAAC;AAE3D,iCAAe;AAAA,gBACjB;AAEA,oBAAI,CAAC,cAAc;AACjB,uBAAK,cAAc,IAAI,uBAAuB,YAAY,CAAC;AAE3D,iCAAe;AAAA,gBACjB;AAEA,oBAAI,CAAC,eAAe;AAClB,uBAAK,cAAc,IAAI,uBAAuB,aAAa,CAAC;AAE5D,kCAAgB;AAAA,gBAClB;AAEA,oBAAI,YAAY;AACd,wBAAM,SAAS,gEAAwD,WAAW,QAAQ;AAAA,oBACxF,iBAAiB,KAAK;AAAA,oBACtB;AAAA,kBACF,CAAC;AAED,wBAAM,eAAe,CAAC,CAAC,OAAO,CAAC,GAAG;AAElC,sBAAI,cAAc;AAChB,uCAAmB,CAAC,GAAG,kBAAkB,MAAM;AAE/C,yBAAK,cACH,KAAK;AAAA,sBACH,IAAI,uBAAuB,UAAU;AAAA,wBACnC,SAAS,IAAI,4BAA4B,gBAAgB;AAAA,sBAC3D,CAAC;AAAA,oBACH;AAAA,kBACJ;AAGA,sBAAI,KAAK,cAAc,cAAc;AACnC,iCAAa;AAAA,kBACf,OAAO;AACL,iCAAa,IAAI,uBAAuB,UAAU;AAAA,sBAChD,SAAS,IAAI,4BAA4B,gBAAgB;AAAA,oBAC3D,CAAC;AAAA,kBACH;AAIA,uBAAK,CAAC,KAAK,cAAc,aAAa,WAAW,WAAW,gCAAgC;AAC1F,0BAAM,gCAAsC,WAAW,gCAAgC,UAAU,EAAE;AAAA,kBACrG;AAIA,sBAAI,eAAe,cAAc,cAAc;AAC7C,yBAAK,cAAc,UAAU;AAC7B,iCAAa;AAAA,kBACf;AAAA,gBACF,WAAW,aAAa;AACtB,uBAAK,kBACH,KAAK;AAAA,oBACH,IAAI,uBAAuB,UAAU;AAAA,sBACnC,SAAS,IAAI,4BAA4B;AAAA,wBACvC,GAAG;AAAA,wBACH,gEAAwD,YAAY,QAAQ;AAAA,0BAC1E,iBAAiB,KAAK;AAAA,0BACtB;AAAA,wBACF,CAAC;AAAA,sBACH,CAAC;AAAA,oBACH,CAAC;AAAA,kBACH;AAAA,gBACJ;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAEA,cAAI,eAAe;AACjB,iBAAK,cAAc,IAAI,uBAAuB,WAAW,CAAC;AAAA,UAC5D;AAEA,cAAI,cAAc;AAChB,iBAAK,cAAc,IAAI,uBAAuB,UAAU,CAAC;AAAA,UAC3D;AAEA,cAAI,cAAc;AAChB,iBAAK,cAAc,IAAI,uBAAuB,UAAU,CAAC;AAAA,UAC3D;AAEA,cAAI,YAAY;AACd,gBAAI,WAAW,SAAS,YAAY,CAAC,WAAW,QAAQ,QAAQ;AAC9D,2BAAa,IAAI,4BAA4B,SAAS,EAAE,OAAO,YAAY,CAAC;AAAA,YAC9E;AAEA,iBAAK,cAAc,UAAU;AAAA,UAC/B;AAIA,eAAK,cAAc,IAAI,uBAAuB,KAAK,CAAC;AAEpD,iCAAuB;AAAA,QACzB,SAAS,KAAK;AAEZ,kBAAQ,MAAM,GAAG;AAEjB,gBAAM;AAAA,QACR,UAAE;AACA,oBAAU;AACV,qBAAW,SAAS,EAAE,KAAK;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;;;A3BtlBA,MAAM,EAAE,cAAAG,eAAc,cAAAC,eAAc,kBAAAC,kBAAiB,IAAI;AAE1C,WAAR,gCAAiD,SAA2B;AACjF,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,aAAa,OAAO;AAExB,QAAI,CAAC,gBAAgB,CAAC,OAAO,UAAU,gBAAgB,CAAC,OAAO,UAAU,aAAa,eAAe;AACnG,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,mBAAmB,OAAO,SAAiB;AAC/C,YAAM,cAAc,MAAM,iBAAiB;AAC3C,UAAI;AAEJ,UAAI,OAAO,YAAY,8BAA8B,aAAa;AAChE,cAAM,OAAO,IAAI,IAAI,qBAAqB;AAE1C,aAAK,WAAW,YAAY;AAE5B,YAAI,YAAY,oBAAoB;AAClC,yBAAeD,cAAa,SAAS,IAAI;AACzC,uBAAa,qBAAqB,YAAY;AAAA,QAChD,OAAO;AACL,yBAAeA,cAAa,SAAS,MAAM,YAAY,eAAe;AAAA,QACxE;AAAA,MACF,OAAO;AACL,uBACE,OAAO,YAAY,uBAAuB,cACtCA,cAAa,uBAAuB,YAAY,oBAAoB,YAAY,MAAM,IACtFA,cAAa,iBAAiB,YAAY,iBAAiB,YAAY,MAAM;AAAA,MACrF;AAEA,UAAI,6BAA6B;AAC/B,qBAAa,aAAa;AAAA,MAC5B;AAEA,mBAAa,eAAeD,cAAa;AACzC,mBAAa,4BAA4B,QAAQ;AACjD,aAAO,0BAA0B,YAC/B,aAAa,YAAY,yDAAW,iDAAiD,KAAK,qBAAqB;AAEjH,aAAO,IAAIE,kBAAiB,cAAc,WAAW;AAAA,IACvD;AAEA,WAAO,8CAA8C;AAAA,MACnD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;;;W4BlEgB,WACZ,WACA,YACG,MAAW;AAEd,QAAI,CAAC,WAAW;AACZ,YAAM,IAAI,UAAU,OAAO,SAAS,IAAI,CAAC;;EAEjD;WAOgB,OAAO,SAAiB,MAAW;AAC/C,QAAI,IAAI;AACR,WAAO,QAAQ,QAAQ,WAAW,MAAM,YAAY,KAAK,GAAG,CAAC,CAAC;EAClE;WAMgB,YAAY,GAAM;AAC9B,QAAI,OAAO,MAAM,YAAY,MAAM,MAAM;AACrC,aAAO,OAAO,CAAC;;AAEnB,WAAO,OAAO,UAAU,SAAS,KAAK,CAAC;EAC3C;AC5BA,MAAI;WA4BY,YAAY,YAAmB;AAC3C,QAAI;AACA,YAAM,QACF,sBAAsB,QAChB,aACA,IAAI,MAAM,YAAY,UAAU,CAAC;AAG3C,UAAI,qBAAqB;AACrB,4BAAoB,KAAK;AACzB;;AAIJ,UACI,OAAO,kBAAkB,cACzB,OAAO,eAAe,YACxB;AACE,sBACI,IAAI,WAAW,SAAS,EAAE,OAAO,SAAS,MAAM,QAAO,CAAE,CAAC;iBAO9D,OAAO,YAAY,eACnB,OAAO,QAAQ,SAAS,YAC1B;AACE,gBAAQ,KAAK,qBAAqB,KAAK;AACvC;;AAIJ,cAAQ,MAAM,KAAK;aACrB,IAAM;;EAGZ;AChEO,MAAM,SACT,OAAO,WAAW,cACZ,SACA,OAAO,SAAS,cAChB,OACA,OAAO,WAAW,cAClB,SACA,OAAO,eAAe,cACtB,aACA;ACdV,MAAI;MA6CS,gBAAO;IAIhB,YAAY,MAAc,SAAe;AACrC,WAAK,OAAO;AACZ,WAAK,UAAU;;;;;;IAOnB,QAAQ,MAAW;;AACf,UAAI;AAEA,YAAI,oBAAoB;AACpB,6BAAmB,EAAE,GAAG,MAAM,KAAI,CAAE;AACpC;;AAIJ,cAAM,UAAQ,KAAC,IAAI,MAAK,EAAG,WAAK,QAAA,OAAA,SAAA,KAAI,IAAI,QACpC,mBACA,IAAI;AAER,gBAAQ,KAAK,KAAK,SAAS,GAAG,MAAM,KAAK;eAC3C,IAAM;;;;ACzET,MAAM,qCAAqC,IAAI,QAClD,OACA,+CAA+C;AAG5C,MAAM,iCAAiC,IAAI,QAC9C,OACA,qEAAqE;AAGlE,MAAM,iCAAiC,IAAI,QAC9C,OACA,qEAAqE;AAGlE,MAAM,gCAAgC,IAAI,QAC7C,OACA,oDAAoD;AAGjD,MAAM,4BAA4B,IAAI,QACzC,OACA,oEAAoE;AAGjE,MAAM,6BAA6B,IAAI,QAG1C,OACA,0EAA0E;AAGvE,MAAM,mBAAmB,IAAI,QAGhC,OACA,0FAA0F;AAGvF,MAAM,uBAAuB,IAAI,QAGpC,OACA,2FAA2F;AAGxF,MAAM,0BAA0B,IAAI,QAEzC,OAAO,gDAAgD;MCjC5CC,eAAK;;;;IAId,WAAW,OAAI;AACX,aAAO;;;;;IAMX,WAAW,kBAAe;AACtB,aAAO;;;;;IAMX,WAAW,YAAS;AAChB,aAAO;;;;;IAMX,WAAW,iBAAc;AACrB,aAAO;;;;;;;;IASX,YAAY,MAAkB,eAA+B;AACzD,aAAO,eAAe,MAAM,aAAa;QACrC,OAAO;QACP,YAAY;OACf;AAED,YAAM,OAAO,kBAAa,QAAb,kBAAa,SAAb,gBAAiB,CAAA;AAC9B,sBAAgB,IAAI,MAAM;QACtB,MAAM,OAAO,IAAI;QACjB,SAAS,QAAQ,KAAK,OAAO;QAC7B,YAAY,QAAQ,KAAK,UAAU;QACnC,UAAU,QAAQ,KAAK,QAAQ;QAC/B,QAAQ;QACR,eAAe;QACf,qBAAqB;QACrB,8BAA8B;QAC9B,cAAc;QACd,uBAAuB;QACvB,cAAc;QACd,WAAW,KAAK,IAAG;OACtB;;;;;;IAOL,IAAI,OAAI;AACJ,aAAO,EAAE,IAAI,EAAE;;;;;;IAOnB,IAAI,SAAM;AACN,aAAO,EAAE,IAAI,EAAE;;;;;;;IAQnB,IAAI,aAAU;AACV,aAAO,EAAE,IAAI,EAAE;;;;;;IAOnB,IAAI,gBAAa;AACb,aAAO,EAAE,IAAI,EAAE;;;;;;;IAQnB,eAAY;AACR,YAAM,gBAAgB,EAAE,IAAI,EAAE;AAC9B,UAAI,eAAe;AACf,eAAO,CAAC,aAAa;;AAEzB,aAAO,CAAA;;;;;IAMX,IAAI,OAAI;AACJ,aAAO;;;;;IAMX,IAAI,kBAAe;AACf,aAAO;;;;;IAMX,IAAI,YAAS;AACT,aAAO;;;;;IAMX,IAAI,iBAAc;AACd,aAAO;;;;;;IAOX,IAAI,aAAU;AACV,aAAO,EAAE,IAAI,EAAE,eAAe,IAAI;;;;;;;IAQtC,kBAAe;AACX,QAAE,IAAI,EAAE,sBAAsB;;;;;;;IAQlC,IAAI,eAAY;AACZ,aAAO,EAAE,IAAI,EAAE;;;;;;;IAQnB,IAAI,aAAa,OAAc;AAC3B,UAAI,OAAO;AACP,UAAE,IAAI,EAAE,sBAAsB;aAC3B;AACH,uCAA+B,KAAI;;;;;;;IAQ3C,2BAAwB;AACpB,YAAM,OAAO,EAAE,IAAI;AACnB,WAAK,sBAAsB,KAAK,+BAA+B;;;;;;IAOnE,IAAI,UAAO;AACP,aAAO,EAAE,IAAI,EAAE;;;;;;IAOnB,IAAI,aAAU;AACV,aAAO,EAAE,IAAI,EAAE;;;;;;;IAQnB,IAAI,cAAW;AACX,aAAO,CAAC,EAAE,IAAI,EAAE;;;;;;;IAQpB,IAAI,YAAY,OAAc;AAC1B,UAAI,CAAC,OAAO;AACR,sBAAc,EAAE,IAAI,CAAC;aAClB;AACH,uCAA+B,KAAI;;;;;;;IAQ3C,iBAAc;AACV,oBAAc,EAAE,IAAI,CAAC;;;;;;IAOzB,IAAI,mBAAgB;AAChB,aAAO,EAAE,IAAI,EAAE;;;;;IAMnB,IAAI,WAAQ;AACR,aAAO,EAAE,IAAI,EAAE;;;;;;IAOnB,IAAI,YAAS;AACT,aAAO;;;;;IAMX,IAAI,YAAS;AACT,aAAO,EAAE,IAAI,EAAE;;;;;IAMnB,UAAU,MAAc,UAAU,OAAO,aAAa,OAAK;AACvD,YAAM,OAAO,EAAE,IAAI;AACnB,UAAI,KAAK,cAAc;AACnB,2CAAmC,KAAI;AACvC;;AAGJ,sBAAgB,IAAI,MAAM;QACtB,GAAG;QACH,MAAM,OAAO,IAAI;QACjB,SAAS,QAAQ,OAAO;QACxB,YAAY,QAAQ,UAAU;QAC9B,QAAQ;QACR,eAAe;QACf,qBAAqB;QACrB,8BAA8B;QAC9B,cAAc;OACjB;;;AAwBT,MAAM,OAAO;AACb,MAAM,kBAAkB;AACxB,MAAM,YAAY;AAClB,MAAM,iBAAiB;AA4DvB,MAAM,kBAAkB,oBAAI,QAAO;AAQnC,WAAS,EAAE,OAAgB,OAAO,QAAM;AACpC,UAAM,OAAO,gBAAgB,IAAI,KAAK;AACtC,eACI,QAAQ,MACR,kFACA,MACA,KAAK;AAET,WAAO;EACX;AAMA,WAAS,cAAc,MAAuB;AAC1C,QAAI,KAAK,uBAAuB;AAC5B,gCAA0B,KAAI;AAC9B;;AAEJ,QAAI,CAAC,KAAK,YAAY;AAClB,oCAA8B,KAAI;AAClC;;AAGJ,SAAK,eAAe;EACxB;AAGA,SAAO,eAAeA,QAAO,QAAQ,EAAE,YAAY,KAAI,CAAE;AACzD,SAAO,eAAeA,QAAO,mBAAmB,EAAE,YAAY,KAAI,CAAE;AACpE,SAAO,eAAeA,QAAO,aAAa,EAAE,YAAY,KAAI,CAAE;AAC9D,SAAO,eAAeA,QAAO,kBAAkB,EAAE,YAAY,KAAI,CAAE;AACnE,MAAM,OAAO,OAAO,oBAAoBA,OAAM,SAAS;AACvD,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAClC,QAAI,KAAK,CAAC,MAAM,eAAe;AAC3B;;AAEJ,WAAO,eAAeA,OAAM,WAAW,KAAK,CAAC,GAAG,EAAE,YAAY,KAAI,CAAE;;AAIxE,MAAI,OAAO,WAAW,eAAe,OAAO,OAAO,UAAU,aAAa;AACtE,WAAO,eAAeA,OAAM,WAAW,OAAO,MAAM,SAAS;;WC1ajD,wBAAwB,SAAe;AACnD,QAAI,OAAO,cAAc;AACrB,aAAO,IAAI,OAAO,aAAa,SAAS,mBAAmB;;AAG/D,QAAI,gBAAgB,MAAM;AACtB,qBAAe,MAAMC,sBAAqB,MAAK;QAC3C,YAAY,KAAW;AACnB,gBAAM,GAAG;AACT,cAAK,MAAc,mBAAmB;AAChC,kBAAc,kBAAkB,MAAMA,aAAY;;;;QAI5D,IAAI,OAAI;AACJ,iBAAO;;;QAGX,IAAI,OAAI;AACJ,iBAAO;;;AAGf,aAAO,iBAAiB,aAAa,WAAW;QAC5C,MAAM,EAAE,YAAY,KAAI;QACxB,MAAM,EAAE,YAAY,KAAI;OAC3B;AACD,gCAA0B,YAAY;AACtC,gCAA0B,aAAa,SAAS;;AAEpD,WAAO,IAAI,aAAa,OAAO;EACnC;AAMA,MAAI;AAEJ,MAAM,eAAe;IACjB,gBAAgB;IAChB,oBAAoB;IACpB,uBAAuB;IACvB,oBAAoB;IACpB,uBAAuB;IACvB,qBAAqB;IACrB,6BAA6B;IAC7B,eAAe;IACf,mBAAmB;IACnB,qBAAqB;IACrB,mBAAmB;IACnB,YAAY;IACZ,0BAA0B;IAC1B,eAAe;IACf,oBAAoB;IACpB,gBAAgB;IAChB,mBAAmB;IACnB,cAAc;IACd,aAAa;IACb,WAAW;IACX,kBAAkB;IAClB,oBAAoB;IACpB,aAAa;IACb,uBAAuB;IACvB,gBAAgB;;AAIpB,WAAS,0BAA0B,KAAQ;AACvC,UAAMC,QAAO,OAAO,KAAK,YAAY;AACrC,aAAS,IAAI,GAAG,IAAIA,MAAK,QAAQ,EAAE,GAAG;AAClC,YAAM,MAAMA,MAAK,CAAC;AAClB,YAAM,QAAQ,aAAa,GAAG;AAC9B,aAAO,eAAe,KAAK,KAAK;QAC5B,MAAG;AACC,iBAAO;;QAEX,cAAc;QACd,YAAY;OACf;;EAET;MC7Ea,6BAAgDF,OAAiB;;;;;IAK1E,OAAO,KAA0B,OAAQ;AACrC,aAAO,KAAK,kBAAkB,KAAK,GAAG,KAAK;;IAG/C,YAAsB,OAAwB;AAC1C,YAAM,MAAM,MAAM;QACd,SAAS,MAAM;QACf,YAAY,MAAM;QAClB,UAAU,MAAM;OACnB;AAED,UAAI,MAAM,cAAc;AACpB,cAAM,gBAAe;;AAEzB,UAAI,MAAM,kBAAkB;AACxB,cAAM,eAAc;;AAGxBG,wBAAgB,IAAI,MAAM,EAAE,UAAU,MAAK,CAAE;AAG7C,YAAMD,QAAO,OAAO,KAAK,KAAK;AAC9B,eAAS,IAAI,GAAG,IAAIA,MAAK,QAAQ,EAAE,GAAG;AAClC,cAAM,MAAMA,MAAK,CAAC;AAClB,YAAI,EAAE,OAAO,OAAO;AAChB,iBAAO,eACH,MACA,KACA,yBAAyB,OAAO,GAAG,CAAC;;;;IAMpD,kBAAe;AACX,YAAM,gBAAe;AAErB,YAAM,EAAE,SAAQ,IAAKE,IAAE,IAAI;AAC3B,UAAI,qBAAqB,UAAU;AAC/B,iBAAS,gBAAgB;;;IAIjC,IAAI,eAAY;AACZ,aAAO,MAAM;;IAEjB,IAAI,aAAa,OAAc;AAC3B,YAAM,eAAe;AAErB,YAAM,EAAE,SAAQ,IAAKA,IAAE,IAAI;AAC3B,UAAI,kBAAkB,UAAU;AAC5B,iBAAS,eAAe;;;IAIhC,2BAAwB;AACpB,YAAM,yBAAwB;AAE9B,YAAM,EAAE,SAAQ,IAAKA,IAAE,IAAI;AAC3B,UAAI,8BAA8B,UAAU;AACxC,iBAAS,yBAAyB;;;IAI1C,IAAI,cAAW;AACX,aAAO,MAAM;;IAEjB,IAAI,YAAY,OAAc;AAC1B,YAAM,cAAc;AAEpB,YAAM,EAAE,SAAQ,IAAKA,IAAE,IAAI;AAC3B,UAAI,iBAAiB,UAAU;AAC3B,iBAAS,cAAc;;;IAI/B,iBAAc;AACV,YAAM,eAAc;AAEpB,YAAM,EAAE,SAAQ,IAAKA,IAAE,IAAI;AAC3B,UAAI,oBAAoB,UAAU;AAC9B,iBAAS,eAAe;;;IAIhC,IAAI,YAAS;AACT,YAAM,EAAE,SAAQ,IAAKA,IAAE,IAAI;AAC3B,UAAI,eAAe,UAAU;AACzB,eAAO,SAAS;;AAEpB,aAAO,MAAM;;;AAmBrB,MAAMD,oBAAkB,oBAAI,QAAO;AAOnC,WAASC,IAAE,OAAc;AACrB,UAAM,OAAOD,kBAAgB,IAAI,KAAK;AACtC,eACI,QAAQ,MACR,+CACA,KAAK;AAET,WAAO;EACX;AAOA,MAAM,oBAAoB,oBAAI,QAAO;AAGrC,oBAAkB,IAAI,OAAO,WAAW,YAAY;AACpD,MAAI,OAAO,WAAW,eAAe,OAAO,OAAO,UAAU,aAAa;AACtE,sBAAkB,IAAI,OAAO,MAAM,WAAW,YAAY;;AAO9D,WAAS,kBACL,eAAgB;AAEhB,UAAM,YAAY,OAAO,eAAe,aAAa;AACrD,QAAI,aAAa,MAAM;AACnB,aAAO;;AAGX,QAAI,UAAe,kBAAkB,IAAI,SAAS;AAClD,QAAI,WAAW,MAAM;AACjB,gBAAU,cAAc,kBAAkB,SAAS,GAAG,SAAS;AAC/D,wBAAkB,IAAI,WAAW,OAAO;;AAG5C,WAAO;EACX;AAOA,WAAS,cAAc,kBAAuB,mBAAsB;IAChE,MAAM,2BAA2B,iBAAgB;;AAEjD,UAAMD,QAAO,OAAO,KAAK,iBAAiB;AAC1C,aAAS,IAAI,GAAG,IAAIA,MAAK,QAAQ,EAAE,GAAG;AAClC,aAAO,eACH,mBAAmB,WACnBA,MAAK,CAAC,GACN,yBAAyB,mBAAmBA,MAAK,CAAC,CAAC,CAAC;;AAI5D,WAAO;EACX;AAKA,WAAS,yBAAyB,KAAU,KAAW;AACnD,UAAM,IAAI,OAAO,yBAAyB,KAAK,GAAG;AAClD,WAAO;MACH,MAAG;AACC,cAAM,WAAgBE,IAAE,IAAI,EAAE;AAC9B,cAAM,QAAQ,SAAS,GAAG;AAC1B,YAAI,OAAO,UAAU,YAAY;AAC7B,iBAAO,MAAM,KAAK,QAAQ;;AAE9B,eAAO;;MAEX,IAAI,OAAU;AACV,cAAM,WAAgBA,IAAE,IAAI,EAAE;AAC9B,iBAAS,GAAG,IAAI;;MAEpB,cAAc,EAAE;MAChB,YAAY,EAAE;;EAEtB;WC1JgB,eACZ,UACA,SACA,SACA,MACA,QACA,gBAAwC;AAExC,WAAO;MACH;MACA,QACK,UAAO,IAA2B,MAClC,UAAO,IAA2B,MAClC,OAAI,IAAwB;MACjC;MACA;;EAER;WAMgB,WAAW,UAAkB;AACzC,aAAS,SAAK;EAClB;WAMgB,UAAU,UAAkB;AACxC,YAAQ,SAAS,QAAK,OAAA;EAC1B;WAMgB,UAAU,UAAkB;AACxC,YAAQ,SAAS,QAAK,OAAA;EAC1B;WAMgB,OAAO,UAAkB;AACrC,YAAQ,SAAS,QAAK,OAAA;EAC1B;WAMgB,UAAU,UAAkB;AACxC,YAAQ,SAAS,QAAK,OAAA;EAC1B;WASgB,eACZ,EAAE,SAAQ,GACV,QACA,OAAiB;AAEjB,QAAI;AACA,UAAI,OAAO,aAAa,YAAY;AAChC,iBAAS,KAAK,QAAQ,KAAK;iBACpB,OAAO,SAAS,gBAAgB,YAAY;AACnD,iBAAS,YAAY,KAAK;;aAEzB,aAAa;AAClB,kBAAY,WAAW;;EAE/B;WC7GgB,oBACZ,EAAE,UAAS,GACX,UACA,SAAgB;AAEhB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AACvC,UACI,UAAU,CAAC,EAAE,aAAa,YAC1B,UAAU,UAAU,CAAC,CAAC,MAAM,SAC9B;AACE,eAAO;;;AAGf,WAAO;EACX;WAYgB,YACZ,MACA,UACA,SACA,SACA,MACA,QAAwC;AAExC,QAAI;AACJ,QAAI,QAAQ;AACR,uBAAiB,eAAe,KAAK,MAAM,MAAM,UAAU,OAAO;AAClE,aAAO,iBAAiB,SAAS,cAAc;;AAGnD,UAAM,WAAW,eACb,UACA,SACA,SACA,MACA,QACA,cAAc;AAGlB,QAAI,KAAK,KAAK;AACV,WAAK,MAAM;AACX,WAAK,YAAY,CAAC,GAAG,KAAK,WAAW,QAAQ;WAC1C;AACH,WAAK,UAAU,KAAK,QAAQ;;AAGhC,WAAO;EACX;WASgB,eACZ,MACA,UACA,SAAgB;AAEhB,UAAM,QAAQ,oBAAoB,MAAM,UAAU,OAAO;AACzD,QAAI,UAAU,IAAI;AACd,aAAO,iBAAiB,MAAM,KAAK;;AAEvC,WAAO;EACX;WASgB,iBACZ,MACA,OACA,aAAa,OAAK;AAElB,UAAM,WAAW,KAAK,UAAU,KAAK;AAGrC,eAAW,QAAQ;AAGnB,QAAI,SAAS,QAAQ;AACjB,eAAS,OAAO,oBAAoB,SAAS,SAAS,cAAe;;AAIzE,QAAI,KAAK,OAAO,CAAC,YAAY;AACzB,WAAK,MAAM;AACX,WAAK,YAAY,KAAK,UAAU,OAAO,CAAC,GAAG,MAAM,MAAM,KAAK;AAC5D,aAAO;;AAEX,SAAK,UAAU,OAAO,OAAO,CAAC;AAC9B,WAAO;EACX;WChIgB,wBAAqB;AACjC,WAAO,uBAAO,OAAO,IAAI;EAC7B;WAQgB,mBACZ,aACA,MAAY;;AAEZ,YAAA,KAAQ,YAAY,IAAI,OAAA,QAAA,OAAA,SAAA,KAAhB,YAAY,IAAI,IAAM;MAC1B,cAAc;MACd,cAAc;MACd,KAAK;MACL,WAAW,CAAA;;EAEnB;MCEaC,qBAAW;;;;IAOpB,cAAA;AACIF,wBAAgB,IAAI,MAAM,sBAAqB,CAAE;;;IAyDrD,iBACI,OACA,WACA,UAA2C;AAE3C,YAAM,cAAcC,IAAE,IAAI;AAC1B,YAAM,EACF,UACA,SACA,MACA,SACA,QACA,KAAI,IACJ,oBAAoB,OAAO,WAAW,QAAQ;AAClD,UAAI,YAAY,SAAQ,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,UAAS;AACrC;;AAEJ,YAAM,OAAO,mBAAmB,aAAa,IAAI;AAGjD,YAAM,IAAI,oBAAoB,MAAM,UAAU,OAAO;AACrD,UAAI,MAAM,IAAI;AACV,sBAAc,KAAK,UAAU,CAAC,GAAG,SAAS,MAAM,MAAM;AACtD;;AAIJ,kBAAY,MAAM,UAAU,SAAS,SAAS,MAAM,MAAM;;;IAyD9D,oBACI,OACA,WACA,UAAwC;AAExC,YAAM,cAAcA,IAAE,IAAI;AAC1B,YAAM,EAAE,UAAU,SAAS,KAAI,IAAK,iBAChC,OACA,WACA,QAAQ;AAEZ,YAAM,OAAO,YAAY,IAAI;AAE7B,UAAI,YAAY,QAAQ,MAAM;AAC1B,uBAAe,MAAM,UAAU,OAAO;;;;IAmB9C,cACI,GAEsC;AAEtC,YAAM,OAAOA,IAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;AACnC,UAAI,QAAQ,MAAM;AACd,eAAO;;AAGX,YAAM,QAAQ,aAAaJ,SAAQ,IAAI,aAAa,KAAK,CAAC;AAC1D,YAAM,YAAYM,EAAqB,OAAO,OAAO;AACrD,UAAI,UAAU,cAAc;AACxB,cAAM,wBAAwB,qCAAqC;;AAGvE,gBAAU,eAAe;AACzB,gBAAU,SAAS,UAAU,gBAAgB;AAE7C,UAAI,CAAC,UAAU,qBAAqB;AAChC,cAAM,EAAE,KAAK,UAAS,IAAK;AAG3B,aAAK,MAAM;AAGX,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AACvC,gBAAM,WAAW,UAAU,CAAC;AAG5B,cAAI,UAAU,QAAQ,GAAG;AACrB;;AAIJ,cAAI,OAAO,QAAQ,KAAK,iBAAiB,MAAM,GAAG,CAAC,GAAG,GAAG;AAGrD,iBAAK;;AAIT,oBAAU,wBAAwB,UAAU,QAAQ;AACpD,yBAAe,UAAU,MAAM,KAAK;AACpC,oBAAU,wBAAwB;AAGlC,cAAI,UAAU,8BAA8B;AACxC;;;AAKR,YAAI,CAAC,KAAK;AACN,eAAK,MAAM;;;AAInB,gBAAU,SAAS;AACnB,gBAAU,gBAAgB;AAC1B,gBAAU,+BAA+B;AACzC,gBAAU,sBAAsB;AAChC,gBAAU,eAAe;AAEzB,aAAO,CAAC,UAAU;;;AAyH1B,MAAMH,oBAAkB,oBAAI,QAAO;AAQnC,WAASC,IAAE,QAAa,OAAO,QAAM;AACjC,UAAM,OAAOD,kBAAgB,IAAI,MAAM;AACvC,eACI,QAAQ,MACR,wFACA,MACA,MAAM;AAEV,WAAO;EACX;AAMA,WAAS,oBACL,MACA,UACA,SAAqD;;AASrD,mBAAe,QAAQ;AAEvB,QAAI,OAAO,YAAY,YAAY,YAAY,MAAM;AACjD,aAAO;QACH,MAAM,OAAO,IAAI;QACjB,UAAU,aAAQ,QAAR,aAAQ,SAAR,WAAY;QACtB,SAAS,QAAQ,QAAQ,OAAO;QAChC,SAAS,QAAQ,QAAQ,OAAO;QAChC,MAAM,QAAQ,QAAQ,IAAI;QAC1B,SAAM,KAAE,QAAQ,YAAM,QAAA,OAAA,SAAA,KAAI;;;AAIlC,WAAO;MACH,MAAM,OAAO,IAAI;MACjB,UAAU,aAAQ,QAAR,aAAQ,SAAR,WAAY;MACtB,SAAS,QAAQ,OAAO;MACxB,SAAS;MACT,MAAM;MACN,QAAQ;;EAEhB;AAMA,WAAS,iBACL,MACA,UACA,SAAkD;AAMlD,mBAAe,QAAQ;AAEvB,QAAI,OAAO,YAAY,YAAY,YAAY,MAAM;AACjD,aAAO;QACH,MAAM,OAAO,IAAI;QACjB,UAAU,aAAQ,QAAR,aAAQ,SAAR,WAAY;QACtB,SAAS,QAAQ,QAAQ,OAAO;;;AAIxC,WAAO;MACH,MAAM,OAAO,IAAI;MACjB,UAAU,aAAQ,QAAR,aAAQ,SAAR,WAAY;MACtB,SAAS,QAAQ,OAAO;;EAEhC;AAMA,WAAS,eAAe,UAAa;AACjC,QACI,OAAO,aAAa,cACnB,OAAO,aAAa,YACjB,aAAa,QACb,OAAO,SAAS,gBAAgB,YACtC;AACE;;AAEJ,QAAI,YAAY,QAAQ,OAAO,aAAa,UAAU;AAClD,2BAAqB,KAAK,QAAQ;AAClC;;AAGJ,UAAM,IAAI,UAAU,OAAO,qBAAqB,SAAS,CAAC,QAAQ,CAAC,CAAC;EACxE;AASA,WAAS,cACL,UACA,SACA,MACA,QAA2C;AAE3C,+BAA2B,KACvB,UAAU,QAAQ,IAAI,YAAY,UAClC,SAAS,QAAQ;AAGrB,QAAI,UAAU,QAAQ,MAAM,SAAS;AACjC,uBAAiB,KAAK,SAAS;;AAEnC,QAAI,OAAO,QAAQ,MAAM,MAAM;AAC3B,uBAAiB,KAAK,MAAM;;AAEhC,QAAI,SAAS,WAAW,QAAQ;AAC5B,uBAAiB,KAAK,QAAQ;;EAEtC;AAGA,MAAMD,SAAO,OAAO,oBAAoBG,aAAY,SAAS;AAC7D,WAAS,IAAI,GAAG,IAAIH,OAAK,QAAQ,EAAE,GAAG;AAClC,QAAIA,OAAK,CAAC,MAAM,eAAe;AAC3B;;AAEJ,WAAO,eAAeG,aAAY,WAAWH,OAAK,CAAC,GAAG,EAAE,YAAY,KAAI,CAAE;;AAI9E,MACI,OAAO,WAAW,eAClB,OAAO,OAAO,gBAAgB,aAChC;AACE,WAAO,eAAeG,aAAY,WAAW,OAAO,YAAY,SAAS;;WC9hB7D,uBAIZ,QACA,MAAY;;AAEZ,UAAM,UAAUE,IAA2B,QAAQ,QAAQ;AAC3D,YAAA,MAAA,KAAO,QAAQ,IAAI,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAY,QAAA,OAAA,SAAA,KAAI;EAC1C;WAQgB,uBACZ,QACA,MACA,UAAuD;AAEvD,QAAI,YAAY,QAAQ,OAAO,aAAa,YAAY;AACpD,8BAAwB,KAAK,QAAQ;;AAGzC,QACI,OAAO,aAAa,cACnB,OAAO,aAAa,YAAY,aAAa,MAChD;AACE,mCAA6B,QAAQ,MAAM,QAAQ;WAChD;AACH,mCAA6B,QAAQ,IAAI;;EAEjD;AAYA,WAAS,6BAGL,QACA,MACA,UAAyD;AAEzD,UAAM,OAAO,mBACTA,IAA2B,QAAQ,QAAQ,GAC3C,OAAO,IAAI,CAAC;AAEhB,SAAK,eAAe;AAEpB,QAAI,KAAK,gBAAgB,MAAM;AAC3B,WAAK,eAAe,YAChB,MACA,6BAA6B,IAAI,GACjC,OACA,OACA,OACA,MAAS;;EAGrB;AAQA,WAAS,6BACL,QACA,MAAY;AAEZ,UAAM,UAAUA,IAA2B,QAAQ,QAAQ;AAC3D,UAAM,OAAO,QAAQ,OAAO,IAAI,CAAC;AACjC,QAAI,QAAQ,KAAK,cAAc;AAC3B,qBAAe,MAAM,KAAK,aAAa,UAAU,KAAK;AACtD,WAAK,eAAe,KAAK,eAAe;;EAEhD;AAOA,WAAS,6BACL,MAAkB;AAElB,WAAO,SAAU,OAAK;AAClB,YAAM,WAAW,KAAK;AACtB,UAAI,OAAO,aAAa,YAAY;AAChC,iBAAS,KAAK,MAAM,KAAK;;;EAGrC;;;AElHe,WAAR,UAA2B,OAA+C;AAC/E,WAAO,CAAC,GACL,OAAO,UAAU,cAAc,OAAO,UAAU,aACjD,SACA,UAAU,SACV,OAAO,MAAM,SAAS;EAE1B;;;ACKO,WAAS,kBACd,IACA,SACwB;AACxB,WAAO,IAAI,QAAuB,CAAA,YAAW;AAC3C,UAAI;AACF,cAAM,SAAS,GAAG,KAAK,OAAO;AAE9B,YAAI,UAAU,MAAM,GAAG;AACrB,iBAAO,KAAK,SAAS,MAAM,QAAQ,MAAS,CAAC;QAC/C,OAAO;AACL,kBAAQ,MAAM;QAChB;MACF,QAAQ;AACN,gBAAQ,MAAS;MACnB;IACF,CAAC;EACH;;;AC7BA,MAAI,YAAY,OAAO,SACnB,SAAS,SAAS,OAAO;AACrB,WAAO,OAAO,UAAU,YAAY,UAAU;AAAA,EAClD;AACJ,WAAS,QAAQ,OAAO,QAAQ;AAC5B,QAAI,UAAU,QAAQ;AAClB,aAAO;AAAA,IACX;AACA,QAAI,UAAU,KAAK,KAAK,UAAU,MAAM,GAAG;AACvC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACA,WAAS,eAAe,WAAW,YAAY;AAC3C,QAAI,UAAU,WAAW,WAAW,QAAQ;AACxC,aAAO;AAAA,IACX;AACA,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,UAAI,CAAC,QAAQ,UAAU,CAAC,GAAG,WAAW,CAAC,CAAC,GAAG;AACvC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAEA,WAAS,WAAW,UAAUC,UAAS;AACnC,QAAIA,aAAY,QAAQ;AAAE,MAAAA,WAAU;AAAA,IAAgB;AACpD,QAAI,QAAQ;AACZ,aAAS,WAAW;AAChB,UAAI,UAAU,CAAC;AACf,eAAS,KAAK,GAAG,KAAK,UAAU,QAAQ,MAAM;AAC1C,gBAAQ,EAAE,IAAI,UAAU,EAAE;AAAA,MAC9B;AACA,UAAI,SAAS,MAAM,aAAa,QAAQA,SAAQ,SAAS,MAAM,QAAQ,GAAG;AACtE,eAAO,MAAM;AAAA,MACjB;AACA,UAAI,aAAa,SAAS,MAAM,MAAM,OAAO;AAC7C,cAAQ;AAAA,QACJ;AAAA,QACA,UAAU;AAAA,QACV,UAAU;AAAA,MACd;AACA,aAAO;AAAA,IACX;AACA,aAAS,QAAQ,SAAS,QAAQ;AAC9B,cAAQ;AAAA,IACZ;AACA,WAAO;AAAA,EACX;;;AC9CA,MAAO,+BAAP,MAAqB;AAAA,IACnB,YAAY,cAAc;AACxB,WAAK,eAAe;AAAA,IACtB;AAAA,IAEA,QAAQ;AACN,WAAK,gBAAgB,KAAK,aAAa,QAAQ;AAC/C,WAAK,oBAAoB,KAAK,iBAAiB,cAAc,IAAI,YAAY,OAAO,CAAC;AAAA,IACvF;AAAA,IAEA,SAAS;AACP,WAAK,gBAAgB,KAAK,aAAa,OAAO;AAC9C,WAAK,oBAAoB,KAAK,iBAAiB,cAAc,IAAI,YAAY,QAAQ,CAAC;AAAA,IACxF;AAAA,IAEA,MAAM,MAAM,OAAO;AACjB,UAAI;AAEJ,aAAQ,YAAY,MAAM,MAAM,GAAI;AAClC,aAAK,mBAAmB;AAExB,cAAM,UAAU,KAAK,KAAK,YAAY;AAEtC,aAAK,mBAAmB;AAAA,MAC1B;AAAA,IACF;AAAA,IAEA,OAAO;AACL,WAAK,oBAAoB,KAAK,iBAAiB,KAAK;AAEpD,UAAI,KAAK,aAAa,UAAU,aAAa;AAM3C,aAAK,aAAa,OAAO;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;;;ACnCA,MAAO,4BAAP,MAAqB;AAAA,IACnB,YAAY,EAAE,cAAc,UAAAC,UAAS,GAAG;AACtC,WAAK,WAAW;AAChB,WAAK,SAAS;AACd,WAAK,QAAQ,CAAC;AAEd,WAAK,kBAAkB,WAAQ,MAAM,gBAAgB,IAAIA,UAAS,aAAa,CAAC;AAAA,IAClF;AAAA,IAEA,QAAQ;AACN,WAAK,SAAS;AACd,WAAK,YAAY,KAAK,SAAS,MAAM;AAAA,IACvC;AAAA,IAEA,KAAK,WAAW;AACd,WAAK,MAAM,KAAK,SAAS;AACzB,WAAK,cAAc;AAAA,IACrB;AAAA,IAEA,SAAS;AACP,WAAK,SAAS;AAEd,UAAI,KAAK,UAAU;AACjB,aAAK,SAAS,OAAO;AAAA,MACvB,OAAO;AACL,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAAA,IAEA,IAAI,WAAW;AACb,aAAO,CAAC,CAAC,KAAK;AAAA,IAChB;AAAA,IAEA,MAAM,gBAAgB;AACpB,aAAO,CAAC,KAAK,UAAU,KAAK,MAAM,UAAU,CAAC,KAAK,UAAU;AAC1D,aAAK,WAAW,IAAI,6BAAqB,KAAK,gBAAgB,CAAC;AAE/D,cAAM,KAAK,SAAS,MAAM,KAAK,KAAK;AAEpC,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA,IAEA,OAAO;AACL,WAAK,MAAM,OAAO,CAAC;AACnB,WAAK,YAAY,KAAK,SAAS,KAAK;AAAA,IACtC;AAAA,EACF;;;ACnDA,MAAqB,uBAArB,cAAkDC,OAAM;AAAA,IACtD,YAAY,MAAM;AAChB,YAAM,IAAI;AAAA,IACZ;AAAA,EACF;;;ACAA,WAAS,gBAAiC;AACxC,UAAM,YAAmC,CAAC;AAE1C,cAAU,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AACnD,gBAAU,SAAS;AACnB,gBAAU,UAAU;IACtB,CAAC;AAED,WAAO;EACT;AAEO,MAAM,iBAAN,MAAwB;IAC7B,cAAc;AACZ,WAAK,iBAAiB,CAAC,UAAa;AAClC,cAAM,WAAW,KAAK,kBAAkB,MAAM;AAE9C,oBAAY,SAAS,QAAQ,KAAK;AAElC,YAAI,KAAK,oBAAoB;AAC3B,eAAK,mBAAmB,QAAQ,KAAK;AACrC,eAAK,qBAAqB;QAC5B;MACF;IACF;IAEA;IACA,oBAAoC,CAAC;IACrC,qBAA+C;IAE/C,IAAI,gBAAgB;AAClB,aAAO,KAAK;IACd;IAEA,CAAC,OAAO,QAAQ,IAAI;AAClB,aAAO;QACL,MAAM,OAAO;UACX,MAAM;UACN,OAAO,KAAK,SAAS;QACvB;MACF;IACF;IAEA,MAAM;AACJ,YAAM,WAAW,cAAiB;AAElC,WAAK,kBAAkB,KAAK,QAAQ;AAEpC,aAAO,SAAS;IAClB;IAEA,WAAW;AACT,UAAI,CAAC,KAAK,oBAAoB;AAC5B,aAAK,qBAAqB,cAAiB;MAC7C;AAEA,aAAO,KAAK,mBAAmB;IACjC;EACF;;;AC/DA,MAAM,QAAQ;AAGd,MAAM,SAAS,OAAO,eAAe,cAAc,CAAA,IAAK,IAAI,WAAW,GAAG;AAC1E,OAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,WAAO,MAAM,WAAW,CAAC,CAAC,IAAI;;AADzB;MA0BI,SAAS,SAAC,QAAc;AACjC,QAAI,eAAe,OAAO,SAAS,MAC/B,MAAM,OAAO,QACb,GACA,IAAI,GACJ,UACA,UACA,UACA;AAEJ,QAAI,OAAO,OAAO,SAAS,CAAC,MAAM,KAAK;AACnC;AACA,UAAI,OAAO,OAAO,SAAS,CAAC,MAAM,KAAK;AACnC;;;AAIR,QAAM,cAAc,IAAI,YAAY,YAAY,GAC5C,QAAQ,IAAI,WAAW,WAAW;AAEtC,SAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AACzB,iBAAW,OAAO,OAAO,WAAW,CAAC,CAAC;AACtC,iBAAW,OAAO,OAAO,WAAW,IAAI,CAAC,CAAC;AAC1C,iBAAW,OAAO,OAAO,WAAW,IAAI,CAAC,CAAC;AAC1C,iBAAW,OAAO,OAAO,WAAW,IAAI,CAAC,CAAC;AAE1C,YAAM,GAAG,IAAK,YAAY,IAAM,YAAY;AAC5C,YAAM,GAAG,KAAM,WAAW,OAAO,IAAM,YAAY;AACnD,YAAM,GAAG,KAAM,WAAW,MAAM,IAAM,WAAW;;AAGrD,WAAO;EACX;;;AC1DA,WAAS,mBAAmB,OAAO;AACjC,QAAI,WAAW,KAAK,OAAO,QAAQ,KAAK,GAAG;AAE3C,QAAI,YAAY,GAAG;AACjB,iBAAW,MAAM;AAAA,IACnB;AAEA,WAAO,WAAW;AAAA,EACpB;AAEe,WAAR,UAA2B,EAAE,MAAM,QAAQ,GAAG,OAAO,GAAG,MAAM,OAAO,OAAO,GAAG;AACpF,WAAO,kCAAkC,IAAI;AAAA,qBAC1B,IAAI,WAAW,KAAK;AAAA,sBACnB,mBAAmB,KAAK,CAAC,WAAW,mBAAmB,IAAI,CAAC,aAAa;AAAA,MACzF;AAAA,IACF,CAAC;AAAA,QACG,IAAI;AAAA;AAAA;AAAA;AAAA,EAIZ;;;ACxBA,MAAM,oBAAoB;AAC1B,MAAM,qBAAqB;AAEZ,WAAR,OAAwB,MAAM;AACnC,WAAO,kBAAkB,KAAK,IAAI,KAAK,mBAAmB,KAAK,IAAI;AAAA,EACrE;;;ACDA,MAAM,mBAAmB;AACzB,MAAM,wBAAwB;AAC9B,MAAM,gBAAgB;AACtB,MAAM,mBACJ;AAEF,iBAAO,wBAAwB;AAAA,IAC7B;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,eAAe;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,EACF,GAAG;AACD,QAAI,CAAC,MAAM;AAET,aAAO,OAAO,gBAAgB;AAAA,IAChC;AAEA,UAAM,EAAE,oBAAoB,QAAQ,yBAAyB,gBAAgB,IAAI,MAAM,iBAAiB;AAExG,QAAK,sBAAsB,mBAAqB,CAAC,sBAAsB,CAAC,iBAAkB;AACxF,YAAM,IAAI,MAAM,+DAA+D;AAAA,IACjF,WAAY,UAAU,2BAA6B,CAAC,UAAU,CAAC,yBAA0B;AACvF,YAAM,IAAI,MAAM,+DAA+D;AAAA,IACjF;AAEA,UAAM,OAAO,OAAO,IAAI,IAAI,OAAO,UAAU,EAAE,MAAM,OAAO,MAAM,MAAM,OAAO,OAAO,CAAC;AAGvF,UAAM,WACJ,4BACC,eACG,GAAG,UAAU,MAAM,CAAC,gCACpB,GAAG,UAAU,MAAM,CAAC;AAC1B,UAAM,SAAS,eAAe,iBAAiB,UAAU,YAAY,CAAC,KAAK;AAC3E,UAAM,MAAM,WAAW,QAAQ,wBAAwB,MAAM;AAE7D,UAAM,MAAM,MAAM,MAAM,KAAK;AAAA,MAC3B,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,4BAA4B;AAAA,QAC5B,GAAI,qBACA;AAAA,UACE,eAAe,UAAU,kBAAkB;AAAA,QAC7C,IACA;AAAA,UACE,6BAA6B;AAAA,QAC/B;AAAA,MACN;AAAA,MACA,QAAQ;AAAA,MACR,MAAM;AAAA,IACR,CAAC;AAED,QAAI,CAAC,IAAI,IAAI;AACX,YAAM,IAAI,MAAM,6EAA6E,IAAI,MAAM,EAAE;AAAA,IAC3G;AAEA,WAAO,IAAI,YAAY;AAAA,EACzB;;;AClEe,WAAR,eAAgC,QAAQ,MAAM,SAAS;AAC5D,WAAO,iBAAiB,MAAM,OAAO;AAErC,WAAO,MAAM,OAAO,oBAAoB,MAAM,OAAO;AAAA,EACvD;;;ACKA,WAAS,qBAAqB,cAAc,aAAa;AACvD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,UAAU,aAAa,gBAAgB,aAAa,SAAS,MAAM;AAGzE,iBAAW,OAAO,QAAQ,SAAS,cAAc,QAAQ,OAAO;AAAA,IAClE,CAAC;AAAA,EACH;AAEA,WAAS,YAAY,cAAc,aAAa,QAAQ;AACtD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,qBAAqB,IAAI,eAAe;AAC9C,YAAM,cAAc,IAAI,eAAe;AACvC,YAAM,cAAc;AAAA,QAClB;AAAA,QACA;AAAA,QACA,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,UAAU,YAAY,mBAAmB,cAAc;AAAA,MACpF;AAEA,UAAI;AACF,eAAO,SAAS;AAEhB,eAAO,UAAU,YAAY;AAE7B,eAAO,QAAQ,aAAa,WAAW;AACvC,eAAO,MAAM,CAAC;AAEd,gBAAQ,KAAK,CAAC,mBAAmB,SAAS,GAAG,YAAY,SAAS,CAAC,CAAC,EAAE,KAAK,OAAO;AAAA,MACpF,SAAS,KAAK;AACZ,eAAO,GAAG;AAAA,MACZ,UAAE;AACA,oBAAY;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AAEA,MAAM,2BAAN,cAAuCC,aAAY;AAAA,IACjD,YAAY,MAAM;AAChB,YAAM;AAEN,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,UAAU;AAEf,WAAK,OAAO;AAEZ,WAAK,aAAa;AAClB,WAAK,QAAQ;AACb,WAAK,UAAU;AACf,WAAK,SAAS;AACd,WAAK,UAAU;AACf,WAAK,WAAW;AAChB,WAAK,UAAU;AAAA,IACjB;AAAA,IAEA,IAAI,OAAO;AACT,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,KAAK,OAAO;AACd,WAAK,QAAQ;AAAA,IACf;AAAA,IAEA,IAAI,aAAa;AACf,aAAO,uBAAuB,MAAM,UAAU;AAAA,IAChD;AAAA,IAEA,IAAI,WAAW,OAAO;AACpB,6BAAuB,MAAM,YAAY,KAAK;AAAA,IAChD;AAAA,IAEA,IAAI,QAAQ;AACV,aAAO,uBAAuB,MAAM,KAAK;AAAA,IAC3C;AAAA,IAEA,IAAI,MAAM,OAAO;AACf,6BAAuB,MAAM,OAAO,KAAK;AAAA,IAC3C;AAAA,IAEA,IAAI,UAAU;AACZ,aAAO,uBAAuB,MAAM,OAAO;AAAA,IAC7C;AAAA,IAEA,IAAI,QAAQ,OAAO;AACjB,6BAAuB,MAAM,SAAS,KAAK;AAAA,IAC7C;AAAA,IAEA,IAAI,SAAS;AACX,aAAO,uBAAuB,MAAM,MAAM;AAAA,IAC5C;AAAA,IAEA,IAAI,OAAO,OAAO;AAChB,6BAAuB,MAAM,QAAQ,KAAK;AAAA,IAC5C;AAAA,IAEA,IAAI,UAAU;AACZ,aAAO,uBAAuB,MAAM,OAAO;AAAA,IAC7C;AAAA,IAEA,IAAI,QAAQ,OAAO;AACjB,6BAAuB,MAAM,SAAS,KAAK;AAAA,IAC7C;AAAA,IAEA,IAAI,WAAW;AACb,aAAO,uBAAuB,MAAM,QAAQ;AAAA,IAC9C;AAAA,IAEA,IAAI,SAAS,OAAO;AAClB,6BAAuB,MAAM,UAAU,KAAK;AAAA,IAC9C;AAAA,IAEA,IAAI,UAAU;AACZ,aAAO,uBAAuB,MAAM,OAAO;AAAA,IAC7C;AAAA,IAEA,IAAI,QAAQ,OAAO;AACjB,6BAAuB,MAAM,SAAS,KAAK;AAAA,IAC7C;AAAA,IAEA,IAAI,QAAQ;AACV,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,MAAM,OAAO;AACf,WAAK,SAAS;AAAA,IAChB;AAAA,IAEA,IAAI,OAAO;AACT,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,KAAK,OAAO;AACd,WAAK,QAAQ;AAAA,IACf;AAAA,IAEA,IAAI,QAAQ;AACV,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,MAAM,OAAO;AACf,WAAK,SAAS;AAAA,IAChB;AAAA,IAEA,IAAI,SAAS;AACX,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,OAAO,OAAO;AAChB,WAAK,UAAU;AAAA,IACjB;AAAA,IAEA,QAAQ,EAAE,cAAc,kBAAkB,aAAa,GAAG;AACxD,WAAK,qBAAqB,wBAAgB;AAAA,QACxC;AAAA,QACA;AAAA,QACA,MAAM,KAAK,QAAQ,OAAO,UAAU;AAAA,QACpC;AAAA,QACA,OAAO,KAAK;AAAA,QACZ,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,QACX,OAAO,KAAK,SAAS,KAAK,MAAM;AAAA,QAChC,QAAQ,KAAK;AAAA,MACf,CAAC;AAID,WAAK,mBAAmB,MAAM;AAAA,IAChC;AAAA,IAEA,MAAM,KAAK,cAAc;AACvB,UAAI;AAEF,aAAK,cAAc,IAAI,qBAAqB,OAAO,CAAC;AAGpD,cAAM,SAAS,aAAa,mBAAmB;AAC/C,cAAM,cAAc,MAAM,qBAAqB,cAAc,MAAM,KAAK,kBAAkB;AAE1F,aAAK,iBAAiB;AAEtB,cAAM,YAAY,cAAc,aAAa,MAAM;AAEnD,aAAK,iBAAiB;AACtB,aAAK,cAAc,IAAI,qBAAqB,KAAK,CAAC;AAAA,MACpD,SAAS,OAAO;AAEd,aAAK,cAAc,IAAI,WAAW,SAAS,EAAE,OAAO,oBAAoB,SAAS,MAAM,MAAM,CAAC,CAAC;AAAA,MACjG;AAAA,IACF;AAAA,IAEA,OAAO;AACL,WAAK,kBAAkB,KAAK,eAAe,KAAK;AAAA,IAClD;AAAA,EACF;AAEA,MAAO,mCAAQ;;;AC9Mf,MAAO,+BAAP,MAAqB;AAAA,IACnB,YAAY,EAAE,QAAQ,MAAM,SAAS,GAAG;AACtC,WAAK,WAAW;AAChB,WAAK,UAAU;AACf,WAAK,QAAQ;AACb,WAAK,gBAAgB;AACrB,WAAK,QAAQ;AACb,WAAK,YAAY;AAAA,IACnB;AAAA,IAEA,IAAI,UAAU;AACZ,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,SAAS;AACX,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,OAAO;AACT,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,eAAe;AACjB,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,OAAO;AACT,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,WAAW;AACb,aAAO,KAAK;AAAA,IACd;AAAA,EACF;;;AC7BA,iBAAe,kBAAkB,EAAE,qBAAqB,cAAc,QAAQ,gBAAgB,GAAG;AAC/F,UAAM,WAAW,uBAAuB,GAAG,MAAM;AAGjD,UAAM,MAAM,MAAM;AAAA,MAChB,WAAW,UAAU,QAAQ,CAAC,oCAAoC,mBAAmB,YAAY,CAAC;AAAA,MAClG;AAAA,QACE,SAAS;AAAA,UACP,QAAQ;AAAA,UACR,6BAA6B;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,IAAI,IAAI;AACX,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AAEA,WAAO,IAAI,KAAK;AAAA,EAClB;AAEA,iBAAO,0BAAwB,EAAE,qBAAqB,cAAc,QAAQ,gBAAgB,GAAG;AAC7F,UAAM,EAAE,OAAO,IAAI,MAAM,kBAAkB,EAAE,qBAAqB,cAAc,QAAQ,gBAAgB,CAAC;AAEzG,WAAO,OACJ;AAAA,MACC,CAAC,EAAE,YAAY,EAAE,QAAQ,OAAO,GAAG,QAAQ,MAAM,MAAM,SAAS,MAC9D,IAAI,6BAAqB,EAAE,QAAQ,MAAM,SAAS,CAAC;AAAA,IACvD,EACC,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,MAAO,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,CAAE;AAAA,EACpE;;;AC9BA,iBAAO,YAAmC,EAAE,oBAAoB,QAAQ,yBAAyB,gBAAgB,GAAG;AAElH,UAAM,WAAW,2BAA2B,GAAG,UAAU,MAAM,CAAC;AAChE,UAAM,MAAM,MAAM,MAAM,WAAW,QAAQ,kCAAkC;AAAA,MAC3E,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAI,qBACA;AAAA,UACE,eAAe,UAAU,kBAAkB;AAAA,QAC7C,IACA;AAAA,UACE,6BAA6B;AAAA,QAC/B;AAAA,MACN;AAAA,IACF,CAAC;AAED,QAAI,CAAC,IAAI,IAAI;AACX,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC1C;AAEA,UAAM,SAAS,MAAM,IAAI,KAAK;AAE9B,WAAO,OACJ,IAAI,CAAC,EAAE,QAAQ,QAAQ,QAAQ,MAAM,MAAM,SAAS,MAAM,IAAI,6BAAqB,EAAE,QAAQ,MAAM,SAAS,CAAC,CAAC,EAC9G,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,MAAO,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,CAAE;AAAA,EACpE;;;ACfA,MAAMC,yBAAwB;AAC9B,MAAM,cAAc,CAAC;AAErB,MAAO,wCAAQ,aAAW;AACxB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA,UAAAC,YAAW;AAAA,QACT,cAAc,OAAO,gBAAgB,OAAO;AAAA,MAC9C;AAAA,MACA;AAAA,MACA,8BAA8BD;AAAA,IAChC,IAAI,aAAa,OAAO;AAExB,QAAI,CAAC,gBAAgB,CAACC,UAAS,cAAc;AAC3C,cAAQ;AAAA,QACN;AAAA,MACF;AAEA,aAAO,CAAC;AAAA,IACV;AAAA,IAEA,MAAM,wBAAwBC,aAAY;AAAA,MACxC,cAAc;AACZ,cAAM;AAEN,aAAK,QAAQ,IAAI,0BAAkB,EAAE,cAAc,UAAAD,UAAS,CAAC;AAE7D,aAAK,aAAa;AAAA,MACpB;AAAA,MAEA,SAAS;AACP,aAAK,MAAM,KAAK;AAAA,MAClB;AAAA,MAEA,YAAY;AACV,eAAO;AAAA,MACT;AAAA,MAEA,IAAI,kBAAkB;AACpB,eAAO,uBAAuB,MAAM,eAAe;AAAA,MACrD;AAAA,MAEA,IAAI,gBAAgB,OAAO;AACzB,+BAAuB,MAAM,iBAAiB,KAAK;AAAA,MACrD;AAAA,MAEA,QAAQ;AACN,aAAK,MAAM,MAAM;AAAA,MACnB;AAAA,MAEA,SAAS;AACP,aAAK,MAAM,OAAO;AAAA,MACpB;AAAA,MAEA,MAAM,WAAW;AACf,YAAI,EAAE,qBAAqB,mCAA2B;AACpD,gBAAM,IAAI,MAAM,mBAAmB;AAAA,QACrC;AAEA,cAAM,EAAE,QAAQ,SAAS,QAAQ,IAAI,OAAe;AACpD,cAAM,cAAc,CAAC,EAAE,OAAO,WAAW,QAAQ,MAAM;AACrD,gBAAM,QAAQ,IAAI,MAAM,SAAS;AAEjC,gBAAM,QAAQ;AAEd,iBAAO,KAAK;AAAA,QACd;AAEA,kBAAU,iBAAiB,OAAO,OAAO;AACzC,kBAAU,iBAAiB,SAAS,WAAW;AAE/C,kBAAU,QAAQ;AAAA,UAChB,cAAc;AAAA,UACd;AAAA,UACA,cAAc;AAAA,QAChB,CAAC;AAED,aAAK,MAAM,KAAK,SAAS;AAEzB,eAAO,QAAQ,QAAQ,MAAM;AAC3B,oBAAU,oBAAoB,OAAO,OAAO;AAC5C,oBAAU,oBAAoB,SAAS,WAAW;AAAA,QACpD,CAAC;AAAA,MACH;AAAA,MAEA,IAAI,WAAW;AACb,eAAO,KAAK,MAAM;AAAA,MACpB;AAAA,MAEA,MAAM,eAAe;AACnB,cAAM,EAAE,qBAAqB,QAAQ,yBAAyB,gBAAgB,IAAI,MAAM,iBAAiB;AAEzG,YAAI,6BAA6B;AAC/B,cAAI,iBAAiB;AACnB,oBAAQ;AAAA,cACN;AAAA,YACF;AAEA,kBAAM,kBAAkB,YAAY;AAClC,oBAAM,SAAS,MAAM,0BAAkB;AAAA,gBACrC;AAAA,gBACA,cAAc;AAAA,gBACd;AAAA,gBACA;AAAA,gBACA;AAAA,cACF,CAAC;AAED,mBAAK,YAAY,MAAM;AAAA,YACzB,CAAC;AAAA,UACH;AAAA,QACF,OAAO;AAIL,gBAAM,kBAAkB,YAAY;AAClC,kBAAM,SAAS,MAAM,YAAY,MAAM,iBAAiB,CAAC;AAEzD,iBAAK,YAAY,MAAM;AAAA,UACzB,CAAC;AAAA,QACH;AAEA,aAAK,cAAc,IAAI,qBAAqB,eAAe,CAAC;AAAA,MAC9D;AAAA,IACF;AAEA,WAAO;AAAA,MACL,iBAAiB,IAAI,gBAAgB;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AAAA,EACF;;;AC/IA,MAAO,uBAAQ;;;ACeA,WAAR,6BAA8C,UAAe,CAAC,GAAQ;AAC3E,WAAO;AAAA,MACL,GAAG,gCAAgC,OAAO;AAAA,MAC1C,GAAG,qBAA8B,OAAO;AAAA,IAC1C;AAAA,EACF;AAgBA,MAAM,OAAO,SAAS,cAAc,MAAM;AAE1C,OAAK,aAAa,QAAQ,+BAA+B;AAGzD,OAAK,aAAa,WAAW,WAAW,OAA+B,EAAE;AAEzE,WAAS,KAAK,YAAY,IAAI;;;AC3C9B,aAAW,6BAA6B;AAAA,IACtC,QAAQ;AAAA,IACR;AAAA,EACF;","names":["_stringify","parse","_stringify","URL","_stringify","_stringify","EventType","AudioSourceEvent","MessageType","ConnectionState","array","PromiseState","error","SubscriberType","TranslationStatus","clearTimeout","setTimeout","array","AudioFormatTag","format","AudioContext","header","format","format","format","SpeechSynthesisOutputFormat","format","AudioConfig","format","CancellationReason","OutputFormat","SpeechRecognitionResult","ResultReason","SpeechConfig","format","format","PropertyId","SpeechRecognizer","VoiceProfileType","NoMatchReason","CancellationErrorCode","ServicePropertyChannel","ProfanityOption","maxValue","LanguageIdMode","SpeakerRecognitionResultType","e","format","SpeechState","ParticipantChangedReason","e","isSSML","e","SpeechSynthesisBoundaryType","SynthesisVoiceGender","SynthesisVoiceType","format","PronunciationAssessmentGradingSystem","PronunciationAssessmentGranularity","AvatarEventTypes","isSSML","require_browser","RestRequestType","SpeechRecognitionEvent","RecognitionCompletionStatus","format","RecognitionMode","SpeechResultFormat","SynthesisStatus","RecognitionStatus","MessageDataStreamType","format","cb","err","format","MetadataType","SpeechSynthesisEvent","format","isSSML","format","isSSML","SynthesisServiceType","format","error","format","enrollmentResponse","format","connectivity","type","AudioConfig","array","array","averageAmplitude","ResultReason","SpeechRecognizer","enableTelemetrySchema","OutputFormat","SpeechConfig","SpeechRecognizer","Event","DOMException","keys","internalDataMap","$","EventTarget","getEventInternalData","getEventTargetInternalData","isEqual","ponyfill","Event","EventTarget","DEFAULT_OUTPUT_FORMAT","ponyfill","EventTarget"]}