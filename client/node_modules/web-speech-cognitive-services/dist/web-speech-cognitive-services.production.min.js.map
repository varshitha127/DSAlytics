{"version":3,"sources":["../../../node_modules/uuid/dist/commonjs-browser/rng.js","../../../node_modules/uuid/dist/commonjs-browser/regex.js","../../../node_modules/uuid/dist/commonjs-browser/validate.js","../../../node_modules/uuid/dist/commonjs-browser/stringify.js","../../../node_modules/uuid/dist/commonjs-browser/v1.js","../../../node_modules/uuid/dist/commonjs-browser/parse.js","../../../node_modules/uuid/dist/commonjs-browser/v35.js","../../../node_modules/uuid/dist/commonjs-browser/md5.js","../../../node_modules/uuid/dist/commonjs-browser/v3.js","../../../node_modules/uuid/dist/commonjs-browser/native.js","../../../node_modules/uuid/dist/commonjs-browser/v4.js","../../../node_modules/uuid/dist/commonjs-browser/sha1.js","../../../node_modules/uuid/dist/commonjs-browser/v5.js","../../../node_modules/uuid/dist/commonjs-browser/nil.js","../../../node_modules/uuid/dist/commonjs-browser/version.js","../../../node_modules/uuid/dist/commonjs-browser/index.js","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IErrorMessages.js","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/OCSPEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LogLevel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Synthesizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarSynthesizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarVideoFormat.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarWebRTCConnectionResult.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts","../../../node_modules/bent/src/core.js","../../../node_modules/bent/src/browser.js","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AvatarSynthesisAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceConfig.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts","../../../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts","../src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.ts","../node_modules/valibot/dist/index.js","../src/SpeechServices/resolveFunctionOrReturnValue.ts","../src/SpeechServices/SpeechSDK.ts","../src/SpeechServices/SpeechToText/validation/credentialsSchema.ts","../src/SpeechServices/SpeechToText/validation/enableTelemetrySchema.ts","../src/SpeechServices/SpeechToText/validation/initialSilenceTimeoutSchema.ts","../src/SpeechServices/SpeechToText/validation/looseEventsSchema.ts","../src/SpeechServices/SpeechToText/validation/referenceGrammarsSchema.ts","../src/SpeechServices/SpeechToText/validation/speechRecognitionEndpointIdSchema.ts","../src/SpeechServices/SpeechToText/validation/textNormalizationSchema.ts","../src/SpeechServices/patchOptions.ts","../../../node_modules/p-defer/index.js","../src/Util/createPromiseQueue.js","../src/SpeechServices/SpeechToText/SpeechRecognitionAlternative.ts","../src/SpeechServices/SpeechToText/private/FakeArray.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionResult.ts","../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResult.ts","../src/SpeechServices/SpeechToText/cognitiveServicesAsyncToPromise.ts","../src/SpeechServices/SpeechToText/private/EventListenerMap.ts","../src/SpeechServices/SpeechToText/private/prepareAudioConfig.ts","../src/SpeechServices/SpeechToText/private/averageAmplitude.ts","../src/SpeechServices/SpeechToText/private/serializeRecognitionResult.ts","../src/SpeechServices/SpeechToText/SpeechGrammarList.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionErrorEvent.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionResultList.ts","../src/SpeechServices/SpeechToText/SpeechRecognitionEvent.ts","../src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfillFromRecognizer.ts","../../../node_modules/src/lib/misc.ts","../../../node_modules/src/lib/error-handler.ts","../../../node_modules/src/lib/global.ts","../../../node_modules/src/lib/warning-handler.ts","../../../node_modules/src/lib/warnings.ts","../../../node_modules/src/lib/event.ts","../../../node_modules/src/lib/dom-exception.ts","../../../node_modules/src/lib/event-wrapper.ts","../../../node_modules/src/lib/listener.ts","../../../node_modules/src/lib/listener-list.ts","../../../node_modules/src/lib/listener-list-map.ts","../../../node_modules/src/lib/event-target.ts","../../../node_modules/src/lib/event-attribute-handler.ts","../../../node_modules/src/lib/legacy.ts","../../../node_modules/on-error-resume-next/src/private/isPromise.ts","../../../node_modules/on-error-resume-next/src/index.async.ts","../../../node_modules/memoize-one/dist/memoize-one.esm.js","../src/SpeechServices/TextToSpeech/AudioContextConsumer.js","../src/SpeechServices/TextToSpeech/AudioContextQueue.js","../src/SpeechServices/TextToSpeech/SpeechSynthesisEvent.js","../node_modules/event-as-promise/src/index.ts","../../../node_modules/src/index.ts","../src/SpeechServices/TextToSpeech/buildSSML.js","../src/SpeechServices/TextToSpeech/isSSML.js","../src/SpeechServices/TextToSpeech/fetchSpeechData.js","../src/SpeechServices/TextToSpeech/subscribeEvent.js","../src/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js","../src/SpeechServices/TextToSpeech/SpeechSynthesisVoice.js","../src/SpeechServices/TextToSpeech/fetchCustomVoices.js","../src/SpeechServices/TextToSpeech/fetchVoices.js","../src/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js","../src/SpeechServices/TextToSpeech.js","../src/SpeechServices.ts","../src/index.umd.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.unsafeStringify)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URL = exports.DNS = void 0;\nexports.default = v35;\n\nvar _stringify = require(\"./stringify.js\");\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar _default = {\n  randomUUID\n};\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = _interopRequireDefault(require(\"./native.js\"));\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (_native.default.randomUUID && !buf && !options) {\n    return _native.default.randomUUID();\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.unsafeStringify)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nvar _default = version;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function get() {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return _parse.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function get() {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function get() {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function get() {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function get() {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function get() {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _version.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise.js\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IEventListener } from \"./IEventListener.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents.js\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=IErrorMessages.js.map\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\nimport { List } from \"./List.js\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise.js\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage.js\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && Object.getPrototypeOf(payload).constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { Queue } from \"./Queue.js\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports.js\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    public constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    public constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    public constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports.js\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./AudioSourceEvents.js\";\r\nexport * from \"./ConnectionEvents.js\";\r\nexport * from \"./ConnectionMessage.js\";\r\nexport * from \"./ConnectionOpenResponse.js\";\r\nexport * from \"./DeferralMap.js\";\r\nexport * from \"./DialogEvents.js\";\r\nexport * from \"./Error.js\";\r\nexport * from \"./Events.js\";\r\nexport * from \"./EventSource.js\";\r\nexport * from \"./Guid.js\";\r\nexport * from \"./IAudioSource.js\";\r\nexport * from \"./IConnection.js\";\r\nexport * from \"./IDetachable.js\";\r\nexport * from \"./IDictionary.js\";\r\nexport * from \"./IDisposable.js\";\r\nexport * from \"./IEventListener.js\";\r\nexport * from \"./IEventSource.js\";\r\nexport * from \"./IErrorMessages.js\";\r\nexport * from \"./ITimer.js\";\r\nexport * from \"./IWebsocketMessageFormatter.js\";\r\nexport * from \"./List.js\";\r\nexport * from \"./PlatformEvent.js\";\r\nexport * from \"./Promise.js\";\r\nexport * from \"./Queue.js\";\r\nexport * from \"./RawWebsocketMessage.js\";\r\nexport * from \"./RiffPcmEncoder.js\";\r\nexport * from \"./Stream.js\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus.js\";\r\nexport * from \"./ChunkedArrayBufferStream.js\";\r\nexport * from \"./IAudioDestination.js\";\r\nexport * from \"./Timeout.js\";\r\nexport * from \"./OCSPEvents.js\";\r\nexport * from \"./BackgroundError.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication.js\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType } from \"../common/Exports.js\";\r\n\r\n/**\r\n * Define event severity types for setting logging output.\r\n * @class LogLevel\r\n */\r\n\r\nexport { EventType as LogLevel };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel.js\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports.js\";\r\nimport { Contracts } from \"../sdk/Contracts.js\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public logCallback: (s: string) => void;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.logCallback) {\r\n                this.logCallback(log);\r\n            }\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { IStreamChunk } from \"../common/Stream.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { IRecorder } from \"./IRecorder.js\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch((): void => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports.js\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { createNoDashGuid } from \"../../common/Guid.js\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports.js\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports.js\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports.js\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream.js\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason.js\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {IStringDictionary} from \"../common/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The username of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n\r\n    /**\r\n     * Talking avatar service WebRTC session description protocol.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.33.0\r\n     */\r\n    TalkingAvatarService_WebRTC_SDP,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                this.privInternalData.speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Connection } from \"./Connection.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports.js\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports.js\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports.js\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports.js\";\r\nimport { OutputFormat } from \"./OutputFormat.js\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n    public static EnableAvatar: string = \"enableTalkingAvatar\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream.js\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload.js\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports.js\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports.js\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports.js\";\r\nimport { Callback } from \"./IConversation.js\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\nimport { ParticipantChangedReason } from \"./Exports.js\";\r\nimport { IParticipant } from \"./IParticipant.js\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports.js\";\r\nimport { ConversationTranslationResult } from \"./Exports.js\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection.js\";\r\nimport { ResultReason } from \"../ResultReason.js\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult.js\";\r\nimport { Translations } from \"../Translations.js\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports.js\";\r\nimport { ConversationImpl } from \"./Conversation.js\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports.js\";\r\nimport { Callback, IConversation } from \"./IConversation.js\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports.js\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports.js\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports.js\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport { Conversation, ConversationImpl } from \"./Conversation.js\";\r\nexport { ConversationInfo } from \"./IConversation.js\";\r\nexport { ConversationCommon } from \"./ConversationCommon.js\";\r\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs.js\";\r\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs.js\";\r\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs.js\";\r\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs.js\";\r\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult.js\";\r\nexport { ConversationTranslator } from \"./ConversationTranslator.js\";\r\nexport { ConversationTranscriber } from \"./ConversationTranscriber.js\";\r\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant.js\";\r\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason.js\";\r\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler.js\";\r\nexport { Meeting, MeetingImpl } from \"./Meeting.js\";\r\nexport { MeetingInfo } from \"./IMeeting.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriber } from \"./MeetingTranscriber.js\";\r\nexport { MeetingHandler, MeetingTranscriptionHandler } from \"./MeetingHandler.js\";\r\nexport { ConversationTranscriptionResult } from \"./ConversationTranscriptionResult.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig } from \"../common.speech/Exports.js\";\r\nimport { IAudioDestination, IStringDictionary, Queue } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, SpeechConfig, SpeechConfigImpl, SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\nexport abstract class Synthesizer {\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected privConnectionFactory: ISynthesisConnectionFactory;\r\n    protected privDisposed: boolean;\r\n    protected privSynthesizing: boolean;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this Synthesizer.\r\n     * @member Synthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member Synthesizer.prototype.autoDetectSourceLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config to initialize the synthesizer.\r\n     */\r\n    protected constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-JennyNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = Synthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Synthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected abstract createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase;\r\n\r\n    // Creates the REST synthesis adapter\r\n    protected abstract createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter;\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Does the generic synthesizer setup that is common across all synthesizer types.\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig: SynthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            synthesizerConfig);\r\n\r\n        this.privRestAdapter = this.createRestSynthesisAdapter(\r\n            authentication,\r\n            synthesizerConfig);\r\n    }\r\n\r\n    protected static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IVoiceJson,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult,\r\n    VoiceInfo,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as IVoiceJson));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IVoiceJson } from \"./IVoiceJson\";\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male,\r\n\r\n    /** Neutral voice */\r\n    Neutral\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\nconst GENDER_LOOKUP: Record<string, SynthesisVoiceGender> = {\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Neutral]]: SynthesisVoiceGender.Neutral,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Male]]: SynthesisVoiceGender.Male,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Female]]: SynthesisVoiceGender.Female,\r\n};\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: IVoiceJson[\"Name\"];\r\n    private privLocale: IVoiceJson[\"Locale\"];\r\n    private privShortName: IVoiceJson[\"ShortName\"];\r\n    private privDisplayName: IVoiceJson[\"DisplayName\"];\r\n    private privLocalName: IVoiceJson[\"LocalName\"];\r\n    private privLocaleName: IVoiceJson[\"LocaleName\"];\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: IVoiceJson[\"StyleList\"] = [];\r\n    private privSampleRateHertz: IVoiceJson[\"SampleRateHertz\"];\r\n    private privStatus: IVoiceJson[\"Status\"];\r\n    private privExtendedPropertyMap: IVoiceJson[\"ExtendedPropertyMap\"];\r\n    private privWordsPerMinute: IVoiceJson[\"WordsPerMinute\"];\r\n    private privSecondaryLocaleList: IVoiceJson[\"SecondaryLocaleList\"];\r\n    private privRolePlayList: IVoiceJson[\"RolePlayList\"];\r\n\r\n    public constructor(json: IVoiceJson) {\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = GENDER_LOOKUP[json.Gender] || SynthesisVoiceGender.Unknown;\r\n\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n\r\n            this.privSampleRateHertz = json.SampleRateHertz;\r\n            this.privStatus = json.Status;\r\n\r\n            if (json.ExtendedPropertyMap) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privExtendedPropertyMap = json.ExtendedPropertyMap;\r\n            }\r\n\r\n            this.privWordsPerMinute = json.WordsPerMinute;\r\n\r\n            if (Array.isArray(json.SecondaryLocaleList)) {\r\n                this.privSecondaryLocaleList = [...json.SecondaryLocaleList];\r\n            }\r\n\r\n            if (Array.isArray(json.RolePlayList)) {\r\n                this.privRolePlayList = [...json.RolePlayList];\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): IVoiceJson[\"Name\"] {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): IVoiceJson[\"Locale\"] {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): IVoiceJson[\"ShortName\"] {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): IVoiceJson[\"DisplayName\"] {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): IVoiceJson[\"LocalName\"] {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): IVoiceJson[\"LocaleName\"] {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): IVoiceJson[\"StyleList\"] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get sampleRateHertz(): IVoiceJson[\"SampleRateHertz\"] {\r\n        return this.privSampleRateHertz;\r\n    }\r\n\r\n    public get status(): IVoiceJson[\"Status\"] {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get extendedPropertyMap(): IVoiceJson[\"ExtendedPropertyMap\"] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privExtendedPropertyMap;\r\n    }\r\n\r\n    public get wordsPerMinute(): IVoiceJson[\"WordsPerMinute\"] {\r\n        return this.privWordsPerMinute;\r\n    }\r\n\r\n    public get secondaryLocaleList(): IVoiceJson[\"SecondaryLocaleList\"] {\r\n        return this.privSecondaryLocaleList;\r\n    }\r\n\r\n    public get rolePlayList(): IVoiceJson[\"RolePlayList\"] {\r\n        return this.privRolePlayList;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports.js\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat.js\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = this.privFormat.addHeader(receivedAudio);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n    enableProsodyAssessment: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n    private privEnableProsodyAssessment: boolean;\r\n    private privContentAssessmentTopic: string;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.expectContentAssessmentResponse = !!this.privContentAssessmentTopic;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(\r\n            this.properties.getProperty(PropertyId.PronunciationAssessment_Params),\r\n            this.privContentAssessmentTopic,\r\n            recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * Enables the prosody assessment.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableProsodyAssessment\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableProsodyAssessment - enable prosody assessment.\r\n     */\r\n    public set enableProsodyAssessment(enableProsodyAssessment: boolean) {\r\n        this.privEnableProsodyAssessment = enableProsodyAssessment;\r\n    }\r\n\r\n    /**\r\n     * Enables content assessment and sets the topic.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableContentAssessmentWithTopic\r\n     * @function\r\n     * @public\r\n     * @param {string} topic - Topic for content assessment.\r\n     */\r\n    public enableContentAssessmentWithTopic(topic: string): void {\r\n        this.privContentAssessmentTopic = topic;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        paramsJson.enableProsodyAssessment = this.privEnableProsodyAssessment;\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports.js\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { AvatarVideoFormat } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the talking avatar configuration.\r\n * @class AvatarConfig\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarConfig {\r\n    private privCustomized: boolean = false;\r\n    private privBackgroundColor: string;\r\n\r\n    /**\r\n     * Defines the avatar character.\r\n     */\r\n    public character: string;\r\n    /**\r\n     * Defines the avatar style.\r\n     */\r\n    public style: string;\r\n    /**\r\n     * Defines the talking avatar output video format.\r\n     */\r\n    public videoFormat: AvatarVideoFormat;\r\n\r\n    /**\r\n     * Indicates if the talking avatar is customized.\r\n     */\r\n    public get customized(): boolean {\r\n        return this.privCustomized;\r\n    }\r\n\r\n    /**\r\n     * Sets if the talking avatar is customized.\r\n     */\r\n    public set customized(value: boolean) {\r\n        this.privCustomized = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the background color.\r\n     */\r\n    public get backgroundColor(): string {\r\n        return this.privBackgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Gets the background color.\r\n     */\r\n    public set backgroundColor(value: string) {\r\n        this.privBackgroundColor = value;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} character - The avatar character.\r\n     * @param {string} style - The avatar style.\r\n     * @param {AvatarVideoFormat} videoFormat - The talking avatar output video format.\r\n     */\r\n    public constructor(character: string, style: string, videoFormat: AvatarVideoFormat) {\r\n        Contracts.throwIfNullOrWhitespace(character, \"character\");\r\n        this.character = character;\r\n        this.style = style;\r\n        if (videoFormat === undefined) {\r\n            videoFormat = new AvatarVideoFormat();\r\n        }\r\n        this.videoFormat = videoFormat;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined && endpointId !== \"\") {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomVoiceDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n            }\r\n        }\r\n\r\n        if (config.avatarEnabled) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.EnableAvatar) === -1) {\r\n                queryParams[QueryParameterNames.EnableAvatar] = \"true\";\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisConnectionFactory } from \"../common.speech/SpeechSynthesisConnectionFactory.js\";\r\nimport { SynthesisRestAdapter } from \"../common.speech/SynthesisRestAdapter.js\";\r\nimport { SynthesizerConfig } from \"../common.speech/SynthesizerConfig.js\";\r\nimport {\r\n    AvatarSynthesisAdapter,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase\r\n} from \"../common.speech/Exports.js\";\r\nimport { createNoDashGuid, Deferred, Events, EventType, PlatformEvent } from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SynthesisResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the avatar synthesizer.\r\n * @class AvatarSynthesizer\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarSynthesizer extends Synthesizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAvatarConfig: AvatarConfig;\r\n    private privIceServers: RTCIceServer[];\r\n    /**\r\n     * Defines event handler for avatar events.\r\n     * @member AvatarSynthesizer.prototype.avatarEventReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public avatarEventReceived: (sender: AvatarSynthesizer, event: AvatarEventArgs) => void;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config.\r\n     * @param {AvatarConfig} avatarConfig - The talking avatar config.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, avatarConfig: AvatarConfig) {\r\n        super(speechConfig);\r\n\r\n        Contracts.throwIfNullOrUndefined(avatarConfig, \"avatarConfig\");\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.privAvatarConfig = avatarConfig;\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        // The service checks the audio format setting while it ignores it in avatar synthesis.\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Starts the talking avatar session and establishes the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.startAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @param {AvatarWebRTCConnectionInfo} peerConnection - The peer connection.\r\n     * @returns {Promise<SynthesisResult>} The promise of the connection result.\r\n     */\r\n    public async startAvatarAsync(peerConnection: RTCPeerConnection): Promise<SynthesisResult> {\r\n        Contracts.throwIfNullOrUndefined(peerConnection, \"peerConnection\");\r\n        this.privIceServers = peerConnection.getConfiguration().iceServers;\r\n        Contracts.throwIfNullOrUndefined(this.privIceServers, \"Ice servers must be set.\");\r\n        const iceGatheringDone = new Deferred<void>();\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\r\n        peerConnection.onicegatheringstatechange = (): void => {\r\n            Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering state: \" + peerConnection.iceGatheringState, EventType.Debug));\r\n            if (peerConnection.iceGatheringState === \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering complete.\", EventType.Info));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent): void => {\r\n            if (event.candidate) {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: \" + event.candidate.candidate, EventType.Debug));\r\n            } else {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: complete\", EventType.Debug));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        // Set a timeout for ice gathering, currently 2 seconds.\r\n        setTimeout((): void => {\r\n            if (peerConnection.iceGatheringState !== \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering timeout.\", EventType.Warning));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        }, 2000);\r\n        const sdp: RTCSessionDescriptionInit = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(sdp);\r\n        await iceGatheringDone.promise;\r\n        Events.instance.onEvent(new PlatformEvent(\"peer connection: got local SDP.\", EventType.Info));\r\n        this.privProperties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, JSON.stringify(peerConnection.localDescription));\r\n\r\n        const result: SpeechSynthesisResult = await this.speak(\"\", false);\r\n        if (result.reason !== ResultReason.SynthesizingAudioCompleted) {\r\n            return new SynthesisResult(\r\n                result.resultId,\r\n                result.reason,\r\n                result.errorDetails,\r\n                result.properties,\r\n            );\r\n        }\r\n        const sdpAnswerString: string = atob(result.properties.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP));\r\n        const sdpAnswer: RTCSessionDescription = new RTCSessionDescription(\r\n            JSON.parse(sdpAnswerString) as RTCSessionDescriptionInit,\r\n        );\r\n        await peerConnection.setRemoteDescription(sdpAnswer);\r\n        return new SynthesisResult(\r\n            result.resultId,\r\n            result.reason,\r\n            undefined,\r\n            result.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks plain text asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} text - The plain text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakTextAsync(text: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(text, false);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks SSML asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} ssml - The SSML text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakSsmlAsync(ssml: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(ssml, true);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks text asynchronously. The avatar will switch to idle state.\r\n     * @member AvatarSynthesizer.prototype.stopSpeakingAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopSpeakingAsync(): Promise<void> {\r\n        while (this.synthesisRequestQueue.length() > 0) {\r\n            const request = await this.synthesisRequestQueue.dequeue();\r\n            request.err(\"Synthesis is canceled by user.\");\r\n        }\r\n        return this.privAdapter.stopSpeaking();\r\n    }\r\n\r\n    /**\r\n     * Stops the talking avatar session and closes the WebRTC connection.\r\n     * For now, this is the same as close().\r\n     * You need to create a new AvatarSynthesizer instance to start a new session.\r\n     * @member AvatarSynthesizer.prototype.stopAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopAvatarAsync(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member AvatarSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the ICE servers. Internal use only.\r\n     */\r\n    public get iceServers(): RTCIceServer[] {\r\n        return this.privIceServers;\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new AvatarSynthesisAdapter(\r\n            authentication,\r\n            connectionFactory,\r\n            synthesizerConfig,\r\n            this,\r\n            this.privAvatarConfig);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        _authentication: IAuthentication,\r\n        _synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return undefined;\r\n    }\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        const config = super.createSynthesizerConfig(speechConfig);\r\n        config.avatarEnabled = true;\r\n        return config;\r\n    }\r\n\r\n    protected async speak(text: string, isSSML: boolean): Promise<SpeechSynthesisResult> {\r\n        const requestId = createNoDashGuid();\r\n        const deferredResult = new Deferred<SpeechSynthesisResult>();\r\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, isSSML,\r\n            (e: SpeechSynthesisResult): void => {\r\n                deferredResult.resolve(e);\r\n                this.privSynthesizing = false;\r\n                void this.adapterSpeak();\r\n            },\r\n            (e: string): void => {\r\n                deferredResult.reject(e);\r\n                this.privSynthesizing = false;\r\n            }));\r\n        void this.adapterSpeak();\r\n        return deferredResult.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Defines a coordinate in 2D space.\r\n * @class Coordinate\r\n * Added in version 1.33.0\r\n */\r\nexport class Coordinate {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the avatar output video format.\r\n * @class AvatarVideoFormat\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarVideoFormat {\r\n    /**\r\n     * Defines the video codec.\r\n     * @default \"H264\"\r\n     */\r\n    public codec: string;\r\n    /**\r\n     * Defines the video bitrate.\r\n     * @default 2000000\r\n     */\r\n    public bitrate: number;\r\n    /**\r\n     * Defines the video width.\r\n     * @default 1920\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Defines the video height.\r\n     * @default 1080\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Sets the video crop range.\r\n     */\r\n    public setCropRange(topLeft: Coordinate, bottomRight: Coordinate): void {\r\n        this.cropRange = {\r\n            bottomRight,\r\n            topLeft,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines the video crop range.\r\n     * @default undefined\r\n     * @internal\r\n     */\r\n    public cropRange: {\r\n        topLeft: Coordinate;\r\n        bottomRight: Coordinate;\r\n    };\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} codec - The video codec.\r\n     * @param {number} bitrate - The video bitrate.\r\n     * @param {number} width - The video width.\r\n     * @param {number} height - The video height.\r\n     */\r\n    public constructor(codec: string = \"H264\",\r\n                       bitrate: number = 2000000,\r\n                       width: number = 1920,\r\n                       height: number = 1080,\r\n    ) {\r\n        this.codec = codec;\r\n        this.bitrate = bitrate;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ResultReason,\r\n    PropertyCollection,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the avatar WebRTC connection result.\r\n * @class AvatarWebRTCConnectionResult\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarWebRTCConnectionResult extends SynthesisResult {\r\n    private readonly privSDPAnswer: RTCSessionDescriptionInit;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {RTCSessionDescriptionInit} SDPAnswer - The SDP answer of WebRTC connection.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(SDPAnswer?: RTCSessionDescriptionInit, resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privSDPAnswer = SDPAnswer;\r\n    }\r\n\r\n    /**\r\n     * Specifies SDP (Session Description Protocol) answer of WebRTC connection.\r\n     * @member AvatarWebRTCConnectionResult.prototype.SDPAnswer\r\n     * @function\r\n     * @public\r\n     * @returns {RTCSessionDescriptionInit} Specifies the SDP answer of WebRTC connection.\r\n     */\r\n    public get SDPAnswer(): RTCSessionDescriptionInit {\r\n        return this.privSDPAnswer;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports.js\";\r\nimport { Events } from \"../common/Exports.js\";\r\nimport { LogLevel } from \"./LogLevel.js\";\r\n\r\ntype LogCallback = (s: string) => void;\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n\r\n    public static set onLogOutput( callback: LogCallback ) {\r\n        if (!!this.privListener) {\r\n            this.privListener.logCallback = callback;\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig.js\";\r\nexport { AudioStreamFormat, AudioFormatTag } from \"./Audio/AudioStreamFormat.js\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream.js\";\r\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream.js\";\r\nexport { CancellationReason } from \"./CancellationReason.js\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback.js\";\r\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback.js\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel.js\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs.js\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs.js\";\r\nexport { OutputFormat } from \"./OutputFormat.js\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs.js\";\r\nexport { RecognitionResult } from \"./RecognitionResult.js\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult.js\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult.js\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel.js\";\r\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs, MeetingTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs.js\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs.js\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs.js\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs.js\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult.js\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult.js\";\r\nexport { ResultReason } from \"./ResultReason.js\";\r\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\nexport { PropertyCollection } from \"./PropertyCollection.js\";\r\nexport { PropertyId } from \"./PropertyId.js\";\r\nexport { Recognizer } from \"./Recognizer.js\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer.js\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer.js\";\r\nexport { VoiceProfileType } from \"./VoiceProfileType.js\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer.js\";\r\nexport { Translations } from \"./Translations.js\";\r\nexport { NoMatchReason } from \"./NoMatchReason.js\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails.js\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs.js\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs.js\";\r\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nexport { CancellationDetails } from \"./CancellationDetails.js\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes.js\";\r\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs.js\";\r\nexport { ServiceEventArgs } from \"./ServiceEventArgs.js\";\r\nexport { Connection } from \"./Connection.js\";\r\nexport { PhraseListGrammar } from \"./PhraseListGrammar.js\";\r\nexport { DialogServiceConfig } from \"./DialogServiceConfig.js\";\r\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig.js\";\r\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig.js\";\r\nexport { DialogServiceConnector } from \"./DialogServiceConnector.js\";\r\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel.js\";\r\nexport { ProfanityOption } from \"./ProfanityOption.js\";\r\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer.js\";\r\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs.js\";\r\nexport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nexport { VoiceProfile } from \"./VoiceProfile.js\";\r\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult.js\";\r\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult.js\";\r\nexport { VoiceProfilePhraseResult } from \"./VoiceProfilePhraseResult.js\";\r\nexport { VoiceProfileClient } from \"./VoiceProfileClient.js\";\r\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer.js\";\r\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel.js\";\r\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel.js\";\r\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig.js\";\r\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult.js\";\r\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig.js\";\r\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult.js\";\r\nexport { Conversation,\r\n    ConversationExpirationEventArgs,\r\n    ConversationInfo,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslationResult,\r\n    ConversationTranslator,\r\n    ConversationTranscriber,\r\n    ConversationTranscriptionResult,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    IParticipant,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    User,\r\n    VoiceSignature\r\n    } from \"./Transcription/Exports.js\";\r\nexport { Synthesizer } from \"./Synthesizer.js\";\r\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat.js\";\r\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer.js\";\r\nexport { SynthesisResult } from \"./SynthesisResult.js\";\r\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult.js\";\r\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs.js\";\r\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs.js\";\r\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs.js\";\r\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs.js\";\r\nexport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\nexport { SynthesisVoicesResult } from \"./SynthesisVoicesResult.js\";\r\nexport { VoiceInfo } from \"./VoiceInfo.js\";\r\nexport { IPlayer } from \"./Audio/IPlayer.js\";\r\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination.js\";\r\nexport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem.js\";\r\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity.js\";\r\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig.js\";\r\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult.js\";\r\nexport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\nexport { AvatarConfig } from \"./AvatarConfig.js\";\r\nexport { AvatarEventArgs } from \"./AvatarEventArgs.js\";\r\nexport { AvatarSynthesizer } from \"./AvatarSynthesizer.js\";\r\nexport { AvatarVideoFormat, Coordinate } from \"./AvatarVideoFormat.js\";\r\nexport { AvatarWebRTCConnectionResult } from \"./AvatarWebRTCConnectionResult.js\";\r\nexport { Diagnostics } from \"./Diagnostics.js\";\r\nexport { LogLevel } from \"./LogLevel.js\";\r\nexport { IVoiceJson } from \"./IVoiceJson.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports.js\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n","'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports.js\";\r\nimport { IRequestOptions } from \"./Exports.js\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports.js\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./ConsoleLoggingListener.js\";\r\nexport * from \"./IRecorder.js\";\r\nexport * from \"./MicAudioSource.js\";\r\nexport * from \"./FileAudioSource.js\";\r\nexport * from \"./PCMRecorder.js\";\r\nexport * from \"./WebsocketConnection.js\";\r\nexport * from \"./WebsocketMessageAdapter.js\";\r\nexport * from \"./ReplayableAudioNode.js\";\r\nexport * from \"./ProxyInfo.js\";\r\nexport * from \"./RestMessageAdapter.js\";\r\nexport * from \"./RestConfigBase.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n    protected privExpectContentAssessmentResponse: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    public set expectContentAssessmentResponse(value: boolean) {\r\n        this.privExpectContentAssessmentResponse = value;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n","import { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports.js\";\r\nimport { StringUtils } from \"../common/StringUtils.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports.js\";\r\nimport { RecognitionStatus } from \"./Exports.js\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus, expectEndOfDictation: boolean = false): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.EndOfDictation:\r\n                // If we need the result in EndOfDictation (typically some session level result),\r\n                // translate into RecognizedSpeech, otherwise NoMatch\r\n                reason = expectEndOfDictation ? ResultReason.RecognizedSpeech : ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports.js\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = RecognitionStatus[this.privTranslationPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string | undefined {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations | undefined {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    ITranslationHypothesis,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        const handleTranslationHypothesis = (hypothesis: TranslationHypothesis, resultProperties: PropertyCollection): void => {\r\n            const result: TranslationRecognitionEventArgs = this.fireEventForResult(hypothesis, resultProperties);\r\n            this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n            if (!!this.privTranslationRecognizer.recognizing) {\r\n                try {\r\n                    this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                    /* eslint-disable no-empty */\r\n                } catch (error) {\r\n                    // Not going to let errors in the event handler\r\n                    // trip things up.\r\n                }\r\n            }\r\n            processed = true;\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                handleTranslationHypothesis(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                } else {\r\n                    const hypothesis: { SpeechHypothesis: ITranslationHypothesis } = JSON.parse(connectionMessage.textBody) as { SpeechHypothesis: ITranslationHypothesis };\r\n                    if (!!hypothesis.SpeechHypothesis) {\r\n                        handleTranslationHypothesis(TranslationHypothesis.fromTranslationResponse(hypothesis), resultProps);\r\n                    }\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n        const language = serviceResult.Language;\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase.js\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus, this.privExpectContentAssessmentResponse);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\nimport { PhraseDetection, SpeakerDiarization } from \"./ServiceRecognizerBase.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = \"Conversation\";\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = \"Anonymous\";\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports.js\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation.js\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel.js\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports.js\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents.js\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents.js\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal.js\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports.js\";\r\n\r\ninterface Context {\r\n    [section: string]: any;\r\n}\r\n\r\ninterface PhraseContext {\r\n    [section: string]: any;\r\n    phraseDetection?: {\r\n        enrichment?: {\r\n            pronunciationAssessment: any;\r\n            contentAssessment?: {\r\n                topic: string;\r\n            };\r\n        };\r\n        speakerDiarization?: {\r\n            mode?: string;\r\n            audioSessionId?: string;\r\n            audioOffsetMs?: number;\r\n            identityProvider?: string;\r\n        };\r\n        mode?: string;\r\n    };\r\n    phraseOutput?: {\r\n        detailed?: {\r\n            options?: string[];\r\n        };\r\n        format?: any;\r\n    };\r\n}\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: PhraseContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    public getSection(sectionName: string): string | Context {\r\n        return (this.privContext[sectionName] || {}) as string | Context;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | Context): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string,\r\n        contentAssessmentTopic: string,\r\n        isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as Context;\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = \"Conversation\";\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n        if (!!contentAssessmentTopic) {\r\n            this.privContext.phraseDetection.enrichment.contentAssessment = {\r\n                topic: contentAssessmentTopic\r\n            };\r\n            this.privContext.phraseOutput.detailed.options.push(\"ContentAssessment\");\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error.js\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState.js\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports.js\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase.js\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports.js\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports.js\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports.js\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter.js\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports.js\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports.js\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports.js\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n","export { CommandResponsePayload } from \"./CommandResponsePayload.js\";\r\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload.js\";\r\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer.js\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports.js\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig.js\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation.js\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation.js\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory.js\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports.js\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { ConversationManager } from \"./ConversationManager.js\";\r\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer.js\";\r\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer.js\";\r\nexport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\nexport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants} from \"./ConversationTranslatorInterfaces.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports.js\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n    AvatarSignal = \"TalkingAvatarSignal\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n        Name: string;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents.js\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n    webrtc: {\r\n        connectionString: string;\r\n    };\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    public get extraProperties(): PropertyCollection {\r\n        if (!!this.privWebRTCSDP) {\r\n            const properties = new PropertyCollection();\r\n            properties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, this.privWebRTCSDP);\r\n            return properties;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n    private privWebRTCSDP: string;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = this.audioOutputFormat.addHeader(audio);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        this.privWebRTCSDP = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(responseJson: string): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        if (!!response.webrtc) {\r\n            this.privWebRTCSDP = response.webrtc.connectionString;\r\n        }\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public async constructSynthesisResult(): Promise<SpeechSynthesisResult> {\r\n        const audioBuffer: ArrayBuffer = await this.getAllReceivedAudioWithHeader();\r\n        return new SpeechSynthesisResult(\r\n            this.requestId,\r\n            ResultReason.SynthesizingAudioCompleted,\r\n            audioBuffer,\r\n            undefined,\r\n            this.extraProperties,\r\n            this.audioDuration\r\n        );\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport abstract class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSynthesizer: Synthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    protected privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    protected privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext();\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            this.onSynthesisStarted(requestId);\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    public async stopSpeaking(): Promise<void> {\r\n        await this.connectImpl();\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"synthesis.control\",\r\n            this.privSynthesisTurn.requestId,\r\n            \"application/json\",\r\n            JSON.stringify({\r\n                action: \"stop\"\r\n            })\r\n        ));\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        _cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        this.onSynthesisCancelled(result);\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(_connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse(connectionMessage.textBody);\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            this.onSynthesizing(connectionMessage.binaryBody);\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n                                    this.onWordBoundary(wordBoundaryEventArgs);\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n                                    this.onBookmarkReached(bookmarkEventArgs);\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                        this.onVisemeReceived(visemeEventArgs);\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.AvatarSignal:\r\n                                    this.onAvatarEvent(metadata);\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            result = await this.privSynthesisTurn.constructSynthesisResult();\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        this.onSynthesisCompleted(result);\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        this.setSynthesisContextSynthesisSection();\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected abstract setSynthesisContextSynthesisSection(): void;\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(\r\n                    `Unable to contact server. StatusCode: ${response.statusCode},\r\n                    ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Url)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        this.setSpeechConfigSynthesisSection();\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n\r\n    protected onAvatarEvent(_metadata: ISynthesisMetadata): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisStarted(_requestId: string): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesizing(_audio: ArrayBuffer): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCancelled(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCompleted(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onWordBoundary(_wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onVisemeReceived(_visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onBookmarkReached(_bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        return;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioDestination } from \"../common/Exports.js\";\r\nimport {\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\n\r\nexport class SpeechSynthesisAdapter extends SynthesisAdapterBase {\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n            super(authentication, connectionFactory, synthesizerConfig, audioDestination);\r\n            this.privSpeechSynthesizer = speechSynthesizer;\r\n            this.privSynthesizer = speechSynthesizer as Synthesizer;\r\n        }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(this.privSpeechSynthesizer);\r\n    }\r\n\r\n    protected onSynthesisStarted(requestId: string): void {\r\n        const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n            new SpeechSynthesisResult(\r\n                requestId,\r\n                ResultReason.SynthesizingAudioStarted,\r\n            )\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n        }\r\n    }\r\n\r\n    protected onSynthesizing(audio: ArrayBuffer): void {\r\n        if (!!this.privSpeechSynthesizer.synthesizing) {\r\n            try {\r\n                const audioWithHeader = this.privSynthesisTurn.audioOutputFormat.addHeader(audio);\r\n                const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                    new SpeechSynthesisResult(\r\n                        this.privSynthesisTurn.requestId,\r\n                        ResultReason.SynthesizingAudio,\r\n                        audioWithHeader));\r\n                this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCancelled(result: SpeechSynthesisResult): void {\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCompleted(result: SpeechSynthesisResult): void {\r\n        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n            try {\r\n                this.privSpeechSynthesizer.synthesisCompleted(\r\n                    this.privSpeechSynthesizer,\r\n                    new SpeechSynthesisEventArgs(result)\r\n                );\r\n            } catch (e) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onWordBoundary(wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n            try {\r\n                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onVisemeReceived(visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n            try {\r\n                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onBookmarkReached(bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n            try {\r\n                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport {\r\n    Context,\r\n    ISynthesisSectionVideo,\r\n    SpeechServiceConfig\r\n    } from \"./Exports.js\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n    public avatarEnabled: boolean = false;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public set synthesisVideoSection(value: ISynthesisSectionVideo) {\r\n        this.privSpeechServiceConfig.Context.synthesis = {\r\n            video: value\r\n        };\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports.js\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    public setSynthesisSection(speechSynthesizer: SpeechSynthesizer): void {\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext(speechSynthesizer);\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n    }\r\n\r\n    private buildSynthesisContext(speechSynthesizer: SpeechSynthesizer): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!speechSynthesizer?.bookmarkReached),\r\n                    punctuationBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                    sentenceBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!speechSynthesizer?.visemeReceived),\r\n                    wordBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: speechSynthesizer?.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport { Context } from \"./Exports.js\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    public constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.36.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication.js\";\r\nexport * from \"./CognitiveTokenAuthentication.js\";\r\nexport * from \"./IAuthentication.js\";\r\nexport * from \"./IConnectionFactory.js\";\r\nexport * from \"./ISynthesisConnectionFactory.js\";\r\nexport * from \"./IntentConnectionFactory.js\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory.js\";\r\nexport * from \"./RecognitionEvents.js\";\r\nexport * from \"./ServiceRecognizerBase.js\";\r\nexport * from \"./ConversationServiceRecognizer.js\";\r\nexport * from \"./RecognizerConfig.js\";\r\nexport * from \"./SpeechServiceInterfaces.js\";\r\nexport * from \"./WebsocketMessageFormatter.js\";\r\nexport * from \"./SpeechConnectionFactory.js\";\r\nexport * from \"./ConversationTranscriberConnectionFactory.js\";\r\nexport * from \"./TranscriberConnectionFactory.js\";\r\nexport * from \"./TranslationConnectionFactory.js\";\r\nexport * from \"./SpeechSynthesisConnectionFactory.js\";\r\nexport * from \"./EnumTranslation.js\";\r\nexport * from \"./ServiceMessages/Enums.js\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd.js\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis.js\";\r\nexport * from \"./ServiceMessages/TranslationPhrase.js\";\r\nexport * from \"./TranslationServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/SpeechDetected.js\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis.js\";\r\nexport * from \"./ServiceMessages/SpeechKeyword.js\";\r\nexport * from \"./SpeechServiceRecognizer.js\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer.js\";\r\nexport * from \"./TranscriptionServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase.js\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase.js\";\r\nexport * from \"./AddedLmIntent.js\";\r\nexport * from \"./IntentServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/IntentResponse.js\";\r\nexport * from \"./ServiceMessages/SpeakerResponse.js\";\r\nexport * from \"./RequestSession.js\";\r\nexport * from \"./SpeechContext.js\";\r\nexport * from \"./DynamicGrammarBuilder.js\";\r\nexport * from \"./DynamicGrammarInterfaces.js\";\r\nexport * from \"./DialogServiceAdapter.js\";\r\nexport * from \"./AgentConfig.js\";\r\nexport * from \"./Transcription/Exports.js\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nexport * from \"./SynthesisTurn.js\";\r\nexport * from \"./SynthesisAdapterBase.js\";\r\nexport { AvatarSynthesisAdapter } from \"./AvatarSynthesisAdapter.js\";\r\nexport { SpeechSynthesisAdapter } from \"./SpeechSynthesisAdapter.js\";\r\nexport * from \"./SynthesisRestAdapter.js\";\r\nexport * from \"./SynthesizerConfig.js\";\r\nexport * from \"./SynthesisContext.js\";\r\nexport * from \"./SpeakerRecognitionConfig.js\";\r\nexport * from \"./SpeakerServiceRecognizer.js\";\r\nexport * from \"./VoiceServiceRecognizer.js\";\r\nexport * from \"./SpeechServiceConfig.js\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { AgentConfig } from \"./src/common.speech/Exports.js\";\r\n\r\n// Note: this instantiation ensures the above import isn't\r\n// removed on compile. The import being absent causes an error on running\r\nvoid new AgentConfig();\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports.js\";\r\n","/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport { PropertyId } from 'microsoft-cognitiveservices-speech-sdk';\nimport patchOptions, { type PatchOptionsInit } from '../patchOptions';\nimport SpeechSDK from '../SpeechSDK';\nimport createSpeechRecognitionPonyfillFromRecognizer from './createSpeechRecognitionPonyfillFromRecognizer';\n\nconst { OutputFormat, SpeechConfig, SpeechRecognizer } = SpeechSDK;\n\nexport default function createSpeechRecognitionPonyfill(options: PatchOptionsInit) {\n  const {\n    audioConfig,\n    enableTelemetry,\n    fetchCredentials,\n    initialSilenceTimeout,\n    looseEvents,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization\n  } = patchOptions(options);\n\n  if (!audioConfig && (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia)) {\n    throw new Error(\n      'web-speech-cognitive-services: This browser does not support Media Capture and Streams API and it will not work with Cognitive Services Speech Services.'\n    );\n  }\n\n  const createRecognizer = async (lang: string) => {\n    const credentials = await fetchCredentials();\n    let speechConfig;\n\n    if (typeof credentials.speechRecognitionHostname !== 'undefined') {\n      const host = new URL('wss://localhost:443');\n\n      host.hostname = credentials.speechRecognitionHostname;\n\n      if (credentials.authorizationToken) {\n        speechConfig = SpeechConfig.fromHost(host);\n        speechConfig.authorizationToken = credentials.authorizationToken;\n      } else {\n        speechConfig = SpeechConfig.fromHost(host, credentials.subscriptionKey);\n      }\n    } else {\n      speechConfig =\n        typeof credentials.authorizationToken !== 'undefined'\n          ? SpeechConfig.fromAuthorizationToken(credentials.authorizationToken, credentials.region)\n          : SpeechConfig.fromSubscription(credentials.subscriptionKey, credentials.region);\n    }\n\n    if (speechRecognitionEndpointId) {\n      speechConfig.endpointId = speechRecognitionEndpointId;\n    }\n\n    speechConfig.outputFormat = OutputFormat.Detailed;\n    speechConfig.speechRecognitionLanguage = lang || 'en-US';\n    typeof initialSilenceTimeout === 'number' &&\n      speechConfig.setProperty(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, '' + initialSilenceTimeout);\n\n    return new SpeechRecognizer(speechConfig, audioConfig);\n  };\n\n  return createSpeechRecognitionPonyfillFromRecognizer({\n    createRecognizer,\n    enableTelemetry,\n    looseEvents,\n    referenceGrammars,\n    textNormalization\n  });\n}\n","// src/actions/await/awaitAsync.ts\nfunction awaitAsync() {\n  return {\n    kind: \"transformation\",\n    type: \"await\",\n    reference: awaitAsync,\n    async: true,\n    async _run(dataset) {\n      dataset.value = await dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/regex.ts\nvar BASE64_REGEX = /^(?:[\\da-z+/]{4})*(?:[\\da-z+/]{2}==|[\\da-z+/]{3}=)?$/iu;\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[\\dA-Z]{2}(?:[\\dA-Z]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^[+-]?\\d+(?:\\.\\d+)?$/u;\nvar DIGITS_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex, regexp/no-dupe-disjunctions -- false positives\n  /^(?:[\\u{1F1E6}-\\u{1F1FF}]{2}|\\u{1F3F4}[\\u{E0061}-\\u{E007A}]{2}[\\u{E0030}-\\u{E0039}\\u{E0061}-\\u{E007A}]{1,3}\\u{E007F}|(?:\\p{Emoji}\\uFE0F\\u20E3?|\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation})(?:\\u200D(?:\\p{Emoji}\\uFE0F\\u20E3?|\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}))*)+$/u\n);\nvar HEXADECIMAL_REGEX = /^(?:0[hx])?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{15}$|^\\d{2}-\\d{6}-\\d{6}-\\d$/u;\nvar IPV4_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n  /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u\n);\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar IP_REGEX = /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$|^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}(?:\\.\\d{1,9})?(?:Z|[+-](?:0\\d|1\\d|2[0-3])(?::?[0-5]\\d)?)$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar MAC_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$|^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar NANO_ID_REGEX = /^[\\w-]+$/u;\nvar OCTAL_REGEX = /^(?:0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n\n// src/storages/globalConfig/globalConfig.ts\nvar store;\nfunction setGlobalConfig(config2) {\n  store = { ...store, ...config2 };\n}\nfunction getGlobalConfig(config2) {\n  return {\n    lang: config2?.lang ?? store?.lang,\n    message: config2?.message,\n    abortEarly: config2?.abortEarly ?? store?.abortEarly,\n    abortPipeEarly: config2?.abortPipeEarly ?? store?.abortPipeEarly\n  };\n}\nfunction deleteGlobalConfig() {\n  store = void 0;\n}\n\n// src/storages/globalMessage/globalMessage.ts\nvar store2;\nfunction setGlobalMessage(message, lang) {\n  if (!store2) store2 = /* @__PURE__ */ new Map();\n  store2.set(lang, message);\n}\nfunction getGlobalMessage(lang) {\n  return store2?.get(lang);\n}\nfunction deleteGlobalMessage(lang) {\n  store2?.delete(lang);\n}\n\n// src/storages/schemaMessage/schemaMessage.ts\nvar store3;\nfunction setSchemaMessage(message, lang) {\n  if (!store3) store3 = /* @__PURE__ */ new Map();\n  store3.set(lang, message);\n}\nfunction getSchemaMessage(lang) {\n  return store3?.get(lang);\n}\nfunction deleteSchemaMessage(lang) {\n  store3?.delete(lang);\n}\n\n// src/storages/specificMessage/specificMessage.ts\nvar store4;\nfunction setSpecificMessage(reference, message, lang) {\n  if (!store4) store4 = /* @__PURE__ */ new Map();\n  if (!store4.get(reference)) store4.set(reference, /* @__PURE__ */ new Map());\n  store4.get(reference).set(lang, message);\n}\nfunction getSpecificMessage(reference, lang) {\n  return store4?.get(reference)?.get(lang);\n}\nfunction deleteSpecificMessage(reference, lang) {\n  store4?.get(reference)?.delete(lang);\n}\n\n// src/utils/_stringify/_stringify.ts\nfunction _stringify(input) {\n  const type = typeof input;\n  if (type === \"string\") {\n    return `\"${input}\"`;\n  }\n  if (type === \"number\" || type === \"bigint\" || type === \"boolean\") {\n    return `${input}`;\n  }\n  if (type === \"object\" || type === \"function\") {\n    return (input && Object.getPrototypeOf(input)?.constructor?.name) ?? \"null\";\n  }\n  return type;\n}\n\n// src/utils/_addIssue/_addIssue.ts\nfunction _addIssue(context, label, dataset, config2, other) {\n  const input = other && \"input\" in other ? other.input : dataset.value;\n  const expected = other?.expected ?? context.expects ?? null;\n  const received = other?.received ?? _stringify(input);\n  const issue = {\n    kind: context.kind,\n    type: context.type,\n    input,\n    expected,\n    received,\n    message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : \"R\"}eceived ${received}`,\n    requirement: context.requirement,\n    path: other?.path,\n    issues: other?.issues,\n    lang: config2.lang,\n    abortEarly: config2.abortEarly,\n    abortPipeEarly: config2.abortPipeEarly\n  };\n  const isSchema = context.kind === \"schema\";\n  const message = other?.message ?? context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang);\n  if (message) {\n    issue.message = typeof message === \"function\" ? (\n      // @ts-expect-error\n      message(issue)\n    ) : message;\n  }\n  if (isSchema) {\n    dataset.typed = false;\n  }\n  if (dataset.issues) {\n    dataset.issues.push(issue);\n  } else {\n    dataset.issues = [issue];\n  }\n}\n\n// src/utils/_isLuhnAlgo/_isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction _isLuhnAlgo(input) {\n  const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n  let length2 = number2.length;\n  let bit = 1;\n  let sum = 0;\n  while (length2) {\n    const value2 = +number2[--length2];\n    bit ^= 1;\n    sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;\n  }\n  return sum % 10 === 0;\n}\n\n// src/utils/_isValidObjectKey/_isValidObjectKey.ts\nfunction _isValidObjectKey(object2, key) {\n  return Object.hasOwn(object2, key) && key !== \"__proto__\" && key !== \"prototype\" && key !== \"constructor\";\n}\n\n// src/utils/_joinExpects/_joinExpects.ts\nfunction _joinExpects(values, separator) {\n  const list = [...new Set(values)];\n  if (list.length > 1) {\n    return `(${list.join(` ${separator} `)})`;\n  }\n  return list[0] ?? \"never\";\n}\n\n// src/utils/entriesFromList/entriesFromList.ts\nfunction entriesFromList(list, schema) {\n  const entries = {};\n  for (const key of list) {\n    entries[key] = schema;\n  }\n  return entries;\n}\n\n// src/utils/getDotPath/getDotPath.ts\nfunction getDotPath(issue) {\n  if (issue.path) {\n    let key = \"\";\n    for (const item of issue.path) {\n      if (typeof item.key === \"string\" || typeof item.key === \"number\") {\n        if (key) {\n          key += `.${item.key}`;\n        } else {\n          key += item.key;\n        }\n      } else {\n        return null;\n      }\n    }\n    return key;\n  }\n  return null;\n}\n\n// src/utils/isOfKind/isOfKind.ts\nfunction isOfKind(kind, object2) {\n  return object2.kind === kind;\n}\n\n// src/utils/isOfType/isOfType.ts\nfunction isOfType(type, object2) {\n  return object2.type === type;\n}\n\n// src/utils/isValiError/isValiError.ts\nfunction isValiError(error) {\n  return error instanceof ValiError;\n}\n\n// src/utils/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n  /**\n   * The error issues.\n   */\n  issues;\n  /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */\n  constructor(issues) {\n    super(issues[0].message);\n    this.name = \"ValiError\";\n    this.issues = issues;\n  }\n};\n\n// src/actions/base64/base64.ts\nfunction base64(message) {\n  return {\n    kind: \"validation\",\n    type: \"base64\",\n    reference: base64,\n    async: false,\n    expects: null,\n    requirement: BASE64_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Base64\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/bic/bic.ts\nfunction bic(message) {\n  return {\n    kind: \"validation\",\n    type: \"bic\",\n    reference: bic,\n    async: false,\n    expects: null,\n    requirement: BIC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"BIC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/brand/brand.ts\nfunction brand(name) {\n  return {\n    kind: \"transformation\",\n    type: \"brand\",\n    reference: brand,\n    async: false,\n    name,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/bytes/bytes.ts\nfunction bytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"bytes\",\n    reference: bytes,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 !== this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/check.ts\nfunction check(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: check,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/checkAsync.ts\nfunction checkAsync(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: checkAsync,\n    async: true,\n    expects: null,\n    requirement,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.typed && !await this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/checkItems/checkItems.ts\nfunction checkItems(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check_items\",\n    reference: checkItems,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        for (let index = 0; index < dataset.value.length; index++) {\n          const item = dataset.value[index];\n          if (!this.requirement(item, index, dataset.value)) {\n            _addIssue(this, \"item\", dataset, config2, {\n              input: item,\n              path: [\n                {\n                  type: \"array\",\n                  origin: \"value\",\n                  input: dataset.value,\n                  key: index,\n                  value: item\n                }\n              ]\n            });\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/creditCard/creditCard.ts\nvar CREDIT_CARD_REGEX = /^(?:\\d{14,19}|\\d{4}(?: \\d{3,6}){2,4}|\\d{4}(?:-\\d{3,6}){2,4})$/u;\nvar SANITIZE_REGEX = /[- ]/gu;\nvar PROVIDER_REGEX_LIST = [\n  // American Express\n  /^3[47]\\d{13}$/u,\n  // Diners Club\n  /^3(?:0[0-5]|[68]\\d)\\d{11,13}$/u,\n  // Discover\n  /^6(?:011|5\\d{2})\\d{12,15}$/u,\n  // JCB\n  /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n  // Mastercard\n  /^5[1-5]\\d{2}|(?:222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n  // UnionPay\n  /^(?:6[27]\\d{14,17}|81\\d{14,17})$/u,\n  // Visa\n  /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message) {\n  return {\n    kind: \"validation\",\n    type: \"credit_card\",\n    reference: creditCard,\n    async: false,\n    expects: null,\n    requirement(input) {\n      let sanitized;\n      return CREDIT_CARD_REGEX.test(input) && // Remove any hyphens and blanks\n      (sanitized = input.replace(SANITIZE_REGEX, \"\")) && // Check if it matches a provider\n      PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && // Check if passes luhn algorithm\n      _isLuhnAlgo(sanitized);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"credit card\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/cuid2/cuid2.ts\nfunction cuid2(message) {\n  return {\n    kind: \"validation\",\n    type: \"cuid2\",\n    reference: cuid2,\n    async: false,\n    expects: null,\n    requirement: CUID2_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Cuid2\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/decimal/decimal.ts\nfunction decimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"decimal\",\n    reference: decimal,\n    async: false,\n    expects: null,\n    requirement: DECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"decimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/description/description.ts\nfunction description(description_) {\n  return {\n    kind: \"metadata\",\n    type: \"description\",\n    reference: description,\n    description: description_\n  };\n}\n\n// src/actions/digits/digits.ts\nfunction digits(message) {\n  return {\n    kind: \"validation\",\n    type: \"digits\",\n    reference: digits,\n    async: false,\n    expects: null,\n    requirement: DIGITS_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"digits\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/email/email.ts\nfunction email(message) {\n  return {\n    kind: \"validation\",\n    type: \"email\",\n    reference: email,\n    expects: null,\n    async: false,\n    requirement: EMAIL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"email\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/emoji/emoji.ts\nfunction emoji(message) {\n  return {\n    kind: \"validation\",\n    type: \"emoji\",\n    reference: emoji,\n    async: false,\n    expects: null,\n    requirement: EMOJI_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"emoji\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/empty/empty.ts\nfunction empty(message) {\n  return {\n    kind: \"validation\",\n    type: \"empty\",\n    reference: empty,\n    async: false,\n    expects: \"0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/endsWith/endsWith.ts\nfunction endsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"ends_with\",\n    reference: endsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.endsWith(this.requirement)) {\n        _addIssue(this, \"end\", dataset, config2, {\n          received: `\"${dataset.value.slice(-this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/everyItem/everyItem.ts\nfunction everyItem(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"every_item\",\n    reference: everyItem,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.every(this.requirement)) {\n        _addIssue(this, \"item\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/excludes/excludes.ts\nfunction excludes(requirement, message) {\n  const received = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"excludes\",\n    reference: excludes,\n    async: false,\n    expects: `!${received}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, { received });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/filterItems/filterItems.ts\nfunction filterItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"filter_items\",\n    reference: filterItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.filter(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/findItem/findItem.ts\nfunction findItem(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"find_item\",\n    reference: findItem,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.find(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/finite/finite.ts\nfunction finite(message) {\n  return {\n    kind: \"validation\",\n    type: \"finite\",\n    reference: finite,\n    async: false,\n    expects: null,\n    requirement: Number.isFinite,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"finite\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hash/hash.ts\nvar HASH_LENGTHS = {\n  md4: 32,\n  md5: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8,\n  adler32: 8\n};\nfunction hash(types, message) {\n  return {\n    kind: \"validation\",\n    type: \"hash\",\n    reference: hash,\n    expects: null,\n    async: false,\n    requirement: RegExp(\n      types.map((type) => `^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join(\"|\"),\n      \"iu\"\n    ),\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hash\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"hexadecimal\",\n    reference: hexadecimal,\n    async: false,\n    expects: null,\n    requirement: HEXADECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hexadecimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexColor/hexColor.ts\nfunction hexColor(message) {\n  return {\n    kind: \"validation\",\n    type: \"hex_color\",\n    reference: hexColor,\n    async: false,\n    expects: null,\n    requirement: HEX_COLOR_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hex color\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/imei/imei.ts\nfunction imei(message) {\n  return {\n    kind: \"validation\",\n    type: \"imei\",\n    reference: imei,\n    async: false,\n    expects: null,\n    requirement(input) {\n      return IMEI_REGEX.test(input) && _isLuhnAlgo(input);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"IMEI\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/includes/includes.ts\nfunction includes(requirement, message) {\n  const expects = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"includes\",\n    reference: includes,\n    async: false,\n    expects,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, {\n          received: `!${expects}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/integer/integer.ts\nfunction integer(message) {\n  return {\n    kind: \"validation\",\n    type: \"integer\",\n    reference: integer,\n    async: false,\n    expects: null,\n    requirement: Number.isInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ip/ip.ts\nfunction ip(message) {\n  return {\n    kind: \"validation\",\n    type: \"ip\",\n    reference: ip,\n    async: false,\n    expects: null,\n    requirement: IP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IP\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv4/ipv4.ts\nfunction ipv4(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv4\",\n    reference: ipv4,\n    async: false,\n    expects: null,\n    requirement: IPV4_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv4\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv6/ipv6.ts\nfunction ipv6(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv6\",\n    reference: ipv6,\n    async: false,\n    expects: null,\n    requirement: IPV6_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv6\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDate/isoDate.ts\nfunction isoDate(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date\",\n    reference: isoDate,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date_time\",\n    reference: isoDateTime,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date-time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTime/isoTime.ts\nfunction isoTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time\",\n    reference: isoTime,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time_second\",\n    reference: isoTimeSecond,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_SECOND_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time-second\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_timestamp\",\n    reference: isoTimestamp,\n    async: false,\n    expects: null,\n    requirement: ISO_TIMESTAMP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"timestamp\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoWeek/isoWeek.ts\nfunction isoWeek(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_week\",\n    reference: isoWeek,\n    async: false,\n    expects: null,\n    requirement: ISO_WEEK_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"week\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/length/length.ts\nfunction length(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"length\",\n    reference: length,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length !== this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac/mac.ts\nfunction mac(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac\",\n    reference: mac,\n    async: false,\n    expects: null,\n    requirement: MAC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac48/mac48.ts\nfunction mac48(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac48\",\n    reference: mac48,\n    async: false,\n    expects: null,\n    requirement: MAC48_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"48-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac64/mac64.ts\nfunction mac64(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac64\",\n    reference: mac64,\n    async: false,\n    expects: null,\n    requirement: MAC64_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"64-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mapItems/mapItems.ts\nfunction mapItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"map_items\",\n    reference: mapItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.map(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_bytes\",\n    reference: maxBytes,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 > this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxLength/maxLength.ts\nfunction maxLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_length\",\n    reference: maxLength,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxSize/maxSize.ts\nfunction maxSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_size\",\n    reference: maxSize,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size > this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxValue/maxValue.ts\nfunction maxValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_value\",\n    reference: maxValue,\n    async: false,\n    expects: `<=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value > this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/metadata/metadata.ts\nfunction metadata(metadata_) {\n  return {\n    kind: \"metadata\",\n    type: \"metadata\",\n    reference: metadata,\n    metadata: metadata_\n  };\n}\n\n// src/actions/mimeType/mimeType.ts\nfunction mimeType(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"mime_type\",\n    reference: mimeType,\n    async: false,\n    expects: _joinExpects(\n      requirement.map((option) => `\"${option}\"`),\n      \"|\"\n    ),\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.includes(dataset.value.type)) {\n        _addIssue(this, \"MIME type\", dataset, config2, {\n          received: `\"${dataset.value.type}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minBytes/minBytes.ts\nfunction minBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_bytes\",\n    reference: minBytes,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 < this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minLength/minLength.ts\nfunction minLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_length\",\n    reference: minLength,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length < this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minSize/minSize.ts\nfunction minSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_size\",\n    reference: minSize,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size < this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minValue/minValue.ts\nfunction minValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_value\",\n    reference: minValue,\n    async: false,\n    expects: `>=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value < this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"multiple_of\",\n    reference: multipleOf,\n    async: false,\n    expects: `%${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value % this.requirement !== 0) {\n        _addIssue(this, \"multiple\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/nanoid/nanoid.ts\nfunction nanoid(message) {\n  return {\n    kind: \"validation\",\n    type: \"nanoid\",\n    reference: nanoid,\n    async: false,\n    expects: null,\n    requirement: NANO_ID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Nano ID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/nonEmpty/nonEmpty.ts\nfunction nonEmpty(message) {\n  return {\n    kind: \"validation\",\n    type: \"non_empty\",\n    reference: nonEmpty,\n    async: false,\n    expects: \"!0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: \"0\"\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/normalize/normalize.ts\nfunction normalize(form) {\n  return {\n    kind: \"transformation\",\n    type: \"normalize\",\n    reference: normalize,\n    async: false,\n    form,\n    _run(dataset) {\n      dataset.value = dataset.value.normalize(this.form);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notBytes/notBytes.ts\nfunction notBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_bytes\",\n    reference: notBytes,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 === this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notLength/notLength.ts\nfunction notLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_length\",\n    reference: notLength,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notSize/notSize.ts\nfunction notSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_size\",\n    reference: notSize,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size === this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notValue/notValue.ts\nfunction notValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_value\",\n    reference: notValue,\n    async: false,\n    expects: requirement instanceof Date ? `!${requirement.toJSON()}` : `!${_stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && this.requirement <= dataset.value && this.requirement >= dataset.value) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/octal/octal.ts\nfunction octal(message) {\n  return {\n    kind: \"validation\",\n    type: \"octal\",\n    reference: octal,\n    async: false,\n    expects: null,\n    requirement: OCTAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"octal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/partialCheck/utils/_isPartiallyTyped/_isPartiallyTyped.ts\nfunction _isPartiallyTyped(dataset, pathList) {\n  if (dataset.issues) {\n    for (const path of pathList) {\n      for (const issue of dataset.issues) {\n        let typed = false;\n        const bound = Math.min(path.length, issue.path?.length ?? 0);\n        for (let index = 0; index < bound; index++) {\n          if (path[index] !== issue.path[index].key) {\n            typed = true;\n            break;\n          }\n        }\n        if (!typed) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n// src/actions/partialCheck/partialCheck.ts\nfunction partialCheck(pathList, requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"partial_check\",\n    reference: partialCheck,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error\n      !this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/partialCheck/partialCheckAsync.ts\nfunction partialCheckAsync(pathList, requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"partial_check\",\n    reference: partialCheckAsync,\n    async: true,\n    expects: null,\n    requirement,\n    message,\n    async _run(dataset, config2) {\n      if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error\n      !await this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawCheck/rawCheck.ts\nfunction rawCheck(action) {\n  return {\n    kind: \"validation\",\n    type: \"raw_check\",\n    reference: rawCheck,\n    async: false,\n    expects: null,\n    _run(dataset, config2) {\n      action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info)\n      });\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawCheck/rawCheckAsync.ts\nfunction rawCheckAsync(action) {\n  return {\n    kind: \"validation\",\n    type: \"raw_check\",\n    reference: rawCheckAsync,\n    async: true,\n    expects: null,\n    async _run(dataset, config2) {\n      await action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info)\n      });\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawTransform/rawTransform.ts\nfunction rawTransform(action) {\n  return {\n    kind: \"transformation\",\n    type: \"raw_transform\",\n    reference: rawTransform,\n    async: false,\n    _run(dataset, config2) {\n      const output = action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info),\n        NEVER: null\n      });\n      if (dataset.issues) {\n        dataset.typed = false;\n      } else {\n        dataset.value = output;\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawTransform/rawTransformAsync.ts\nfunction rawTransformAsync(action) {\n  return {\n    kind: \"transformation\",\n    type: \"raw_transform\",\n    reference: rawTransformAsync,\n    async: true,\n    async _run(dataset, config2) {\n      const output = await action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info),\n        NEVER: null\n      });\n      if (dataset.issues) {\n        dataset.typed = false;\n      } else {\n        dataset.value = output;\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/readonly/readonly.ts\nfunction readonly() {\n  return {\n    kind: \"transformation\",\n    type: \"readonly\",\n    reference: readonly,\n    async: false,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/reduceItems/reduceItems.ts\nfunction reduceItems(operation, initial) {\n  return {\n    kind: \"transformation\",\n    type: \"reduce_items\",\n    reference: reduceItems,\n    async: false,\n    operation,\n    initial,\n    _run(dataset) {\n      dataset.value = dataset.value.reduce(this.operation, this.initial);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/regex/regex.ts\nfunction regex(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"regex\",\n    reference: regex,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"format\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/safeInteger/safeInteger.ts\nfunction safeInteger(message) {\n  return {\n    kind: \"validation\",\n    type: \"safe_integer\",\n    reference: safeInteger,\n    async: false,\n    expects: null,\n    requirement: Number.isSafeInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"safe integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/size/size.ts\nfunction size(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"size\",\n    reference: size,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size !== this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/someItem/someItem.ts\nfunction someItem(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"some_item\",\n    reference: someItem,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.some(this.requirement)) {\n        _addIssue(this, \"item\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/sortItems/sortItems.ts\nfunction sortItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"sort_items\",\n    reference: sortItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.sort(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/startsWith/startsWith.ts\nfunction startsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"starts_with\",\n    reference: startsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.startsWith(this.requirement)) {\n        _addIssue(this, \"start\", dataset, config2, {\n          received: `\"${dataset.value.slice(0, this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/title/title.ts\nfunction title(title_) {\n  return {\n    kind: \"metadata\",\n    type: \"title\",\n    reference: title,\n    title: title_\n  };\n}\n\n// src/actions/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_lower_case\",\n    reference: toLowerCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toLowerCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_max_value\",\n    reference: toMaxValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value > this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_min_value\",\n    reference: toMinValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value < this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_upper_case\",\n    reference: toUpperCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toUpperCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transform.ts\nfunction transform(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transform,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = this.operation(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transformAsync.ts\nfunction transformAsync(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transformAsync,\n    async: true,\n    operation,\n    async _run(dataset) {\n      dataset.value = await this.operation(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trim/trim.ts\nfunction trim() {\n  return {\n    kind: \"transformation\",\n    type: \"trim\",\n    reference: trim,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trim();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimEnd/trimEnd.ts\nfunction trimEnd() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_end\",\n    reference: trimEnd,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimEnd();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimStart/trimStart.ts\nfunction trimStart() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_start\",\n    reference: trimStart,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimStart();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ulid/ulid.ts\nfunction ulid(message) {\n  return {\n    kind: \"validation\",\n    type: \"ulid\",\n    reference: ulid,\n    async: false,\n    expects: null,\n    requirement: ULID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"ULID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/url/url.ts\nfunction url(message) {\n  return {\n    kind: \"validation\",\n    type: \"url\",\n    reference: url,\n    async: false,\n    expects: null,\n    requirement(input) {\n      try {\n        new URL(input);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"URL\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/uuid/uuid.ts\nfunction uuid(message) {\n  return {\n    kind: \"validation\",\n    type: \"uuid\",\n    reference: uuid,\n    async: false,\n    expects: null,\n    requirement: UUID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"UUID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/value/value.ts\nfunction value(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"value\",\n    reference: value,\n    async: false,\n    expects: requirement instanceof Date ? requirement.toJSON() : _stringify(requirement),\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !(this.requirement <= dataset.value && this.requirement >= dataset.value)) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/config/config.ts\nfunction config(schema, config2) {\n  return {\n    ...schema,\n    _run(dataset, config_) {\n      return schema._run(dataset, { ...config_, ...config2 });\n    }\n  };\n}\n\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, dataset, config2) {\n  return typeof schema.fallback === \"function\" ? (\n    // @ts-expect-error\n    schema.fallback(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.fallback\n  );\n}\n\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    _run(dataset, config2) {\n      const outputDataset = schema._run(dataset, config2);\n      return outputDataset.issues ? { typed: true, value: getFallback(this, outputDataset, config2) } : outputDataset;\n    }\n  };\n}\n\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    async: true,\n    async _run(dataset, config2) {\n      const outputDataset = await schema._run(dataset, config2);\n      return outputDataset.issues ? (\n        // @ts-expect-error\n        { typed: true, value: await getFallback(this, outputDataset, config2) }\n      ) : outputDataset;\n    }\n  };\n}\n\n// src/methods/flatten/flatten.ts\nfunction flatten(issues) {\n  const flatErrors = {};\n  for (const issue of issues) {\n    if (issue.path) {\n      const dotPath = getDotPath(issue);\n      if (dotPath) {\n        if (!flatErrors.nested) {\n          flatErrors.nested = {};\n        }\n        if (flatErrors.nested[dotPath]) {\n          flatErrors.nested[dotPath].push(issue.message);\n        } else {\n          flatErrors.nested[dotPath] = [issue.message];\n        }\n      } else {\n        if (flatErrors.other) {\n          flatErrors.other.push(issue.message);\n        } else {\n          flatErrors.other = [issue.message];\n        }\n      }\n    } else {\n      if (flatErrors.root) {\n        flatErrors.root.push(issue.message);\n      } else {\n        flatErrors.root = [issue.message];\n      }\n    }\n  }\n  return flatErrors;\n}\n\n// src/methods/forward/forward.ts\nfunction forward(action, pathKeys) {\n  return {\n    ...action,\n    _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/forward/forwardAsync.ts\nfunction forwardAsync(action, pathKeys) {\n  return {\n    ...action,\n    async: true,\n    async _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      await action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema, dataset, config2) {\n  return typeof schema.default === \"function\" ? (\n    // @ts-expect-error\n    schema.default(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.default\n  );\n}\n\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getDefaults(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getDefaults);\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getDefaultsAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getDefaultsAsync));\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getFallbacks(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getFallbacks);\n  }\n  return getFallback(schema);\n}\n\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getFallbacksAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getFallbacksAsync));\n  }\n  return getFallback(schema);\n}\n\n// src/methods/is/is.ts\nfunction is(schema, input) {\n  return !schema._run({ typed: false, value: input }, { abortEarly: true }).issues;\n}\n\n// src/schemas/any/any.ts\nfunction any() {\n  return {\n    kind: \"schema\",\n    type: \"any\",\n    reference: any,\n    expects: \"any\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/array.ts\nfunction array(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: array,\n    expects: \"Array\",\n    async: false,\n    item,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < input.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.item._run({ typed: false, value: value2 }, config2);\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: arrayAsync,\n    expects: \"Array\",\n    async: true,\n    item,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          input.map((value2) => this.item._run({ typed: false, value: value2 }, config2))\n        );\n        for (let key = 0; key < itemDatasets.length; key++) {\n          const itemDataset = itemDatasets[key];\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: input[key]\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/bigint/bigint.ts\nfunction bigint(message) {\n  return {\n    kind: \"schema\",\n    type: \"bigint\",\n    reference: bigint,\n    expects: \"bigint\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"bigint\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/blob/blob.ts\nfunction blob(message) {\n  return {\n    kind: \"schema\",\n    type: \"blob\",\n    reference: blob,\n    expects: \"Blob\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Blob) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/boolean/boolean.ts\nfunction boolean(message) {\n  return {\n    kind: \"schema\",\n    type: \"boolean\",\n    reference: boolean,\n    expects: \"boolean\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"boolean\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/custom.ts\nfunction custom(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: custom,\n    expects: \"unknown\",\n    async: false,\n    check: check2,\n    message,\n    _run(dataset, config2) {\n      if (this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/customAsync.ts\nfunction customAsync(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: customAsync,\n    expects: \"unknown\",\n    async: true,\n    check: check2,\n    message,\n    async _run(dataset, config2) {\n      if (await this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/date/date.ts\nfunction date(message) {\n  return {\n    kind: \"schema\",\n    type: \"date\",\n    reference: date,\n    expects: \"Date\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Date) {\n        if (!isNaN(dataset.value)) {\n          dataset.typed = true;\n        } else {\n          _addIssue(this, \"type\", dataset, config2, {\n            received: '\"Invalid Date\"'\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/enum/enum.ts\nfunction enum_(enum__, message) {\n  const options = Object.entries(enum__).filter(([key]) => isNaN(+key)).map(([, value2]) => value2);\n  return {\n    kind: \"schema\",\n    type: \"enum\",\n    reference: enum_,\n    expects: _joinExpects(options.map(_stringify), \"|\"),\n    async: false,\n    enum: enum__,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/file/file.ts\nfunction file(message) {\n  return {\n    kind: \"schema\",\n    type: \"file\",\n    reference: file,\n    expects: \"File\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof File) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/function/function.ts\nfunction function_(message) {\n  return {\n    kind: \"schema\",\n    type: \"function\",\n    reference: function_,\n    expects: \"Function\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"function\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/instance/instance.ts\nfunction instance(class_, message) {\n  return {\n    kind: \"schema\",\n    type: \"instance\",\n    reference: instance,\n    expects: class_.name,\n    async: false,\n    class: class_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof this.class) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/utils/_merge/_merge.ts\nfunction _merge(value1, value2) {\n  if (typeof value1 === typeof value2) {\n    if (value1 === value2 || value1 instanceof Date && value2 instanceof Date && +value1 === +value2) {\n      return { value: value1 };\n    }\n    if (value1 && value2 && value1.constructor === Object && value2.constructor === Object) {\n      for (const key in value2) {\n        if (key in value1) {\n          const dataset = _merge(value1[key], value2[key]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[key] = dataset.value;\n        } else {\n          value1[key] = value2[key];\n        }\n      }\n      return { value: value1 };\n    }\n    if (Array.isArray(value1) && Array.isArray(value2)) {\n      if (value1.length === value2.length) {\n        for (let index = 0; index < value1.length; index++) {\n          const dataset = _merge(value1[index], value2[index]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[index] = dataset.value;\n        }\n        return { value: value1 };\n      }\n    }\n  }\n  return { issue: true };\n}\n\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersect,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"&\"\n    ),\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        for (const schema of this.options) {\n          const optionDataset = schema._run(\n            { typed: false, value: input },\n            config2\n          );\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/intersectAsync.ts\nfunction intersectAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersectAsync,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"&\"\n    ),\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        const optionDatasets = await Promise.all(\n          this.options.map(\n            (schema) => schema._run({ typed: false, value: input }, config2)\n          )\n        );\n        for (const optionDataset of optionDatasets) {\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/lazy/lazy.ts\nfunction lazy(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazy,\n    expects: \"unknown\",\n    async: false,\n    getter,\n    _run(dataset, config2) {\n      return this.getter(dataset.value)._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/lazy/lazyAsync.ts\nfunction lazyAsync(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazyAsync,\n    expects: \"unknown\",\n    async: true,\n    getter,\n    async _run(dataset, config2) {\n      return (await this.getter(dataset.value))._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/literal/literal.ts\nfunction literal(literal_, message) {\n  return {\n    kind: \"schema\",\n    type: \"literal\",\n    reference: literal,\n    expects: _stringify(literal_),\n    async: false,\n    literal: literal_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === this.literal) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObject.ts\nfunction looseObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObjectAsync.ts\nfunction looseObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTuple.ts\nfunction looseTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTupleAsync.ts\nfunction looseTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/map.ts\nfunction map(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: map,\n    expects: \"Map\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        for (const [inputKey, inputValue] of input) {\n          const keyDataset = this.key._run(\n            { typed: false, value: inputKey },\n            config2\n          );\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: mapAsync,\n    expects: \"Map\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        const datasets = await Promise.all(\n          [...input].map(\n            ([inputKey, inputValue]) => Promise.all([\n              inputKey,\n              inputValue,\n              this.key._run({ typed: false, value: inputKey }, config2),\n              this.value._run({ typed: false, value: inputValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          inputKey,\n          inputValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nan/nan.ts\nfunction nan(message) {\n  return {\n    kind: \"schema\",\n    type: \"nan\",\n    reference: nan,\n    expects: \"NaN\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (Number.isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/never/never.ts\nfunction never(message) {\n  return {\n    kind: \"schema\",\n    type: \"never\",\n    reference: never,\n    expects: \"never\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      _addIssue(this, \"type\", dataset, config2);\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullable,\n    expects: \"!null\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullableAsync,\n    expects: \"!null\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullish,\n    expects: \"(!null & !undefined)\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullishAsync,\n    expects: \"(!null & !undefined)\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptional,\n    expects: \"!undefined\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptionalAsync,\n    expects: \"!undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/null/null.ts\nfunction null_(message) {\n  return {\n    kind: \"schema\",\n    type: \"null\",\n    reference: null_,\n    expects: \"null\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullable,\n    expects: `(${wrapped.expects} | null)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullableAsync,\n    expects: `(${wrapped.expects} | null)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullish,\n    expects: `(${wrapped.expects} | null | undefined)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullishAsync,\n    expects: `(${wrapped.expects} | null | undefined)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/number/number.ts\nfunction number(message) {\n  return {\n    kind: \"schema\",\n    type: \"number\",\n    reference: number,\n    expects: \"number\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"number\" && !isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/object.ts\nfunction object(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: object,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: objectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRest.ts\nfunction objectWithRest(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRest,\n    expects: \"Object\",\n    async: false,\n    entries,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              const value2 = input[key];\n              const valueDataset = this.rest._run(\n                { typed: false, value: value2 },\n                config2\n              );\n              if (valueDataset.issues) {\n                const pathItem = {\n                  type: \"object\",\n                  origin: \"value\",\n                  input,\n                  key,\n                  value: value2\n                };\n                for (const issue of valueDataset.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  dataset.issues?.push(issue);\n                }\n                if (!dataset.issues) {\n                  dataset.issues = valueDataset.issues;\n                }\n                if (config2.abortEarly) {\n                  dataset.typed = false;\n                  break;\n                }\n              }\n              if (!valueDataset.typed) {\n                dataset.typed = false;\n              }\n              dataset.value[key] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRestAsync.ts\nfunction objectWithRestAsync(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRestAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal entry\n          // Hint: We do not distinguish between missing and `undefined` entries.\n          // The reason for this decision is that it reduces the bundle size, and\n          // we also expect that most users will expect this behavior.\n          Promise.all(\n            Object.entries(this.entries).map(async ([key, schema]) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await schema._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other entries with rest schema\n          // Hint: We exclude specific keys for security reasons\n          Promise.all(\n            Object.entries(input).filter(\n              ([key]) => _isValidObjectKey(input, key) && !(key in this.entries)\n            ).map(\n              async ([key, value2]) => [\n                key,\n                value2,\n                await this.rest._run({ typed: false, value: value2 }, config2)\n              ]\n            )\n          )\n        ]);\n        for (const [key, value2, valueDataset] of normalDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, valueDataset] of restDatasets) {\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!valueDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optional,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optionalAsync,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"picklist\",\n    reference: picklist,\n    expects: _joinExpects(options.map(_stringify), \"|\"),\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/promise/promise.ts\nfunction promise(message) {\n  return {\n    kind: \"schema\",\n    type: \"promise\",\n    reference: promise,\n    expects: \"Promise\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Promise) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/record.ts\nfunction record(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: record,\n    expects: \"Object\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const entryKey in input) {\n          if (_isValidObjectKey(input, entryKey)) {\n            const entryValue = input[entryKey];\n            const keyDataset = this.key._run(\n              { typed: false, value: entryKey },\n              config2\n            );\n            if (keyDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"key\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of keyDataset.issues) {\n                issue.path = [pathItem];\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = keyDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            const valueDataset = this.value._run(\n              { typed: false, value: entryValue },\n              config2\n            );\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"value\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!keyDataset.typed || !valueDataset.typed) {\n              dataset.typed = false;\n            }\n            if (keyDataset.typed) {\n              dataset.value[keyDataset.value] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: recordAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const datasets = await Promise.all(\n          Object.entries(input).filter(([key2]) => _isValidObjectKey(input, key2)).map(\n            ([entryKey, entryValue]) => Promise.all([\n              entryKey,\n              entryValue,\n              this.key._run({ typed: false, value: entryKey }, config2),\n              this.value._run({ typed: false, value: entryValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          entryKey,\n          entryValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"key\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of keyDataset.issues) {\n              issue.path = [pathItem];\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (keyDataset.typed) {\n            dataset.value[keyDataset.value] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/set.ts\nfunction set(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: set,\n    expects: \"Set\",\n    async: false,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        for (const inputValue of input) {\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key: null,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: setAsync,\n    expects: \"Set\",\n    async: true,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        const valueDatasets = await Promise.all(\n          [...input].map(\n            async (inputValue) => [\n              inputValue,\n              await this.value._run(\n                { typed: false, value: inputValue },\n                config2\n              )\n            ]\n          )\n        );\n        for (const [inputValue, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key: null,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObject.ts\nfunction strictObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObjectAsync.ts\nfunction strictObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTuple.ts\nfunction strictTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key: this.items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTupleAsync.ts\nfunction strictTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key: this.items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/string/string.ts\nfunction string(message) {\n  return {\n    kind: \"schema\",\n    type: \"string\",\n    reference: string,\n    expects: \"string\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"string\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/symbol/symbol.ts\nfunction symbol(message) {\n  return {\n    kind: \"schema\",\n    type: \"symbol\",\n    reference: symbol,\n    expects: \"symbol\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"symbol\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRest.ts\nfunction tupleWithRest(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRest,\n    expects: \"Array\",\n    async: false,\n    items,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            const value2 = input[key];\n            const itemDataset = this.rest._run({ typed: false, value: value2 }, config2);\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRestAsync.ts\nfunction tupleWithRestAsync(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRestAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal item\n          Promise.all(\n            this.items.map(async (item, key) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await item._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other items with rest schema\n          Promise.all(\n            input.slice(this.items.length).map(async (value2, key) => {\n              return [\n                key + this.items.length,\n                value2,\n                await this.rest._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          )\n        ]);\n        for (const [key, value2, itemDataset] of normalDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, itemDataset] of restDatasets) {\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message) {\n  return {\n    kind: \"schema\",\n    type: \"undefined\",\n    reference: undefined_,\n    expects: \"undefined\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/undefinedable/undefinedable.ts\nfunction undefinedable(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"undefinedable\",\n    reference: undefinedable,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/undefinedable/undefinedableAsync.ts\nfunction undefinedableAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"undefinedable\",\n    reference: undefinedableAsync,\n    expects: `(${wrapped.expects} | undefined)`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/union/utils/_subIssues/_subIssues.ts\nfunction _subIssues(datasets) {\n  let issues;\n  if (datasets) {\n    for (const dataset of datasets) {\n      if (issues) {\n        issues.push(...dataset.issues);\n      } else {\n        issues = dataset.issues;\n      }\n    }\n  }\n  return issues;\n}\n\n// src/schemas/union/union.ts\nfunction union(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: union,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"|\"\n    ),\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: unionAsync,\n    expects: _joinExpects(\n      options.map((option) => option.expects),\n      \"|\"\n    ),\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = await schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/unknown/unknown.ts\nfunction unknown() {\n  return {\n    kind: \"schema\",\n    type: \"unknown\",\n    reference: unknown,\n    expects: \"unknown\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/variant.ts\nfunction variant(key, options, message) {\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variant,\n    expects: \"Object\",\n    async: false,\n    key,\n    options,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        let outputDataset;\n        let maxDiscriminatorPriority = 0;\n        let invalidDiscriminatorKey = this.key;\n        let expectedDiscriminators = [];\n        const parseOptions = (variant2, allKeys) => {\n          for (const schema of variant2.options) {\n            if (schema.type === \"variant\") {\n              parseOptions(schema, new Set(allKeys).add(schema.key));\n            } else {\n              let keysAreValid = true;\n              let currentPriority = 0;\n              for (const currentKey of allKeys) {\n                if (schema.entries[currentKey]._run(\n                  // @ts-expect-error\n                  { typed: false, value: input[currentKey] },\n                  config2\n                ).issues) {\n                  keysAreValid = false;\n                  if (invalidDiscriminatorKey !== currentKey && (maxDiscriminatorPriority < currentPriority || maxDiscriminatorPriority === currentPriority && currentKey in input && !(invalidDiscriminatorKey in input))) {\n                    maxDiscriminatorPriority = currentPriority;\n                    invalidDiscriminatorKey = currentKey;\n                    expectedDiscriminators = [];\n                  }\n                  if (invalidDiscriminatorKey === currentKey) {\n                    expectedDiscriminators.push(\n                      schema.entries[currentKey].expects\n                    );\n                  }\n                  break;\n                }\n                currentPriority++;\n              }\n              if (keysAreValid) {\n                const optionDataset = schema._run(\n                  { typed: false, value: input },\n                  config2\n                );\n                if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                  outputDataset = optionDataset;\n                }\n              }\n            }\n            if (outputDataset && !outputDataset.issues) {\n              break;\n            }\n          }\n        };\n        parseOptions(this, /* @__PURE__ */ new Set([this.key]));\n        if (outputDataset) {\n          return outputDataset;\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          // @ts-expect-error\n          input: input[invalidDiscriminatorKey],\n          expected: _joinExpects(expectedDiscriminators, \"|\"),\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: invalidDiscriminatorKey,\n              // @ts-expect-error\n              value: input[invalidDiscriminatorKey]\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, message) {\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variantAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    options,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        let outputDataset;\n        let maxDiscriminatorPriority = 0;\n        let invalidDiscriminatorKey = this.key;\n        let expectedDiscriminators = [];\n        const parseOptions = async (variant2, allKeys) => {\n          for (const schema of variant2.options) {\n            if (schema.type === \"variant\") {\n              await parseOptions(schema, new Set(allKeys).add(schema.key));\n            } else {\n              let keysAreValid = true;\n              let currentPriority = 0;\n              for (const currentKey of allKeys) {\n                if ((await schema.entries[currentKey]._run(\n                  // @ts-expect-error\n                  { typed: false, value: input[currentKey] },\n                  config2\n                )).issues) {\n                  keysAreValid = false;\n                  if (invalidDiscriminatorKey !== currentKey && (maxDiscriminatorPriority < currentPriority || maxDiscriminatorPriority === currentPriority && currentKey in input && !(invalidDiscriminatorKey in input))) {\n                    maxDiscriminatorPriority = currentPriority;\n                    invalidDiscriminatorKey = currentKey;\n                    expectedDiscriminators = [];\n                  }\n                  if (invalidDiscriminatorKey === currentKey) {\n                    expectedDiscriminators.push(\n                      schema.entries[currentKey].expects\n                    );\n                  }\n                  break;\n                }\n                currentPriority++;\n              }\n              if (keysAreValid) {\n                const optionDataset = await schema._run(\n                  { typed: false, value: input },\n                  config2\n                );\n                if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                  outputDataset = optionDataset;\n                }\n              }\n            }\n            if (outputDataset && !outputDataset.issues) {\n              break;\n            }\n          }\n        };\n        await parseOptions(this, /* @__PURE__ */ new Set([this.key]));\n        if (outputDataset) {\n          return outputDataset;\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          // @ts-expect-error\n          input: input[invalidDiscriminatorKey],\n          expected: _joinExpects(expectedDiscriminators, \"|\"),\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: invalidDiscriminatorKey,\n              // @ts-expect-error\n              value: input[invalidDiscriminatorKey]\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/void/void.ts\nfunction void_(message) {\n  return {\n    kind: \"schema\",\n    type: \"void\",\n    reference: void_,\n    expects: \"void\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/keyof/keyof.ts\nfunction keyof(schema, message) {\n  return picklist(Object.keys(schema.entries), message);\n}\n\n// src/methods/omit/omit.ts\nfunction omit(schema, keys) {\n  const entries = {\n    ...schema.entries\n  };\n  for (const key of keys) {\n    delete entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/parse/parse.ts\nfunction parse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parser/parser.ts\nfunction parser(schema, config2) {\n  const func = (input) => parse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/parser/parserAsync.ts\nfunction parserAsync(schema, config2) {\n  const func = (input) => parseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/partial/partial.ts\nfunction partial(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optional(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optionalAsync(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pick/pick.ts\nfunction pick(schema, keys) {\n  const entries = {};\n  for (const key of keys) {\n    entries[key] = schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pipe/pipe.ts\nfunction pipe(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    _run(dataset, config2) {\n      for (const item of pipe2) {\n        if (item.kind !== \"metadata\") {\n          if (dataset.issues && (item.kind === \"schema\" || item.kind === \"transformation\")) {\n            dataset.typed = false;\n            break;\n          }\n          if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {\n            dataset = item._run(dataset, config2);\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/pipe/pipeAsync.ts\nfunction pipeAsync(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    async: true,\n    async _run(dataset, config2) {\n      for (const item of pipe2) {\n        if (item.kind !== \"metadata\") {\n          if (dataset.issues && (item.kind === \"schema\" || item.kind === \"transformation\")) {\n            dataset.typed = false;\n            break;\n          }\n          if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {\n            dataset = await item._run(dataset, config2);\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptional(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptionalAsync(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParser/safeParser.ts\nfunction safeParser(schema, config2) {\n  const func = (input) => safeParse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/safeParser/safeParserAsync.ts\nfunction safeParserAsync(schema, config2) {\n  const func = (input) => safeParseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n  return schema.wrapped;\n}\nexport {\n  BASE64_REGEX,\n  BIC_REGEX,\n  CUID2_REGEX,\n  DECIMAL_REGEX,\n  DIGITS_REGEX,\n  EMAIL_REGEX,\n  EMOJI_REGEX,\n  HEXADECIMAL_REGEX,\n  HEX_COLOR_REGEX,\n  IMEI_REGEX,\n  IPV4_REGEX,\n  IPV6_REGEX,\n  IP_REGEX,\n  ISO_DATE_REGEX,\n  ISO_DATE_TIME_REGEX,\n  ISO_TIMESTAMP_REGEX,\n  ISO_TIME_REGEX,\n  ISO_TIME_SECOND_REGEX,\n  ISO_WEEK_REGEX,\n  MAC48_REGEX,\n  MAC64_REGEX,\n  MAC_REGEX,\n  NANO_ID_REGEX,\n  OCTAL_REGEX,\n  ULID_REGEX,\n  UUID_REGEX,\n  ValiError,\n  _addIssue,\n  _isLuhnAlgo,\n  _isValidObjectKey,\n  _joinExpects,\n  _stringify,\n  any,\n  array,\n  arrayAsync,\n  awaitAsync,\n  base64,\n  bic,\n  bigint,\n  blob,\n  boolean,\n  brand,\n  bytes,\n  check,\n  checkAsync,\n  checkItems,\n  config,\n  creditCard,\n  cuid2,\n  custom,\n  customAsync,\n  date,\n  decimal,\n  deleteGlobalConfig,\n  deleteGlobalMessage,\n  deleteSchemaMessage,\n  deleteSpecificMessage,\n  description,\n  digits,\n  email,\n  emoji,\n  empty,\n  endsWith,\n  entriesFromList,\n  enum_ as enum,\n  enum_,\n  everyItem,\n  excludes,\n  fallback,\n  fallbackAsync,\n  file,\n  filterItems,\n  findItem,\n  finite,\n  flatten,\n  forward,\n  forwardAsync,\n  function_ as function,\n  function_,\n  getDefault,\n  getDefaults,\n  getDefaultsAsync,\n  getDotPath,\n  getFallback,\n  getFallbacks,\n  getFallbacksAsync,\n  getGlobalConfig,\n  getGlobalMessage,\n  getSchemaMessage,\n  getSpecificMessage,\n  hash,\n  hexColor,\n  hexadecimal,\n  imei,\n  includes,\n  instance,\n  integer,\n  intersect,\n  intersectAsync,\n  ip,\n  ipv4,\n  ipv6,\n  is,\n  isOfKind,\n  isOfType,\n  isValiError,\n  isoDate,\n  isoDateTime,\n  isoTime,\n  isoTimeSecond,\n  isoTimestamp,\n  isoWeek,\n  keyof,\n  lazy,\n  lazyAsync,\n  length,\n  literal,\n  looseObject,\n  looseObjectAsync,\n  looseTuple,\n  looseTupleAsync,\n  mac,\n  mac48,\n  mac64,\n  map,\n  mapAsync,\n  mapItems,\n  maxBytes,\n  maxLength,\n  maxSize,\n  maxValue,\n  metadata,\n  mimeType,\n  minBytes,\n  minLength,\n  minSize,\n  minValue,\n  multipleOf,\n  nan,\n  nanoid,\n  never,\n  nonEmpty,\n  nonNullable,\n  nonNullableAsync,\n  nonNullish,\n  nonNullishAsync,\n  nonOptional,\n  nonOptionalAsync,\n  normalize,\n  notBytes,\n  notLength,\n  notSize,\n  notValue,\n  null_ as null,\n  null_,\n  nullable,\n  nullableAsync,\n  nullish,\n  nullishAsync,\n  number,\n  object,\n  objectAsync,\n  objectWithRest,\n  objectWithRestAsync,\n  octal,\n  omit,\n  optional,\n  optionalAsync,\n  parse,\n  parseAsync,\n  parser,\n  parserAsync,\n  partial,\n  partialAsync,\n  partialCheck,\n  partialCheckAsync,\n  pick,\n  picklist,\n  pipe,\n  pipeAsync,\n  promise,\n  rawCheck,\n  rawCheckAsync,\n  rawTransform,\n  rawTransformAsync,\n  readonly,\n  record,\n  recordAsync,\n  reduceItems,\n  regex,\n  required,\n  requiredAsync,\n  safeInteger,\n  safeParse,\n  safeParseAsync,\n  safeParser,\n  safeParserAsync,\n  set,\n  setAsync,\n  setGlobalConfig,\n  setGlobalMessage,\n  setSchemaMessage,\n  setSpecificMessage,\n  size,\n  someItem,\n  sortItems,\n  startsWith,\n  strictObject,\n  strictObjectAsync,\n  strictTuple,\n  strictTupleAsync,\n  string,\n  symbol,\n  title,\n  toLowerCase,\n  toMaxValue,\n  toMinValue,\n  toUpperCase,\n  transform,\n  transformAsync,\n  trim,\n  trimEnd,\n  trimStart,\n  tuple,\n  tupleAsync,\n  tupleWithRest,\n  tupleWithRestAsync,\n  ulid,\n  undefined_ as undefined,\n  undefined_,\n  undefinedable,\n  undefinedableAsync,\n  union,\n  unionAsync,\n  unknown,\n  unwrap,\n  url,\n  uuid,\n  value,\n  variant,\n  variantAsync,\n  void_ as void,\n  void_\n};\n","function isFunction(value: unknown): value is () => unknown {\n  return typeof value === 'function';\n}\n\nexport default function resolveFunctionOrReturnValue<T>(\n  fnOrValue: (() => Promise<T> | T) | Promise<T> | T\n): Promise<T> | T {\n  return isFunction(fnOrValue) ? fnOrValue() : fnOrValue;\n}\n","// We are only importing what we need.\n\nimport {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk';\n\nexport default {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n};\n","import { type InferOutput, intersect, object, optional, pipe, readonly, string, undefined_, union } from 'valibot';\n\nconst credentialsSchema = pipe(\n  intersect([\n    union(\n      [\n        object({\n          authorizationToken: string(),\n          subscriptionKey: optional(undefined_('\"subscriptionKey\" must be unset when \"authorizationToken\" is set.'))\n        }),\n        object({\n          authorizationToken: optional(undefined_('\"authorizationToken\" must be unset when \"subscriptionKey\" is set.')),\n          subscriptionKey: string()\n        })\n      ],\n      'The object must either have either \"authorizationToken\" or \"subscriptionKey\" set, but not both.'\n    ),\n    union(\n      [\n        object({\n          customVoiceHostname: optional(undefined_('\"customVoiceHostname\" must be unest when \"region\" is set.')),\n          region: string(),\n          speechRecognitionHostname: optional(\n            undefined_('\"speechRecognitionHostname\" must be unest when \"region\" is set.')\n          ),\n          speechSynthesisHostname: optional(undefined_('\"speechSynthesisHostname\" must be unest when \"region\" is set.'))\n        }),\n        object({\n          customVoiceHostname: optional(union([string(), undefined_()])),\n          region: optional(undefined_('\"region\" must be unset when \"*Hostname\" is set.')),\n          speechRecognitionHostname: string(),\n          speechSynthesisHostname: string()\n        })\n      ],\n      'The object must either have either \"region\" or \"*Hostname\" set, but not both.'\n    )\n  ]),\n  readonly()\n);\n\nexport default credentialsSchema;\n\nexport type Credentials = InferOutput<typeof credentialsSchema>;\n","import { boolean, type InferOutput, optional } from 'valibot';\n\nconst enableTelemetrySchema = optional(boolean());\n\nexport type EnableTelemetry = InferOutput<typeof enableTelemetrySchema>;\n\nexport default enableTelemetrySchema;\n","import { type InferOutput, maxValue, minValue, number, optional, pipe } from 'valibot';\n\n// 60_000 is an arbitrary value, we can set it to a larger number.\nconst initialSilenceTimeoutSchema = optional(pipe(number(), minValue(1), maxValue(60_000)));\n\nexport type InitialSilenceTimeout = InferOutput<typeof initialSilenceTimeoutSchema>;\n\nexport default initialSilenceTimeoutSchema;\n","import { type InferOutput, boolean, optional } from 'valibot';\n\nconst looseEventsSchema = optional(boolean(), false);\n\nexport type LooseEvents = InferOutput<typeof looseEventsSchema>;\n\nexport default looseEventsSchema;\n","import { array, type InferOutput, optional, pipe, string, transform } from 'valibot';\n\nconst referenceGrammarsSchema = pipe(\n  optional(array(string()), []),\n  // any(),\n  // array(string()),\n  // transform<string[], readonly string[]>(value => (Object.isFrozen(value) ? value : Object.freeze([...value])))\n  transform<string[], readonly string[]>(value => (Object.isFrozen(value) ? value : Object.freeze([...value])))\n);\n\nexport type ReferenceGrammars = InferOutput<typeof referenceGrammarsSchema>;\n\nexport default referenceGrammarsSchema;\n","import { type InferOutput, optional, string } from 'valibot';\n\nconst speechRecognitionEndpointIdSchema = optional(string());\n\nexport type SpeechRecognitionEndpointId = InferOutput<typeof speechRecognitionEndpointIdSchema>;\n\nexport default speechRecognitionEndpointIdSchema;\n","import { type InferOutput, enum_, optional } from 'valibot';\n\nconst textNormalizationSchema = optional(\n  enum_({\n    display: 'display',\n    itn: 'itn',\n    lexical: 'lexical',\n    maskeditn: 'maskeditn'\n  }),\n  'display'\n);\n\nexport type TextNormalization = InferOutput<typeof textNormalizationSchema>;\n\nexport default textNormalizationSchema;\n","import { type AudioConfig as AudioConfigType } from 'microsoft-cognitiveservices-speech-sdk';\nimport { parse } from 'valibot';\n\nimport resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\nimport SpeechSDK from './SpeechSDK';\nimport credentialsSchema, { type Credentials } from './SpeechToText/validation/credentialsSchema';\nimport enableTelemetrySchema, { EnableTelemetry } from './SpeechToText/validation/enableTelemetrySchema';\nimport initialSilenceTimeoutSchema, {\n  InitialSilenceTimeout\n} from './SpeechToText/validation/initialSilenceTimeoutSchema';\nimport looseEventsSchema, { LooseEvents } from './SpeechToText/validation/looseEventsSchema';\nimport referenceGrammarsSchema, { ReferenceGrammars } from './SpeechToText/validation/referenceGrammarsSchema';\nimport speechRecognitionEndpointIdSchema, {\n  SpeechRecognitionEndpointId\n} from './SpeechToText/validation/speechRecognitionEndpointIdSchema';\nimport textNormalizationSchema, { TextNormalization } from './SpeechToText/validation/textNormalizationSchema';\n\nconst { AudioConfig } = SpeechSDK;\n\nlet shouldWarnOnSubscriptionKey = true;\n\ntype PatchOptionsInit = {\n  audioConfig?: AudioConfigType | undefined;\n  credentials: (() => Credentials | Promise<Credentials>) | Credentials | Promise<Credentials>;\n  enableTelemetry?: boolean | undefined;\n  initialSilenceTimeout?: number | undefined;\n  looseEvent?: boolean | undefined;\n  looseEvents?: boolean | undefined;\n  referenceGrammars?: readonly string[] | undefined;\n  speechRecognitionEndpointId?: string | undefined;\n  textNormalization?: 'display' | 'itn' | 'lexical' | 'maskeditn' | undefined;\n};\n\ntype PatchedOptions = Readonly<{\n  audioConfig: AudioConfigType;\n  enableTelemetry: EnableTelemetry;\n  fetchCredentials: () => Promise<Credentials>;\n  initialSilenceTimeout: InitialSilenceTimeout;\n  looseEvents: LooseEvents;\n  referenceGrammars: ReferenceGrammars;\n  speechRecognitionEndpointId: SpeechRecognitionEndpointId;\n  textNormalization: TextNormalization;\n}>;\n\nexport default function patchOptions(init: PatchOptionsInit): PatchedOptions {\n  const {\n    audioConfig,\n    credentials,\n    enableTelemetry,\n    initialSilenceTimeout,\n    looseEvent,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization\n  } = init;\n\n  let { looseEvents } = init;\n\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  return Object.freeze({\n    audioConfig: audioConfig || AudioConfig.fromDefaultMicrophoneInput(),\n    // We set telemetry to true to honor the default telemetry settings of Speech SDK\n    // https://github.com/Microsoft/cognitive-services-speech-sdk-js#data--telemetry\n    enableTelemetry: parse(enableTelemetrySchema, enableTelemetry),\n    fetchCredentials: async () => {\n      const parsedCredentials = parse(credentialsSchema, await resolveFunctionOrReturnValue<Credentials>(credentials));\n\n      if (shouldWarnOnSubscriptionKey && parsedCredentials.subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      return parsedCredentials;\n    },\n    initialSilenceTimeout: parse(initialSilenceTimeoutSchema, initialSilenceTimeout),\n    looseEvents: parse(looseEventsSchema, looseEvents),\n    referenceGrammars: parse(referenceGrammarsSchema, referenceGrammars),\n    speechRecognitionEndpointId: parse(speechRecognitionEndpointIdSchema, speechRecognitionEndpointId),\n    textNormalization: parse(textNormalizationSchema, textNormalization)\n  });\n}\n\nexport type { Credentials, PatchedOptions, PatchOptionsInit };\n","export default function pDefer() {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n}\n","import createDeferred from 'p-defer';\n\nexport default function () {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n","export type SpeechRecognitionAlternativeInit = {\n  confidence: number;\n  transcript: string;\n};\n\nexport default class SpeechRecognitionAlternative {\n  constructor({ confidence, transcript }: SpeechRecognitionAlternativeInit) {\n    this.#confidence = confidence;\n    this.#transcript = transcript;\n  }\n\n  #confidence: number;\n  #transcript: string;\n\n  get confidence() {\n    return this.#confidence;\n  }\n\n  get transcript() {\n    return this.#transcript;\n  }\n}\n","interface FakeArrayInterface<T> {\n  [index: number]: T | undefined;\n  get length(): number;\n}\n\nexport default class FakeArray<T> implements FakeArrayInterface<T> {\n  constructor(array: readonly T[]) {\n    if (!array) {\n      throw new Error('array must be set.');\n    }\n\n    this.#array = array;\n\n    for (const key in array) {\n      Object.defineProperty(this, key, {\n        enumerable: true,\n        get() {\n          return array[key];\n        }\n      });\n    }\n  }\n\n  #array: readonly T[];\n  [index: number]: T | undefined;\n  [Symbol.iterator]() {\n    return this.#array[Symbol.iterator]();\n  }\n\n  get length(): number {\n    return this.#array.length;\n  }\n}\n","import FakeArray from './private/FakeArray';\n\nexport type SpeechRecognitionResultInit = {\n  isFinal: boolean;\n  results: readonly SpeechRecognitionAlternative[];\n};\n\nexport default class SpeechRecognitionResult extends FakeArray<SpeechRecognitionAlternative> {\n  constructor(init: SpeechRecognitionResultInit) {\n    super(init.results);\n\n    this.#isFinal = init.isFinal;\n  }\n\n  #isFinal: boolean;\n\n  get isFinal(): boolean {\n    return this.#isFinal;\n  }\n}\n","import SpeechSDK from '../SpeechSDK';\n\nimport SpeechRecognitionAlternative from './SpeechRecognitionAlternative';\nimport SpeechRecognitionResult from './SpeechRecognitionResult';\nimport type { SerializedRecognitionResult } from './private/serializeRecognitionResult';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function (\n  result: SerializedRecognitionResult,\n  init?:\n    | {\n        maxAlternatives: number;\n        textNormalization: 'display' | 'itn' | 'lexical' | 'maskeditn';\n      }\n    | undefined\n): SpeechRecognitionResult {\n  const { maxAlternatives = Infinity, textNormalization = 'display' } = init || {};\n  const json: {\n    NBest: readonly {\n      Confidence: number;\n      Display: string;\n      ITN: string;\n      Lexical: string;\n      MaskedITN: string;\n    }[];\n  } = typeof result.json === 'string' ? JSON.parse(result.json) : result.json;\n\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !json.NBest)) {\n    return new SpeechRecognitionResult({\n      isFinal: result.reason === RecognizedSpeech,\n      results: [\n        new SpeechRecognitionAlternative({\n          confidence: 0.5,\n          transcript: result.text\n        })\n      ]\n    });\n  } else if (result.reason === RecognizedSpeech) {\n    return new SpeechRecognitionResult({\n      isFinal: true,\n      results: (json.NBest || []).slice(0, maxAlternatives).map(\n        ({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) =>\n          new SpeechRecognitionAlternative({\n            confidence,\n            transcript:\n              textNormalization === 'itn'\n                ? itn\n                : textNormalization === 'lexical'\n                  ? lexical\n                  : textNormalization === 'maskeditn'\n                    ? maskedITN\n                    : display\n          })\n      )\n    });\n  }\n\n  return new SpeechRecognitionResult({ isFinal: false, results: [] });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  T extends (resolve: (returnValue: R) => void, reject: (error: unknown) => void) => void = (\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): () => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  T extends (arg0: P0, resolve: (returnValue: R) => void, reject: (error: unknown) => void) => void = (\n    arg0: P0,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  P1 = any,\n  T extends (arg0: P0, arg1: P1, resolve: (returnValue: R) => void, reject: (error: unknown) => void) => void = (\n    arg0: P0,\n    arg1: P1,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0, arg1: P1) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  P1 = any,\n  P2 = any,\n  T extends (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void = (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0, arg1: P1, arg2: P2) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  P0 = any,\n  P1 = any,\n  P2 = any,\n  P3 = any,\n  T extends (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    arg3: P3,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void = (\n    arg0: P0,\n    arg1: P1,\n    arg2: P2,\n    arg3: P3,\n    resolve: (returnValue: R) => void,\n    reject: (error: unknown) => void\n  ) => void\n>(fn: T, context?: undefined | unknown): (arg0: P0, arg1: P1, arg2: P2, arg3: P3) => Promise<R>;\n\nexport default function cognitiveServicesAsyncToPromise<\n  R,\n  T extends (...args: any[]) => void = (...args: any[]) => void\n>(fn: T, context: undefined | unknown = undefined): (...args: Parameters<T>) => Promise<R> {\n  return (...args: Parameters<T>) =>\n    // eslint-disable-next-line prefer-spread\n    new Promise<R>((resolve, reject) => fn.apply(context, [...args, resolve, reject] as unknown as Parameters<T>));\n}\n","type EventListener<T> = (event: T) => void;\n\nexport default class EventListenerMap<T extends string, EventMap extends { [Name in T]: unknown }> {\n  constructor(eventTarget: EventTarget) {\n    this.#eventTarget = eventTarget;\n    this.#propertyMap = {};\n  }\n\n  #eventTarget: EventTarget;\n  #propertyMap: { [Name in keyof EventMap]?: EventListener<EventMap[Name]> | undefined };\n\n  getProperty<U extends T>(name: U): ((event: EventMap[U]) => void) | undefined {\n    return this.#propertyMap[name];\n  }\n\n  setProperty<U extends T>(name: U, value: ((event: EventMap[U]) => void) | undefined) {\n    const existing = this.#propertyMap[name];\n\n    existing && this.#eventTarget.removeEventListener(name, existing as EventListener<Event>);\n\n    if (value) {\n      this.#eventTarget.addEventListener(name, value as EventListener<Event>);\n    }\n\n    this.#propertyMap[name] = value;\n  }\n}\n","import { AudioSourceEvent } from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/AudioSourceEvents';\nimport {\n  type AudioConfig,\n  type AudioConfigImpl\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig';\nimport averageAmplitude from './averageAmplitude';\n\nexport default function prepareAudioConfig(audioConfig: AudioConfig) {\n  // Speech SDK also force cast AudioConfig to AudioConfigImpl and pass it to ServiceRecognizerBase to use attach() and other methods.\n  // https://github.com/microsoft/cognitive-services-speech-sdk-js/blob/a6e9d2a202534565ccc97650861a6b296de48ecf/src/sdk/SpeechRecognizer.ts#L291C27-L291C43\n  const audioConfigImpl = audioConfig as AudioConfigImpl;\n  const originalAttach = audioConfigImpl.attach;\n  const boundOriginalAttach = audioConfigImpl.attach.bind(audioConfigImpl);\n  let firstChunk = false;\n  let muted = false;\n\n  // We modify \"attach\" function and detect when audible chunk is read.\n  // We will only modify \"attach\" function once.\n  audioConfigImpl.attach = async () => {\n    const reader = await boundOriginalAttach('');\n\n    return {\n      ...reader,\n      read: async () => {\n        const chunk = await reader.read();\n\n        // The magic number 150 is measured by:\n        // 1. Set microphone volume to 0\n        // 2. Observe the amplitude (100-110) for the first few chunks\n        //    (There is a short static caught when turning on the microphone)\n        // 3. Set the number a bit higher than the observation\n        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {\n          audioConfigImpl.events.onEvent(new AudioSourceEvent('FirstAudibleChunk', ''));\n          firstChunk = true;\n        }\n\n        if (muted) {\n          return { buffer: new ArrayBuffer(0), isEnd: true, timeReceived: Date.now() };\n        }\n\n        return chunk;\n      }\n    };\n  };\n\n  return {\n    audioConfig,\n    pause: () => {\n      muted = true;\n    },\n    unprepare: () => {\n      audioConfigImpl.attach = originalAttach;\n    }\n  };\n}\n","export default function averageAmplitude(arrayBuffer: ArrayBuffer): number {\n  const array = Array.from(new Int16Array(arrayBuffer));\n\n  return array.reduce((averageAmplitude, amplitude) => averageAmplitude + Math.abs(amplitude), 0) / array.length;\n}\n","import { type SpeechRecognitionResult } from 'microsoft-cognitiveservices-speech-sdk';\n\nexport type SerializedRecognitionResult = Readonly<{\n  duration: number;\n  errorDetails: string;\n  json: unknown;\n  offset: number;\n  properties: unknown;\n  reason: number;\n  resultId: string;\n  text: string;\n}>;\n\nexport default function serializeRecognitionResult({\n  duration,\n  errorDetails,\n  json,\n  offset,\n  properties,\n  reason,\n  resultId,\n  text\n}: SpeechRecognitionResult): SerializedRecognitionResult {\n  return Object.freeze({\n    duration,\n    errorDetails,\n    json: json && JSON.parse(json),\n    offset,\n    properties,\n    reason,\n    resultId,\n    text\n  });\n}\n","interface W3CSpeechGrammar {\n  src: string;\n  weight: number;\n}\n\ninterface W3CSpeechGrammarList {\n  readonly length: number;\n  addFromString(string: string, weight?: number): void;\n  addFromURI(src: string, weight?: number): void;\n  item(index: number): W3CSpeechGrammar;\n  [index: number]: W3CSpeechGrammar;\n}\n\n/* eslint class-methods-use-this: \"off\" */\n\nexport default class SpeechGrammarList implements W3CSpeechGrammarList {\n  constructor() {\n    this.#phrases = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  addFromURI() {\n    throw new Error('JSGF is not supported');\n  }\n\n  item(): W3CSpeechGrammar {\n    throw new Error('JSGF is not supported');\n  }\n\n  get length(): number {\n    throw new Error('JSGF is not supported');\n  }\n\n  [index: number]: { src: string; weight: number };\n\n  #phrases: readonly string[];\n\n  get phrases(): readonly string[] {\n    return this.#phrases;\n  }\n\n  set phrases(value: readonly string[]) {\n    if (Array.isArray(value)) {\n      this.#phrases = Object.freeze([...value]);\n    } else if (typeof value === 'string') {\n      this.#phrases = Object.freeze([value]);\n    } else {\n      throw new Error(`The provided value is not an array or of type 'string'`);\n    }\n  }\n}\n","export type SpeechRecognitionErrorType =\n  | 'aborted'\n  | 'audio-capture'\n  | 'bad-grammar'\n  | 'language-not-supported'\n  | 'network'\n  | 'no-speech'\n  | 'not-allowed'\n  | 'service-not-allowed'\n  | 'unknown';\n\nexport type SpeechRecognitionErrorEventInit = {\n  error: SpeechRecognitionErrorType;\n  message?: string | undefined;\n};\n\nexport default class SpeechRecognitionErrorEvent extends Event {\n  constructor(type: 'error', { error, message }: SpeechRecognitionErrorEventInit) {\n    super(type);\n\n    this.#error = error;\n    this.#message = message;\n  }\n\n  #error: SpeechRecognitionErrorType;\n  #message: string | undefined;\n\n  get error(): SpeechRecognitionErrorType {\n    return this.#error;\n  }\n\n  get message(): string | undefined {\n    return this.#message;\n  }\n\n  override get type(): 'error' {\n    return 'error';\n  }\n}\n","import FakeArray from './private/FakeArray';\nimport type SpeechRecognitionResult from './SpeechRecognitionResult';\n\nexport default class SpeechRecognitionResultList extends FakeArray<SpeechRecognitionResult> {\n  constructor(result: readonly SpeechRecognitionResult[]) {\n    super(result);\n  }\n}\n","import SpeechRecognitionResultList from './SpeechRecognitionResultList';\n\nexport type SpeechRecognitionEventInit = {\n  data?: undefined | unknown;\n  resultIndex?: number | undefined;\n  results?: SpeechRecognitionResultList | undefined;\n};\n\nexport default class SpeechRecognitionEvent<\n  T extends\n    | 'audioend'\n    | 'audiostart'\n    | 'cognitiveservices'\n    | 'end'\n    | 'result'\n    | 'soundend'\n    | 'soundstart'\n    | 'speechend'\n    | 'speechstart'\n    | 'start'\n> extends Event {\n  constructor(type: 'cognitiveservices', init: SpeechRecognitionEventInit & { data: { type: string } });\n  constructor(type: 'audioend');\n  constructor(type: 'audiostart');\n  constructor(type: 'end');\n  constructor(type: 'result', init: SpeechRecognitionEventInit);\n  constructor(type: 'soundend');\n  constructor(type: 'soundstart');\n  constructor(type: 'speechend');\n  constructor(type: 'speechstart');\n  constructor(type: 'start');\n\n  constructor(type: T, { data, resultIndex, results }: SpeechRecognitionEventInit = {}) {\n    super(type);\n\n    this.#data = data;\n    this.#resultIndex = resultIndex;\n    this.#results = results || new SpeechRecognitionResultList([]);\n  }\n\n  #data: undefined | unknown;\n  // TODO: \"resultIndex\" should be set.\n  #resultIndex: number | undefined;\n  #results: SpeechRecognitionResultList;\n\n  get data(): unknown {\n    return this.#data;\n  }\n\n  get resultIndex(): number | undefined {\n    return this.#resultIndex;\n  }\n\n  get results(): SpeechRecognitionResultList {\n    return this.#results;\n  }\n\n  override get type(): T {\n    return super.type as T;\n  }\n}\n","/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport {\n  type CancellationEventArgs,\n  type RecognitionEventArgs,\n  type SessionEventArgs,\n  type SpeechRecognitionEventArgs,\n  type SpeechRecognizer as SpeechRecognizerType\n} from 'microsoft-cognitiveservices-speech-sdk';\nimport { type AudioConfigImpl } from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig';\nimport { boolean, function_, parse, undefined_, union } from 'valibot';\nimport createPromiseQueue from '../../Util/createPromiseQueue';\nimport SpeechSDK from '../SpeechSDK';\nimport cognitiveServiceEventResultToWebSpeechRecognitionResult from './cognitiveServiceEventResultToWebSpeechRecognitionResult';\nimport cognitiveServicesAsyncToPromise from './cognitiveServicesAsyncToPromise';\nimport EventListenerMap from './private/EventListenerMap';\nimport prepareAudioConfig from './private/prepareAudioConfig';\nimport serializeRecognitionResult from './private/serializeRecognitionResult';\nimport SpeechGrammarList from './SpeechGrammarList';\nimport SpeechRecognitionErrorEvent from './SpeechRecognitionErrorEvent';\nimport SpeechRecognitionEvent from './SpeechRecognitionEvent';\nimport { type SpeechRecognitionEventListenerMap } from './SpeechRecognitionEventListenerMap';\nimport type SpeechRecognitionResult from './SpeechRecognitionResult';\nimport SpeechRecognitionResultList from './SpeechRecognitionResultList';\nimport referenceGrammarsSchema from './validation/referenceGrammarsSchema';\nimport textNormalizationSchema from './validation/textNormalizationSchema';\n\n// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat\n// {\n//   \"RecognitionStatus\": \"Success\",\n//   \"Offset\": 900000,\n//   \"Duration\": 49000000,\n//   \"NBest\": [\n//     {\n//       \"Confidence\": 0.738919,\n//       \"Lexical\": \"second\",\n//       \"ITN\": \"second\",\n//       \"MaskedITN\": \"second\",\n//       \"Display\": \"Second.\"\n//     }\n//   ]\n// }\n\n// {\n//   \"RecognitionStatus\": \"InitialSilenceTimeout\",\n//   \"Offset\": 50000000,\n//   \"Duration\": 0\n// }\n\nconst { ResultReason, SpeechRecognizer } = SpeechSDK;\n\ntype CreateSpeechRecognitionPonyfillFromRecognizerInit = {\n  createRecognizer: (lang: string) => Promise<SpeechRecognizerType>;\n  enableTelemetry: boolean | undefined;\n  looseEvents: boolean;\n  referenceGrammars?: readonly string[] | undefined;\n  textNormalization: 'display' | 'itn' | 'lexical' | 'maskeditn';\n};\n\nconst enableTelemetrySchema = union([boolean(), undefined_()]);\n\nexport default function createSpeechRecognitionPonyfillFromRecognizer({\n  createRecognizer,\n  enableTelemetry,\n  looseEvents,\n  referenceGrammars,\n  textNormalization\n}: CreateSpeechRecognitionPonyfillFromRecognizerInit) {\n  createRecognizer = parse(function_(), createRecognizer) as typeof createRecognizer;\n  enableTelemetry = parse(enableTelemetrySchema, enableTelemetry);\n  looseEvents = parse(boolean(), looseEvents);\n  referenceGrammars = parse(referenceGrammarsSchema, referenceGrammars);\n  textNormalization = parse(textNormalizationSchema, textNormalization);\n\n  // If enableTelemetry is set to null or non-boolean, we will default to true.\n  typeof enableTelemetry !== 'undefined' && SpeechRecognizer.enableTelemetry(enableTelemetry);\n\n  class SpeechRecognition extends EventTarget {\n    #continuous = false;\n    #eventListenerMap: SpeechRecognitionEventListenerMap = new EventListenerMap(this);\n    #grammars: SpeechGrammarList = new SpeechGrammarList();\n    #interimResults = false;\n    #lang =\n      typeof window !== 'undefined'\n        ? window.document.documentElement.getAttribute('lang') || window.navigator.language\n        : 'en-US';\n    // eslint-disable-next-line no-magic-numbers\n    #maxAlternatives: number = 1;\n\n    emitCognitiveServices<T extends { type: string }>(type: string, event: T) {\n      this.dispatchEvent(\n        new SpeechRecognitionEvent('cognitiveservices', {\n          data: {\n            ...event,\n            type\n          }\n        })\n      );\n    }\n\n    get continuous(): boolean {\n      return this.#continuous;\n    }\n\n    set continuous(value: boolean) {\n      this.#continuous = value;\n    }\n\n    get grammars(): SpeechGrammarList {\n      return this.#grammars;\n    }\n\n    set grammars(value: SpeechGrammarList) {\n      if (value instanceof SpeechGrammarList) {\n        this.#grammars = value;\n      } else {\n        throw new Error(`The provided value is not of type 'SpeechGrammarList'`);\n      }\n    }\n\n    get interimResults() {\n      return this.#interimResults;\n    }\n\n    set interimResults(value) {\n      this.#interimResults = value;\n    }\n\n    get maxAlternatives() {\n      return this.#maxAlternatives;\n    }\n\n    set maxAlternatives(value) {\n      this.#maxAlternatives = value;\n    }\n\n    get lang() {\n      return this.#lang;\n    }\n\n    set lang(value) {\n      this.#lang = value;\n    }\n\n    get onaudioend(): ((event: SpeechRecognitionEvent<'audioend'>) => void) | undefined {\n      return this.#eventListenerMap.getProperty('audioend');\n    }\n\n    set onaudioend(value: ((event: SpeechRecognitionEvent<'audioend'>) => void) | undefined) {\n      this.#eventListenerMap.setProperty('audioend', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'audiostart'>) => void) | undefined } */\n    get onaudiostart() {\n      return this.#eventListenerMap.getProperty('audiostart');\n    }\n\n    set onaudiostart(\n      /** @type { ((event: SpeechRecognitionEvent<'audiostart'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('audiostart', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'cognitiveservices'>) => void) | undefined } */\n    get oncognitiveservices() {\n      return this.#eventListenerMap.getProperty('cognitiveservices');\n    }\n\n    set oncognitiveservices(\n      /** @type { ((event: SpeechRecognitionEvent<'cognitiveservices'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('cognitiveservices', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'end'>) => void) | undefined } */\n    get onend() {\n      return this.#eventListenerMap.getProperty('end');\n    }\n\n    set onend(\n      /** @type { ((event: SpeechRecognitionEvent<'end'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('end', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionErrorEvent) => void) | undefined } */\n    get onerror() {\n      return this.#eventListenerMap.getProperty('error');\n    }\n\n    set onerror(\n      /** @type { ((event: SpeechRecognitionErrorEvent) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('error', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'result'>) => void) | undefined } */\n    get onresult() {\n      return this.#eventListenerMap.getProperty('result');\n    }\n\n    set onresult(\n      /** @type { ((event: SpeechRecognitionEvent<'result'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('result', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'soundend'>) => void) | undefined } */\n    get onsoundend() {\n      return this.#eventListenerMap.getProperty('soundend');\n    }\n\n    set onsoundend(\n      /** @type { ((event: SpeechRecognitionEvent<'soundend'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('soundend', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'soundstart'>) => void) | undefined } */\n    get onsoundstart() {\n      return this.#eventListenerMap.getProperty('soundstart');\n    }\n\n    set onsoundstart(\n      /** @type { ((event: SpeechRecognitionEvent<'soundstart'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('soundstart', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'speechend'>) => void) | undefined } */\n    get onspeechend() {\n      return this.#eventListenerMap.getProperty('speechend');\n    }\n\n    set onspeechend(\n      /** @type { ((event: SpeechRecognitionEvent<'speechend'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('speechend', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'speechstart'>) => void) | undefined } */\n    get onspeechstart() {\n      return this.#eventListenerMap.getProperty('speechstart');\n    }\n\n    set onspeechstart(\n      /** @type { ((event: SpeechRecognitionEvent<'speechstart'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('speechstart', value);\n    }\n\n    /** @type { ((event: SpeechRecognitionEvent<'start'>) => void) | undefined } */\n    get onstart() {\n      return this.#eventListenerMap.getProperty('start');\n    }\n\n    set onstart(\n      /** @type { ((event: SpeechRecognitionEvent<'start'>) => void) | undefined } */\n      value\n    ) {\n      this.#eventListenerMap.setProperty('start', value);\n    }\n\n    abort: (() => void) | undefined;\n    stop: (() => void) | undefined;\n\n    start() {\n      this._startOnce().catch(err => {\n        this.dispatchEvent(\n          new SpeechRecognitionErrorEvent('error', { error: err, message: err && (err.stack || err.message) })\n        );\n      });\n    }\n\n    async _startOnce() {\n      // TODO: [P2] Should check if recognition is active, we should not start recognition twice\n      const recognizer = await createRecognizer(this.lang);\n\n      const { pause, unprepare } = prepareAudioConfig(recognizer['audioConfig']);\n\n      try {\n        const queue = createPromiseQueue();\n        let soundStarted;\n        let speechStarted;\n        let stopping;\n\n        const { detach: detachAudioConfigEvent } = (recognizer['audioConfig'] as AudioConfigImpl).events.attach(\n          event => {\n            const { name } = event;\n\n            if (name === 'AudioSourceReadyEvent') {\n              queue.push({ audioSourceReady: {} });\n            } else if (name === 'AudioSourceOffEvent') {\n              queue.push({ audioSourceOff: {} });\n            } else if (name === 'FirstAudibleChunk') {\n              queue.push({ firstAudibleChunk: {} });\n            }\n          }\n        );\n\n        recognizer.canceled = (_, { errorDetails, offset, reason, sessionId }: CancellationEventArgs) => {\n          queue.push({\n            canceled: {\n              errorDetails,\n              offset,\n              reason,\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognized = (_, { offset, result, sessionId }: SpeechRecognitionEventArgs) => {\n          queue.push({\n            recognized: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognizing = (_, { offset, result, sessionId }: SpeechRecognitionEventArgs) => {\n          queue.push({\n            recognizing: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.sessionStarted = (_, { sessionId }: SessionEventArgs) => {\n          queue.push({ sessionStarted: { sessionId } });\n        };\n\n        recognizer.sessionStopped = (_, { sessionId }: SessionEventArgs) => {\n          // \"sessionStopped\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          queue.push({ sessionStopped: { sessionId } });\n        };\n\n        recognizer.speechStartDetected = (_, { offset, sessionId }: RecognitionEventArgs) => {\n          queue.push({ speechStartDetected: { offset, sessionId } });\n        };\n\n        recognizer.speechEndDetected = (_, { sessionId }: RecognitionEventArgs) => {\n          // \"speechEndDetected\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          // Update: \"speechEndDetected\" is fired for DLSpeech.listenOnceAsync()\n          queue.push({ speechEndDetected: { sessionId } });\n        };\n\n        const { phrases } = this.grammars;\n\n        // HACK: We are using the internal of SpeechRecognizer because they did not expose it\n        const { dynamicGrammar } = recognizer['privReco'];\n\n        referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar([...referenceGrammars]);\n        phrases && phrases.length && dynamicGrammar.addPhrase([...phrases]);\n\n        await cognitiveServicesAsyncToPromise<void>(recognizer.startContinuousRecognitionAsync, recognizer)();\n\n        if (typeof recognizer.stopContinuousRecognitionAsync === 'function') {\n          this.abort = () => queue.push({ abort: {} });\n          this.stop = () => queue.push({ stop: {} });\n        } else {\n          this.abort = this.stop = undefined;\n        }\n\n        let audioStarted;\n        let finalEvent: SpeechRecognitionErrorEvent | SpeechRecognitionEvent<'result'> | undefined = undefined;\n        let finalizedResults: readonly SpeechRecognitionResult[] = [];\n\n        for (let loop = 0; !stopping || audioStarted; loop++) {\n          const event = await queue.shift();\n          const {\n            abort,\n            audioSourceOff,\n            audioSourceReady,\n            canceled,\n            firstAudibleChunk,\n            recognized,\n            recognizing,\n            stop\n          } = event;\n\n          // We are emitting event \"cognitiveservices\" for debugging purpose.\n          Object.keys(event).forEach(name => this.emitCognitiveServices(name, event[name]));\n\n          const errorMessage = canceled && canceled.errorDetails;\n\n          if (/Permission\\sdenied/u.test(errorMessage || '')) {\n            // If microphone is not allowed, we should not emit \"start\" event.\n\n            finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'not-allowed' });\n\n            break;\n          }\n\n          if (!loop) {\n            this.dispatchEvent(new SpeechRecognitionEvent('start'));\n          }\n\n          if (errorMessage) {\n            if (/1006/u.test(errorMessage)) {\n              if (!audioStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n                this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n              }\n\n              finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'network' });\n            } else {\n              finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'unknown' });\n            }\n\n            break;\n          } else if (abort || stop) {\n            if (abort) {\n              finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'aborted' });\n\n              // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.\n              stopping = 'abort';\n            } else {\n              // When we pause, we will send { isEnd: true }, Speech Services will send us \"recognized\" event.\n              pause();\n              stopping = 'stop';\n            }\n\n            // Abort should not be dispatched without support of \"stopContinuousRecognitionAsync\".\n            // But for defensive purpose, we make sure \"stopContinuousRecognitionAsync\" is available before we can call.\n            if (abort && recognizer.stopContinuousRecognitionAsync) {\n              await cognitiveServicesAsyncToPromise<void>(recognizer.stopContinuousRecognitionAsync, recognizer)();\n            }\n          } else if (audioSourceReady) {\n            this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n            audioStarted = true;\n          } else if (firstAudibleChunk) {\n            this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n            soundStarted = true;\n          } else if (audioSourceOff) {\n            // Looks like we don't need this line and all the tests are still working.\n            // Guessing probably stopping is already truthy.\n            // stopping = true;\n\n            speechStarted && this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n            soundStarted && this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n            audioStarted && this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n\n            audioStarted = soundStarted = speechStarted = false;\n\n            break;\n          } else if (stopping !== 'abort') {\n            if (recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch) {\n              // Quirks: 2024-11-19 with Speech SDK 1.41.0\n              //   When microphone is muted, `reason` is `NoMatch` (0) in both interactive mode and continuous mode.\n              //   After receiving this \"recognized but no match\" event, both modes will continue to recognize speech with \"speechStartDetected\" and \"recognizing\" events.\n              //   That means, we need to end this manually in interactive mode, and continuous-but-stopping mode.\n              if (!this.continuous || stopping === 'stop') {\n                // Empty result will turn into \"no-speech\" later in the code.\n                finalEvent = new SpeechRecognitionEvent('result', {\n                  results: new SpeechRecognitionResultList(finalizedResults)\n                });\n\n                // Quirks: 2024-11-19 with Speech SDK 1.14.0\n                //   Speech SDK did not stop after NoMatch even in interactive mode.\n                recognizer.stopContinuousRecognitionAsync &&\n                  (await cognitiveServicesAsyncToPromise<void>(\n                    recognizer.stopContinuousRecognitionAsync,\n                    recognizer\n                  )());\n\n                // Quirks: 2024-11-19 with Speech SDK 1.14.0\n                //   After calling stopContinuousRecognitionAsync, no \"audioSourceOff\" is fired.\n\n                break;\n              }\n            } else if (recognized || recognizing) {\n              if (!audioStarted) {\n                // Unconfirmed prevention of quirks\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n                audioStarted = true;\n              }\n\n              if (!soundStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n                soundStarted = true;\n              }\n\n              if (!speechStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('speechstart'));\n\n                speechStarted = true;\n              }\n\n              if (recognized) {\n                const result = cognitiveServiceEventResultToWebSpeechRecognitionResult(recognized.result, {\n                  maxAlternatives: this.maxAlternatives,\n                  textNormalization\n                });\n\n                const recognizable = !!result[0]?.transcript;\n\n                if (recognizable) {\n                  finalizedResults = [...finalizedResults, result];\n\n                  this.continuous &&\n                    this.dispatchEvent(\n                      new SpeechRecognitionEvent('result', {\n                        results: new SpeechRecognitionResultList(finalizedResults)\n                      })\n                    );\n                }\n\n                // If it is continuous, we just sent the finalized results. So we don't need to send it again after \"audioend\" event.\n                if (this.continuous && recognizable) {\n                  finalEvent = undefined;\n                } else {\n                  finalEvent = new SpeechRecognitionEvent('result', {\n                    results: new SpeechRecognitionResultList(finalizedResults)\n                  });\n                }\n\n                // If it is interactive, stop after first recognition.\n                // If it is continuous and it is stopping, stop it too.\n                if ((!this.continuous || stopping === 'stop') && recognizer.stopContinuousRecognitionAsync) {\n                  await cognitiveServicesAsyncToPromise<void>(recognizer.stopContinuousRecognitionAsync, recognizer)();\n                }\n\n                // If event order can be loosened, we can send the recognized event as soon as we receive it.\n                // 1. If it is not recognizable (no-speech), we should send an \"error\" event just before \"end\" event. We will not loosen \"error\" events.\n                if (looseEvents && finalEvent && recognizable) {\n                  this.dispatchEvent(finalEvent);\n                  finalEvent = undefined;\n                }\n              } else if (recognizing) {\n                this.interimResults &&\n                  this.dispatchEvent(\n                    new SpeechRecognitionEvent('result', {\n                      results: new SpeechRecognitionResultList([\n                        ...finalizedResults,\n                        cognitiveServiceEventResultToWebSpeechRecognitionResult(recognizing.result, {\n                          maxAlternatives: this.maxAlternatives,\n                          textNormalization\n                        })\n                      ])\n                    })\n                  );\n              }\n            }\n          }\n        }\n\n        if (speechStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n        }\n\n        if (soundStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n        }\n\n        if (audioStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n        }\n\n        if (finalEvent) {\n          if (finalEvent.type === 'result' && !finalEvent.results.length) {\n            finalEvent = new SpeechRecognitionErrorEvent('error', { error: 'no-speech' });\n          }\n\n          this.dispatchEvent(finalEvent);\n        }\n\n        // Even though there is no \"start\" event emitted, we will still emit \"end\" event\n        // This is mainly for \"microphone blocked\" story.\n        this.dispatchEvent(new SpeechRecognitionEvent('end'));\n\n        detachAudioConfigEvent();\n      } catch (err) {\n        // Logging out the erorr because Speech SDK would fail silently.\n        console.error(err);\n\n        throw err;\n      } finally {\n        unprepare();\n        recognizer['dispose'](false);\n      }\n    }\n  }\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition,\n    SpeechRecognitionEvent\n  };\n}\n","/**\n * Assert a condition.\n * @param condition The condition that it should satisfy.\n * @param message The error message.\n * @param args The arguments for replacing placeholders in the message.\n */\nexport function assertType(\n    condition: boolean,\n    message: string,\n    ...args: any[]\n): asserts condition {\n    if (!condition) {\n        throw new TypeError(format(message, args))\n    }\n}\n\n/**\n * Convert a text and arguments to one string.\n * @param message The formating text\n * @param args The arguments.\n */\nexport function format(message: string, args: any[]): string {\n    let i = 0\n    return message.replace(/%[os]/gu, () => anyToString(args[i++]))\n}\n\n/**\n * Convert a value to a string representation.\n * @param x The value to get the string representation.\n */\nexport function anyToString(x: any): string {\n    if (typeof x !== \"object\" || x === null) {\n        return String(x)\n    }\n    return Object.prototype.toString.call(x)\n}\n","import { anyToString, assertType } from \"./misc\"\n\ndeclare const console: any\ndeclare const dispatchEvent: any\ndeclare const ErrorEvent: any\ndeclare const process: any\n\nlet currentErrorHandler: setErrorHandler.ErrorHandler | undefined\n\n/**\n * Set the error handler.\n * @param value The error handler to set.\n */\nexport function setErrorHandler(\n    value: setErrorHandler.ErrorHandler | undefined,\n): void {\n    assertType(\n        typeof value === \"function\" || value === undefined,\n        \"The error handler must be a function or undefined, but got %o.\",\n        value,\n    )\n    currentErrorHandler = value\n}\nexport namespace setErrorHandler {\n    /**\n     * The error handler.\n     * @param error The thrown error object.\n     */\n    export type ErrorHandler = (error: Error) => void\n}\n\n/**\n * Print a error message.\n * @param maybeError The error object.\n */\nexport function reportError(maybeError: unknown): void {\n    try {\n        const error =\n            maybeError instanceof Error\n                ? maybeError\n                : new Error(anyToString(maybeError))\n\n        // Call the user-defined error handler if exists.\n        if (currentErrorHandler) {\n            currentErrorHandler(error)\n            return\n        }\n\n        // Dispatch an `error` event if this is on a browser.\n        if (\n            typeof dispatchEvent === \"function\" &&\n            typeof ErrorEvent === \"function\"\n        ) {\n            dispatchEvent(\n                new ErrorEvent(\"error\", { error, message: error.message }),\n            )\n        }\n\n        // Emit an `uncaughtException` event if this is on Node.js.\n        //istanbul ignore else\n        else if (\n            typeof process !== \"undefined\" &&\n            typeof process.emit === \"function\"\n        ) {\n            process.emit(\"uncaughtException\", error)\n            return\n        }\n\n        // Otherwise, print the error.\n        console.error(error)\n    } catch {\n        // ignore.\n    }\n}\n","declare const globalThis: any\ndeclare const window: any\ndeclare const self: any\ndeclare const global: any\n\n/**\n * The global object.\n */\n//istanbul ignore next\nexport const Global: any =\n    typeof window !== \"undefined\"\n        ? window\n        : typeof self !== \"undefined\"\n        ? self\n        : typeof global !== \"undefined\"\n        ? global\n        : typeof globalThis !== \"undefined\"\n        ? globalThis\n        : undefined\n","import { assertType } from \"./misc\"\n\ndeclare const console: any\n\nlet currentWarnHandler: setWarningHandler.WarningHandler | undefined\n\n/**\n * Set the warning handler.\n * @param value The warning handler to set.\n */\nexport function setWarningHandler(\n    value: setWarningHandler.WarningHandler | undefined,\n): void {\n    assertType(\n        typeof value === \"function\" || value === undefined,\n        \"The warning handler must be a function or undefined, but got %o.\",\n        value,\n    )\n    currentWarnHandler = value\n}\nexport namespace setWarningHandler {\n    /**\n     * The warning information.\n     */\n    export interface Warning {\n        /**\n         * The code of this warning.\n         */\n        code: string\n        /**\n         * The message in English.\n         */\n        message: string\n        /**\n         * The arguments for replacing placeholders in the text.\n         */\n        args: any[]\n    }\n\n    /**\n     * The warning handler.\n     * @param warning The warning.\n     */\n    export type WarningHandler = (warning: Warning) => void\n}\n\n/**\n * The warning information.\n */\nexport class Warning<TArgs extends any[]> {\n    readonly code: string\n    readonly message: string\n\n    constructor(code: string, message: string) {\n        this.code = code\n        this.message = message\n    }\n\n    /**\n     * Report this warning.\n     * @param args The arguments of the warning.\n     */\n    warn(...args: TArgs): void {\n        try {\n            // Call the user-defined warning handler if exists.\n            if (currentWarnHandler) {\n                currentWarnHandler({ ...this, args })\n                return\n            }\n\n            // Otherwise, print the warning.\n            const stack = (new Error().stack ?? \"\").replace(\n                /^(?:.+?\\n){2}/gu,\n                \"\\n\",\n            )\n            console.warn(this.message, ...args, stack)\n        } catch {\n            // Ignore.\n        }\n    }\n}\n","import { EventTarget } from \"./event-target\" // Used as only type, so no circular.\nimport { Warning } from \"./warning-handler\"\n\nexport const InitEventWasCalledWhileDispatching = new Warning<[]>(\n    \"W01\",\n    \"Unable to initialize event under dispatching.\",\n)\n\nexport const FalsyWasAssignedToCancelBubble = new Warning<[]>(\n    \"W02\",\n    \"Assigning any falsy value to 'cancelBubble' property has no effect.\",\n)\n\nexport const TruthyWasAssignedToReturnValue = new Warning<[]>(\n    \"W03\",\n    \"Assigning any truthy value to 'returnValue' property has no effect.\",\n)\n\nexport const NonCancelableEventWasCanceled = new Warning<[]>(\n    \"W04\",\n    \"Unable to preventDefault on non-cancelable events.\",\n)\n\nexport const CanceledInPassiveListener = new Warning<[]>(\n    \"W05\",\n    \"Unable to preventDefault inside passive event listener invocation.\",\n)\n\nexport const EventListenerWasDuplicated = new Warning<\n    [type: \"bubble\" | \"capture\", callback: EventTarget.EventListener<any, any>]\n>(\n    \"W06\",\n    \"An event listener wasn't added because it has been added already: %o, %o\",\n)\n\nexport const OptionWasIgnored = new Warning<\n    [name: \"passive\" | \"once\" | \"signal\"]\n>(\n    \"W07\",\n    \"The %o option value was abandoned because the event listener wasn't added as duplicated.\",\n)\n\nexport const InvalidEventListener = new Warning<\n    [callback: EventTarget.EventListener<any, any> | {} | null | undefined]\n>(\n    \"W08\",\n    \"The 'callback' argument must be a function or an object that has 'handleEvent' method: %o\",\n)\n\nexport const InvalidAttributeHandler = new Warning<\n    [callback: EventTarget.EventListener<any, any> | {}]\n>(\"W09\", \"Event attribute handler must be a function: %o\")\n","import { EventTarget } from \"./event-target\" // Used as only type, so no circular.\nimport { Global } from \"./global\"\nimport { assertType } from \"./misc\"\nimport {\n    CanceledInPassiveListener,\n    FalsyWasAssignedToCancelBubble,\n    InitEventWasCalledWhileDispatching,\n    NonCancelableEventWasCanceled,\n    TruthyWasAssignedToReturnValue,\n} from \"./warnings\"\n\n/*eslint-disable class-methods-use-this */\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * `EventTarget` shim can control the internal state of this `Event` objects.\n * @see https://dom.spec.whatwg.org/#event\n */\nexport class Event<TEventType extends string = string> {\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    static get NONE(): number {\n        return NONE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n    static get CAPTURING_PHASE(): number {\n        return CAPTURING_PHASE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n    static get AT_TARGET(): number {\n        return AT_TARGET\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n    static get BUBBLING_PHASE(): number {\n        return BUBBLING_PHASE\n    }\n\n    /**\n     * Initialize this event instance.\n     * @param type The type of this event.\n     * @param eventInitDict Options to initialize.\n     * @see https://dom.spec.whatwg.org/#dom-event-event\n     */\n    constructor(type: TEventType, eventInitDict?: Event.EventInit) {\n        Object.defineProperty(this, \"isTrusted\", {\n            value: false,\n            enumerable: true,\n        })\n\n        const opts = eventInitDict ?? {}\n        internalDataMap.set(this, {\n            type: String(type),\n            bubbles: Boolean(opts.bubbles),\n            cancelable: Boolean(opts.cancelable),\n            composed: Boolean(opts.composed),\n            target: null,\n            currentTarget: null,\n            stopPropagationFlag: false,\n            stopImmediatePropagationFlag: false,\n            canceledFlag: false,\n            inPassiveListenerFlag: false,\n            dispatchFlag: false,\n            timeStamp: Date.now(),\n        })\n    }\n\n    /**\n     * The type of this event.\n     * @see https://dom.spec.whatwg.org/#dom-event-type\n     */\n    get type(): TEventType {\n        return $(this).type as TEventType\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-target\n     */\n    get target(): EventTarget | null {\n        return $(this).target\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * @deprecated Use the `target` property instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-srcelement\n     */\n    get srcElement(): EventTarget | null {\n        return $(this).target\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n     */\n    get currentTarget(): EventTarget | null {\n        return $(this).currentTarget\n    }\n\n    /**\n     * The event target of the current dispatching.\n     * This doesn't support node tree.\n     * @see https://dom.spec.whatwg.org/#dom-event-composedpath\n     */\n    composedPath(): EventTarget[] {\n        const currentTarget = $(this).currentTarget\n        if (currentTarget) {\n            return [currentTarget]\n        }\n        return []\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    get NONE(): number {\n        return NONE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n    get CAPTURING_PHASE(): number {\n        return CAPTURING_PHASE\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n    get AT_TARGET(): number {\n        return AT_TARGET\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n    get BUBBLING_PHASE(): number {\n        return BUBBLING_PHASE\n    }\n\n    /**\n     * The current event phase.\n     * @see https://dom.spec.whatwg.org/#dom-event-eventphase\n     */\n    get eventPhase(): number {\n        return $(this).dispatchFlag ? 2 : 0\n    }\n\n    /**\n     * Stop event bubbling.\n     * Because this shim doesn't support node tree, this merely changes the `cancelBubble` property value.\n     * @see https://dom.spec.whatwg.org/#dom-event-stoppropagation\n     */\n    stopPropagation(): void {\n        $(this).stopPropagationFlag = true\n    }\n\n    /**\n     * `true` if event bubbling was stopped.\n     * @deprecated\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    get cancelBubble(): boolean {\n        return $(this).stopPropagationFlag\n    }\n\n    /**\n     * Stop event bubbling if `true` is set.\n     * @deprecated Use the `stopPropagation()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    set cancelBubble(value: boolean) {\n        if (value) {\n            $(this).stopPropagationFlag = true\n        } else {\n            FalsyWasAssignedToCancelBubble.warn()\n        }\n    }\n\n    /**\n     * Stop event bubbling and subsequent event listener callings.\n     * @see https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\n     */\n    stopImmediatePropagation(): void {\n        const data = $(this)\n        data.stopPropagationFlag = data.stopImmediatePropagationFlag = true\n    }\n\n    /**\n     * `true` if this event will bubble.\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbles\n     */\n    get bubbles(): boolean {\n        return $(this).bubbles\n    }\n\n    /**\n     * `true` if this event can be canceled by the `preventDefault()` method.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelable\n     */\n    get cancelable(): boolean {\n        return $(this).cancelable\n    }\n\n    /**\n     * `true` if the default behavior will act.\n     * @deprecated Use the `defaultPrevented` proeprty instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    get returnValue(): boolean {\n        return !$(this).canceledFlag\n    }\n\n    /**\n     * Cancel the default behavior if `false` is set.\n     * @deprecated Use the `preventDefault()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    set returnValue(value: boolean) {\n        if (!value) {\n            setCancelFlag($(this))\n        } else {\n            TruthyWasAssignedToReturnValue.warn()\n        }\n    }\n\n    /**\n     * Cancel the default behavior.\n     * @see https://dom.spec.whatwg.org/#dom-event-preventdefault\n     */\n    preventDefault(): void {\n        setCancelFlag($(this))\n    }\n\n    /**\n     * `true` if the default behavior was canceled.\n     * @see https://dom.spec.whatwg.org/#dom-event-defaultprevented\n     */\n    get defaultPrevented(): boolean {\n        return $(this).canceledFlag\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    get composed(): boolean {\n        return $(this).composed\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-istrusted\n     */\n    //istanbul ignore next\n    get isTrusted(): boolean {\n        return false\n    }\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-timestamp\n     */\n    get timeStamp(): number {\n        return $(this).timeStamp\n    }\n\n    /**\n     * @deprecated Don't use this method. The constructor did initialization.\n     */\n    initEvent(type: string, bubbles = false, cancelable = false) {\n        const data = $(this)\n        if (data.dispatchFlag) {\n            InitEventWasCalledWhileDispatching.warn()\n            return\n        }\n\n        internalDataMap.set(this, {\n            ...data,\n            type: String(type),\n            bubbles: Boolean(bubbles),\n            cancelable: Boolean(cancelable),\n            target: null,\n            currentTarget: null,\n            stopPropagationFlag: false,\n            stopImmediatePropagationFlag: false,\n            canceledFlag: false,\n        })\n    }\n}\n\n/*eslint-enable class-methods-use-this */\n\nexport namespace Event {\n    /**\n     * The options of the `Event` constructor.\n     * @see https://dom.spec.whatwg.org/#dictdef-eventinit\n     */\n    export interface EventInit {\n        bubbles?: boolean\n        cancelable?: boolean\n        composed?: boolean\n    }\n}\n\nexport { $ as getEventInternalData }\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst NONE = 0\nconst CAPTURING_PHASE = 1\nconst AT_TARGET = 2\nconst BUBBLING_PHASE = 3\n\n/**\n * Private data.\n */\ninterface EventInternalData {\n    /**\n     * The value of `type` attribute.\n     */\n    readonly type: string\n    /**\n     * The value of `bubbles` attribute.\n     */\n    readonly bubbles: boolean\n    /**\n     * The value of `cancelable` attribute.\n     */\n    readonly cancelable: boolean\n    /**\n     * The value of `composed` attribute.\n     */\n    readonly composed: boolean\n    /**\n     * The value of `timeStamp` attribute.\n     */\n    readonly timeStamp: number\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-target\n     */\n    target: EventTarget | null\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n     */\n    currentTarget: EventTarget | null\n    /**\n     * @see https://dom.spec.whatwg.org/#stop-propagation-flag\n     */\n    stopPropagationFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#stop-immediate-propagation-flag\n     */\n    stopImmediatePropagationFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#canceled-flag\n     */\n    canceledFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#in-passive-listener-flag\n     */\n    inPassiveListenerFlag: boolean\n    /**\n     * @see https://dom.spec.whatwg.org/#dispatch-flag\n     */\n    dispatchFlag: boolean\n}\n\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap = new WeakMap<any, EventInternalData>()\n\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $(event: unknown, name = \"this\"): EventInternalData {\n    const retv = internalDataMap.get(event)\n    assertType(\n        retv != null,\n        \"'%s' must be an object that Event constructor created, but got another one: %o\",\n        name,\n        event,\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data private data.\n */\nfunction setCancelFlag(data: EventInternalData) {\n    if (data.inPassiveListenerFlag) {\n        CanceledInPassiveListener.warn()\n        return\n    }\n    if (!data.cancelable) {\n        NonCancelableEventWasCanceled.warn()\n        return\n    }\n\n    data.canceledFlag = true\n}\n\n// Set enumerable\nObject.defineProperty(Event, \"NONE\", { enumerable: true })\nObject.defineProperty(Event, \"CAPTURING_PHASE\", { enumerable: true })\nObject.defineProperty(Event, \"AT_TARGET\", { enumerable: true })\nObject.defineProperty(Event, \"BUBBLING_PHASE\", { enumerable: true })\nconst keys = Object.getOwnPropertyNames(Event.prototype)\nfor (let i = 0; i < keys.length; ++i) {\n    if (keys[i] === \"constructor\") {\n        continue\n    }\n    Object.defineProperty(Event.prototype, keys[i], { enumerable: true })\n}\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, Global.Event.prototype)\n}\n","import { Global } from \"./global\"\n\n/**\n * Create a new InvalidStateError instance.\n * @param message The error message.\n */\nexport function createInvalidStateError(message: string): Error {\n    if (Global.DOMException) {\n        return new Global.DOMException(message, \"InvalidStateError\")\n    }\n\n    if (DOMException == null) {\n        DOMException = class DOMException extends Error {\n            constructor(msg: string) {\n                super(msg)\n                if ((Error as any).captureStackTrace) {\n                    ;(Error as any).captureStackTrace(this, DOMException)\n                }\n            }\n            // eslint-disable-next-line class-methods-use-this\n            get code() {\n                return 11\n            }\n            // eslint-disable-next-line class-methods-use-this\n            get name() {\n                return \"InvalidStateError\"\n            }\n        }\n        Object.defineProperties(DOMException.prototype, {\n            code: { enumerable: true },\n            name: { enumerable: true },\n        })\n        defineErrorCodeProperties(DOMException)\n        defineErrorCodeProperties(DOMException.prototype)\n    }\n    return new DOMException(message)\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nlet DOMException: { new (message: string): Error } | undefined\n\nconst ErrorCodeMap = {\n    INDEX_SIZE_ERR: 1,\n    DOMSTRING_SIZE_ERR: 2,\n    HIERARCHY_REQUEST_ERR: 3,\n    WRONG_DOCUMENT_ERR: 4,\n    INVALID_CHARACTER_ERR: 5,\n    NO_DATA_ALLOWED_ERR: 6,\n    NO_MODIFICATION_ALLOWED_ERR: 7,\n    NOT_FOUND_ERR: 8,\n    NOT_SUPPORTED_ERR: 9,\n    INUSE_ATTRIBUTE_ERR: 10,\n    INVALID_STATE_ERR: 11,\n    SYNTAX_ERR: 12,\n    INVALID_MODIFICATION_ERR: 13,\n    NAMESPACE_ERR: 14,\n    INVALID_ACCESS_ERR: 15,\n    VALIDATION_ERR: 16,\n    TYPE_MISMATCH_ERR: 17,\n    SECURITY_ERR: 18,\n    NETWORK_ERR: 19,\n    ABORT_ERR: 20,\n    URL_MISMATCH_ERR: 21,\n    QUOTA_EXCEEDED_ERR: 22,\n    TIMEOUT_ERR: 23,\n    INVALID_NODE_TYPE_ERR: 24,\n    DATA_CLONE_ERR: 25,\n}\ntype ErrorCodeMap = typeof ErrorCodeMap\n\nfunction defineErrorCodeProperties(obj: any): void {\n    const keys = Object.keys(ErrorCodeMap) as (keyof ErrorCodeMap)[]\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        const value = ErrorCodeMap[key]\n        Object.defineProperty(obj, key, {\n            get() {\n                return value\n            },\n            configurable: true,\n            enumerable: true,\n        })\n    }\n}\n","import { Event } from \"./event\"\nimport { Global } from \"./global\"\nimport { assertType } from \"./misc\"\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * This class controls the internal state of `Event`.\n * @see https://dom.spec.whatwg.org/#interface-event\n */\nexport class EventWrapper<TEventType extends string> extends Event<TEventType> {\n    /**\n     * Wrap a given event object to control states.\n     * @param event The event-like object to wrap.\n     */\n    static wrap<T extends EventLike>(event: T): EventWrapperOf<T> {\n        return new (getWrapperClassOf(event))(event)\n    }\n\n    protected constructor(event: Event<TEventType>) {\n        super(event.type, {\n            bubbles: event.bubbles,\n            cancelable: event.cancelable,\n            composed: event.composed,\n        })\n\n        if (event.cancelBubble) {\n            super.stopPropagation()\n        }\n        if (event.defaultPrevented) {\n            super.preventDefault()\n        }\n\n        internalDataMap.set(this, { original: event })\n\n        // Define accessors\n        const keys = Object.keys(event)\n        for (let i = 0; i < keys.length; ++i) {\n            const key = keys[i]\n            if (!(key in this)) {\n                Object.defineProperty(\n                    this,\n                    key,\n                    defineRedirectDescriptor(event, key),\n                )\n            }\n        }\n    }\n\n    stopPropagation(): void {\n        super.stopPropagation()\n\n        const { original } = $(this)\n        if (\"stopPropagation\" in original) {\n            original.stopPropagation!()\n        }\n    }\n\n    get cancelBubble(): boolean {\n        return super.cancelBubble\n    }\n    set cancelBubble(value: boolean) {\n        super.cancelBubble = value\n\n        const { original } = $(this)\n        if (\"cancelBubble\" in original) {\n            original.cancelBubble = value\n        }\n    }\n\n    stopImmediatePropagation(): void {\n        super.stopImmediatePropagation()\n\n        const { original } = $(this)\n        if (\"stopImmediatePropagation\" in original) {\n            original.stopImmediatePropagation!()\n        }\n    }\n\n    get returnValue(): boolean {\n        return super.returnValue\n    }\n    set returnValue(value: boolean) {\n        super.returnValue = value\n\n        const { original } = $(this)\n        if (\"returnValue\" in original) {\n            original.returnValue = value\n        }\n    }\n\n    preventDefault(): void {\n        super.preventDefault()\n\n        const { original } = $(this)\n        if (\"preventDefault\" in original) {\n            original.preventDefault!()\n        }\n    }\n\n    get timeStamp(): number {\n        const { original } = $(this)\n        if (\"timeStamp\" in original) {\n            return original.timeStamp!\n        }\n        return super.timeStamp\n    }\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\ntype EventLike = { readonly type: string } & Partial<Event>\ntype EventWrapperOf<T extends EventLike> = Event<T[\"type\"]> &\n    Omit<T, keyof Event>\n\ninterface EventWrapperInternalData {\n    readonly original: EventLike\n}\n\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap = new WeakMap<any, EventWrapperInternalData>()\n\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @returns The private data of the event.\n */\nfunction $(event: unknown): EventWrapperInternalData {\n    const retv = internalDataMap.get(event)\n    assertType(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event,\n    )\n    return retv\n}\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrapperClassCache = new WeakMap()\n\n// Make association for wrappers.\nwrapperClassCache.set(Object.prototype, EventWrapper)\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n    wrapperClassCache.set(Global.Event.prototype, EventWrapper)\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param originalEvent The event object to wrap.\n */\nfunction getWrapperClassOf<T extends EventLike>(\n    originalEvent: T,\n): { new (e: T): EventWrapperOf<T> } {\n    const prototype = Object.getPrototypeOf(originalEvent)\n    if (prototype == null) {\n        return EventWrapper as any\n    }\n\n    let wrapper: any = wrapperClassCache.get(prototype)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapperClassOf(prototype), prototype)\n        wrapperClassCache.set(prototype, wrapper)\n    }\n\n    return wrapper\n}\n\n/**\n * Define new wrapper class.\n * @param BaseEventWrapper The base wrapper class.\n * @param originalPrototype The prototype of the original event.\n */\nfunction defineWrapper(BaseEventWrapper: any, originalPrototype: any): any {\n    class CustomEventWrapper extends BaseEventWrapper {}\n\n    const keys = Object.keys(originalPrototype)\n    for (let i = 0; i < keys.length; ++i) {\n        Object.defineProperty(\n            CustomEventWrapper.prototype,\n            keys[i],\n            defineRedirectDescriptor(originalPrototype, keys[i]),\n        )\n    }\n\n    return CustomEventWrapper\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n */\nfunction defineRedirectDescriptor(obj: any, key: string): PropertyDescriptor {\n    const d = Object.getOwnPropertyDescriptor(obj, key)!\n    return {\n        get() {\n            const original: any = $(this).original\n            const value = original[key]\n            if (typeof value === \"function\") {\n                return value.bind(original)\n            }\n            return value\n        },\n        set(value: any) {\n            const original: any = $(this).original\n            original[key] = value\n        },\n        configurable: d.configurable,\n        enumerable: d.enumerable,\n    }\n}\n","import { reportError } from \"./error-handler\"\nimport { Event } from \"./event\" // Used as only type, so no circular.\nimport { EventTarget } from \"./event-target\" // Used as only type, so no circular.\n\n/**\n * The event listener concept.\n * @see https://dom.spec.whatwg.org/#concept-event-listener\n */\nexport interface Listener {\n    /**\n     * The callback function.\n     */\n    readonly callback: Listener.Callback<any, any>\n    /**\n     * The flags of this listener.\n     * This is writable to add the removed flag.\n     */\n    flags: ListenerFlags\n    /**\n     * The `AbortSignal` to remove this listener.\n     */\n    readonly signal: Listener.AbortSignal | undefined\n    /**\n     * The `abort` event listener for the `signal`.\n     * To remove it from the `signal`.\n     */\n    readonly signalListener: (() => void) | undefined\n}\n\nexport namespace Listener {\n    export type Callback<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > = CallbackFunction<TEventTarget, TEvent> | CallbackObject<TEvent>\n\n    export interface CallbackFunction<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > {\n        (this: TEventTarget, event: TEvent): void\n    }\n\n    export interface CallbackObject<TEvent extends Event> {\n        handleEvent(event: TEvent): void\n    }\n\n    export interface AbortSignal {\n        addEventListener(type: string, callback: Callback<any, Event>): void\n        removeEventListener(type: string, callback: Callback<any, Event>): void\n    }\n}\n\n/**\n * Create a new listener.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n * @param signalListener The abort event listener for the abort signal.\n */\nexport function createListener(\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n    passive: boolean,\n    once: boolean,\n    signal: Listener.AbortSignal | undefined,\n    signalListener: (() => void) | undefined,\n): Listener {\n    return {\n        callback,\n        flags:\n            (capture ? ListenerFlags.Capture : 0) |\n            (passive ? ListenerFlags.Passive : 0) |\n            (once ? ListenerFlags.Once : 0),\n        signal,\n        signalListener,\n    }\n}\n\n/**\n * Set the `removed` flag to the given listener.\n * @param listener The listener to check.\n */\nexport function setRemoved(listener: Listener): void {\n    listener.flags |= ListenerFlags.Removed\n}\n\n/**\n * Check if the given listener has the `capture` flag or not.\n * @param listener The listener to check.\n */\nexport function isCapture(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Capture) === ListenerFlags.Capture\n}\n\n/**\n * Check if the given listener has the `passive` flag or not.\n * @param listener The listener to check.\n */\nexport function isPassive(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Passive) === ListenerFlags.Passive\n}\n\n/**\n * Check if the given listener has the `once` flag or not.\n * @param listener The listener to check.\n */\nexport function isOnce(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Once) === ListenerFlags.Once\n}\n\n/**\n * Check if the given listener has the `removed` flag or not.\n * @param listener The listener to check.\n */\nexport function isRemoved(listener: Listener): boolean {\n    return (listener.flags & ListenerFlags.Removed) === ListenerFlags.Removed\n}\n\n/**\n * Call an event listener.\n * @param listener The listener to call.\n * @param target The event target object for `thisArg`.\n * @param event The event object for the first argument.\n * @param attribute `true` if this callback is an event attribute handler.\n */\nexport function invokeCallback(\n    { callback }: Listener,\n    target: EventTarget<any, any>,\n    event: Event<any>,\n): void {\n    try {\n        if (typeof callback === \"function\") {\n            callback.call(target, event)\n        } else if (typeof callback.handleEvent === \"function\") {\n            callback.handleEvent(event)\n        }\n    } catch (thrownError) {\n        reportError(thrownError)\n    }\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * The flags of listeners.\n */\nconst enum ListenerFlags {\n    Capture = 0x01,\n    Passive = 0x02,\n    Once = 0x04,\n    Removed = 0x08,\n}\n","import { createListener, isCapture, Listener, setRemoved } from \"./listener\"\n\n/**\n * Information of an listener list.\n */\nexport interface ListenerList {\n    /**\n     * The callback function of the event attribute handler.\n     */\n    attrCallback: Listener.CallbackFunction<any, any> | undefined\n    /**\n     * The listener of the event attribute handler.\n     */\n    attrListener: Listener | undefined\n    /**\n     * `true` if the `dispatchEvent` method is traversing the current `listeners` array.\n     */\n    cow: boolean\n    /**\n     * The listeners.\n     * This is writable for copy-on-write.\n     */\n    listeners: Listener[]\n}\n\n/**\n * Find the index of given listener.\n * This returns `-1` if not found.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n */\nexport function findIndexOfListener(\n    { listeners }: ListenerList,\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n): number {\n    for (let i = 0; i < listeners.length; ++i) {\n        if (\n            listeners[i].callback === callback &&\n            isCapture(listeners[i]) === capture\n        ) {\n            return i\n        }\n    }\n    return -1\n}\n\n/**\n * Add the given listener.\n * Does copy-on-write if needed.\n * @param list The listener list.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n */\nexport function addListener(\n    list: ListenerList,\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n    passive: boolean,\n    once: boolean,\n    signal: Listener.AbortSignal | undefined,\n): Listener {\n    let signalListener: (() => void) | undefined\n    if (signal) {\n        signalListener = removeListener.bind(null, list, callback, capture)\n        signal.addEventListener(\"abort\", signalListener)\n    }\n\n    const listener = createListener(\n        callback,\n        capture,\n        passive,\n        once,\n        signal,\n        signalListener,\n    )\n\n    if (list.cow) {\n        list.cow = false\n        list.listeners = [...list.listeners, listener]\n    } else {\n        list.listeners.push(listener)\n    }\n\n    return listener\n}\n\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n * @returns `true` if it mutated the list directly.\n */\nexport function removeListener(\n    list: ListenerList,\n    callback: Listener.Callback<any, any>,\n    capture: boolean,\n): boolean {\n    const index = findIndexOfListener(list, callback, capture)\n    if (index !== -1) {\n        return removeListenerAt(list, index)\n    }\n    return false\n}\n\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param index The index of the target listener.\n * @param disableCow Disable copy-on-write if true.\n * @returns `true` if it mutated the `listeners` array directly.\n */\nexport function removeListenerAt(\n    list: ListenerList,\n    index: number,\n    disableCow = false,\n): boolean {\n    const listener = list.listeners[index]\n\n    // Set the removed flag.\n    setRemoved(listener)\n\n    // Dispose the abort signal listener if exists.\n    if (listener.signal) {\n        listener.signal.removeEventListener(\"abort\", listener.signalListener!)\n    }\n\n    // Remove it from the array.\n    if (list.cow && !disableCow) {\n        list.cow = false\n        list.listeners = list.listeners.filter((_, i) => i !== index)\n        return false\n    }\n    list.listeners.splice(index, 1)\n    return true\n}\n","import { ListenerList } from \"./listener-list\"\n\n/**\n * The map from event types to each listener list.\n */\nexport interface ListenerListMap {\n    [type: string]: ListenerList | undefined\n}\n\n/**\n * Create a new `ListenerListMap` object.\n */\nexport function createListenerListMap(): ListenerListMap {\n    return Object.create(null)\n}\n\n/**\n * Get the listener list of the given type.\n * If the listener list has not been initialized, initialize and return it.\n * @param listenerMap The listener list map.\n * @param type The event type to get.\n */\nexport function ensureListenerList(\n    listenerMap: Record<string, ListenerList | undefined>,\n    type: string,\n): ListenerList {\n    return (listenerMap[type] ??= {\n        attrCallback: undefined,\n        attrListener: undefined,\n        cow: false,\n        listeners: [],\n    })\n}\n","import { createInvalidStateError } from \"./dom-exception\"\nimport { Event, getEventInternalData } from \"./event\"\nimport { EventWrapper } from \"./event-wrapper\"\nimport { Global } from \"./global\"\nimport {\n    invokeCallback,\n    isCapture,\n    isOnce,\n    isPassive,\n    isRemoved,\n    Listener,\n} from \"./listener\"\nimport {\n    addListener,\n    findIndexOfListener,\n    removeListener,\n    removeListenerAt,\n} from \"./listener-list\"\nimport {\n    createListenerListMap,\n    ensureListenerList,\n    ListenerListMap,\n} from \"./listener-list-map\"\nimport { assertType, format } from \"./misc\"\nimport {\n    EventListenerWasDuplicated,\n    InvalidEventListener,\n    OptionWasIgnored,\n} from \"./warnings\"\n\n/**\n * An implementation of the `EventTarget` interface.\n * @see https://dom.spec.whatwg.org/#eventtarget\n */\nexport class EventTarget<\n    TEventMap extends Record<string, Event> = Record<string, Event>,\n    TMode extends \"standard\" | \"strict\" = \"standard\"\n> {\n    /**\n     * Initialize this instance.\n     */\n    constructor() {\n        internalDataMap.set(this, createListenerListMap())\n    }\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    addEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options?: EventTarget.AddOptions,\n    ): void\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    addEventListener(\n        type: string,\n        callback?: EventTarget.FallbackEventListener<this, TMode>,\n        options?: EventTarget.AddOptions,\n    ): void\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    addEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback:\n            | EventTarget.EventListener<this, TEventMap[T]>\n            | null\n            | undefined,\n        capture: boolean,\n    ): void\n\n    /**\n     * Add an event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    addEventListener(\n        type: string,\n        callback: EventTarget.FallbackEventListener<this, TMode>,\n        capture: boolean,\n    ): void\n\n    // Implementation\n    addEventListener<T extends string & keyof TEventMap>(\n        type0: T,\n        callback0?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options0?: boolean | EventTarget.AddOptions,\n    ): void {\n        const listenerMap = $(this)\n        const {\n            callback,\n            capture,\n            once,\n            passive,\n            signal,\n            type,\n        } = normalizeAddOptions(type0, callback0, options0)\n        if (callback == null || signal?.aborted) {\n            return\n        }\n        const list = ensureListenerList(listenerMap, type)\n\n        // Find existing listener.\n        const i = findIndexOfListener(list, callback, capture)\n        if (i !== -1) {\n            warnDuplicate(list.listeners[i], passive, once, signal)\n            return\n        }\n\n        // Add the new listener.\n        addListener(list, callback, capture, passive, once, signal)\n    }\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    removeEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options?: EventTarget.Options,\n    ): void\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param options Options.\n     */\n    removeEventListener(\n        type: string,\n        callback?: EventTarget.FallbackEventListener<this, TMode>,\n        options?: EventTarget.Options,\n    ): void\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    removeEventListener<T extends string & keyof TEventMap>(\n        type: T,\n        callback:\n            | EventTarget.EventListener<this, TEventMap[T]>\n            | null\n            | undefined,\n        capture: boolean,\n    ): void\n\n    /**\n     * Remove an added event listener.\n     * @param type The event type.\n     * @param callback The event listener.\n     * @param capture The capture flag.\n     * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n     */\n    removeEventListener(\n        type: string,\n        callback: EventTarget.FallbackEventListener<this, TMode>,\n        capture: boolean,\n    ): void\n\n    // Implementation\n    removeEventListener<T extends string & keyof TEventMap>(\n        type0: T,\n        callback0?: EventTarget.EventListener<this, TEventMap[T]> | null,\n        options0?: boolean | EventTarget.Options,\n    ): void {\n        const listenerMap = $(this)\n        const { callback, capture, type } = normalizeOptions(\n            type0,\n            callback0,\n            options0,\n        )\n        const list = listenerMap[type]\n\n        if (callback != null && list) {\n            removeListener(list, callback, capture)\n        }\n    }\n\n    /**\n     * Dispatch an event.\n     * @param event The `Event` object to dispatch.\n     */\n    dispatchEvent<T extends string & keyof TEventMap>(\n        event: EventTarget.EventData<TEventMap, TMode, T>,\n    ): boolean\n\n    /**\n     * Dispatch an event.\n     * @param event The `Event` object to dispatch.\n     */\n    dispatchEvent(event: EventTarget.FallbackEvent<TMode>): boolean\n\n    // Implementation\n    dispatchEvent(\n        e:\n            | EventTarget.EventData<TEventMap, TMode, string>\n            | EventTarget.FallbackEvent<TMode>,\n    ): boolean {\n        const list = $(this)[String(e.type)]\n        if (list == null) {\n            return true\n        }\n\n        const event = e instanceof Event ? e : EventWrapper.wrap(e)\n        const eventData = getEventInternalData(event, \"event\")\n        if (eventData.dispatchFlag) {\n            throw createInvalidStateError(\"This event has been in dispatching.\")\n        }\n\n        eventData.dispatchFlag = true\n        eventData.target = eventData.currentTarget = this\n\n        if (!eventData.stopPropagationFlag) {\n            const { cow, listeners } = list\n\n            // Set copy-on-write flag.\n            list.cow = true\n\n            // Call listeners.\n            for (let i = 0; i < listeners.length; ++i) {\n                const listener = listeners[i]\n\n                // Skip if removed.\n                if (isRemoved(listener)) {\n                    continue\n                }\n\n                // Remove this listener if has the `once` flag.\n                if (isOnce(listener) && removeListenerAt(list, i, !cow)) {\n                    // Because this listener was removed, the next index is the\n                    // same as the current value.\n                    i -= 1\n                }\n\n                // Call this listener with the `passive` flag.\n                eventData.inPassiveListenerFlag = isPassive(listener)\n                invokeCallback(listener, this, event)\n                eventData.inPassiveListenerFlag = false\n\n                // Stop if the `event.stopImmediatePropagation()` method was called.\n                if (eventData.stopImmediatePropagationFlag) {\n                    break\n                }\n            }\n\n            // Restore copy-on-write flag.\n            if (!cow) {\n                list.cow = false\n            }\n        }\n\n        eventData.target = null\n        eventData.currentTarget = null\n        eventData.stopImmediatePropagationFlag = false\n        eventData.stopPropagationFlag = false\n        eventData.dispatchFlag = false\n\n        return !eventData.canceledFlag\n    }\n}\n\nexport namespace EventTarget {\n    /**\n     * The event listener.\n     */\n    export type EventListener<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > = CallbackFunction<TEventTarget, TEvent> | CallbackObject<TEvent>\n\n    /**\n     * The event listener function.\n     */\n    export interface CallbackFunction<\n        TEventTarget extends EventTarget<any, any>,\n        TEvent extends Event\n    > {\n        (this: TEventTarget, event: TEvent): void\n    }\n\n    /**\n     * The event listener object.\n     * @see https://dom.spec.whatwg.org/#callbackdef-eventlistener\n     */\n    export interface CallbackObject<TEvent extends Event> {\n        handleEvent(event: TEvent): void\n    }\n\n    /**\n     * The common options for both `addEventListener` and `removeEventListener` methods.\n     * @see https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions\n     */\n    export interface Options {\n        capture?: boolean\n    }\n\n    /**\n     * The options for the `addEventListener` methods.\n     * @see https://dom.spec.whatwg.org/#dictdef-addeventlisteneroptions\n     */\n    export interface AddOptions extends Options {\n        passive?: boolean\n        once?: boolean\n        signal?: AbortSignal | null | undefined\n    }\n\n    /**\n     * The abort signal.\n     * @see https://dom.spec.whatwg.org/#abortsignal\n     */\n    export interface AbortSignal extends EventTarget<{ abort: Event }> {\n        readonly aborted: boolean\n        onabort: CallbackFunction<this, Event> | null\n    }\n\n    /**\n     * The event data to dispatch in strict mode.\n     */\n    export type EventData<\n        TEventMap extends Record<string, Event>,\n        TMode extends \"standard\" | \"strict\",\n        TEventType extends string\n    > = TMode extends \"strict\"\n        ? IsValidEventMap<TEventMap> extends true\n            ? ExplicitType<TEventType> &\n                  Omit<TEventMap[TEventType], keyof Event> &\n                  Partial<Omit<Event, \"type\">>\n            : never\n        : never\n\n    /**\n     * Define explicit `type` property if `T` is a string literal.\n     * Otherwise, never.\n     */\n    export type ExplicitType<T extends string> = string extends T\n        ? never\n        : { readonly type: T }\n\n    /**\n     * The event listener type in standard mode.\n     * Otherwise, never.\n     */\n    export type FallbackEventListener<\n        TEventTarget extends EventTarget<any, any>,\n        TMode extends \"standard\" | \"strict\"\n    > = TMode extends \"standard\"\n        ? EventListener<TEventTarget, Event> | null | undefined\n        : never\n\n    /**\n     * The event type in standard mode.\n     * Otherwise, never.\n     */\n    export type FallbackEvent<\n        TMode extends \"standard\" | \"strict\"\n    > = TMode extends \"standard\" ? Event : never\n\n    /**\n     * Check if given event map is valid.\n     * It's valid if the keys of the event map are narrower than `string`.\n     */\n    export type IsValidEventMap<T> = string extends keyof T ? false : true\n}\n\nexport { $ as getEventTargetInternalData }\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Internal data for EventTarget\n */\ntype EventTargetInternalData = ListenerListMap\n\n/**\n * Internal data.\n */\nconst internalDataMap = new WeakMap<any, EventTargetInternalData>()\n\n/**\n * Get private data.\n * @param target The event target object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $(target: any, name = \"this\"): EventTargetInternalData {\n    const retv = internalDataMap.get(target)\n    assertType(\n        retv != null,\n        \"'%s' must be an object that EventTarget constructor created, but got another one: %o\",\n        name,\n        target,\n    )\n    return retv\n}\n\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeAddOptions(\n    type: string,\n    callback: EventTarget.EventListener<any, any> | null | undefined,\n    options: boolean | EventTarget.AddOptions | undefined,\n): {\n    type: string\n    callback: EventTarget.EventListener<any, any> | undefined\n    capture: boolean\n    passive: boolean\n    once: boolean\n    signal: EventTarget.AbortSignal | undefined\n} {\n    assertCallback(callback)\n\n    if (typeof options === \"object\" && options !== null) {\n        return {\n            type: String(type),\n            callback: callback ?? undefined,\n            capture: Boolean(options.capture),\n            passive: Boolean(options.passive),\n            once: Boolean(options.once),\n            signal: options.signal ?? undefined,\n        }\n    }\n\n    return {\n        type: String(type),\n        callback: callback ?? undefined,\n        capture: Boolean(options),\n        passive: false,\n        once: false,\n        signal: undefined,\n    }\n}\n\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeOptions(\n    type: string,\n    callback: EventTarget.EventListener<any, any> | null | undefined,\n    options: boolean | EventTarget.Options | undefined,\n): {\n    type: string\n    callback: EventTarget.EventListener<any, any> | undefined\n    capture: boolean\n} {\n    assertCallback(callback)\n\n    if (typeof options === \"object\" && options !== null) {\n        return {\n            type: String(type),\n            callback: callback ?? undefined,\n            capture: Boolean(options.capture),\n        }\n    }\n\n    return {\n        type: String(type),\n        callback: callback ?? undefined,\n        capture: Boolean(options),\n    }\n}\n\n/**\n * Assert the type of 'callback' argument.\n * @param callback The callback to check.\n */\nfunction assertCallback(callback: any): void {\n    if (\n        typeof callback === \"function\" ||\n        (typeof callback === \"object\" &&\n            callback !== null &&\n            typeof callback.handleEvent === \"function\")\n    ) {\n        return\n    }\n    if (callback == null || typeof callback === \"object\") {\n        InvalidEventListener.warn(callback)\n        return\n    }\n\n    throw new TypeError(format(InvalidEventListener.message, [callback]))\n}\n\n/**\n * Print warning for duplicated.\n * @param listener The current listener that is duplicated.\n * @param passive The passive flag of the new duplicated listener.\n * @param once The once flag of the new duplicated listener.\n * @param signal The signal object of the new duplicated listener.\n */\nfunction warnDuplicate(\n    listener: Listener,\n    passive: boolean,\n    once: boolean,\n    signal: EventTarget.AbortSignal | undefined,\n): void {\n    EventListenerWasDuplicated.warn(\n        isCapture(listener) ? \"capture\" : \"bubble\",\n        listener.callback,\n    )\n\n    if (isPassive(listener) !== passive) {\n        OptionWasIgnored.warn(\"passive\")\n    }\n    if (isOnce(listener) !== once) {\n        OptionWasIgnored.warn(\"once\")\n    }\n    if (listener.signal !== signal) {\n        OptionWasIgnored.warn(\"signal\")\n    }\n}\n\n// Set enumerable\nconst keys = Object.getOwnPropertyNames(EventTarget.prototype)\nfor (let i = 0; i < keys.length; ++i) {\n    if (keys[i] === \"constructor\") {\n        continue\n    }\n    Object.defineProperty(EventTarget.prototype, keys[i], { enumerable: true })\n}\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof Global !== \"undefined\" &&\n    typeof Global.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, Global.EventTarget.prototype)\n}\n","import { Event } from \"./event\"\nimport { EventTarget, getEventTargetInternalData } from \"./event-target\"\nimport { addListener, ListenerList, removeListener } from \"./listener-list\"\nimport { ensureListenerList } from \"./listener-list-map\"\nimport { InvalidAttributeHandler } from \"./warnings\"\n\n/**\n * Get the current value of a given event attribute.\n * @param target The `EventTarget` object to get.\n * @param type The event type.\n */\nexport function getEventAttributeValue<\n    TEventTarget extends EventTarget<any, any>,\n    TEvent extends Event\n>(\n    target: TEventTarget,\n    type: string,\n): EventTarget.CallbackFunction<TEventTarget, TEvent> | null {\n    const listMap = getEventTargetInternalData(target, \"target\")\n    return listMap[type]?.attrCallback ?? null\n}\n\n/**\n * Set an event listener to a given event attribute.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nexport function setEventAttributeValue(\n    target: EventTarget<any, any>,\n    type: string,\n    callback: EventTarget.CallbackFunction<any, any> | null,\n): void {\n    if (callback != null && typeof callback !== \"function\") {\n        InvalidAttributeHandler.warn(callback)\n    }\n\n    if (\n        typeof callback === \"function\" ||\n        (typeof callback === \"object\" && callback !== null)\n    ) {\n        upsertEventAttributeListener(target, type, callback)\n    } else {\n        removeEventAttributeListener(target, type)\n    }\n}\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Update or insert the given event attribute handler.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction upsertEventAttributeListener<\n    TEventTarget extends EventTarget<any, any>\n>(\n    target: TEventTarget,\n    type: string,\n    callback: EventTarget.CallbackFunction<TEventTarget, any>,\n): void {\n    const list = ensureListenerList(\n        getEventTargetInternalData(target, \"target\"),\n        String(type),\n    )\n    list.attrCallback = callback\n\n    if (list.attrListener == null) {\n        list.attrListener = addListener(\n            list,\n            defineEventAttributeCallback(list),\n            false,\n            false,\n            false,\n            undefined,\n        )\n    }\n}\n\n/**\n * Remove the given event attribute handler.\n * @param target The `EventTarget` object to remove.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction removeEventAttributeListener(\n    target: EventTarget<any, any>,\n    type: string,\n): void {\n    const listMap = getEventTargetInternalData(target, \"target\")\n    const list = listMap[String(type)]\n    if (list && list.attrListener) {\n        removeListener(list, list.attrListener.callback, false)\n        list.attrCallback = list.attrListener = undefined\n    }\n}\n\n/**\n * Define the callback function for the given listener list object.\n * It calls `attrCallback` property if the property value is a function.\n * @param list The `ListenerList` object.\n */\nfunction defineEventAttributeCallback(\n    list: ListenerList,\n): EventTarget.CallbackFunction<any, any> {\n    return function (event) {\n        const callback = list.attrCallback\n        if (typeof callback === \"function\") {\n            callback.call(this, event)\n        }\n    }\n}\n","import { Event } from \"./event\"\nimport {\n    getEventAttributeValue,\n    setEventAttributeValue,\n} from \"./event-attribute-handler\"\nimport { EventTarget } from \"./event-target\"\n\n/**\n * Define an `EventTarget` class that has event attibutes.\n * @param types The types to define event attributes.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nexport function defineCustomEventTarget<\n    TEventMap extends Record<string, Event>,\n    TMode extends \"standard\" | \"strict\" = \"standard\"\n>(\n    ...types: (string & keyof TEventMap)[]\n): defineCustomEventTarget.CustomEventTargetConstructor<TEventMap, TMode> {\n    class CustomEventTarget extends EventTarget {}\n    for (let i = 0; i < types.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, types[i])\n    }\n\n    return CustomEventTarget as any\n}\n\nexport namespace defineCustomEventTarget {\n    /**\n     * The interface of CustomEventTarget constructor.\n     */\n    export type CustomEventTargetConstructor<\n        TEventMap extends Record<string, Event>,\n        TMode extends \"standard\" | \"strict\"\n    > = {\n        /**\n         * Create a new instance.\n         */\n        new (): CustomEventTarget<TEventMap, TMode>\n        /**\n         * prototype object.\n         */\n        prototype: CustomEventTarget<TEventMap, TMode>\n    }\n\n    /**\n     * The interface of CustomEventTarget.\n     */\n    export type CustomEventTarget<\n        TEventMap extends Record<string, Event>,\n        TMode extends \"standard\" | \"strict\"\n    > = EventTarget<TEventMap, TMode> &\n        defineEventAttribute.EventAttributes<any, TEventMap>\n}\n\n/**\n * Define an event attribute.\n * @param target The `EventTarget` object to define an event attribute.\n * @param type The event type to define.\n * @param _eventClass Unused, but to infer `Event` class type.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nexport function defineEventAttribute<\n    TEventTarget extends EventTarget,\n    TEventType extends string,\n    TEventConstrucor extends typeof Event\n>(\n    target: TEventTarget,\n    type: TEventType,\n    _eventClass?: TEventConstrucor,\n): asserts target is TEventTarget &\n    defineEventAttribute.EventAttributes<\n        TEventTarget,\n        Record<TEventType, InstanceType<TEventConstrucor>>\n    > {\n    Object.defineProperty(target, `on${type}`, {\n        get() {\n            return getEventAttributeValue(this, type)\n        },\n        set(value) {\n            setEventAttributeValue(this, type, value)\n        },\n        configurable: true,\n        enumerable: true,\n    })\n}\n\nexport namespace defineEventAttribute {\n    /**\n     * Definition of event attributes.\n     */\n    export type EventAttributes<\n        TEventTarget extends EventTarget<any, any>,\n        TEventMap extends Record<string, Event>\n    > = {\n        [P in string &\n            keyof TEventMap as `on${P}`]: EventTarget.CallbackFunction<\n            TEventTarget,\n            TEventMap[P]\n        > | null\n    }\n}\n","export default function isPromise(value: unknown): value is PromiseLike<unknown> {\n  return !!(\n    (typeof value === 'function' || typeof value === 'object') &&\n    value &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n","import isPromise from './private/isPromise.ts';\n\nexport function onErrorResumeNext<T extends () => Promise<U>, U = unknown>(\n  fn: T,\n  context?: undefined\n): Promise<U | undefined>;\n\nexport function onErrorResumeNext<T extends (this: V) => Promise<U>, U = unknown, V = undefined>(\n  fn: T,\n  context: V\n): Promise<U | undefined>;\n\nexport function onErrorResumeNext<T extends (this: V) => Promise<U>, U = unknown, V = undefined>(\n  fn: T,\n  context: V\n): Promise<U | undefined> {\n  return new Promise<U | undefined>(resolve => {\n    try {\n      const result = fn.call(context);\n\n      if (isPromise(result)) {\n        result.then(resolve, () => resolve(undefined));\n      } else {\n        resolve(result);\n      }\n    } catch {\n      resolve(undefined);\n    }\n  });\n}\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","/* eslint no-await-in-loop: \"off\" */\n\nexport default class {\n  constructor(audioContext) {\n    this.audioContext = audioContext;\n  }\n\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('pause'));\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('resume'));\n  }\n\n  async start(queue) {\n    let utterance;\n\n    while ((utterance = queue.shift())) {\n      this.playingUtterance = utterance;\n\n      await utterance.play(this.audioContext);\n\n      this.playingUtterance = null;\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext.state === 'suspended') {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.resume();\n    }\n  }\n}\n","/* eslint no-await-in-loop: \"off\" */\n\nimport memoize from 'memoize-one';\n\nimport AudioContextConsumer from './AudioContextConsumer';\n\nexport default class {\n  constructor({ audioContext, ponyfill }) {\n    this.consumer = null;\n    this.paused = false;\n    this.queue = [];\n\n    this.getAudioContext = memoize(() => audioContext || new ponyfill.AudioContext());\n  }\n\n  pause() {\n    this.paused = true;\n    this.consumer && this.consumer.pause();\n  }\n\n  push(utterance) {\n    this.queue.push(utterance);\n    this.startConsumer();\n  }\n\n  resume() {\n    this.paused = false;\n\n    if (this.consumer) {\n      this.consumer.resume();\n    } else {\n      this.startConsumer();\n    }\n  }\n\n  get speaking() {\n    return !!this.consumer;\n  }\n\n  async startConsumer() {\n    while (!this.paused && this.queue.length && !this.consumer) {\n      this.consumer = new AudioContextConsumer(this.getAudioContext());\n\n      await this.consumer.start(this.queue);\n\n      this.consumer = null;\n    }\n  }\n\n  stop() {\n    this.queue.splice(0);\n    this.consumer && this.consumer.stop();\n  }\n}\n","import { Event } from 'event-target-shim';\n\nexport default class SpeechSynthesisEvent extends Event {\n  constructor(type) {\n    super(type);\n  }\n}\n","type Resolvers<T> = {\n  reject: (error: unknown) => void;\n  resolve: (value: T) => void;\n  promise: Promise<T>;\n};\n\nfunction withResolvers<T>(): Resolvers<T> {\n  const resolvers: Partial<Resolvers<T>> = {};\n\n  resolvers.promise = new Promise((resolve, reject) => {\n    resolvers.reject = reject;\n    resolvers.resolve = resolve;\n  });\n\n  return resolvers as Resolvers<T>;\n}\n\nexport class EventAsPromise<T> {\n  constructor() {\n    this.#eventListener = (event: T) => {\n      const deferred = this.#orderedResolvers.shift();\n\n      deferred && deferred.resolve(event);\n\n      if (this.#upcomingResolvers) {\n        this.#upcomingResolvers.resolve(event);\n        this.#upcomingResolvers = undefined;\n      }\n    };\n  }\n\n  #eventListener: (event: T) => void;\n  #orderedResolvers: Resolvers<T>[] = [];\n  #upcomingResolvers: Resolvers<T> | undefined = undefined;\n\n  get eventListener() {\n    return this.#eventListener;\n  }\n\n  [Symbol.iterator]() {\n    return {\n      next: () => ({\n        done: false,\n        value: this.upcoming()\n      })\n    };\n  }\n\n  one() {\n    const deferred = withResolvers<T>();\n\n    this.#orderedResolvers.push(deferred);\n\n    return deferred.promise;\n  }\n\n  upcoming() {\n    if (!this.#upcomingResolvers) {\n      this.#upcomingResolvers = withResolvers<T>();\n    }\n\n    return this.#upcomingResolvers.promise;\n  }\n}\n","const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\n\nexport const encode = (arraybuffer: ArrayBuffer): string => {\n    let bytes = new Uint8Array(arraybuffer),\n        i,\n        len = bytes.length,\n        base64 = '';\n\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    } else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n};\n\nexport const decode = (base64: string): ArrayBuffer => {\n    let bufferLength = base64.length * 0.75,\n        len = base64.length,\n        i,\n        p = 0,\n        encoded1,\n        encoded2,\n        encoded3,\n        encoded4;\n\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    const arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n};\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 100] }] */\n\n// Cognitive Services does not support unsigned percentage\n// It must be converted into +/- first.\nfunction relativePercentage(value) {\n  let relative = Math.round((value - 1) * 100);\n\n  if (relative >= 0) {\n    relative = '+' + relative;\n  }\n\n  return relative + '%';\n}\n\nexport default function buildSSML({ lang, pitch = 1, rate = 1, text, voice, volume }) {\n  return `<speak version=\"1.0\" xml:lang=\"${lang}\">\n  <voice xml:lang=\"${lang}\" name=\"${voice}\">\n    <prosody pitch=\"${relativePercentage(pitch)}\" rate=\"${relativePercentage(rate)}\" volume=\"${relativePercentage(\n      volume\n    )}\">\n      ${text}\n    </prosody>\n  </voice>\n</speak>`;\n}\n","const SPEAK_TAG_PATTERN = /^\\s*<speak(\\s|\\/?>)/u;\nconst XML_PROLOG_PATTERN = /^\\s*<\\?xml\\s/u;\n\nexport default function isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n","import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function ({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${encodeURI(region)}.voice.speech.microsoft.com`\n      : `${encodeURI(region)}.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${encodeURI(deploymentId)}` : '';\n  const url = `https://${hostname}/cognitiveservices/v1${search}`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${authorizationToken}`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${res.status}`);\n  }\n\n  return res.arrayBuffer();\n}\n","export default function subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n\n  return () => target.removeEventListener(name, handler);\n}\n","/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n\nimport { EventAsPromise } from 'event-as-promise';\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim';\n\nimport fetchSpeechData from './fetchSpeechData';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport subscribeEvent from './subscribeEvent';\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise((resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(\n      audioContext,\n      'statechange',\n      ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener()\n    );\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nclass SpeechSynthesisUtterance extends EventTarget {\n  constructor(text) {\n    super();\n\n    this._lang = null;\n    this._pitch = 1;\n    this._rate = 1;\n    this._voice = null;\n    this._volume = 1;\n\n    this.text = text;\n\n    this.onboundary = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onmark = null;\n    this.onpause = null;\n    this.onresume = null;\n    this.onstart = null;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  set lang(value) {\n    this._lang = value;\n  }\n\n  get onboundary() {\n    return getEventAttributeValue(this, 'boundary');\n  }\n\n  set onboundary(value) {\n    setEventAttributeValue(this, 'boundary', value);\n  }\n\n  get onend() {\n    return getEventAttributeValue(this, 'end');\n  }\n\n  set onend(value) {\n    setEventAttributeValue(this, 'end', value);\n  }\n\n  get onerror() {\n    return getEventAttributeValue(this, 'error');\n  }\n\n  set onerror(value) {\n    setEventAttributeValue(this, 'error', value);\n  }\n\n  get onmark() {\n    return getEventAttributeValue(this, 'mark');\n  }\n\n  set onmark(value) {\n    setEventAttributeValue(this, 'mark', value);\n  }\n\n  get onpause() {\n    return getEventAttributeValue(this, 'pause');\n  }\n\n  set onpause(value) {\n    setEventAttributeValue(this, 'pause', value);\n  }\n\n  get onresume() {\n    return getEventAttributeValue(this, 'resume');\n  }\n\n  set onresume(value) {\n    setEventAttributeValue(this, 'resume', value);\n  }\n\n  get onstart() {\n    return getEventAttributeValue(this, 'start');\n  }\n\n  set onstart(value) {\n    setEventAttributeValue(this, 'start', value);\n  }\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(value) {\n    this._pitch = value;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(value) {\n    this._rate = value;\n  }\n\n  get voice() {\n    return this._voice;\n  }\n\n  set voice(value) {\n    this._voice = value;\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(value) {\n    this._volume = value;\n  }\n\n  preload({ deploymentId, fetchCredentials, outputFormat }) {\n    this.arrayBufferPromise = fetchSpeechData({\n      fetchCredentials,\n      deploymentId,\n      lang: this.lang || window.navigator.language,\n      outputFormat,\n      pitch: this.pitch,\n      rate: this.rate,\n      text: this.text,\n      voice: this.voice && this.voice.voiceURI,\n      volume: this.volume\n    });\n\n    // We need to call \"catch\" to make sure the Promise is running.\n    // We will ignore the reject result and handled in play() later.\n    this.arrayBufferPromise.catch();\n  }\n\n  async play(audioContext) {\n    try {\n      // We should emit \"start\" event even if preload() failed.\n      this.dispatchEvent(new SpeechSynthesisEvent('start'));\n\n      // HACK: iOS requires bufferSourceNode to be constructed before decoding data.\n      const source = audioContext.createBufferSource();\n      const audioBuffer = await asyncDecodeAudioData(audioContext, await this.arrayBufferPromise);\n\n      this._playingSource = source;\n\n      await playDecoded(audioContext, audioBuffer, source);\n\n      this._playingSource = null;\n      this.dispatchEvent(new SpeechSynthesisEvent('end'));\n    } catch (error) {\n      // \"message\" is not in spec but to provide a friendly message.\n      this.dispatchEvent(new ErrorEvent('error', { error: 'synthesis-failed', message: error.stack }));\n    }\n  }\n\n  stop() {\n    this._playingSource && this._playingSource.stop();\n  }\n}\n\nexport default SpeechSynthesisUtterance;\n","export default class {\n  constructor({ gender, lang, voiceURI }) {\n    this._default = false;\n    this._gender = gender;\n    this._lang = lang;\n    this._localService = false;\n    this._name = voiceURI;\n    this._voiceURI = voiceURI;\n  }\n\n  get default() {\n    return this._default;\n  }\n\n  get gender() {\n    return this._gender;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  get localService() {\n    return this._localService;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get voiceURI() {\n    return this._voiceURI;\n  }\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${region}.customvoice.api.speech.microsoft.com`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${encodeURI(hostname)}/api/texttospeech/v2.0/endpoints/${encodeURIComponent(deploymentId)}`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function ({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nexport default async function fetchVoices({ authorizationToken, region, speechSynthesisHostname, subscriptionKey }) {\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const hostname = speechSynthesisHostname || `${encodeURI(region)}.tts.speech.microsoft.com`;\n  const res = await fetch(`https://${hostname}/cognitiveservices/voices/list`, {\n    headers: {\n      'content-type': 'application/json',\n      ...(authorizationToken\n        ? {\n            authorization: `Bearer ${authorizationToken}`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch voices');\n  }\n\n  const voices = await res.json();\n\n  return voices\n    .map(({ Gender: gender, Locale: lang, Name: voiceURI }) => new SpeechSynthesisVoice({ gender, lang, voiceURI }))\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint class-methods-use-this: 0 */\n\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim';\nimport { onErrorResumeNext } from 'on-error-resume-next/async';\nimport createDeferred from 'p-defer';\n\nimport patchOptions from '../patchOptions';\nimport AudioContextQueue from './AudioContextQueue';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport SpeechSynthesisUtterance from './SpeechSynthesisUtterance';\nimport fetchCustomVoices from './fetchCustomVoices';\nimport fetchVoices from './fetchVoices';\n\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#audio-outputs\nconst DEFAULT_OUTPUT_FORMAT = 'audio-24khz-160kbitrate-mono-mp3';\nconst EMPTY_ARRAY = [];\n\nexport default options => {\n  const {\n    audioContext,\n    fetchCredentials,\n    ponyfill = {\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    },\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat = DEFAULT_OUTPUT_FORMAT\n  } = patchOptions(options);\n\n  if (!audioContext && !ponyfill.AudioContext) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support Web Audio and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  class SpeechSynthesis extends EventTarget {\n    constructor() {\n      super();\n\n      this.queue = new AudioContextQueue({ audioContext, ponyfill });\n\n      this.updateVoices();\n    }\n\n    cancel() {\n      this.queue.stop();\n    }\n\n    getVoices() {\n      return EMPTY_ARRAY;\n    }\n\n    get onvoiceschanged() {\n      return getEventAttributeValue(this, 'voiceschanged');\n    }\n\n    set onvoiceschanged(value) {\n      setEventAttributeValue(this, 'voiceschanged', value);\n    }\n\n    pause() {\n      this.queue.pause();\n    }\n\n    resume() {\n      this.queue.resume();\n    }\n\n    speak(utterance) {\n      if (!(utterance instanceof SpeechSynthesisUtterance)) {\n        throw new Error('invalid utterance');\n      }\n\n      const { reject, resolve, promise } = createDeferred();\n      const handleError = ({ error: errorCode, message }) => {\n        const error = new Error(errorCode);\n\n        error.stack = message;\n\n        reject(error);\n      };\n\n      utterance.addEventListener('end', resolve);\n      utterance.addEventListener('error', handleError);\n\n      utterance.preload({\n        deploymentId: speechSynthesisDeploymentId,\n        fetchCredentials,\n        outputFormat: speechSynthesisOutputFormat\n      });\n\n      this.queue.push(utterance);\n\n      return promise.finally(() => {\n        utterance.removeEventListener('end', resolve);\n        utterance.removeEventListener('error', handleError);\n      });\n    }\n\n    get speaking() {\n      return this.queue.speaking;\n    }\n\n    async updateVoices() {\n      const { customVoiceHostname, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n      if (speechSynthesisDeploymentId) {\n        if (subscriptionKey) {\n          console.warn(\n            'web-speech-cognitive-services: Listing of custom voice models are only available when using subscription key.'\n          );\n\n          await onErrorResumeNext(async () => {\n            const voices = await fetchCustomVoices({\n              customVoiceHostname,\n              deploymentId: speechSynthesisDeploymentId,\n              region,\n              speechSynthesisHostname,\n              subscriptionKey\n            });\n\n            this.getVoices = () => voices;\n          });\n        }\n      } else {\n        // If fetch voice list failed, we will not emit \"voiceschanged\" event.\n        // In the spec, there is no \"error\" event.\n\n        await onErrorResumeNext(async () => {\n          const voices = await fetchVoices(await fetchCredentials());\n\n          this.getVoices = () => voices;\n        });\n      }\n\n      this.dispatchEvent(new SpeechSynthesisEvent('voiceschanged'));\n    }\n  }\n\n  return {\n    speechSynthesis: new SpeechSynthesis(),\n    SpeechSynthesisEvent,\n    SpeechSynthesisUtterance\n  };\n};\n","import createSpeechSynthesisPonyfill from './TextToSpeech/createSpeechSynthesisPonyfill';\n\nexport default createSpeechSynthesisPonyfill;\n","/* global process */\n\nimport {\n  createSpeechRecognitionPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer,\n  type SpeechGrammarList,\n  type SpeechRecognitionAlternative,\n  type SpeechRecognitionErrorEvent,\n  type SpeechRecognitionEvent,\n  type SpeechRecognitionEventListenerMap,\n  type SpeechRecognitionResult,\n  type SpeechRecognitionResultList\n} from './SpeechServices/SpeechToText';\nimport createSpeechSynthesisPonyfill from './SpeechServices/TextToSpeech';\nimport fetchAuthorizationToken from './SpeechServices/fetchAuthorizationToken';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function createSpeechServicesPonyfill(options: any = {}): any {\n  return {\n    ...createSpeechRecognitionPonyfill(options),\n    ...createSpeechSynthesisPonyfill(options)\n  };\n}\n\nexport {\n  createSpeechRecognitionPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer,\n  createSpeechSynthesisPonyfill,\n  fetchAuthorizationToken,\n  type SpeechGrammarList,\n  type SpeechRecognitionAlternative,\n  type SpeechRecognitionErrorEvent,\n  type SpeechRecognitionEvent,\n  type SpeechRecognitionEventListenerMap,\n  type SpeechRecognitionResult,\n  type SpeechRecognitionResultList\n};\n\nconst meta = document.createElement('meta');\n\nmeta.setAttribute('name', 'web-speech-cognitive-services');\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nmeta.setAttribute('content', `version=${process.env.npm_package_version}`);\n\ndocument.head.appendChild(meta);\n","import { createSpeechRecognitionPonyfillFromRecognizer, createSpeechServicesPonyfill } from './index';\n\nglobalThis.WebSpeechCognitiveServices = {\n  create: createSpeechServicesPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer\n};\n"],"mappings":"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ACAA,EACA,EAAK,EACb,IAAK,kCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,mCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,MACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,kCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,kCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,kCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,MACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,mCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,MACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,gCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,UACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EAEb,IAAK,2BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,IACA,KACA,EACA,GACAa,EACA,0BACA,EAAI,EACZ,IAAK,4BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACA,2BACA,EAAI,EACZ,IAAK,4BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,MACf,EACA,IACA,IACA,EACA,EACAa,EACA,2BACA,EAAI,EACZ,IAAK,2BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACA,2BACA,EAAK,EACb,IAAK,2BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACA,2BACA,EAAK,EACb,IAAK,0BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,IACA,KACA,EACA,GACAa,EACA,0BACA,EAAK,EACb,IAAK,4BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,SACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,4BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,SACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,2BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACA,2BACA,EAAK,EACb,IAAK,4BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACAa,EACA,2BACA,EAAI,EACZ,IAAK,kCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,MACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,mCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,MACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,4BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,SACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,6BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,UACf,EACA,KACA,IACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,6BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,UACf,EACA,KACA,IACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,oCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,UACf,EACA,KACA,IACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,qCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,KACf,EACA,KACA,IACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,qCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,KACf,EACA,KACA,IACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,qCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,KACf,EACA,KACA,IACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,8BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,KACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,8BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,KACf,EACA,KACA,IACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,gCACD,OAAO,IAAIX,EACPF,EAAA,eAAe,UACf,EACA,KACA,KACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,0BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,KACf,EACA,IACA,IACA,EACA,EACAa,EACAA,EACA,EAAK,EACb,IAAK,2BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,KACf,EACA,IACA,IACA,EACA,EACAa,EACA,0BACA,EAAI,EACZ,IAAK,6BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,MACA,MACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,8BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,MACA,MACA,EACA,GACAa,EACA,6BACA,EAAI,EACZ,IAAK,6BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,MACA,MACA,EACA,GACAa,EACAA,EACA,EAAK,EACb,IAAK,8BACD,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,MACA,MACA,EACA,GACAa,EACA,6BACA,EAAI,EACZ,IAAK,4BACL,QACI,OAAO,IAAIX,EACPF,EAAA,eAAe,IACf,EACA,KACA,KACA,EACA,GACA,4BACA,2BACA,EAAI,EAEpB,CAEO,OAAO,wBAAsB,CAChC,OAAOE,EAAsB,sCACxB,OAAO,OAAW,IAAe,kCAAoC,2BAA2B,CACzG,CAgBA,IAAW,WAAS,CAChB,OAAO,KAAK,YAChB,CAQA,IAAW,QAAM,CACb,GAAI,KAAK,UACL,OAAO,KAAK,UAGpB,CASO,aAAaY,EAAmB,CACnC,GAAI,KAAK,aAAc,CACnB,IAAMC,EAAO,IAAI,SAAS,KAAK,UAAU,EACzCA,EAAK,UAAU,EAAGD,EAAc,KAAK,WAAW,WAAa,EAAG,EAAI,EACpEC,EAAK,UAAU,GAAID,EAAa,EAAI,EAE5C,C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","names":["require_rng","__commonJSMin","exports","rng","getRandomValues","rnds8","require_regex","__commonJSMin","exports","_default","require_validate","__commonJSMin","exports","_regex","_interopRequireDefault","obj","validate","uuid","_default","require_stringify","__commonJSMin","exports","unsafeStringify","_validate","_interopRequireDefault","obj","byteToHex","arr","offset","stringify","uuid","_default","require_v1","__commonJSMin","exports","_rng","_interopRequireDefault","_stringify","obj","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","node","clockseq","seedBytes","msecs","nsecs","dt","tl","tmh","n","_default","require_parse","__commonJSMin","exports","_validate","_interopRequireDefault","obj","parse","uuid","v","arr","_default","require_v35","__commonJSMin","exports","v35","_stringify","_parse","_interopRequireDefault","obj","stringToBytes","str","bytes","i","DNS","URL","name","version","hashfunc","generateUUID","value","namespace","buf","offset","_namespace","require_md5","__commonJSMin","exports","md5","bytes","msg","i","md5ToHexEncodedArray","wordsToMd5","bytesToWords","input","output","length32","hexTab","x","hex","getOutputLength","inputLength8","len","a","b","c","d","olda","oldb","oldc","oldd","md5ff","md5gg","md5hh","md5ii","safeAdd","length8","y","lsw","bitRotateLeft","num","cnt","md5cmn","q","s","t","_default","require_v3","__commonJSMin","exports","_v","_interopRequireDefault","_md","obj","v3","_default","require_native","__commonJSMin","exports","randomUUID","_default","require_v4","__commonJSMin","exports","_native","_interopRequireDefault","_rng","_stringify","obj","v4","options","buf","offset","rnds","i","_default","require_sha1","__commonJSMin","exports","f","s","x","y","z","ROTL","n","sha1","bytes","K","H","msg","i","l","N","M","arr","j","W","t","a","b","c","d","e","T","_default","require_v5","__commonJSMin","exports","_v","_interopRequireDefault","_sha","obj","v5","_default","require_nil","__commonJSMin","exports","_default","require_version","__commonJSMin","exports","_validate","_interopRequireDefault","obj","version","uuid","_default","require_commonjs_browser","__commonJSMin","exports","_nil","_parse","_stringify","_v","_v2","_v3","_v4","_validate","_version","_interopRequireDefault","obj","uuid_1","createGuid","exports","createNoDashGuid","Guid_js_1","EventType","exports","PlatformEvent","eventName","eventType","PlatformEvent_js_1","AudioSourceEvent","eventName","audioSourceId","eventType","exports","AudioSourceInitializingEvent","AudioSourceReadyEvent","AudioSourceOffEvent","AudioSourceErrorEvent","error","AudioStreamNodeEvent","audioNodeId","AudioStreamNodeAttachingEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeDetachedEvent","AudioStreamNodeErrorEvent","PlatformEvent_js_1","ServiceEvent","eventName","jsonstring","eventType","exports","ConnectionEvent","connectionId","ConnectionStartEvent","uri","headers","ConnectionEstablishedEvent","ConnectionClosedEvent","statusCode","reason","ConnectionErrorEvent","message","type","ConnectionEstablishErrorEvent","statuscode","ConnectionMessageReceivedEvent","networkReceivedTimeISO","ConnectionMessageSentEvent","networkSentTimeISO","ArgumentNullError","argumentName","exports","InvalidOperationError","error","ObjectDisposedError","objectName","Error_js_1","Guid_js_1","MessageType","exports","ConnectionMessage","messageType","body","headers","id","ConnectionOpenResponse","statusCode","reason","exports","DeferralMap","id","deferral","result","error","exports","PlatformEvent_js_1","DialogEvent","eventName","eventType","exports","SendingAgentContextMessageEvent","agentConfig","Error_js_1","Guid_js_1","EventSource","metadata","event","paramName","eventId","onEventCallback","id","listener","e","exports","Error_js_1","EventSource_js_1","Events","_Events","eventSource","exports","ConnectionState","exports","require_IErrorMessages","__commonJSMin","exports","Error_js_1","List","_List","list","item","itemIndex","index","count","removedElements","addedCallback","subscriptionId","removedCallback","disposedCallback","seperator","cloneCopy","val","callback","i","selectList","filteredList","compareFn","orderedArray","a","b","array","reason","subscriptions","exports","PromiseState","exports","PromiseResult","promiseResultEventSource","result","error","PromiseResultEventSource","onSetResult","onSetError","Deferred","resolve","reject","Sink","i","errorHandler","successCallback","errorCallback","e","marshalPromiseToCallbacks","promise","cb","err","val","typedError","Error_js_1","List_js_1","Promise_js_1","SubscriberType","Queue","list","item","resolve","promise","val","deferredSubscriber","pendingItemProcessor","reason","subs","detachable","promiseArray","wrapper","lists","subscriber","dequeuedItem","exports","ConnectionMessage_js_1","Error_js_1","Guid_js_1","RawWebsocketMessage","messageType","payload","id","exports","RiffPcmEncoder","actualSampleRate","desiredSampleRate","actualAudioFrame","audioFrame","audioLength","buffer","view","offset","str","i","input","srcFrame","srcRate","dstRate","ratio","dstLength","dstFrame","srcOffset","dstOffset","nextSrcOffset","accum","count","exports","Error_js_1","Guid_js_1","Queue_js_1","Stream","streamId","streamChunk","exports","TranslationStatus","exports","Exports_js_1","ChunkedArrayBufferStream","targetChunkSize","streamId","chunk","bytesCopiedFromBuffer","bytesToCopy","targetView","sourceView","exports","Timeout","_Timeout","scheduledTimeoutFunctions","unhandledRequests","workerUrl","worker","data","timerId","idOrFunc","unhandledTimerId","id","message","func","delay","exports","PlatformEvent_js_1","OCSPEvent","eventName","eventType","signature","exports","OCSPMemoryCacheHitEvent","OCSPCacheMissEvent","OCSPDiskCacheHitEvent","OCSPCacheUpdateNeededEvent","OCSPMemoryCacheStoreEvent","OCSPDiskCacheStoreEvent","OCSPCacheUpdateCompleteEvent","OCSPStapleReceivedEvent","OCSPWSUpgradeStartedEvent","serialNumber","OCSPCacheEntryExpiredEvent","expireTime","OCSPCacheEntryNeedsRefreshEvent","startTime","OCSPCacheHitEvent","OCSPVerificationFailedEvent","error","OCSPCacheFetchErrorEvent","OCSPResponseRetrievedEvent","OCSPCacheUpdateErrorEvent","Exports_js_1","BackgroundEvent","error","exports","__exportStar","exports","TranslationStatus_js_1","HeaderNames","exports","AuthInfo","headerName","token","exports","Exports_js_1","HeaderNames_js_1","IAuthentication_js_1","CognitiveSubscriptionKeyAuthentication","subscriptionKey","authFetchEventId","exports","Exports_js_1","IAuthentication_js_1","HeaderNames_js_1","CognitiveTokenAuthentication","_CognitiveTokenAuthentication","fetchCallback","fetchOnExpiryCallback","authFetchEventId","token","exports","Exports_js_1","exports","Contracts","_Contracts","param","name","maxLength","minLength","isDisposed","array","item","exports","fs","__importStar","LogLevel_js_1","Contracts_js_1","ConsoleLoggingListener","logLevelFilter","path","enableOutput","event","log","logFragments","e","prop","value","valueToLog","exports","AudioFormatTag","exports","AudioStreamFormat","AudioStreamFormatImpl","samplesPerSecond","bitsPerSample","channels","format","_AudioStreamFormatImpl","samplesPerSec","isWavFormat","view","sampleRate","AudioContext","offset","str","i","Exports_js_1","Exports_js_2","AudioStreamFormat_js_1","exports","MicAudioSource","_MicAudioSource","privRecorder","deviceId","audioSourceId","mediaStream","error","typedError","nav","getUserMedia","constraints","successCallback","errorCallback","next","errorMsg","reason","audioNodeId","stream","streamId","label","name","value","defaultMicrophoneName","microphoneDeviceId","deferred","devices","device","event","hasClose","Exports_js_1","Exports_js_2","AudioStreamFormat_js_1","FileAudioSource","file","filename","audioSourceId","errorMsg","audioNodeId","stream","streamId","result","header","headerResult","processHeader","view","getWord","index","formatSize","channelCount","sampleRate","bitsPerSample","pos","reader","event","h","onerror","error","format","chunk","processFile","buff","ev","fileBuffer","c","e","exports","Exports_1","PcmRecorder","stopInputOnRelease","context","mediaStream","outputStream","waveStreamEncoder","micInput","attachScriptProcessor","scriptNode","bufferSize","audioSampleRate","event","inputFrame","waveFrame","skipAudioWorklet","workletScript","blob","workletNode","ev","err","track","url","exports","net","__importStar","tls","agent_base_1","__importDefault","https_proxy_agent_1","ws_1","HeaderNames_js_1","Exports_js_1","WebsocketMessageAdapter","_WebsocketMessageAdapter","uri","connectionId","messageFormatter","proxyInfo","headers","enableCompression","options","protocol","reason","error","networkReceivedTime","deferred","rawMessage","connectionMessage","message","messageSendStatusDeferral","messageSendDeferral","sendItem","e","code","closeReason","pendingSendItem","sendError","event","agent","httpProxyOptions","request","socketPromise","baseAgent","resolve","reject","socket","exports","Exports_js_1","WebsocketMessageAdapter_js_1","WebsocketConnection","uri","queryParameters","headers","messageFormatter","proxyInfo","enableCompression","connectionId","queryParams","i","paramName","key","val","headerName","message","exports","ReplayableAudioNode","audioSource","bytesPerSecond","offsetToSeek","bytesToSeek","i","retVal","result","BufferEntry","offset","value","startOffset","endOffset","exports","chunk","serial","byteOffset","fs","__importStar","Contracts_js_1","AudioFileWriter","filename","format","headerOffset","buffer","exports","Exports_js_1","Exports_js_2","Guid_js_1","Exports_js_3","AudioStreamFormat_js_1","AudioInputStream","format","PushAudioInputStream","callback","PullAudioInputStream","exports","PushAudioInputStreamImpl","dataBuffer","audioNodeId","stream","event","arrayBuffer","buf","view","i","PullAudioInputStreamImpl","totalBytes","transmitBuff","readBuff","pulledBytes","SpeechSynthesisOutputFormat","exports","SpeechSynthesisOutputFormat_js_1","AudioStreamFormat_js_1","AudioOutputFormatImpl","_AudioOutputFormatImpl","formatTag","channels","samplesPerSec","avgBytesPerSec","blockAlign","bitsPerSample","audioFormatString","requestAudioFormatString","hasHeader","speechSynthesisOutputFormat","speechSynthesisOutputFormatString","audioLength","view","audio","tmp","exports","Exports_js_1","Contracts_js_1","AudioOutputFormat_js_1","AudioOutputStream","PullAudioOutputStream","exports","PullAudioOutputStreamImpl","format","dataBuffer","intView","totalBytes","chunk","tmpBuffer","PushAudioOutputStream","callback","PushAudioOutputStreamImpl","buffer","Exports_js_1","Contracts_js_1","Exports_js_2","AudioFileWriter_js_1","AudioInputStream_js_1","AudioOutputStream_js_1","AudioConfig","_AudioConfig","pcmRecorder","AudioConfigImpl","deviceId","file","name","audioStream","AudioOutputConfigImpl","player","filename","exports","source","cb","err","error","audioNodeId","value","def","destination","format","buffer","CancellationReason","exports","PullAudioInputStreamCallback","exports","PushAudioOutputStreamCallback","exports","Contracts_js_1","KeywordRecognitionModel","fileName","file","exports","SessionEventArgs","sessionId","exports","Exports_js_1","RecognitionEventArgs","offset","sessionId","exports","OutputFormat","exports","Exports_js_1","IntentRecognitionEventArgs","result","offset","sessionId","exports","RecognitionResult","resultId","reason","text","duration","offset","language","languageDetectionConfidence","errorDetails","json","properties","exports","Exports_js_1","SpeechRecognitionResult","resultId","reason","text","duration","offset","language","languageDetectionConfidence","speakerId","errorDetails","json","properties","exports","Exports_js_1","IntentRecognitionResult","intentId","resultId","reason","text","duration","offset","language","languageDetectionConfidence","errorDetails","json","properties","exports","Contracts_js_1","LanguageUnderstandingModel","uri","langModelImp","LanguageUnderstandingModelImpl","firstDot","lastSegment","appId","subscriptionKey","region","exports","Exports_js_1","SpeechRecognitionEventArgs","result","offset","sessionId","exports","ConversationTranscriptionEventArgs","MeetingTranscriptionEventArgs","Exports_js_1","CancellationEventArgsBase","reason","errorDetails","errorCode","offset","sessionId","exports","CancellationEventArgsBase_js_1","SpeechRecognitionCanceledEventArgs","exports","Exports_js_1","TranslationRecognitionEventArgs","result","offset","sessionId","exports","Exports_js_1","TranslationSynthesisEventArgs","result","sessionId","exports","Exports_js_1","TranslationRecognitionResult","_TranslationRecognitionResult","translations","resultId","reason","text","duration","offset","language","languageDetectionConfidence","errorDetails","json","properties","result","exports","TranslationSynthesisResult","reason","audio","exports","ResultReason","exports","Exports_js_1","Contracts_js_1","Exports_js_2","SpeechConfig","subscriptionKey","region","speechImpl","SpeechConfigImpl","endpoint","hostName","authorizationToken","exports","_SpeechConfigImpl","value","name","def","proxyHostName","proxyPort","proxyUserName","proxyPassword","currentProperties","profanity","ret","language","voice","format","Exports_js_1","Contracts_js_1","Exports_js_2","SpeechTranslationConfig","subscriptionKey","region","ret","SpeechTranslationConfigImpl","authorizationToken","hostName","speechImpl","endpoint","exports","value","languages","proxyHostName","proxyPort","proxyUserName","proxyPassword","name","def","currentProperties","profanity","language","voice","format","Exports_js_1","PropertyCollection","_PropertyCollection","key","def","keyToUse","value","clonedMap","n","destinationCollection","exports","PropertyId","exports","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","Recognizer","_Recognizer","audioConfig","properties","connectionFactory","cb","errorCb","disposing","enabled","osPlatform","osName","osVersion","recognizerConfig","recognitionMode","ret","result","subscriptionKey","authorizationToken","exports","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","SpeechRecognizer","_SpeechRecognizer","speechConfig","audioConfig","speechConfigImpl","autoDetectSourceLanguageConfig","token","cb","err","model","errorCb","disposing","authentication","connectionFactory","recognizerConfig","configImpl","exports","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","IntentRecognizer","speechConfig","audioConfig","configImpl","value","cb","err","context","model","e","simplePhrase","intentId","intentName","modelImpl","errorCb","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","appId","region","subscriptionKey","refGrammers","addedLmIntent","grammer","exports","VoiceProfileType","exports","HeaderNames_js_1","Exports_js_1","PropertyCollection_js_1","PropertyId_js_1","ConnectionMessage","exports","ConnectionMessageImpl","message","header","key","Exports_js_1","Exports_js_2","ConnectionMessage_js_1","Contracts_js_1","Exports_js_3","Connection","_Connection","recognizer","recoBase","ret","synthesizer","synthBase","cb","err","path","propertyName","propertyValue","payload","success","error","connectionEvent","exports","Exports_js_1","Exports_js_2","Connection_js_1","Contracts_js_1","Exports_js_3","TranslationRecognizer","_TranslationRecognizer","speechConfig","audioConfig","connectionFactory","configImpl","speechTranslationConfig","autoDetectSourceLanguageConfig","speechTranslationConfigImpl","value","cb","err","lang","languages","index","errorCb","disposing","authentication","recognizerConfig","conn","exports","Exports_js_1","Translations","key","def","value","exports","NoMatchReason","exports","Exports_js_1","Exports_js_2","NoMatchDetails","_NoMatchDetails","reason","result","simpleSpeech","exports","TranslationRecognitionCanceledEventArgs","sessionid","cancellationReason","errorDetails","errorCode","result","exports","Exports_js_1","IntentRecognitionCanceledEventArgs","reason","errorDetails","errorCode","result","offset","sessionId","exports","CancellationDetailsBase","reason","errorDetails","errorCode","exports","Exports_js_1","CancellationDetailsBase_js_1","Exports_js_2","CancellationDetails","_CancellationDetails","reason","errorDetails","errorCode","result","simpleSpeech","exports","CancellationErrorCode","exports","Exports_js_1","ConnectionEventArgs","exports","Exports_js_1","ServiceEventArgs","json","name","sessionId","exports","PhraseListGrammar","_PhraseListGrammar","recogBase","recognizer","recoBase","phrase","phrases","exports","Contracts_js_1","Exports_js_1","DialogServiceConfig","value","exports","DialogServiceConfigImpl","name","def","proxyHostName","proxyPort","proxyUserName","proxyPassword","channel","Contracts_js_1","DialogServiceConfig_js_1","Exports_js_1","BotFrameworkConfig","subscription","region","botId","botFrameworkConfig","authorizationToken","host","subscriptionKey","resolvedHost","endpoint","exports","Contracts_js_1","DialogServiceConfig_js_1","Exports_js_1","CustomCommandsConfig","applicationId","subscription","region","customCommandsConfig","authorizationToken","value","exports","QueryParameterNames","exports","Exports_js_1","Exports_js_2","QueryParameterNames_js_1","ConnectionFactoryBase","region","config","queryParams","endpoint","parameterName","propertyId","serviceProperties","value","propId","exports","Exports_js_1","Exports_js_2","Exports_js_3","ConnectionFactoryBase_js_1","Exports_js_4","HeaderNames_js_1","QueryParameterNames_js_1","DialogConnectionFactory","_DialogConnectionFactory","config","authInfo","connectionId","applicationId","dialogType","region","language","requestTurnStatus","queryParams","resourceInfix","version","headers","endpoint","hostSuffix","host","enableCompression","exports","DialogConnectorFactory_js_1","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","PropertyId_js_1","DialogServiceConnector","dialogConfig","audioConfig","dialogServiceConfigImpl","agentConfig","cb","err","token","speechActivityTemplate","retPromise","ret","e","activity","errCb","disposing","speechConfig","authentication","connectionFactory","recognizerConfig","audioSource","exports","ActivityReceivedEventArgs","activity","audioStream","exports","TurnStatusResponsePayload","_TurnStatusResponsePayload","json","exports","TurnStatusPayload_js_1","TurnStatusReceivedEventArgs","turnStatus","exports","ServicePropertyChannel","exports","ProfanityOption","exports","Error_js_1","Exports_js_1","AudioStreamFormat_js_1","BaseAudioPlayer","audioFormat","newAudioData","cb","err","audioData","newSamplesData","e","error","timerPeriod","maxValue","float32Data","i","channelCount","bufferSource","frameCount","audioBuffer","channel","channelOffset","source","destination","newBuffer","exports","ConnectionMessageEventArgs","message","exports","VoiceProfile","profileId","profileType","exports","Exports_js_1","Exports_js_2","VoiceProfileEnrollmentResult","_VoiceProfileEnrollmentResult","reason","json","statusText","results","item","result","exports","VoiceProfileEnrollmentCancellationDetails","_VoiceProfileEnrollmentCancellationDetails","errorDetails","errorCode","Exports_js_1","Contracts_js_1","Exports_js_2","VoiceProfileResult","reason","statusText","exports","VoiceProfileCancellationDetails","_VoiceProfileCancellationDetails","errorDetails","errorCode","result","Contracts_js_1","Exports_js_1","VoiceProfilePhraseResult","reason","statusText","type","phraseArray","exports","Exports_js_1","AudioConfig_js_1","Contracts_js_1","Exports_js_2","VoiceProfileClient","speechConfig","speechConfigImpl","token","profileType","lang","profileIds","profile","audioConfig","configImpl","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","result","successReason","exports","Exports_js_1","Contracts_js_1","Exports_js_2","SpeakerRecognizer","speechConfig","audioConfig","configImpl","token","model","result","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","exports","Contracts_js_1","Exports_js_1","SpeakerIdentificationModel","_SpeakerIdentificationModel","profiles","profile","exports","Contracts_js_1","Exports_js_1","SpeakerVerificationModel","_SpeakerVerificationModel","profile","exports","LanguageIdMode","exports","Exports_js_1","Contracts_js_1","Exports_js_2","LanguageIdMode_js_1","AutoDetectSourceLanguageConfig","_AutoDetectSourceLanguageConfig","config","languages","configs","autoConfig","langs","customProperty","mode","exports","Contracts_js_1","AutoDetectSourceLanguageResult","_AutoDetectSourceLanguageResult","language","languageDetectionConfidence","result","exports","Contracts_js_1","SourceLanguageConfig","_SourceLanguageConfig","language","endpointId","exports","Exports_js_1","Exports_js_2","SpeakerRecognitionResultType","exports","SpeakerRecognitionResult","response","resultReason","cancellationErrorCode","errorDetails","resultType","SpeakerRecognitionCancellationDetails","_SpeakerRecognitionCancellationDetails","reason","errorCode","result","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","Conversation","speechConfig","arg2","arg3","arg4","conversationImpl","cb","err","ConversationImpl","error","exports","id","e","r","updatedParticipant","p","newParticipant","ejectedParticipant","nickname","hostNickname","configImpl","convId","part","props","key","val","value","conversationTranslator","token","room","participant","conversationId","lang","userId","participantId","message","languages","recognizer","conversationInfo","dispose","typedError","includeHost","participants","isMuted","isLocked","ConversationCommon","audioConfig","cb","err","e","error","typedError","exports","Exports_js_1","ConversationExpirationEventArgs","expirationTime","sessionId","exports","Exports_js_1","ConversationParticipantsChangedEventArgs","reason","participants","sessionId","exports","CancellationEventArgsBase_js_1","ConversationTranslationCanceledEventArgs","exports","Exports_js_1","ConversationTranslationEventArgs","result","offset","sessionId","exports","TranslationRecognitionResult_js_1","ConversationTranslationResult","participantId","translations","originalLanguage","resultId","reason","text","duration","offset","errorDetails","json","properties","exports","StringUtils","format","replacements","formatted","key","appendToFormatted","str","appendToKey","appendFunc","i","c","next","exports","Exports_js_1","StringUtils_js_1","Contracts_js_1","Exports_js_2","HeaderNames_js_1","QueryParameterNames_js_1","ConnectionFactoryBase_js_1","Exports_js_3","ConversationTranslatorConnectionFactory","_ConversationTranslatorConnectionFactory","convGetter","config","authInfo","connectionId","isVirtMicArrayEndpoint","convInfo","region","replacementValues","endpointUrl","queryParams","headers","parsedUrl","val","key","connFactory","enableCompression","exports","Exports_js_1","ConversationTranslatorConnectionFactory_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","Conversation_js_1","Exports_js_4","SpeechState","exports","ConversationTranslationRecognizer","speechConfig","audioConfig","translator","convGetter","tr","e","newState","token","error","cancelEvent","ConversationTranslator","name","value","currentProperties","conversation","nickname","param1","param2","param3","lang","propertyIdsToCopy","prop","key","result","cb","err","message","resolve","reject","reason","success","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","ConversationTranscriber","_ConversationTranscriber","speechConfig","audioConfig","speechConfigImpl","autoDetectSourceLanguageConfig","token","cb","err","errorCb","disposing","authentication","connectionFactory","recognizerConfig","configImpl","exports","Exports_js_1","User","userId","exports","Participant","_Participant","id","avatar","displayName","isHost","isMuted","isUsingTts","preferredLanguage","voice","language","ParticipantChangedReason","exports","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","Meeting","speechConfig","meetingId","arg3","arg4","meetingImpl","MeetingImpl","exports","id","e","r","updatedParticipant","p","newParticipant","ejectedParticipant","nickname","configImpl","convId","part","props","key","val","value","cb","err","room","error","participant","lang","userId","participantId","message","languages","recognizer","meetingInfo","dispose","typedError","includeHost","participants","isMuted","isLocked","CancellationEventArgsBase_js_1","MeetingTranscriptionCanceledEventArgs","exports","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","Exports_js_4","MeetingTranscriber","audioConfig","token","meeting","cb","err","meetingImpl","errorCb","disposing","exports","Exports_js_1","ConversationTranscriptionResult","resultId","reason","text","duration","offset","language","languageDetectionConfidence","speakerId","errorDetails","json","properties","exports","Conversation_js_1","exports","ConversationCommon_js_1","ConversationExpirationEventArgs_js_1","ConversationParticipantsChangedEventArgs_js_1","ConversationTranslationCanceledEventArgs_js_1","ConversationTranslationEventArgs_js_1","ConversationTranslationResult_js_1","ConversationTranslator_js_1","ConversationTranscriber_js_1","IParticipant_js_1","ParticipantChangedReason_js_1","Meeting_js_1","MeetingTranscriptionCanceledEventArgs_js_1","MeetingTranscriber_js_1","ConversationTranscriptionResult_js_1","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","Synthesizer","_Synthesizer","speechConfig","speechConfigImpl","token","text","languageToDefaultVoice","language","voice","ssml","disposing","request","osPlatform","osName","osVersion","synthesizerConfig","subscriptionKey","authentication","authorizationToken","exports","SynthesisRequest","requestId","isSSML","cb","err","dataStream","Exports_js_1","Exports_js_2","AudioFileWriter_js_1","AudioOutputFormat_js_1","AudioOutputStream_js_1","Contracts_js_1","Exports_js_3","Synthesizer_js_1","SpeechSynthesizer","_SpeechSynthesizer","speechConfig","audioConfig","autoDetectSourceLanguageConfig","speechConfigImpl","text","cb","err","stream","ssml","locale","authentication","connectionFactory","synthesizerConfig","IsSsml","dataStream","requestId","audioDestination","e","error","typedError","response","json","item","exports","SynthesisResult","resultId","reason","errorDetails","properties","exports","Exports_js_1","SpeechSynthesisResult","resultId","reason","audioData","errorDetails","properties","audioDuration","exports","SpeechSynthesisEventArgs","result","exports","SpeechSynthesisWordBoundaryEventArgs","audioOffset","duration","text","wordLength","textOffset","boundaryType","exports","SpeechSynthesisBookmarkEventArgs","audioOffset","text","exports","SpeechSynthesisVisemeEventArgs","audioOffset","visemeId","animation","exports","SpeechSynthesisBoundaryType","exports","Exports_js_1","SynthesisVoicesResult","requestId","json","errorDetails","item","exports","SynthesisVoiceGender","exports","SynthesisVoiceType","GENDER_LOOKUP","VoiceInfo","json","style","Exports_js_1","AudioOutputStream_js_1","AudioStreamFormat_js_1","MediaDurationPlaceholderSeconds","AudioFormatToMimeType","SpeakerAudioDestination","audioDestinationId","buffer","cb","err","error","receivedAudio","audioBlob","format","mimeType","reason","volume","binary","exports","CancellationEventArgsBase_js_1","ConversationTranscriptionCanceledEventArgs","exports","CancellationEventArgsBase_js_1","MeetingTranscriptionCanceledEventArgs","exports","PronunciationAssessmentGradingSystem","exports","PronunciationAssessmentGranularity","exports","Contracts_js_1","Exports_js_1","PronunciationAssessmentConfig","_PronunciationAssessmentConfig","referenceText","gradingSystem","granularity","enableMiscue","json","config","recognizer","recoBase","phonemeAlphabet","enableMiscueString","nbestPhonemeCount","enableProsodyAssessment","topic","jsonString","paramsJson","exports","Contracts_js_1","Exports_js_1","ContentAssessmentResult","detailResult","exports","PronunciationAssessmentResult","_PronunciationAssessmentResult","jsonString","j","result","json","Contracts_js_1","Exports_js_1","AvatarConfig","character","style","videoFormat","value","exports","AvatarEventTypes","exports","AvatarEventArgs","audioOffset","description","Exports_js_1","Exports_js_2","ConnectionFactoryBase_js_1","Exports_js_3","HeaderNames_js_1","QueryParameterNames_js_1","SpeechSynthesisConnectionFactory","config","authInfo","connectionId","endpoint","region","hostSuffix","endpointId","hostPrefix","host","queryParams","headers","enableCompression","exports","SpeechSynthesisConnectionFactory_js_1","Exports_js_1","Exports_js_2","AudioOutputFormat_js_1","Exports_js_3","Contracts_js_1","Synthesizer_js_1","AvatarSynthesizer","speechConfig","avatarConfig","peerConnection","iceGatheringDone","event","sdp","result","sdpAnswerString","sdpAnswer","text","r","ssml","authentication","connectionFactory","synthesizerConfig","_authentication","_synthesizerConfig","config","isSSML","requestId","deferredResult","e","exports","Coordinate","x","y","exports","AvatarVideoFormat","codec","bitrate","width","height","topLeft","bottomRight","Exports_js_1","AvatarWebRTCConnectionResult","SDPAnswer","resultId","reason","errorDetails","properties","exports","Exports_js_1","Exports_js_2","Diagnostics","logLevel","path","callback","exports","AudioConfig_js_1","exports","AudioStreamFormat_js_1","AudioInputStream_js_1","AudioOutputStream_js_1","CancellationReason_js_1","PullAudioInputStreamCallback_js_1","PushAudioOutputStreamCallback_js_1","KeywordRecognitionModel_js_1","SessionEventArgs_js_1","RecognitionEventArgs_js_1","OutputFormat_js_1","IntentRecognitionEventArgs_js_1","RecognitionResult_js_1","SpeechRecognitionResult_js_1","IntentRecognitionResult_js_1","LanguageUnderstandingModel_js_1","SpeechRecognitionEventArgs_js_1","SpeechRecognitionCanceledEventArgs_js_1","TranslationRecognitionEventArgs_js_1","TranslationSynthesisEventArgs_js_1","TranslationRecognitionResult_js_1","TranslationSynthesisResult_js_1","ResultReason_js_1","SpeechConfig_js_1","SpeechTranslationConfig_js_1","PropertyCollection_js_1","PropertyId_js_1","Recognizer_js_1","SpeechRecognizer_js_1","IntentRecognizer_js_1","VoiceProfileType_js_1","TranslationRecognizer_js_1","Translations_js_1","NoMatchReason_js_1","NoMatchDetails_js_1","TranslationRecognitionCanceledEventArgs_js_1","IntentRecognitionCanceledEventArgs_js_1","CancellationDetailsBase_js_1","CancellationDetails_js_1","CancellationErrorCodes_js_1","ConnectionEventArgs_js_1","ServiceEventArgs_js_1","Connection_js_1","PhraseListGrammar_js_1","DialogServiceConfig_js_1","BotFrameworkConfig_js_1","CustomCommandsConfig_js_1","DialogServiceConnector_js_1","ActivityReceivedEventArgs_js_1","TurnStatusReceivedEventArgs_js_1","ServicePropertyChannel_js_1","ProfanityOption_js_1","BaseAudioPlayer_js_1","ConnectionMessageEventArgs_js_1","ConnectionMessage_js_1","VoiceProfile_js_1","VoiceProfileEnrollmentResult_js_1","VoiceProfileResult_js_1","VoiceProfilePhraseResult_js_1","VoiceProfileClient_js_1","SpeakerRecognizer_js_1","SpeakerIdentificationModel_js_1","SpeakerVerificationModel_js_1","AutoDetectSourceLanguageConfig_js_1","AutoDetectSourceLanguageResult_js_1","SourceLanguageConfig_js_1","SpeakerRecognitionResult_js_1","Exports_js_1","Synthesizer_js_1","SpeechSynthesisOutputFormat_js_1","SpeechSynthesizer_js_1","SynthesisResult_js_1","SpeechSynthesisResult_js_1","SpeechSynthesisEventArgs_js_1","SpeechSynthesisWordBoundaryEventArgs_js_1","SpeechSynthesisBookmarkEventArgs_js_1","SpeechSynthesisVisemeEventArgs_js_1","SpeechSynthesisBoundaryType_js_1","SynthesisVoicesResult_js_1","VoiceInfo_js_1","SpeakerAudioDestination_js_1","ConversationTranscriptionCanceledEventArgs_js_1","MeetingTranscriptionCanceledEventArgs_js_1","PronunciationAssessmentGradingSystem_js_1","PronunciationAssessmentGranularity_js_1","PronunciationAssessmentConfig_js_1","PronunciationAssessmentResult_js_1","LanguageIdMode_js_1","AvatarConfig_js_1","AvatarEventArgs_js_1","AvatarSynthesizer_js_1","AvatarVideoFormat_js_1","AvatarWebRTCConnectionResult_js_1","Diagnostics_js_1","LogLevel_js_1","Exports_js_1","ProxyInfo","_ProxyInfo","proxyHostName","proxyPort","proxyUserName","proxyPassword","parameters","config","exports","require_core","__commonJSMin","exports","module","encodings","mkrequest","args","statusCodes","method","encoding","headers","baseurl","arg","msg","code","require_browser","__commonJSMin","exports","module","core","StatusError","_StatusError","res","params","buffer","key","value","mkrequest","statusCodes","method","encoding","headers","baseurl","_url","body","_headers","parsed","resp","bent_1","__importDefault","Exports_js_1","RestRequestType","exports","RestMessageAdapter","configParams","headerKey","headers","headerValue","arr","headerMap","line","parts","header","value","key","method","uri","queryParams","body","responseReceivedDeferral","requestCommand","handleRestResponse","data","j","d","send","postData","sendRequest","params","error","k","RestConfigBase","_RestConfigBase","exports","__exportStar","exports","Exports_js_1","Exports_js_2","ConnectionFactoryBase_js_1","Exports_js_3","HeaderNames_js_1","IntentConnectionFactory","config","authInfo","connectionId","endpoint","region","hostSuffix","queryParams","headers","enableCompression","intentRegion","exports","Exports_js_1","Exports_js_2","ConnectionFactoryBase_js_1","Exports_js_3","HeaderNames_js_1","SpeakerRecognitionConnectionFactoryBase","config","authInfo","endpointPath","connectionId","endpoint","region","hostSuffix","host","scenario","queryParams","headers","enableCompression","mode","SpeakerRecognitionConnectionFactory","exports","VoiceProfileConnectionFactory","Exports_js_1","SpeechRecognitionEvent","eventName","requestId","sessionId","eventType","exports","RecognitionTriggeredEvent","audioSourceId","audioNodeId","ListeningStartedEvent","ConnectingToServiceEvent","authFetchEventid","RecognitionStartedEvent","authFetchEventId","RecognitionCompletionStatus","RecognitionEndedEvent","serviceTag","status","error","Exports_js_1","HeaderNames_js_1","SpeechConnectionMessage","_SpeechConnectionMessage","messageType","path","requestId","contentType","body","streamId","additionalHeaders","id","headers","headerName","message","exports","Exports_js_1","Exports_js_2","Exports_js_3","Exports_js_4","SpeechConnectionMessage_Internal_js_1","ServiceRecognizerBase","_ServiceRecognizerBase","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","connectionEvent","connectionClosedEvent","targetLanguages","languages","translationVoice","action","languageToVoiceMap","lang","speechSegmentationTimeout","mode","segmentationSilenceTimeoutMs","phraseDetection","sourceLanguages","speechContextLidMode","customModels","token","type","auth","reason","recoMode","successCallback","errorCallBack","conPromise","audioNode","audioStreamNode","format","deviceInfo","error","sessionStartEventArgs","cb","err","e","message","path","payload","contentType","messagePayload","value","telemetryData","cancellationReason","errorCode","connection","connectionMessage","speechStartDetected","speechStartEventArgs","json","speechStopDetected","speechStopEventArgs","sessionStopEventArgs","audioOffsetMs","generateNewRequestId","speechContextJson","requestSession","SpeechServiceConfigJson","replacement","audioFormat","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","isUnAuthorized","sessionId","lastStatusCode","lastReason","event","response","delayMs","resolve","buffer","out","readView","i","exports","Exports_js_1","Exports_js_2","ConversationServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","textBody","connectionMessage","result","offset","sessionId","duration","processed","requestId","cancellationReason","errorCode","error","simple","resultReason","resultProps","simpleOffset","cancelReason","cancellationErrorCode","detailed","totalOffset","offsetCorrectedJson","hypothesis","exports","Exports_js_1","Exports_js_2","RecognitionMode","exports","SpeechResultFormat","RecognizerConfig","speechServiceConfig","parameters","value","models","modelsExist","language","customProperty","modelId","Exports_js_1","CRLF","WebsocketMessageFormatter","message","deferral","textMessage","headers","body","headerBodySplit","binaryMessage","dataView","headerLength","headersString","i","e","payload","content","headerBuffer","headerInt8Array","payloadInt8Array","bodyInt8Array","header","headerMatches","separatorIndex","headerName","headerValue","str","buffer","view","exports","Exports_js_1","Exports_js_2","Exports_js_3","ConnectionFactoryBase_js_1","Exports_js_4","HeaderNames_js_1","QueryParameterNames_js_1","SpeechConnectionFactory","config","authInfo","connectionId","endpoint","region","hostSuffix","host","queryParams","endpointId","language","headers","enableCompression","webSocketConnection","uri","exports","Exports_js_1","Exports_js_2","Exports_js_3","ConnectionFactoryBase_js_1","Exports_js_4","HeaderNames_js_1","QueryParameterNames_js_1","ConversationTranscriberConnectionFactory","config","authInfo","connectionId","endpoint","region","hostSuffix","host","queryParams","endpointId","language","headers","enableCompression","webSocketConnection","uri","parameterName","propertyId","serviceProperties","value","exports","Exports_js_1","Exports_js_2","ConnectionFactoryBase_js_1","Exports_js_3","HeaderNames_js_1","QueryParameterNames_js_1","TranscriberConnectionFactory","config","authInfo","connectionId","endpoint","region","hostSuffix","hostDefault","host","queryParams","headers","enableCompression","endpointUrl","endpointId","language","wordLevelTimings","detailed","exports","Exports_js_1","StringUtils_js_1","Exports_js_2","ConnectionFactoryBase_js_1","Exports_js_3","HeaderNames_js_1","QueryParameterNames_js_1","TranslationConnectionFactory","config","authInfo","connectionId","endpoint","queryParams","headers","enableCompression","returnRegionPlaceholder","region","hostSuffix","endpointUrl","translationVoice","exports","Exports_js_1","Exports_js_2","EnumTranslation","recognitionStatus","expectEndOfDictation","reason","cancellationErrorCode","errorDetails","exports","SynthesisStatus","exports","RecognitionStatus","Exports_js_1","TranslationSynthesisEnd","_TranslationSynthesisEnd","json","exports","Contracts_js_1","TranslationStatus_js_1","TranslationHypothesis","_TranslationHypothesis","hypothesis","json","translationHypothesis","exports","Contracts_js_1","Exports_js_1","TranslationStatus_js_1","TranslationPhrase","_TranslationPhrase","phrase","json","translationResponse","exports","Exports_js_1","Exports_js_2","Exports_js_3","TranslationServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","translationRecognizer","connectionEvent","connectionMessage","resultProps","processed","handleTranslationPhrase","translatedPhrase","result","e","reason","cancelReason","cancellationErrorCode","ev","handleTranslationHypothesis","hypothesis","resultProperties","phrase","synthEnd","retEvent","canceledResult","sessionId","requestId","cancellationReason","errorCode","error","properties","cancelEvent","duration","offset","serviceResult","translations","translation","resultReason","confidence","language","audio","exports","SpeechDetected","_SpeechDetected","json","exports","SpeechHypothesis","_SpeechHypothesis","json","exports","SpeechKeyword","_SpeechKeyword","json","exports","Exports_js_1","Exports_js_2","SpeechServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","speechRecognizer","connectionMessage","result","resultProps","processed","hypothesis","offset","ev","simple","resultReason","cancelReason","cancellationErrorCode","detailed","totalOffset","offsetCorrectedJson","event","e","sessionId","requestId","cancellationReason","errorCode","error","properties","cancelEvent","exports","Exports_js_1","Exports_js_2","ConversationTranscriptionServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","conversationTranscriber","phraseDetection","speakerDiarization","connectionMessage","result","resultProps","processed","hypothesis","offset","ev","simple","resultReason","cancelReason","cancellationErrorCode","detailed","totalOffset","offsetCorrectedJson","event","sessionId","requestId","cancellationReason","errorCode","error","cancelEvent","exports","Exports_js_1","Exports_js_2","Exports_js_3","SpeechConnectionMessage_Internal_js_1","TranscriptionServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","transcriber","connection","info","command","connectionMessage","result","offset","sessionId","event","e","duration","ev","requestId","cancellationReason","errorCode","error","properties","cancelEvent","payload","speechEventJson","eventDict","exports","Exports_js_1","DetailedSpeechPhrase","_DetailedSpeechPhrase","json","baseOffset","firstWordOffset","phrase","offset","details","word","exports","Exports_js_1","SimpleSpeechPhrase","_SimpleSpeechPhrase","json","exports","AddedLmIntent","modelImpl","intentName","exports","Exports_js_1","Exports_js_2","Exports_js_3","IntentServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","addedIntents","umbrellaIntent","connectionMessage","result","ev","processed","resultProps","speechHypothesis","simple","sendEvent","e","intentResponse","addedIntent","intentId","reason","properties","defferal","sessionId","requestId","cancellationReason","errorCode","error","cancelEvent","exports","IntentResponse","_IntentResponse","json","exports","Exports_js_1","RecognitionEvents_js_1","ServiceTelemetryListener","requestId","audioSourceId","audioNodeId","audioReceivedTime","metrics","telemetry","json","statusCode","exports","Exports_js_1","RecognitionEvents_js_1","ServiceTelemetryListener_Internal_js_1","RequestSession","audioSourceId","eventSource","audioNode","isError","authFetchEventId","connectionId","statusCode","reason","continuousRecognition","offset","bytesSent","detachable","event","exports","SpeechContext","dynamicGrammar","sectionName","value","params","contentAssessmentTopic","isSpeakerDiarizationEnabled","audioOffsetMs","dgi","exports","DynamicGrammarBuilder","phrase","grammar","retObj","retPhrases","value","exports","ActivityPayloadResponse","_ActivityPayloadResponse","json","exports","MessageDataStreamType","AudioOutputFormat_js_1","AudioOutputStream_js_1","ActivityResponsePayload_js_1","DialogServiceTurnState","manager","requestId","payload","audioFormat","exports","Error_js_1","DialogServiceTurnState_js_1","DialogServiceTurnStateManager","id","turnState","exports","Exports_js_1","DialogEvents_js_1","Exports_js_2","AudioOutputFormat_js_1","Exports_js_3","DialogServiceTurnStateManager_js_1","Exports_js_4","ActivityResponsePayload_js_1","SpeechConnectionMessage_Internal_js_1","DialogServiceAdapter","authentication","connectionFactory","audioSource","recognizerConfig","dialogServiceConnector","recoMode","successCallback","errorCallback","connection","connectionEvent","message","interactionGuid","requestId","agentMessage","agentMessageJson","connectionMessage","resultProps","result","processed","speechPhrase","args","hypothesis","offset","ev","keyword","event","audioRequestId","turn","defferal","sessionId","cancellationReason","errorCode","error","properties","cancelEvent","conPromise","preAudioPromise","node","format","deviceInfo","audioNode","sessionStartEventArgs","communicationCustodian","loop","isDisposed","terminateMessageLoop","turnRequestId","audioSessionReqId","speechStartDetected","speechStartEventArgs","json","speechStopDetected","speechStopEventArgs","turnEndRequestId","sessionStopEventArgs","e","reason","config","agentConfigJson","guid","speechActivityTemplate","agentContextJson","serviceResult","resultReason","responseMessage","responsePayload","responseRequestId","activityPayload","updateAgentConfig","pullAudioOutputStream","activity","keywordPropertyValue","keywordOffsetPropertyValue","keywordDurationPropertyValue","keywords","keywordOffsets","keywordDurations","keywordDefinitionArray","i","definition","exports","AgentConfig","value","exports","RestConfigBase_js_1","ConversationConnectionConfig","_ConversationConnectionConfig","exports","Exports_js_1","Contracts_js_1","Exports_js_2","ConversationConnectionConfig_js_1","ConversationManager","args","conversationCode","cb","err","languageCode","nickname","endpointHost","correlationId","subscriptionKey","subscriptionRegion","authToken","queryParams","headers","config","endpoint","response","requestId","errorMessage","errMessageRaw","conversation","e","error","typedError","sessionToken","resolve","reject","exports","Exports_js_1","ConversationConnectionMessage","messageType","body","headers","id","json","exports","Exports_js_1","ConversationConnectionMessage_js_1","ConversationWebsocketMessageFormatter","message","deferral","incomingMessage","e","payload","exports","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","ConnectionFactoryBase_js_1","ConversationConnectionConfig_js_1","ConversationWebsocketMessageFormatter_js_1","ConversationConnectionFactory","config","authInfo","connectionId","endpointHost","correlationId","endpoint","token","queryParams","enableCompression","exports","Exports_js_1","ConversationRequestSession","sessionId","authFetchEventId","connectionId","isError","statusCode","continuousRecognition","detachable","exports","Exports_js_1","MuteAllEventArgs","isMuted","sessionId","exports","LockRoomEventArgs","isLocked","ParticipantEventArgs","participant","ParticipantAttributeEventArgs","participantId","key","value","ParticipantsListEventArgs","conversationId","token","translateTo","profanityFilter","roomProfanityFilter","isRoomLocked","isMuteAll","participants","ConversationReceivedTranslationEventArgs","command","payload","InternalParticipants","participants","meId","value","exists","id","p","exports","parseCommandResponse","json","CommandResponsePayload","_CommandResponsePayload","exports","parseListResponse","json","parseParticipantResponse","ParticipantsListPayloadResponse","_ParticipantsListPayloadResponse","exports","ParticipantPayloadResponse","_ParticipantPayloadResponse","parseSpeechResponse","json","parseTextResponse","SpeechResponsePayload","_SpeechResponsePayload","exports","TextResponsePayload","_TextResponsePayload","CommandResponsePayload_js_1","exports","ParticipantResponsePayload_js_1","TranslationResponsePayload_js_1","Exports_js_1","Exports_js_2","Exports_js_3","ConversationConnectionMessage_js_1","ConversationRequestSession_js_1","ConversationTranslatorEventArgs_js_1","ConversationTranslatorInterfaces_js_1","Exports_js_4","ConversationServiceAdapter","authentication","connectionFactory","audioSource","recognizerConfig","conversationServiceConnector","connection","reason","message","sessionId","requestId","cancellationReason","errorCode","error","cancelEvent","communicationCustodian","conversationMessageType","sendFinal","commandPayload","participantsPayload","participantsResult","p","joinParticipantPayload","joiningParticipant","leavingParticipant","disconnectParticipant","token","authorizationToken","speechPayload","conversationResultReason","speechResult","textPayload","textResult","messageRetrievalPromise","serviceResultTranslations","translations","translation","exports","Exports_js_1","Exports_js_2","Contracts_js_1","Exports_js_3","ConversationConnectionFactory_js_1","ConversationServiceAdapter_js_1","ConversationRecognizerFactory","conversation","speechConfig","audioConfig","ConversationTranslatorRecognizer","exports","serviceConfigImpl","conversationImpl","cb","token","err","error","typedError","reason","command","disposing","authentication","connectionFactory","recognizerConfig","audioSource","msg","withAsync","promise","e","Exports_js_1","Contracts_js_1","Exports_js_2","Exports_js_3","TranscriberRecognizer","speechTranslationConfig","audioConfig","speechTranslationConfigImpl","audioConfigImpl","token","c","m","cb","err","conversationInfo","command","reco","meetingInfo","channels","transcriber","s","e","disposing","speechConfig","authentication","connectionFactory","recognizerConfig","configImpl","exports","ConversationManager_js_1","exports","ConversationConnectionConfig_js_1","ConversationTranslatorRecognizer_js_1","TranscriberRecognizer_js_1","ConversationTranslatorEventArgs_js_1","ConversationTranslatorInterfaces_js_1","MetadataType","exports","SynthesisAudioMetadata","_SynthesisAudioMetadata","json","Exports_js_1","SpeechSynthesisEvent","eventName","requestId","eventType","exports","SynthesisTriggeredEvent","sessionAudioDestinationId","turnAudioDestinationId","ConnectingToSynthesisServiceEvent","authFetchEventId","SynthesisStartedEvent","Exports_js_1","AudioOutputStream_js_1","Exports_js_2","SynthesisAudioMetadata_js_1","SynthesisEvents_js_1","SynthesisTurn","_SynthesisTurn","value","format","properties","audio","requestId","rawText","isSSML","audioDestination","authFetchEventId","isError","statusCode","responseJson","response","data","metadata","audioBuffer","animation","event","text","type","idx","exports","Exports_js_1","Exports_js_2","Exports_js_3","SpeechConnectionMessage_Internal_js_1","SynthesisAdapterBase","authentication","connectionFactory","synthesizerConfig","audioDestination","connectionEvent","connectionClosedEvent","messagePayload","format","reason","path","payload","type","contentType","text","isSSML","requestId","successCallback","errorCallBack","ssml","connection","e","_cancellationReason","errorCode","error","properties","result","cancellationReason","_connectionMessage","message","connectionMessage","metadataList","metadata","wordBoundaryEventArgs","bookmarkEventArgs","visemeEventArgs","synthesisContextJson","isUnAuthorized","authPromise","event","response","SpeechServiceConfigJson","_metadata","_requestId","_audio","_result","_wordBoundaryEventArgs","_visemeEventArgs","_bookmarkEventArgs","exports","Exports_js_1","Exports_js_2","AvatarSynthesisAdapter","authentication","connectionFactory","synthesizerConfig","avatarSynthesizer","avatarConfig","metadata","avatarEventArgs","exports","Exports_js_1","Exports_js_2","SpeechSynthesisAdapter","authentication","connectionFactory","synthesizerConfig","speechSynthesizer","audioDestination","requestId","synthesisStartEventArgs","audio","audioWithHeader","ev","result","cancelEvent","wordBoundaryEventArgs","visemeEventArgs","bookmarkEventArgs","exports","Exports_js_1","Exports_js_2","ConnectionFactoryBase_js_1","HeaderNames_js_1","SynthesisRestAdapter","config","authentication","endpoint","region","hostSuffix","options","connectionId","authInfo","exports","Exports_js_1","SynthesisServiceType","exports","SynthesizerConfig","speechServiceConfig","parameters","value","Exports_js_1","SynthesisContext","sectionName","value","format","speechSynthesizer","synthesisSection","exports","Exports_js_1","SpeakerRecognitionConfig","context","parameters","exports","Exports_js_1","Exports_js_2","Exports_js_3","Exports_js_4","SpeechConnectionMessage_Internal_js_1","SpeakerServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","model","connectionMessage","processed","resultProps","response","result","defferal","sessionId","requestId","cancellationReason","errorCode","error","conPromise","preAudioPromise","node","format","deviceInfo","audioNode","err","sessionStartEventArgs","context","connection","speakerContextJson","exports","Exports_js_1","Exports_js_2","Exports_js_3","Exports_js_4","SpeechConnectionMessage_Internal_js_1","VoiceServiceRecognizer","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","connectionMessage","processed","resultProps","response","enrollmentResponse","phraseResponse","result","defferal","sessionId","requestId","cancellationReason","errorCode","error","profileType","locale","conPromise","createProfileDeferral","err","profile","lang","getPhrasesDeferral","enrollmentDeferral","preAudioPromise","node","format","deviceInfo","audioNode","sessionStartEventArgs","connection","scenario","profileCreateRequest","operation","deferral","profileRequest","model","reason","profileIds","successReason","profileInfo","iProfiles","profileResults","statusCode","exports","SpeechServiceConfig","context","key","value","replacement","k","exports","Context","os","System","SPEECHSDK_CLIENTSDK_VERSION","OS","platform","name","version","Device","manufacturer","model","connectivity","type","__exportStar","exports","AvatarSynthesisAdapter_js_1","SpeechSynthesisAdapter_js_1","Exports_js_1","__exportStar","exports","import_microsoft_cognitiveservices_speech_sdk","EMOJI_REGEX","store","getGlobalConfig","config2","store","store2","getGlobalMessage","lang","store2","store3","getSchemaMessage","lang","store3","store4","getSpecificMessage","reference","lang","store4","_stringify","input","type","_addIssue","context","label","dataset","config2","other","expected","received","issue","isSchema","message","getSpecificMessage","getSchemaMessage","getGlobalMessage","_joinExpects","values","separator","list","ValiError","issues","maxValue","requirement","message","_stringify","dataset","config2","_addIssue","minValue","requirement","message","_stringify","dataset","config2","_addIssue","readonly","dataset","transform","operation","dataset","getDefault","schema","dataset","config2","array","item","message","dataset","config2","input","key","value2","itemDataset","pathItem","issue","_addIssue","boolean","message","dataset","config2","_addIssue","enum_","enum__","message","options","key","value2","_joinExpects","_stringify","dataset","config2","_addIssue","function_","message","dataset","config2","_addIssue","_merge","value1","value2","key","dataset","index","intersect","options","message","_joinExpects","option","config2","input","outputs","schema","optionDataset","mergeDataset","_addIssue","number","message","dataset","config2","_addIssue","object","entries","input","key","value2","valueDataset","pathItem","issue","optional","wrapped","args","schema","dataset","config2","getDefault","string","message","dataset","config2","_addIssue","undefined_","message","dataset","config2","_addIssue","_subIssues","datasets","issues","dataset","union","options","message","_joinExpects","option","config2","validDataset","typedDatasets","untypedDatasets","schema","optionDataset","_addIssue","parse","schema","input","config2","dataset","getGlobalConfig","ValiError","pipe","pipe2","dataset","config2","item","isFunction","value","resolveFunctionOrReturnValue","fnOrValue","import_microsoft_cognitiveservices_speech","SpeechSDK_default","credentialsSchema","pipe","intersect","union","object","string","optional","undefined_","readonly","credentialsSchema_default","enableTelemetrySchema","optional","boolean","enableTelemetrySchema_default","initialSilenceTimeoutSchema","optional","pipe","number","minValue","maxValue","initialSilenceTimeoutSchema_default","looseEventsSchema","optional","boolean","looseEventsSchema_default","referenceGrammarsSchema","pipe","optional","array","string","transform","value","referenceGrammarsSchema_default","speechRecognitionEndpointIdSchema","optional","string","speechRecognitionEndpointIdSchema_default","textNormalizationSchema","optional","enum_","textNormalizationSchema_default","AudioConfig","SpeechSDK_default","shouldWarnOnSubscriptionKey","patchOptions","init","audioConfig","credentials","enableTelemetry","initialSilenceTimeout","looseEvent","referenceGrammars","speechRecognitionEndpointId","textNormalization","looseEvents","parse","enableTelemetrySchema_default","parsedCredentials","credentialsSchema_default","resolveFunctionOrReturnValue","initialSilenceTimeoutSchema_default","looseEventsSchema_default","referenceGrammarsSchema_default","speechRecognitionEndpointIdSchema_default","textNormalizationSchema_default","pDefer","deferred","resolve","reject","createPromiseQueue_default","shiftDeferred","queue","value","resolve","pDefer","SpeechRecognitionAlternative","confidence","transcript","#confidence","#transcript","FakeArray","array","#array","key","SpeechRecognitionResult","FakeArray","init","#isFinal","RecognizingSpeech","RecognizedSpeech","SpeechSDK_default","cognitiveServiceEventResultToWebSpeechRecognitionResult_default","result","init","maxAlternatives","textNormalization","json","SpeechRecognitionResult","SpeechRecognitionAlternative","confidence","display","itn","lexical","maskedITN","cognitiveServicesAsyncToPromise","fn","context","args","resolve","reject","EventListenerMap","eventTarget","#eventTarget","#propertyMap","name","value","existing","import_AudioSourceEvents","averageAmplitude","arrayBuffer","array","amplitude","prepareAudioConfig","audioConfig","audioConfigImpl","originalAttach","boundOriginalAttach","firstChunk","muted","reader","chunk","averageAmplitude","serializeRecognitionResult","duration","errorDetails","json","offset","properties","reason","resultId","text","SpeechGrammarList","#phrases","value","SpeechRecognitionErrorEvent","type","error","message","#error","#message","SpeechRecognitionResultList","FakeArray","result","SpeechRecognitionEvent","type","data","resultIndex","results","#data","#resultIndex","#results","SpeechRecognitionResultList","ResultReason","SpeechRecognizer","SpeechSDK_default","enableTelemetrySchema","union","boolean","undefined_","createSpeechRecognitionPonyfillFromRecognizer","createRecognizer","enableTelemetry","looseEvents","referenceGrammars","textNormalization","parse","function_","referenceGrammarsSchema_default","textNormalizationSchema_default","SpeechRecognition","#continuous","#eventListenerMap","EventListenerMap","#grammars","SpeechGrammarList","#interimResults","#lang","#maxAlternatives","type","event","SpeechRecognitionEvent","value","err","SpeechRecognitionErrorEvent","recognizer","pause","unprepare","prepareAudioConfig","queue","createPromiseQueue_default","soundStarted","speechStarted","stopping","detachAudioConfigEvent","name","_","errorDetails","offset","reason","sessionId","result","serializeRecognitionResult","phrases","dynamicGrammar","cognitiveServicesAsyncToPromise","audioStarted","finalEvent","finalizedResults","loop","abort","audioSourceOff","audioSourceReady","canceled","firstAudibleChunk","recognized","recognizing","stop","errorMessage","SpeechRecognitionResultList","cognitiveServiceEventResultToWebSpeechRecognitionResult_default","recognizable","OutputFormat","SpeechConfig","SpeechRecognizer","SpeechSDK_default","createSpeechRecognitionPonyfill","options","audioConfig","enableTelemetry","fetchCredentials","initialSilenceTimeout","looseEvents","referenceGrammars","speechRecognitionEndpointId","textNormalization","patchOptions","createSpeechRecognitionPonyfillFromRecognizer","lang","credentials","speechConfig","host","assertType","condition","message","args","format","i","anyToString","x","currentErrorHandler","reportError","maybeError","error","anyToString","currentErrorHandler","Global","currentWarnHandler","Warning","code","message","args","currentWarnHandler","stack","_a","InitEventWasCalledWhileDispatching","FalsyWasAssignedToCancelBubble","TruthyWasAssignedToReturnValue","NonCancelableEventWasCanceled","CanceledInPassiveListener","EventListenerWasDuplicated","OptionWasIgnored","InvalidEventListener","InvalidAttributeHandler","Event","NONE","CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE","type","eventInitDict","opts","internalDataMap","$","currentTarget","value","data","setCancelFlag","bubbles","cancelable","event","name","retv","assertType","keys","Global","createInvalidStateError","DOMException","msg","defineErrorCodeProperties","ErrorCodeMap","obj","i","key","EventWrapper","getWrapperClassOf","defineRedirectDescriptor","original","wrapperClassCache","originalEvent","prototype","wrapper","defineWrapper","BaseEventWrapper","originalPrototype","CustomEventWrapper","d","createListener","callback","capture","passive","once","signal","signalListener","setRemoved","listener","isCapture","isPassive","isOnce","isRemoved","invokeCallback","target","thrownError","reportError","findIndexOfListener","listeners","addListener","list","removeListener","index","removeListenerAt","disableCow","_","createListenerListMap","ensureListenerList","listenerMap","EventTarget","type0","callback0","options0","normalizeAddOptions","warnDuplicate","normalizeOptions","eventData","getEventInternalData","cow","options","assertCallback","format","getEventAttributeValue","_b","getEventTargetInternalData","setEventAttributeValue","upsertEventAttributeListener","removeEventAttributeListener","defineEventAttributeCallback","isPromise","value","onErrorResumeNext","fn","context","resolve","result","isPromise","safeIsNaN","value","isEqual","first","second","areInputsEqual","newInputs","lastInputs","i","memoizeOne","resultFn","cache","memoized","newArgs","_i","lastResult","AudioContextConsumer_default","audioContext","queue","utterance","AudioContextQueue_default","audioContext","ponyfill","memoizeOne","utterance","AudioContextConsumer_default","SpeechSynthesisEvent","Event","type","withResolvers","resolvers","resolve","reject","EventAsPromise","#eventListener","event","deferred","#orderedResolvers","#upcomingResolvers","chars","lookup","i","decode","base64","bufferLength","len","i","p","encoded1","encoded2","encoded3","encoded4","arraybuffer","bytes","lookup","relativePercentage","value","relative","buildSSML","lang","pitch","rate","text","voice","volume","SPEAK_TAG_PATTERN","XML_PROLOG_PATTERN","isSSML","text","DEFAULT_LANGUAGE","DEFAULT_OUTPUT_FORMAT","DEFAULT_VOICE","EMPTY_MP3_BASE64","fetchSpeechData_default","deploymentId","fetchCredentials","lang","outputFormat","pitch","rate","text","voice","volume","decode","authorizationToken","region","speechSynthesisHostname","subscriptionKey","ssml","isSSML","buildSSML","hostname","search","url","res","subscribeEvent","target","name","handler","asyncDecodeAudioData","audioContext","arrayBuffer","resolve","reject","promise","playDecoded","audioBuffer","source","audioContextClosed","EventAsPromise","sourceEnded","unsubscribe","subscribeEvent","state","err","SpeechSynthesisUtterance","EventTarget","text","value","getEventAttributeValue","setEventAttributeValue","deploymentId","fetchCredentials","outputFormat","fetchSpeechData_default","SpeechSynthesisEvent","error","SpeechSynthesisUtterance_default","SpeechSynthesisVoice_default","gender","lang","voiceURI","fetchCustomVoices","customVoiceHostname","deploymentId","region","subscriptionKey","hostname","res","fetchCustomVoices_default","models","gender","lang","voiceURI","SpeechSynthesisVoice_default","x","y","fetchVoices","authorizationToken","region","speechSynthesisHostname","subscriptionKey","hostname","res","gender","lang","voiceURI","SpeechSynthesisVoice_default","x","y","DEFAULT_OUTPUT_FORMAT","EMPTY_ARRAY","createSpeechSynthesisPonyfill_default","options","audioContext","fetchCredentials","ponyfill","speechSynthesisDeploymentId","speechSynthesisOutputFormat","patchOptions","SpeechSynthesis","EventTarget","AudioContextQueue_default","getEventAttributeValue","value","setEventAttributeValue","utterance","SpeechSynthesisUtterance_default","reject","resolve","promise","pDefer","handleError","errorCode","message","error","customVoiceHostname","region","speechSynthesisHostname","subscriptionKey","onErrorResumeNext","voices","fetchCustomVoices_default","fetchVoices","SpeechSynthesisEvent","TextToSpeech_default","createSpeechSynthesisPonyfill_default","createSpeechServicesPonyfill","options","createSpeechRecognitionPonyfill","TextToSpeech_default","meta","createSpeechServicesPonyfill","createSpeechRecognitionPonyfillFromRecognizer"]}